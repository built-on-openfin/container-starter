/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../../node_modules/@openfin/cloud-interop/out/index.js":
/*!*****************************************************************!*\
  !*** ../../../node_modules/@openfin/cloud-interop/out/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cloudInteropOverride: () => (/* binding */ cloudInteropOverride)
/* harmony export */ });
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ "../../../node_modules/buffer/index.js");


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// utils is a library of generic helper functions non-specific to axios

const {toString} = Object.prototype;
const {getPrototypeOf} = Object;

const kindOf = (cache => thing => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));

const kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type
};

const typeOfTest = type => thing => typeof thing === type;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
const {isArray} = Array;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
const isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
const isArrayBuffer = kindOfTest('ArrayBuffer');


/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  let result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
const isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
const isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
const isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
const isObject = (thing) => thing !== null && typeof thing === 'object';

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
const isBoolean = thing => thing === true || thing === false;

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
const isPlainObject = (val) => {
  if (kindOf(val) !== 'object') {
    return false;
  }

  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
const isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
const isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
const isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
const isStream = (val) => isObject(val) && isFunction(val.pipe);

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
const isFormData = (thing) => {
  let kind;
  return thing && (
    (typeof FormData === 'function' && thing instanceof FormData) || (
      isFunction(thing.append) && (
        (kind = kindOf(thing)) === 'formdata' ||
        // detect form-data instance
        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')
      )
    )
  )
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
const isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
const trim = (str) => str.trim ?
  str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {any}
 */
function forEach(obj, fn, {allOwnKeys = false} = {}) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l;

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}

const _global = (() => {
  /*eslint no-undef:0*/
  if (typeof globalThis !== "undefined") return globalThis;
  return typeof self !== "undefined" ? self : (typeof window !== 'undefined' ? window : __webpack_require__.g)
})();

const isContextDefined = (context) => !isUndefined(context) && context !== _global;

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  const {caseless} = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };

  for (let i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
const extend = (a, b, thisArg, {allOwnKeys}= {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {allOwnKeys});
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
const stripBOM = (content) => {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
const inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
const toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};

  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;

  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
const endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};


/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
const toArray = (thing) => {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  let i = thing.length;
  if (!isNumber(i)) return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
const isTypedArray = (TypedArray => {
  // eslint-disable-next-line func-names
  return thing => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
const forEachEntry = (obj, fn) => {
  const generator = obj && obj[Symbol.iterator];

  const iterator = generator.call(obj);

  let result;

  while ((result = iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
const matchAll = (regExp, str) => {
  let matches;
  const arr = [];

  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }

  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
const isHTMLForm = kindOfTest('HTMLFormElement');

const toCamelCase = str => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
    function replacer(m, p1, p2) {
      return p1.toUpperCase() + p2;
    }
  );
};

/* Creating a function that will check if an object has a property. */
const hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
const isRegExp = kindOfTest('RegExp');

const reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};

  forEach(descriptors, (descriptor, name) => {
    let ret;
    if ((ret = reducer(descriptor, name, obj)) !== false) {
      reducedDescriptors[name] = ret || descriptor;
    }
  });

  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

const freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name) => {
    // skip restricted props in strict mode
    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {
      return false;
    }

    const value = obj[name];

    if (!isFunction(value)) return;

    descriptor.enumerable = false;

    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }

    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error('Can not rewrite read-only method \'' + name + '\'');
      };
    }
  });
};

const toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};

  const define = (arr) => {
    arr.forEach(value => {
      obj[value] = true;
    });
  };

  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));

  return obj;
};

const noop = () => {};

const toFiniteNumber = (value, defaultValue) => {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};

const ALPHA = 'abcdefghijklmnopqrstuvwxyz';

const DIGIT = '0123456789';

const ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};

const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = '';
  const {length} = alphabet;
  while (size--) {
    str += alphabet[Math.random() * length|0];
  }

  return str;
};

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);
}

const toJSONObject = (obj) => {
  const stack = new Array(10);

  const visit = (source, i) => {

    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }

      if(!('toJSON' in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};

        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });

        stack[i] = undefined;

        return target;
      }
    }

    return source;
  };

  return visit(obj, 0);
};

const isAsyncFn = kindOfTest('AsyncFunction');

const isThenable = (thing) =>
  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);

var utils$1 = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  ALPHABET,
  generateString,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable
};

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);

  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = (new Error()).stack;
  }

  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}

utils$1.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: utils$1.toJSONObject(this.config),
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});

const prototype$1 = AxiosError.prototype;
const descriptors = {};

[
  'ERR_BAD_OPTION_VALUE',
  'ERR_BAD_OPTION',
  'ECONNABORTED',
  'ETIMEDOUT',
  'ERR_NETWORK',
  'ERR_FR_TOO_MANY_REDIRECTS',
  'ERR_DEPRECATED',
  'ERR_BAD_RESPONSE',
  'ERR_BAD_REQUEST',
  'ERR_CANCELED',
  'ERR_NOT_SUPPORT',
  'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(code => {
  descriptors[code] = {value: code};
});

Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype$1, 'isAxiosError', {value: true});

// eslint-disable-next-line func-names
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype$1);

  utils$1.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, prop => {
    return prop !== 'isAxiosError';
  });

  AxiosError.call(axiosError, error.message, code, config, request, response);

  axiosError.cause = error;

  axiosError.name = error.name;

  customProps && Object.assign(axiosError, customProps);

  return axiosError;
};

// eslint-disable-next-line strict
var httpAdapter = null;

/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return utils$1.endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return utils$1.isArray(arr) && !arr.some(isVisitable);
}

const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!utils$1.isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (FormData)();

  // eslint-disable-next-line no-param-reassign
  options = utils$1.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !utils$1.isUndefined(source[option]);
  });

  const metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);

  if (!utils$1.isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }

  function convertValue(value) {
    if (value === null) return '';

    if (utils$1.isDate(value)) {
      return value.toISOString();
    }

    if (!useBlob && utils$1.isBlob(value)) {
      throw new AxiosError('Blob is not supported. Use a Buffer instead.');
    }

    if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value);
    }

    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    let arr = value;

    if (value && !path && typeof value === 'object') {
      if (utils$1.endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (
        (utils$1.isArray(value) && isFlatArray(value)) ||
        ((utils$1.isFileList(value) || utils$1.endsWith(key, '[]')) && (arr = utils$1.toArray(value))
        )) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);

        arr.forEach(function each(el, index) {
          !(utils$1.isUndefined(el) || el === null) && formData.append(
            // eslint-disable-next-line no-nested-ternary
            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),
            convertValue(el)
          );
        });
        return false;
      }
    }

    if (isVisitable(value)) {
      return true;
    }

    formData.append(renderKey(path, key, dots), convertValue(value));

    return false;
  }

  const stack = [];

  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });

  function build(value, path) {
    if (utils$1.isUndefined(value)) return;

    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }

    stack.push(value);

    utils$1.forEach(value, function each(el, key) {
      const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
        formData, el, utils$1.isString(key) ? key.trim() : key, path, exposedHelpers
      );

      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });

    stack.pop();
  }

  if (!utils$1.isObject(obj)) {
    throw new TypeError('data must be an object');
  }

  build(obj);

  return formData;
}

/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode$1(str) {
  const charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];

  params && toFormData(params, this, options);
}

const prototype = AxiosURLSearchParams.prototype;

prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};

prototype.toString = function toString(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode$1);
  } : encode$1;

  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};

/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  
  const _encode = options && options.encode || encode;

  const serializeFn = options && options.serialize;

  let serializedParams;

  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils$1.isURLSearchParams(params) ?
      params.toString() :
      new AxiosURLSearchParams(params, options).toString(_encode);
  }

  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");

    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
}

class InterceptorManager {
  constructor() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   *
   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
   */
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }

  /**
   * Clear all interceptors from the stack
   *
   * @returns {void}
   */
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   *
   * @returns {void}
   */
  forEach(fn) {
    utils$1.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}

var transitionalDefaults = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

var URLSearchParams$1 = typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;

var FormData$1 = typeof FormData !== 'undefined' ? FormData : null;

var Blob$1 = typeof Blob !== 'undefined' ? Blob : null;

var platform$1 = {
  isBrowser: true,
  classes: {
    URLSearchParams: URLSearchParams$1,
    FormData: FormData$1,
    Blob: Blob$1
  },
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
};

const hasBrowserEnv = typeof window !== 'undefined' && typeof document !== 'undefined';

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
const hasStandardBrowserEnv = (
  (product) => {
    return hasBrowserEnv && ['ReactNative', 'NativeScript', 'NS'].indexOf(product) < 0
  })(typeof navigator !== 'undefined' && navigator.product);

/**
 * Determine if we're running in a standard browser webWorker environment
 *
 * Although the `isStandardBrowserEnv` method indicates that
 * `allows axios to run in a web worker`, the WebWorker will still be
 * filtered out due to its judgment standard
 * `typeof window !== 'undefined' && typeof document !== 'undefined'`.
 * This leads to a problem when axios post `FormData` in webWorker
 */
const hasStandardBrowserWebWorkerEnv = (() => {
  return (
    typeof WorkerGlobalScope !== 'undefined' &&
    // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope &&
    typeof self.importScripts === 'function'
  );
})();

var utils = /*#__PURE__*/Object.freeze({
  __proto__: null,
  hasBrowserEnv: hasBrowserEnv,
  hasStandardBrowserEnv: hasStandardBrowserEnv,
  hasStandardBrowserWebWorkerEnv: hasStandardBrowserWebWorkerEnv
});

var platform = {
  ...utils,
  ...platform$1
};

function toURLEncodedForm(data, options) {
  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform.isNode && utils$1.isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }

      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map(match => {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name = path[index++];

    if (name === '__proto__') return true;

    const isNumericKey = Number.isFinite(+name);
    const isLast = index >= path.length;
    name = !name && utils$1.isArray(target) ? target.length : name;

    if (isLast) {
      if (utils$1.hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }

      return !isNumericKey;
    }

    if (!target[name] || !utils$1.isObject(target[name])) {
      target[name] = [];
    }

    const result = buildPath(path, value, target[name], index);

    if (result && utils$1.isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }

    return !isNumericKey;
  }

  if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
    const obj = {};

    utils$1.forEachEntry(formData, (name, value) => {
      buildPath(parsePropPath(name), value, obj, 0);
    });

    return obj;
  }

  return null;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (utils$1.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$1.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

const defaults = {

  transitional: transitionalDefaults,

  adapter: ['xhr', 'http'],

  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || '';
    const hasJSONContentType = contentType.indexOf('application/json') > -1;
    const isObjectPayload = utils$1.isObject(data);

    if (isObjectPayload && utils$1.isHTMLForm(data)) {
      data = new FormData(data);
    }

    const isFormData = utils$1.isFormData(data);

    if (isFormData) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
    }

    if (utils$1.isArrayBuffer(data) ||
      utils$1.isBuffer(data) ||
      utils$1.isStream(data) ||
      utils$1.isFile(data) ||
      utils$1.isBlob(data)
    ) {
      return data;
    }
    if (utils$1.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$1.isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }

    let isFileList;

    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }

      if ((isFileList = utils$1.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        const _FormData = this.env && this.env.FormData;

        return toFormData(
          isFileList ? {'files[]': data} : data,
          _FormData && new _FormData(),
          this.formSerializer
        );
      }
    }

    if (isObjectPayload || hasJSONContentType ) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }

    return data;
  }],

  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === 'json';

    if (data && utils$1.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;

      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  env: {
    FormData: platform.classes.FormData,
    Blob: platform.classes.Blob
  },

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': undefined
    }
  }
};

utils$1.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {
  defaults.headers[method] = {};
});

var defaults$1 = defaults;

// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
const ignoreDuplicateOf = utils$1.toObjectSet([
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
]);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
var parseHeaders = rawHeaders => {
  const parsed = {};
  let key;
  let val;
  let i;

  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();

    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {
      return;
    }

    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

const $internals = Symbol('internals');

function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}

function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }

  return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
}

function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;

  while ((match = tokensRE.exec(str))) {
    tokens[match[1]] = match[2];
  }

  return tokens;
}

const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
  if (utils$1.isFunction(filter)) {
    return filter.call(this, value, header);
  }

  if (isHeaderNameFilter) {
    value = header;
  }

  if (!utils$1.isString(value)) return;

  if (utils$1.isString(filter)) {
    return value.indexOf(filter) !== -1;
  }

  if (utils$1.isRegExp(filter)) {
    return filter.test(value);
  }
}

function formatHeader(header) {
  return header.trim()
    .toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
}

function buildAccessors(obj, header) {
  const accessorName = utils$1.toCamelCase(' ' + header);

  ['get', 'set', 'has'].forEach(methodName => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }

  set(header, valueOrRewrite, rewrite) {
    const self = this;

    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);

      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }

      const key = utils$1.findKey(self, lHeader);

      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {
        self[key || _header] = normalizeValue(_value);
      }
    }

    const setHeaders = (headers, _rewrite) =>
      utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));

    if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if(utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders(header), valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }

    return this;
  }

  get(header, parser) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      if (key) {
        const value = this[key];

        if (!parser) {
          return value;
        }

        if (parser === true) {
          return parseTokens(value);
        }

        if (utils$1.isFunction(parser)) {
          return parser.call(this, value, key);
        }

        if (utils$1.isRegExp(parser)) {
          return parser.exec(value);
        }

        throw new TypeError('parser must be boolean|regexp|function');
      }
    }
  }

  has(header, matcher) {
    header = normalizeHeader(header);

    if (header) {
      const key = utils$1.findKey(this, header);

      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }

    return false;
  }

  delete(header, matcher) {
    const self = this;
    let deleted = false;

    function deleteHeader(_header) {
      _header = normalizeHeader(_header);

      if (_header) {
        const key = utils$1.findKey(self, _header);

        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];

          deleted = true;
        }
      }
    }

    if (utils$1.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }

    return deleted;
  }

  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;

    while (i--) {
      const key = keys[i];
      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }

    return deleted;
  }

  normalize(format) {
    const self = this;
    const headers = {};

    utils$1.forEach(this, (value, header) => {
      const key = utils$1.findKey(headers, header);

      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }

      const normalized = format ? formatHeader(header) : String(header).trim();

      if (normalized !== header) {
        delete self[header];
      }

      self[normalized] = normalizeValue(value);

      headers[normalized] = true;
    });

    return this;
  }

  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }

  toJSON(asStrings) {
    const obj = Object.create(null);

    utils$1.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(', ') : value);
    });

    return obj;
  }

  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }

  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\n');
  }

  get [Symbol.toStringTag]() {
    return 'AxiosHeaders';
  }

  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }

  static concat(first, ...targets) {
    const computed = new this(first);

    targets.forEach((target) => computed.set(target));

    return computed;
  }

  static accessor(header) {
    const internals = this[$internals] = (this[$internals] = {
      accessors: {}
    });

    const accessors = internals.accessors;
    const prototype = this.prototype;

    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);

      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }

    utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);

    return this;
  }
}

AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);

// reserved names hotfix
utils$1.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  }
});

utils$1.freezeMethods(AxiosHeaders);

var AxiosHeaders$1 = AxiosHeaders;

/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  const config = this || defaults$1;
  const context = response || config;
  const headers = AxiosHeaders$1.from(context.headers);
  let data = context.data;

  utils$1.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });

  headers.normalize();

  return data;
}

function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}

utils$1.inherits(CanceledError, AxiosError, {
  __CANCEL__: true
});

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  const validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError(
      'Request failed with status code ' + response.status,
      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
      response.config,
      response.request,
      response
    ));
  }
}

var cookies = platform.hasStandardBrowserEnv ?

  // Standard browser envs support document.cookie
  {
    write(name, value, expires, path, domain, secure) {
      const cookie = [name + '=' + encodeURIComponent(value)];

      utils$1.isNumber(expires) && cookie.push('expires=' + new Date(expires).toGMTString());

      utils$1.isString(path) && cookie.push('path=' + path);

      utils$1.isString(domain) && cookie.push('domain=' + domain);

      secure === true && cookie.push('secure');

      document.cookie = cookie.join('; ');
    },

    read(name) {
      const match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return (match ? decodeURIComponent(match[3]) : null);
    },

    remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  }

  :

  // Non-standard browser env (web workers, react-native) lack needed support.
  {
    write() {},
    read() {
      return null;
    },
    remove() {}
  };

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/?\/$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
}

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

var isURLSameOrigin = platform.hasStandardBrowserEnv ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    const msie = /(msie|trident)/i.test(navigator.userAgent);
    const urlParsingNode = document.createElement('a');
    let originURL;

    /**
    * Parse a URL to discover its components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      let href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
          urlParsingNode.pathname :
          '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      const parsed = (utils$1.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
          parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })();

function parseProtocol(url) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;

  min = min !== undefined ? min : 1000;

  return function push(chunkLength) {
    const now = Date.now();

    const startedAt = timestamps[tail];

    if (!firstSampleTS) {
      firstSampleTS = now;
    }

    bytes[head] = chunkLength;
    timestamps[head] = now;

    let i = tail;
    let bytesCount = 0;

    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }

    head = (head + 1) % samplesCount;

    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }

    if (now - firstSampleTS < min) {
      return;
    }

    const passed = startedAt && now - startedAt;

    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}

function progressEventReducer(listener, isDownloadStream) {
  let bytesNotified = 0;
  const _speedometer = speedometer(50, 250);

  return e => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;

    bytesNotified = loaded;

    const data = {
      loaded,
      total,
      progress: total ? (loaded / total) : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e
    };

    data[isDownloadStream ? 'download' : 'upload'] = true;

    listener(data);
  };
}

const isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';

var xhrAdapter = isXHRAdapterSupported && function (config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    let requestData = config.data;
    const requestHeaders = AxiosHeaders$1.from(config.headers).normalize();
    let {responseType, withXSRFToken} = config;
    let onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    let contentType;

    if (utils$1.isFormData(requestData)) {
      if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
        requestHeaders.setContentType(false); // Let the browser set it
      } else if ((contentType = requestHeaders.getContentType()) !== false) {
        // fix semicolon duplication issue for ReactNative FormData implementation
        const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];
        requestHeaders.setContentType([type || 'multipart/form-data', ...tokens].join('; '));
      }
    }

    let request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      const username = config.auth.username || '';
      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }

    const fullPath = buildFullPath(config.baseURL, config.url);

    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      const responseHeaders = AxiosHeaders$1.from(
        'getAllResponseHeaders' in request && request.getAllResponseHeaders()
      );
      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?
        request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      const transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new AxiosError(
        timeoutErrorMessage,
        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
        config,
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if(platform.hasStandardBrowserEnv) {
      withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(config));

      if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(fullPath))) {
        // Add xsrf header
        const xsrfValue = config.xsrfHeaderName && config.xsrfCookieName && cookies.read(config.xsrfCookieName);

        if (xsrfValue) {
          requestHeaders.set(config.xsrfHeaderName, xsrfValue);
        }
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!utils$1.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = cancel => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    const protocol = parseProtocol(fullPath);

    if (protocol && platform.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));
      return;
    }


    // Send the request
    request.send(requestData || null);
  });
};

const knownAdapters = {
  http: httpAdapter,
  xhr: xhrAdapter
};

utils$1.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, 'name', {value});
    } catch (e) {
      // eslint-disable-next-line no-empty
    }
    Object.defineProperty(fn, 'adapterName', {value});
  }
});

const renderReason = (reason) => `- ${reason}`;

const isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;

var adapters = {
  getAdapter: (adapters) => {
    adapters = utils$1.isArray(adapters) ? adapters : [adapters];

    const {length} = adapters;
    let nameOrAdapter;
    let adapter;

    const rejectedReasons = {};

    for (let i = 0; i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;

      adapter = nameOrAdapter;

      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];

        if (adapter === undefined) {
          throw new AxiosError(`Unknown adapter '${id}'`);
        }
      }

      if (adapter) {
        break;
      }

      rejectedReasons[id || '#' + i] = adapter;
    }

    if (!adapter) {

      const reasons = Object.entries(rejectedReasons)
        .map(([id, state]) => `adapter ${id} ` +
          (state === false ? 'is not supported by the environment' : 'is not available in the build')
        );

      let s = length ?
        (reasons.length > 1 ? 'since :\n' + reasons.map(renderReason).join('\n') : ' ' + renderReason(reasons[0])) :
        'as no adapter specified';

      throw new AxiosError(
        `There is no suitable adapter to dispatch the request ` + s,
        'ERR_NOT_SUPPORT'
      );
    }

    return adapter;
  },
  adapters: knownAdapters
};

/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new CanceledError(null, config);
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  config.headers = AxiosHeaders$1.from(config.headers);

  // Transform request data
  config.data = transformData.call(
    config,
    config.transformRequest
  );

  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {
    config.headers.setContentType('application/x-www-form-urlencoded', false);
  }

  const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      config.transformResponse,
      response
    );

    response.headers = AxiosHeaders$1.from(response.headers);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          config.transformResponse,
          reason.response
        );
        reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
      }
    }

    return Promise.reject(reason);
  });
}

const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  const config = {};

  function getMergedValue(target, source, caseless) {
    if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
      return utils$1.merge.call({caseless}, target, source);
    } else if (utils$1.isPlainObject(source)) {
      return utils$1.merge({}, source);
    } else if (utils$1.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(a, b, caseless) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(a, b, caseless);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a, caseless);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(a, b) {
    if (!utils$1.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils$1.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }

  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
  };

  utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge(config1[prop], config2[prop], prop);
    (utils$1.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
}

const VERSION = "1.6.8";

const validators$1 = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {
  validators$1[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

const deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators$1.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return (value, opt, opts) => {
    if (validator === false) {
      throw new AxiosError(
        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
        AxiosError.ERR_DEPRECATED
      );
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator = schema[opt];
    if (validator) {
      const value = options[opt];
      const result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);
    }
  }
}

var validator = {
  assertOptions,
  validators: validators$1
};

const validators = validator.validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy;

        Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : (dummy = new Error());

        // slice off the Error: ... line
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, '') : '';

        if (!err.stack) {
          err.stack = stack;
          // match without the 2 top stack lines
        } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ''))) {
          err.stack += '\n' + stack;
        }
      }

      throw err;
    }
  }

  _request(configOrUrl, config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof configOrUrl === 'string') {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }

    config = mergeConfig(this.defaults, config);

    const {transitional, paramsSerializer, headers} = config;

    if (transitional !== undefined) {
      validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean),
        forcedJSONParsing: validators.transitional(validators.boolean),
        clarifyTimeoutError: validators.transitional(validators.boolean)
      }, false);
    }

    if (paramsSerializer != null) {
      if (utils$1.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator.assertOptions(paramsSerializer, {
          encode: validators.function,
          serialize: validators.function
        }, true);
      }
    }

    // Set config.method
    config.method = (config.method || this.defaults.method || 'get').toLowerCase();

    // Flatten headers
    let contextHeaders = headers && utils$1.merge(
      headers.common,
      headers[config.method]
    );

    headers && utils$1.forEach(
      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
      (method) => {
        delete headers[method];
      }
    );

    config.headers = AxiosHeaders$1.concat(contextHeaders, headers);

    // filter out skipped interceptors
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    let promise;
    let i = 0;
    let len;

    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;

      promise = Promise.resolve(config);

      while (i < len) {
        promise = promise.then(chain[i++], chain[i++]);
      }

      return promise;
    }

    len = requestInterceptorChain.length;

    let newConfig = config;

    i = 0;

    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }

    try {
      promise = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    i = 0;
    len = responseInterceptorChain.length;

    while (i < len) {
      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }

    return promise;
  }

  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}

// Provide aliases for supported request methods
utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});

utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url,
        data
      }));
    };
  }

  Axios.prototype[method] = generateHTTPMethod();

  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});

var Axios$1 = Axios;

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
class CancelToken {
  constructor(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    let resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    const token = this;

    // eslint-disable-next-line func-names
    this.promise.then(cancel => {
      if (!token._listeners) return;

      let i = token._listeners.length;

      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = onfulfilled => {
      let _resolve;
      // eslint-disable-next-line func-names
      const promise = new Promise(resolve => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new CanceledError(message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }

  /**
   * Subscribe to the cancel signal
   */

  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }

  /**
   * Unsubscribe from the cancel signal
   */

  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}

var CancelToken$1 = CancelToken;

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return utils$1.isObject(payload) && (payload.isAxiosError === true);
}

const HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511,
};

Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});

var HttpStatusCode$1 = HttpStatusCode;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  const context = new Axios$1(defaultConfig);
  const instance = bind(Axios$1.prototype.request, context);

  // Copy axios.prototype to instance
  utils$1.extend(instance, Axios$1.prototype, context, {allOwnKeys: true});

  // Copy context to instance
  utils$1.extend(instance, context, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
const axios = createInstance(defaults$1);

// Expose Axios class to allow class inheritance
axios.Axios = Axios$1;

// Expose Cancel & CancelToken
axios.CanceledError = CanceledError;
axios.CancelToken = CancelToken$1;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData;

// Expose AxiosError class
axios.AxiosError = AxiosError;

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};

axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

// Expose mergeConfig
axios.mergeConfig = mergeConfig;

axios.AxiosHeaders = AxiosHeaders$1;

axios.formToJSON = thing => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);

axios.getAdapter = adapters.getAdapter;

axios.HttpStatusCode = HttpStatusCode$1;

axios.default = axios;

var ds=Object.defineProperty;var zg=Object.getOwnPropertyDescriptor;var Kg=Object.getOwnPropertyNames;var Gg=Object.prototype.hasOwnProperty;var we=(t,e)=>()=>(t&&(e=t(t=0)),e);var M=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Qt=(t,e)=>{for(var r in e)ds(t,r,{get:e[r],enumerable:!0});},Qg=(t,e,r,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of Kg(e))!Gg.call(t,n)&&n!==r&&ds(t,n,{get:()=>e[n],enumerable:!(i=zg(e,n))||i.enumerable});return t};var X=t=>Qg(ds({},"__esModule",{value:!0}),t);var B,_=we(()=>{B={deviceMemory:8,hardwareConcurrency:8,language:"en-US"};});var P={};Qt(P,{_debugEnd:()=>yu,_debugProcess:()=>gu,_events:()=>ku,_eventsCount:()=>xu,_exiting:()=>Yl,_fatalExceptions:()=>cu,_getActiveHandles:()=>eu,_getActiveRequests:()=>Zl,_kill:()=>ru,_linkedBinding:()=>Gl,_maxListeners:()=>Ou,_preload_modules:()=>Cu,_rawDebug:()=>zl,_startProfilerIdleNotifier:()=>bu,_stopProfilerIdleNotifier:()=>wu,_tickCallback:()=>pu,abort:()=>Eu,addListener:()=>Mu,allowedNodeEnvironmentFlags:()=>lu,arch:()=>xl,argv:()=>Ul,argv0:()=>Ru,assert:()=>uu,binding:()=>Fl,chdir:()=>Hl,config:()=>Jl,cpuUsage:()=>Fi,cwd:()=>$l,debugPort:()=>Tu,default:()=>$u,dlopen:()=>Xl,domain:()=>Ql,emit:()=>Du,emitWarning:()=>jl,env:()=>Ll,execArgv:()=>Nl,execPath:()=>Iu,exit:()=>ou,features:()=>fu,hasUncaughtExceptionCaptureCallback:()=>du,hrtime:()=>ji,kill:()=>su,listeners:()=>Wu,memoryUsage:()=>nu,moduleLoadList:()=>Kl,nextTick:()=>Pl,off:()=>Uu,on:()=>bt,once:()=>Lu,openStdin:()=>au,pid:()=>Su,platform:()=>Ml,ppid:()=>Au,prependListener:()=>ju,prependOnceListener:()=>Fu,reallyExit:()=>tu,release:()=>Vl,removeAllListeners:()=>qu,removeListener:()=>Nu,resourceUsage:()=>iu,setSourceMapsEnabled:()=>Bu,setUncaughtExceptionCaptureCallback:()=>hu,stderr:()=>mu,stdin:()=>vu,stdout:()=>_u,title:()=>kl,umask:()=>Wl,uptime:()=>Pu,version:()=>ql,versions:()=>Dl});function ys(t){throw new Error("Node.js process "+t+" is not supported by JSPM core outside of Node.js")}function Yg(){!xr||!Yt||(xr=!1,Yt.length?yt=Yt.concat(yt):Di=-1,yt.length&&Bl());}function Bl(){if(!xr){var t=setTimeout(Yg,0);xr=!0;for(var e=yt.length;e;){for(Yt=yt,yt=[];++Di<e;)Yt&&Yt[Di].run();Di=-1,e=yt.length;}Yt=null,xr=!1,clearTimeout(t);}}function Pl(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];yt.push(new Ol(t,e)),yt.length===1&&!xr&&setTimeout(Bl,0);}function Ol(t,e){this.fun=t,this.array=e;}function ve(){}function Gl(t){ys("_linkedBinding");}function Xl(t){ys("dlopen");}function Zl(){return []}function eu(){return []}function uu(t,e){if(!t)throw new Error(e||"assertion error")}function du(){return !1}function Pu(){return Mt.now()/1e3}function ji(t){var e=Math.floor((Date.now()-Mt.now())*.001),r=Mt.now()*.001,i=Math.floor(r)+e,n=Math.floor(r%1*1e9);return t&&(i=i-t[0],n=n-t[1],n<0&&(i--,n+=gs)),[i,n]}function bt(){return $u}function Wu(t){return []}var yt,xr,Yt,Di,kl,xl,Ml,Ll,Ul,Nl,ql,Dl,jl,Fl,Wl,$l,Hl,Vl,zl,Kl,Ql,Yl,Jl,tu,ru,Fi,iu,nu,su,ou,au,lu,fu,cu,hu,pu,gu,yu,bu,wu,_u,mu,vu,Eu,Su,Au,Iu,Tu,Ru,Cu,Bu,Mt,ps,gs,Ou,ku,xu,Mu,Lu,Uu,Nu,qu,Du,ju,Fu,$u,Hu=we(()=>{v();m();_();yt=[],xr=!1,Di=-1;Ol.prototype.run=function(){this.fun.apply(null,this.array);};kl="browser",xl="x64",Ml="browser",Ll={PATH:"/usr/bin",LANG:B.language+".UTF-8",PWD:"/",HOME:"/home",TMP:"/tmp"},Ul=["/usr/bin/node"],Nl=[],ql="v16.8.0",Dl={},jl=function(t,e){console.warn((e?e+": ":"")+t);},Fl=function(t){ys("binding");},Wl=function(t){return 0},$l=function(){return "/"},Hl=function(t){},Vl={name:"node",sourceUrl:"",headersUrl:"",libUrl:""};zl=ve,Kl=[];Ql={},Yl=!1,Jl={};tu=ve,ru=ve,Fi=function(){return {}},iu=Fi,nu=Fi,su=ve,ou=ve,au=ve,lu={};fu={inspector:!1,debug:!1,uv:!1,ipv6:!1,tls_alpn:!1,tls_sni:!1,tls_ocsp:!1,tls:!1,cached_builtins:!0},cu=ve,hu=ve;pu=ve,gu=ve,yu=ve,bu=ve,wu=ve,_u=void 0,mu=void 0,vu=void 0,Eu=ve,Su=2,Au=1,Iu="/bin/usr/node",Tu=9229,Ru="node",Cu=[],Bu=ve,Mt={now:typeof performance<"u"?performance.now.bind(performance):void 0,timing:typeof performance<"u"?performance.timing:void 0};Mt.now===void 0&&(ps=Date.now(),Mt.timing&&Mt.timing.navigationStart&&(ps=Mt.timing.navigationStart),Mt.now=()=>Date.now()-ps);gs=1e9;ji.bigint=function(t){var e=ji(t);return typeof BigInt>"u"?e[0]*gs+e[1]:BigInt(e[0]*gs)+BigInt(e[1])};Ou=10,ku={},xu=0;Mu=bt,Lu=bt,Uu=bt,Nu=bt,qu=bt,Du=ve,ju=bt,Fu=bt;$u={version:ql,versions:Dl,arch:xl,platform:Ml,release:Vl,_rawDebug:zl,moduleLoadList:Kl,binding:Fl,_linkedBinding:Gl,_events:ku,_eventsCount:xu,_maxListeners:Ou,on:bt,addListener:Mu,once:Lu,off:Uu,removeListener:Nu,removeAllListeners:qu,emit:Du,prependListener:ju,prependOnceListener:Fu,listeners:Wu,domain:Ql,_exiting:Yl,config:Jl,dlopen:Xl,uptime:Pu,_getActiveRequests:Zl,_getActiveHandles:eu,reallyExit:tu,_kill:ru,cpuUsage:Fi,resourceUsage:iu,memoryUsage:nu,kill:su,exit:ou,openStdin:au,allowedNodeEnvironmentFlags:lu,assert:uu,features:fu,_fatalExceptions:cu,setUncaughtExceptionCaptureCallback:hu,hasUncaughtExceptionCaptureCallback:du,emitWarning:jl,nextTick:Pl,_tickCallback:pu,_debugProcess:gu,_debugEnd:yu,_startProfilerIdleNotifier:bu,_stopProfilerIdleNotifier:wu,stdout:_u,stdin:vu,stderr:mu,abort:Eu,umask:Wl,chdir:Hl,cwd:$l,env:Ll,title:kl,argv:Ul,execArgv:Nl,pid:Su,ppid:Au,execPath:Iu,debugPort:Tu,hrtime:ji,argv0:Ru,_preload_modules:Cu,setSourceMapsEnabled:Bu};});var m=we(()=>{Hu();});var _e={};Qt(_e,{Buffer:()=>x,INSPECT_MAX_BYTES:()=>ey,default:()=>Lt,kMaxLength:()=>ty});function Jg(){if(Vu)return ui;Vu=!0,ui.byteLength=a,ui.toByteArray=c,ui.fromByteArray=g;for(var t=[],e=[],r=typeof Uint8Array<"u"?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=0,o=i.length;n<o;++n)t[n]=i[n],e[i.charCodeAt(n)]=n;e["-".charCodeAt(0)]=62,e["_".charCodeAt(0)]=63;function s(y){var w=y.length;if(w%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var E=y.indexOf("=");E===-1&&(E=w);var S=E===w?0:4-E%4;return [E,S]}function a(y){var w=s(y),E=w[0],S=w[1];return (E+S)*3/4-S}function u(y,w,E){return (w+E)*3/4-E}function c(y){var w,E=s(y),S=E[0],I=E[1],C=new r(u(y,S,I)),R=0,U=I>0?S-4:S,N;for(N=0;N<U;N+=4)w=e[y.charCodeAt(N)]<<18|e[y.charCodeAt(N+1)]<<12|e[y.charCodeAt(N+2)]<<6|e[y.charCodeAt(N+3)],C[R++]=w>>16&255,C[R++]=w>>8&255,C[R++]=w&255;return I===2&&(w=e[y.charCodeAt(N)]<<2|e[y.charCodeAt(N+1)]>>4,C[R++]=w&255),I===1&&(w=e[y.charCodeAt(N)]<<10|e[y.charCodeAt(N+1)]<<4|e[y.charCodeAt(N+2)]>>2,C[R++]=w>>8&255,C[R++]=w&255),C}function h(y){return t[y>>18&63]+t[y>>12&63]+t[y>>6&63]+t[y&63]}function d(y,w,E){for(var S,I=[],C=w;C<E;C+=3)S=(y[C]<<16&16711680)+(y[C+1]<<8&65280)+(y[C+2]&255),I.push(h(S));return I.join("")}function g(y){for(var w,E=y.length,S=E%3,I=[],C=16383,R=0,U=E-S;R<U;R+=C)I.push(d(y,R,R+C>U?U:R+C));return S===1?(w=y[E-1],I.push(t[w>>2]+t[w<<4&63]+"==")):S===2&&(w=(y[E-2]<<8)+y[E-1],I.push(t[w>>10]+t[w>>4&63]+t[w<<2&63]+"=")),I.join("")}return ui}function Xg(){if(zu)return Wi;zu=!0;return Wi.read=function(t,e,r,i,n){var o,s,a=n*8-i-1,u=(1<<a)-1,c=u>>1,h=-7,d=r?n-1:0,g=r?-1:1,y=t[e+d];for(d+=g,o=y&(1<<-h)-1,y>>=-h,h+=a;h>0;o=o*256+t[e+d],d+=g,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=i;h>0;s=s*256+t[e+d],d+=g,h-=8);if(o===0)o=1-c;else {if(o===u)return s?NaN:(y?-1:1)*(1/0);s=s+Math.pow(2,i),o=o-c;}return (y?-1:1)*s*Math.pow(2,o-i)},Wi.write=function(t,e,r,i,n,o){var s,a,u,c=o*8-n-1,h=(1<<c)-1,d=h>>1,g=n===23?Math.pow(2,-24)-Math.pow(2,-77):0,y=i?0:o-1,w=i?1:-1,E=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),s+d>=1?e+=g/u:e+=g*Math.pow(2,1-d),e*u>=2&&(s++,u/=2),s+d>=h?(a=0,s=h):s+d>=1?(a=(e*u-1)*Math.pow(2,n),s=s+d):(a=e*Math.pow(2,d-1)*Math.pow(2,n),s=0));n>=8;t[r+y]=a&255,y+=w,a/=256,n-=8);for(s=s<<n|a,c+=n;c>0;t[r+y]=s&255,y+=w,s/=256,c-=8);t[r+y-w]|=E*128;},Wi}function Zg(){if(Ku)return Jt;Ku=!0;let t=Jg(),e=Xg(),r=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;Jt.Buffer=s,Jt.SlowBuffer=I,Jt.INSPECT_MAX_BYTES=50;let i=2147483647;Jt.kMaxLength=i,s.TYPED_ARRAY_SUPPORT=n(),!s.TYPED_ARRAY_SUPPORT&&typeof console<"u"&&typeof console.error=="function"&&console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");function n(){try{let p=new Uint8Array(1),l={foo:function(){return 42}};return Object.setPrototypeOf(l,Uint8Array.prototype),Object.setPrototypeOf(p,l),p.foo()===42}catch{return !1}}Object.defineProperty(s.prototype,"parent",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.buffer}}),Object.defineProperty(s.prototype,"offset",{enumerable:!0,get:function(){if(s.isBuffer(this))return this.byteOffset}});function o(p){if(p>i)throw new RangeError('The value "'+p+'" is invalid for option "size"');let l=new Uint8Array(p);return Object.setPrototypeOf(l,s.prototype),l}function s(p,l,f){if(typeof p=="number"){if(typeof l=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return h(p)}return a(p,l,f)}s.poolSize=8192;function a(p,l,f){if(typeof p=="string")return d(p,l);if(ArrayBuffer.isView(p))return y(p);if(p==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof p);if(Ye(p,ArrayBuffer)||p&&Ye(p.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(Ye(p,SharedArrayBuffer)||p&&Ye(p.buffer,SharedArrayBuffer)))return w(p,l,f);if(typeof p=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');let b=p.valueOf&&p.valueOf();if(b!=null&&b!==p)return s.from(b,l,f);let A=E(p);if(A)return A;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof p[Symbol.toPrimitive]=="function")return s.from(p[Symbol.toPrimitive]("string"),l,f);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof p)}s.from=function(p,l,f){return a(p,l,f)},Object.setPrototypeOf(s.prototype,Uint8Array.prototype),Object.setPrototypeOf(s,Uint8Array);function u(p){if(typeof p!="number")throw new TypeError('"size" argument must be of type number');if(p<0)throw new RangeError('The value "'+p+'" is invalid for option "size"')}function c(p,l,f){return u(p),p<=0?o(p):l!==void 0?typeof f=="string"?o(p).fill(l,f):o(p).fill(l):o(p)}s.alloc=function(p,l,f){return c(p,l,f)};function h(p){return u(p),o(p<0?0:S(p)|0)}s.allocUnsafe=function(p){return h(p)},s.allocUnsafeSlow=function(p){return h(p)};function d(p,l){if((typeof l!="string"||l==="")&&(l="utf8"),!s.isEncoding(l))throw new TypeError("Unknown encoding: "+l);let f=C(p,l)|0,b=o(f),A=b.write(p,l);return A!==f&&(b=b.slice(0,A)),b}function g(p){let l=p.length<0?0:S(p.length)|0,f=o(l);for(let b=0;b<l;b+=1)f[b]=p[b]&255;return f}function y(p){if(Ye(p,Uint8Array)){let l=new Uint8Array(p);return w(l.buffer,l.byteOffset,l.byteLength)}return g(p)}function w(p,l,f){if(l<0||p.byteLength<l)throw new RangeError('"offset" is outside of buffer bounds');if(p.byteLength<l+(f||0))throw new RangeError('"length" is outside of buffer bounds');let b;return l===void 0&&f===void 0?b=new Uint8Array(p):f===void 0?b=new Uint8Array(p,l):b=new Uint8Array(p,l,f),Object.setPrototypeOf(b,s.prototype),b}function E(p){if(s.isBuffer(p)){let l=S(p.length)|0,f=o(l);return f.length===0||p.copy(f,0,0,l),f}if(p.length!==void 0)return typeof p.length!="number"||hs(p.length)?o(0):g(p);if(p.type==="Buffer"&&Array.isArray(p.data))return g(p.data)}function S(p){if(p>=i)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i.toString(16)+" bytes");return p|0}function I(p){return +p!=p&&(p=0),s.alloc(+p)}s.isBuffer=function(l){return l!=null&&l._isBuffer===!0&&l!==s.prototype},s.compare=function(l,f){if(Ye(l,Uint8Array)&&(l=s.from(l,l.offset,l.byteLength)),Ye(f,Uint8Array)&&(f=s.from(f,f.offset,f.byteLength)),!s.isBuffer(l)||!s.isBuffer(f))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(l===f)return 0;let b=l.length,A=f.length;for(let T=0,O=Math.min(b,A);T<O;++T)if(l[T]!==f[T]){b=l[T],A=f[T];break}return b<A?-1:A<b?1:0},s.isEncoding=function(l){switch(String(l).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},s.concat=function(l,f){if(!Array.isArray(l))throw new TypeError('"list" argument must be an Array of Buffers');if(l.length===0)return s.alloc(0);let b;if(f===void 0)for(f=0,b=0;b<l.length;++b)f+=l[b].length;let A=s.allocUnsafe(f),T=0;for(b=0;b<l.length;++b){let O=l[b];if(Ye(O,Uint8Array))T+O.length>A.length?(s.isBuffer(O)||(O=s.from(O)),O.copy(A,T)):Uint8Array.prototype.set.call(A,O,T);else if(s.isBuffer(O))O.copy(A,T);else throw new TypeError('"list" argument must be an Array of Buffers');T+=O.length;}return A};function C(p,l){if(s.isBuffer(p))return p.length;if(ArrayBuffer.isView(p)||Ye(p,ArrayBuffer))return p.byteLength;if(typeof p!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof p);let f=p.length,b=arguments.length>2&&arguments[2]===!0;if(!b&&f===0)return 0;let A=!1;for(;;)switch(l){case"ascii":case"latin1":case"binary":return f;case"utf8":case"utf-8":return cs(p).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return f*2;case"hex":return f>>>1;case"base64":return Cl(p).length;default:if(A)return b?-1:cs(p).length;l=(""+l).toLowerCase(),A=!0;}}s.byteLength=C;function R(p,l,f){let b=!1;if((l===void 0||l<0)&&(l=0),l>this.length||((f===void 0||f>this.length)&&(f=this.length),f<=0)||(f>>>=0,l>>>=0,f<=l))return "";for(p||(p="utf8");;)switch(p){case"hex":return Ng(this,l,f);case"utf8":case"utf-8":return Cr(this,l,f);case"ascii":return us(this,l,f);case"latin1":case"binary":return Ug(this,l,f);case"base64":return pe(this,l,f);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return qg(this,l,f);default:if(b)throw new TypeError("Unknown encoding: "+p);p=(p+"").toLowerCase(),b=!0;}}s.prototype._isBuffer=!0;function U(p,l,f){let b=p[l];p[l]=p[f],p[f]=b;}s.prototype.swap16=function(){let l=this.length;if(l%2!==0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let f=0;f<l;f+=2)U(this,f,f+1);return this},s.prototype.swap32=function(){let l=this.length;if(l%4!==0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let f=0;f<l;f+=4)U(this,f,f+3),U(this,f+1,f+2);return this},s.prototype.swap64=function(){let l=this.length;if(l%8!==0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let f=0;f<l;f+=8)U(this,f,f+7),U(this,f+1,f+6),U(this,f+2,f+5),U(this,f+3,f+4);return this},s.prototype.toString=function(){let l=this.length;return l===0?"":arguments.length===0?Cr(this,0,l):R.apply(this,arguments)},s.prototype.toLocaleString=s.prototype.toString,s.prototype.equals=function(l){if(!s.isBuffer(l))throw new TypeError("Argument must be a Buffer");return this===l?!0:s.compare(this,l)===0},s.prototype.inspect=function(){let l="",f=Jt.INSPECT_MAX_BYTES;return l=this.toString("hex",0,f).replace(/(.{2})/g,"$1 ").trim(),this.length>f&&(l+=" ... "),"<Buffer "+l+">"},r&&(s.prototype[r]=s.prototype.inspect),s.prototype.compare=function(l,f,b,A,T){if(Ye(l,Uint8Array)&&(l=s.from(l,l.offset,l.byteLength)),!s.isBuffer(l))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof l);if(f===void 0&&(f=0),b===void 0&&(b=l?l.length:0),A===void 0&&(A=0),T===void 0&&(T=this.length),f<0||b>l.length||A<0||T>this.length)throw new RangeError("out of range index");if(A>=T&&f>=b)return 0;if(A>=T)return -1;if(f>=b)return 1;if(f>>>=0,b>>>=0,A>>>=0,T>>>=0,this===l)return 0;let O=T-A,$=b-f,se=Math.min(O,$),te=this.slice(A,T),oe=l.slice(f,b);for(let J=0;J<se;++J)if(te[J]!==oe[J]){O=te[J],$=oe[J];break}return O<$?-1:$<O?1:0};function N(p,l,f,b,A){if(p.length===0)return -1;if(typeof f=="string"?(b=f,f=0):f>2147483647?f=2147483647:f<-2147483648&&(f=-2147483648),f=+f,hs(f)&&(f=A?0:p.length-1),f<0&&(f=p.length+f),f>=p.length){if(A)return -1;f=p.length-1;}else if(f<0)if(A)f=0;else return -1;if(typeof l=="string"&&(l=s.from(l,b)),s.isBuffer(l))return l.length===0?-1:W(p,l,f,b,A);if(typeof l=="number")return l=l&255,typeof Uint8Array.prototype.indexOf=="function"?A?Uint8Array.prototype.indexOf.call(p,l,f):Uint8Array.prototype.lastIndexOf.call(p,l,f):W(p,[l],f,b,A);throw new TypeError("val must be string, number or Buffer")}function W(p,l,f,b,A){let T=1,O=p.length,$=l.length;if(b!==void 0&&(b=String(b).toLowerCase(),b==="ucs2"||b==="ucs-2"||b==="utf16le"||b==="utf-16le")){if(p.length<2||l.length<2)return -1;T=2,O/=2,$/=2,f/=2;}function se(oe,J){return T===1?oe[J]:oe.readUInt16BE(J*T)}let te;if(A){let oe=-1;for(te=f;te<O;te++)if(se(p,te)===se(l,oe===-1?0:te-oe)){if(oe===-1&&(oe=te),te-oe+1===$)return oe*T}else oe!==-1&&(te-=te-oe),oe=-1;}else for(f+$>O&&(f=O-$),te=f;te>=0;te--){let oe=!0;for(let J=0;J<$;J++)if(se(p,te+J)!==se(l,J)){oe=!1;break}if(oe)return te}return -1}s.prototype.includes=function(l,f,b){return this.indexOf(l,f,b)!==-1},s.prototype.indexOf=function(l,f,b){return N(this,l,f,b,!0)},s.prototype.lastIndexOf=function(l,f,b){return N(this,l,f,b,!1)};function K(p,l,f,b){f=Number(f)||0;let A=p.length-f;b?(b=Number(b),b>A&&(b=A)):b=A;let T=l.length;b>T/2&&(b=T/2);let O;for(O=0;O<b;++O){let $=parseInt(l.substr(O*2,2),16);if(hs($))return O;p[f+O]=$;}return O}function z(p,l,f,b){return qi(cs(l,p.length-f),p,f,b)}function Q(p,l,f,b){return qi(Wg(l),p,f,b)}function de(p,l,f,b){return qi(Cl(l),p,f,b)}function Gt(p,l,f,b){return qi($g(l,p.length-f),p,f,b)}s.prototype.write=function(l,f,b,A){if(f===void 0)A="utf8",b=this.length,f=0;else if(b===void 0&&typeof f=="string")A=f,b=this.length,f=0;else if(isFinite(f))f=f>>>0,isFinite(b)?(b=b>>>0,A===void 0&&(A="utf8")):(A=b,b=void 0);else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let T=this.length-f;if((b===void 0||b>T)&&(b=T),l.length>0&&(b<0||f<0)||f>this.length)throw new RangeError("Attempt to write outside buffer bounds");A||(A="utf8");let O=!1;for(;;)switch(A){case"hex":return K(this,l,f,b);case"utf8":case"utf-8":return z(this,l,f,b);case"ascii":case"latin1":case"binary":return Q(this,l,f,b);case"base64":return de(this,l,f,b);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Gt(this,l,f,b);default:if(O)throw new TypeError("Unknown encoding: "+A);A=(""+A).toLowerCase(),O=!0;}},s.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function pe(p,l,f){return l===0&&f===p.length?t.fromByteArray(p):t.fromByteArray(p.slice(l,f))}function Cr(p,l,f){f=Math.min(p.length,f);let b=[],A=l;for(;A<f;){let T=p[A],O=null,$=T>239?4:T>223?3:T>191?2:1;if(A+$<=f){let se,te,oe,J;switch($){case 1:T<128&&(O=T);break;case 2:se=p[A+1],(se&192)===128&&(J=(T&31)<<6|se&63,J>127&&(O=J));break;case 3:se=p[A+1],te=p[A+2],(se&192)===128&&(te&192)===128&&(J=(T&15)<<12|(se&63)<<6|te&63,J>2047&&(J<55296||J>57343)&&(O=J));break;case 4:se=p[A+1],te=p[A+2],oe=p[A+3],(se&192)===128&&(te&192)===128&&(oe&192)===128&&(J=(T&15)<<18|(se&63)<<12|(te&63)<<6|oe&63,J>65535&&J<1114112&&(O=J));}}O===null?(O=65533,$=1):O>65535&&(O-=65536,b.push(O>>>10&1023|55296),O=56320|O&1023),b.push(O),A+=$;}return Pr(b)}let Br=4096;function Pr(p){let l=p.length;if(l<=Br)return String.fromCharCode.apply(String,p);let f="",b=0;for(;b<l;)f+=String.fromCharCode.apply(String,p.slice(b,b+=Br));return f}function us(p,l,f){let b="";f=Math.min(p.length,f);for(let A=l;A<f;++A)b+=String.fromCharCode(p[A]&127);return b}function Ug(p,l,f){let b="";f=Math.min(p.length,f);for(let A=l;A<f;++A)b+=String.fromCharCode(p[A]);return b}function Ng(p,l,f){let b=p.length;(!l||l<0)&&(l=0),(!f||f<0||f>b)&&(f=b);let A="";for(let T=l;T<f;++T)A+=Hg[p[T]];return A}function qg(p,l,f){let b=p.slice(l,f),A="";for(let T=0;T<b.length-1;T+=2)A+=String.fromCharCode(b[T]+b[T+1]*256);return A}s.prototype.slice=function(l,f){let b=this.length;l=~~l,f=f===void 0?b:~~f,l<0?(l+=b,l<0&&(l=0)):l>b&&(l=b),f<0?(f+=b,f<0&&(f=0)):f>b&&(f=b),f<l&&(f=l);let A=this.subarray(l,f);return Object.setPrototypeOf(A,s.prototype),A};function ge(p,l,f){if(p%1!==0||p<0)throw new RangeError("offset is not uint");if(p+l>f)throw new RangeError("Trying to access beyond buffer length")}s.prototype.readUintLE=s.prototype.readUIntLE=function(l,f,b){l=l>>>0,f=f>>>0,b||ge(l,f,this.length);let A=this[l],T=1,O=0;for(;++O<f&&(T*=256);)A+=this[l+O]*T;return A},s.prototype.readUintBE=s.prototype.readUIntBE=function(l,f,b){l=l>>>0,f=f>>>0,b||ge(l,f,this.length);let A=this[l+--f],T=1;for(;f>0&&(T*=256);)A+=this[l+--f]*T;return A},s.prototype.readUint8=s.prototype.readUInt8=function(l,f){return l=l>>>0,f||ge(l,1,this.length),this[l]},s.prototype.readUint16LE=s.prototype.readUInt16LE=function(l,f){return l=l>>>0,f||ge(l,2,this.length),this[l]|this[l+1]<<8},s.prototype.readUint16BE=s.prototype.readUInt16BE=function(l,f){return l=l>>>0,f||ge(l,2,this.length),this[l]<<8|this[l+1]},s.prototype.readUint32LE=s.prototype.readUInt32LE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),(this[l]|this[l+1]<<8|this[l+2]<<16)+this[l+3]*16777216},s.prototype.readUint32BE=s.prototype.readUInt32BE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),this[l]*16777216+(this[l+1]<<16|this[l+2]<<8|this[l+3])},s.prototype.readBigUInt64LE=xt(function(l){l=l>>>0,kr(l,"offset");let f=this[l],b=this[l+7];(f===void 0||b===void 0)&&li(l,this.length-8);let A=f+this[++l]*2**8+this[++l]*2**16+this[++l]*2**24,T=this[++l]+this[++l]*2**8+this[++l]*2**16+b*2**24;return BigInt(A)+(BigInt(T)<<BigInt(32))}),s.prototype.readBigUInt64BE=xt(function(l){l=l>>>0,kr(l,"offset");let f=this[l],b=this[l+7];(f===void 0||b===void 0)&&li(l,this.length-8);let A=f*2**24+this[++l]*2**16+this[++l]*2**8+this[++l],T=this[++l]*2**24+this[++l]*2**16+this[++l]*2**8+b;return (BigInt(A)<<BigInt(32))+BigInt(T)}),s.prototype.readIntLE=function(l,f,b){l=l>>>0,f=f>>>0,b||ge(l,f,this.length);let A=this[l],T=1,O=0;for(;++O<f&&(T*=256);)A+=this[l+O]*T;return T*=128,A>=T&&(A-=Math.pow(2,8*f)),A},s.prototype.readIntBE=function(l,f,b){l=l>>>0,f=f>>>0,b||ge(l,f,this.length);let A=f,T=1,O=this[l+--A];for(;A>0&&(T*=256);)O+=this[l+--A]*T;return T*=128,O>=T&&(O-=Math.pow(2,8*f)),O},s.prototype.readInt8=function(l,f){return l=l>>>0,f||ge(l,1,this.length),this[l]&128?(255-this[l]+1)*-1:this[l]},s.prototype.readInt16LE=function(l,f){l=l>>>0,f||ge(l,2,this.length);let b=this[l]|this[l+1]<<8;return b&32768?b|4294901760:b},s.prototype.readInt16BE=function(l,f){l=l>>>0,f||ge(l,2,this.length);let b=this[l+1]|this[l]<<8;return b&32768?b|4294901760:b},s.prototype.readInt32LE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),this[l]|this[l+1]<<8|this[l+2]<<16|this[l+3]<<24},s.prototype.readInt32BE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),this[l]<<24|this[l+1]<<16|this[l+2]<<8|this[l+3]},s.prototype.readBigInt64LE=xt(function(l){l=l>>>0,kr(l,"offset");let f=this[l],b=this[l+7];(f===void 0||b===void 0)&&li(l,this.length-8);let A=this[l+4]+this[l+5]*2**8+this[l+6]*2**16+(b<<24);return (BigInt(A)<<BigInt(32))+BigInt(f+this[++l]*2**8+this[++l]*2**16+this[++l]*2**24)}),s.prototype.readBigInt64BE=xt(function(l){l=l>>>0,kr(l,"offset");let f=this[l],b=this[l+7];(f===void 0||b===void 0)&&li(l,this.length-8);let A=(f<<24)+this[++l]*2**16+this[++l]*2**8+this[++l];return (BigInt(A)<<BigInt(32))+BigInt(this[++l]*2**24+this[++l]*2**16+this[++l]*2**8+b)}),s.prototype.readFloatLE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),e.read(this,l,!0,23,4)},s.prototype.readFloatBE=function(l,f){return l=l>>>0,f||ge(l,4,this.length),e.read(this,l,!1,23,4)},s.prototype.readDoubleLE=function(l,f){return l=l>>>0,f||ge(l,8,this.length),e.read(this,l,!0,52,8)},s.prototype.readDoubleBE=function(l,f){return l=l>>>0,f||ge(l,8,this.length),e.read(this,l,!1,52,8)};function Ce(p,l,f,b,A,T){if(!s.isBuffer(p))throw new TypeError('"buffer" argument must be a Buffer instance');if(l>A||l<T)throw new RangeError('"value" argument is out of bounds');if(f+b>p.length)throw new RangeError("Index out of range")}s.prototype.writeUintLE=s.prototype.writeUIntLE=function(l,f,b,A){if(l=+l,f=f>>>0,b=b>>>0,!A){let $=Math.pow(2,8*b)-1;Ce(this,l,f,b,$,0);}let T=1,O=0;for(this[f]=l&255;++O<b&&(T*=256);)this[f+O]=l/T&255;return f+b},s.prototype.writeUintBE=s.prototype.writeUIntBE=function(l,f,b,A){if(l=+l,f=f>>>0,b=b>>>0,!A){let $=Math.pow(2,8*b)-1;Ce(this,l,f,b,$,0);}let T=b-1,O=1;for(this[f+T]=l&255;--T>=0&&(O*=256);)this[f+T]=l/O&255;return f+b},s.prototype.writeUint8=s.prototype.writeUInt8=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,1,255,0),this[f]=l&255,f+1},s.prototype.writeUint16LE=s.prototype.writeUInt16LE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,2,65535,0),this[f]=l&255,this[f+1]=l>>>8,f+2},s.prototype.writeUint16BE=s.prototype.writeUInt16BE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,2,65535,0),this[f]=l>>>8,this[f+1]=l&255,f+2},s.prototype.writeUint32LE=s.prototype.writeUInt32LE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,4,4294967295,0),this[f+3]=l>>>24,this[f+2]=l>>>16,this[f+1]=l>>>8,this[f]=l&255,f+4},s.prototype.writeUint32BE=s.prototype.writeUInt32BE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,4,4294967295,0),this[f]=l>>>24,this[f+1]=l>>>16,this[f+2]=l>>>8,this[f+3]=l&255,f+4};function vl(p,l,f,b,A){Rl(l,b,A,p,f,7);let T=Number(l&BigInt(4294967295));p[f++]=T,T=T>>8,p[f++]=T,T=T>>8,p[f++]=T,T=T>>8,p[f++]=T;let O=Number(l>>BigInt(32)&BigInt(4294967295));return p[f++]=O,O=O>>8,p[f++]=O,O=O>>8,p[f++]=O,O=O>>8,p[f++]=O,f}function El(p,l,f,b,A){Rl(l,b,A,p,f,7);let T=Number(l&BigInt(4294967295));p[f+7]=T,T=T>>8,p[f+6]=T,T=T>>8,p[f+5]=T,T=T>>8,p[f+4]=T;let O=Number(l>>BigInt(32)&BigInt(4294967295));return p[f+3]=O,O=O>>8,p[f+2]=O,O=O>>8,p[f+1]=O,O=O>>8,p[f]=O,f+8}s.prototype.writeBigUInt64LE=xt(function(l,f=0){return vl(this,l,f,BigInt(0),BigInt("0xffffffffffffffff"))}),s.prototype.writeBigUInt64BE=xt(function(l,f=0){return El(this,l,f,BigInt(0),BigInt("0xffffffffffffffff"))}),s.prototype.writeIntLE=function(l,f,b,A){if(l=+l,f=f>>>0,!A){let se=Math.pow(2,8*b-1);Ce(this,l,f,b,se-1,-se);}let T=0,O=1,$=0;for(this[f]=l&255;++T<b&&(O*=256);)l<0&&$===0&&this[f+T-1]!==0&&($=1),this[f+T]=(l/O>>0)-$&255;return f+b},s.prototype.writeIntBE=function(l,f,b,A){if(l=+l,f=f>>>0,!A){let se=Math.pow(2,8*b-1);Ce(this,l,f,b,se-1,-se);}let T=b-1,O=1,$=0;for(this[f+T]=l&255;--T>=0&&(O*=256);)l<0&&$===0&&this[f+T+1]!==0&&($=1),this[f+T]=(l/O>>0)-$&255;return f+b},s.prototype.writeInt8=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,1,127,-128),l<0&&(l=255+l+1),this[f]=l&255,f+1},s.prototype.writeInt16LE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,2,32767,-32768),this[f]=l&255,this[f+1]=l>>>8,f+2},s.prototype.writeInt16BE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,2,32767,-32768),this[f]=l>>>8,this[f+1]=l&255,f+2},s.prototype.writeInt32LE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,4,2147483647,-2147483648),this[f]=l&255,this[f+1]=l>>>8,this[f+2]=l>>>16,this[f+3]=l>>>24,f+4},s.prototype.writeInt32BE=function(l,f,b){return l=+l,f=f>>>0,b||Ce(this,l,f,4,2147483647,-2147483648),l<0&&(l=4294967295+l+1),this[f]=l>>>24,this[f+1]=l>>>16,this[f+2]=l>>>8,this[f+3]=l&255,f+4},s.prototype.writeBigInt64LE=xt(function(l,f=0){return vl(this,l,f,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),s.prototype.writeBigInt64BE=xt(function(l,f=0){return El(this,l,f,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))});function Sl(p,l,f,b,A,T){if(f+b>p.length)throw new RangeError("Index out of range");if(f<0)throw new RangeError("Index out of range")}function Al(p,l,f,b,A){return l=+l,f=f>>>0,A||Sl(p,l,f,4),e.write(p,l,f,b,23,4),f+4}s.prototype.writeFloatLE=function(l,f,b){return Al(this,l,f,!0,b)},s.prototype.writeFloatBE=function(l,f,b){return Al(this,l,f,!1,b)};function Il(p,l,f,b,A){return l=+l,f=f>>>0,A||Sl(p,l,f,8),e.write(p,l,f,b,52,8),f+8}s.prototype.writeDoubleLE=function(l,f,b){return Il(this,l,f,!0,b)},s.prototype.writeDoubleBE=function(l,f,b){return Il(this,l,f,!1,b)},s.prototype.copy=function(l,f,b,A){if(!s.isBuffer(l))throw new TypeError("argument should be a Buffer");if(b||(b=0),!A&&A!==0&&(A=this.length),f>=l.length&&(f=l.length),f||(f=0),A>0&&A<b&&(A=b),A===b||l.length===0||this.length===0)return 0;if(f<0)throw new RangeError("targetStart out of bounds");if(b<0||b>=this.length)throw new RangeError("Index out of range");if(A<0)throw new RangeError("sourceEnd out of bounds");A>this.length&&(A=this.length),l.length-f<A-b&&(A=l.length-f+b);let T=A-b;return this===l&&typeof Uint8Array.prototype.copyWithin=="function"?this.copyWithin(f,b,A):Uint8Array.prototype.set.call(l,this.subarray(b,A),f),T},s.prototype.fill=function(l,f,b,A){if(typeof l=="string"){if(typeof f=="string"?(A=f,f=0,b=this.length):typeof b=="string"&&(A=b,b=this.length),A!==void 0&&typeof A!="string")throw new TypeError("encoding must be a string");if(typeof A=="string"&&!s.isEncoding(A))throw new TypeError("Unknown encoding: "+A);if(l.length===1){let O=l.charCodeAt(0);(A==="utf8"&&O<128||A==="latin1")&&(l=O);}}else typeof l=="number"?l=l&255:typeof l=="boolean"&&(l=Number(l));if(f<0||this.length<f||this.length<b)throw new RangeError("Out of range index");if(b<=f)return this;f=f>>>0,b=b===void 0?this.length:b>>>0,l||(l=0);let T;if(typeof l=="number")for(T=f;T<b;++T)this[T]=l;else {let O=s.isBuffer(l)?l:s.from(l,A),$=O.length;if($===0)throw new TypeError('The value "'+l+'" is invalid for argument "value"');for(T=0;T<b-f;++T)this[T+f]=O[T%$];}return this};let Or={};function fs(p,l,f){Or[p]=class extends f{constructor(){super(),Object.defineProperty(this,"message",{value:l.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${p}]`,this.stack,delete this.name;}get code(){return p}set code(A){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:A,writable:!0});}toString(){return `${this.name} [${p}]: ${this.message}`}};}fs("ERR_BUFFER_OUT_OF_BOUNDS",function(p){return p?`${p} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),fs("ERR_INVALID_ARG_TYPE",function(p,l){return `The "${p}" argument must be of type number. Received type ${typeof l}`},TypeError),fs("ERR_OUT_OF_RANGE",function(p,l,f){let b=`The value of "${p}" is out of range.`,A=f;return Number.isInteger(f)&&Math.abs(f)>2**32?A=Tl(String(f)):typeof f=="bigint"&&(A=String(f),(f>BigInt(2)**BigInt(32)||f<-(BigInt(2)**BigInt(32)))&&(A=Tl(A)),A+="n"),b+=` It must be ${l}. Received ${A}`,b},RangeError);function Tl(p){let l="",f=p.length,b=p[0]==="-"?1:0;for(;f>=b+4;f-=3)l=`_${p.slice(f-3,f)}${l}`;return `${p.slice(0,f)}${l}`}function Dg(p,l,f){kr(l,"offset"),(p[l]===void 0||p[l+f]===void 0)&&li(l,p.length-(f+1));}function Rl(p,l,f,b,A,T){if(p>f||p<l){let O=typeof l=="bigint"?"n":"",$;throw T>3?l===0||l===BigInt(0)?$=`>= 0${O} and < 2${O} ** ${(T+1)*8}${O}`:$=`>= -(2${O} ** ${(T+1)*8-1}${O}) and < 2 ** ${(T+1)*8-1}${O}`:$=`>= ${l}${O} and <= ${f}${O}`,new Or.ERR_OUT_OF_RANGE("value",$,p)}Dg(b,A,T);}function kr(p,l){if(typeof p!="number")throw new Or.ERR_INVALID_ARG_TYPE(l,"number",p)}function li(p,l,f){throw Math.floor(p)!==p?(kr(p,f),new Or.ERR_OUT_OF_RANGE(f||"offset","an integer",p)):l<0?new Or.ERR_BUFFER_OUT_OF_BOUNDS:new Or.ERR_OUT_OF_RANGE(f||"offset",`>= ${f?1:0} and <= ${l}`,p)}let jg=/[^+/0-9A-Za-z-_]/g;function Fg(p){if(p=p.split("=")[0],p=p.trim().replace(jg,""),p.length<2)return "";for(;p.length%4!==0;)p=p+"=";return p}function cs(p,l){l=l||1/0;let f,b=p.length,A=null,T=[];for(let O=0;O<b;++O){if(f=p.charCodeAt(O),f>55295&&f<57344){if(!A){if(f>56319){(l-=3)>-1&&T.push(239,191,189);continue}else if(O+1===b){(l-=3)>-1&&T.push(239,191,189);continue}A=f;continue}if(f<56320){(l-=3)>-1&&T.push(239,191,189),A=f;continue}f=(A-55296<<10|f-56320)+65536;}else A&&(l-=3)>-1&&T.push(239,191,189);if(A=null,f<128){if((l-=1)<0)break;T.push(f);}else if(f<2048){if((l-=2)<0)break;T.push(f>>6|192,f&63|128);}else if(f<65536){if((l-=3)<0)break;T.push(f>>12|224,f>>6&63|128,f&63|128);}else if(f<1114112){if((l-=4)<0)break;T.push(f>>18|240,f>>12&63|128,f>>6&63|128,f&63|128);}else throw new Error("Invalid code point")}return T}function Wg(p){let l=[];for(let f=0;f<p.length;++f)l.push(p.charCodeAt(f)&255);return l}function $g(p,l){let f,b,A,T=[];for(let O=0;O<p.length&&!((l-=2)<0);++O)f=p.charCodeAt(O),b=f>>8,A=f%256,T.push(A),T.push(b);return T}function Cl(p){return t.toByteArray(Fg(p))}function qi(p,l,f,b){let A;for(A=0;A<b&&!(A+f>=l.length||A>=p.length);++A)l[A+f]=p[A];return A}function Ye(p,l){return p instanceof l||p!=null&&p.constructor!=null&&p.constructor.name!=null&&p.constructor.name===l.name}function hs(p){return p!==p}let Hg=function(){let p="0123456789abcdef",l=new Array(256);for(let f=0;f<16;++f){let b=f*16;for(let A=0;A<16;++A)l[b+A]=p[f]+p[A];}return l}();function xt(p){return typeof BigInt>"u"?Vg:p}function Vg(){throw new Error("BigInt not supported")}return Jt}var ui,Vu,Wi,zu,Jt,Ku,Lt,x,ey,ty,ye=we(()=>{v();m();_();ui={},Vu=!1;Wi={},zu=!1;Jt={},Ku=!1;Lt=Zg();Lt.Buffer;Lt.SlowBuffer;Lt.INSPECT_MAX_BYTES;Lt.kMaxLength;x=Lt.Buffer,ey=Lt.INSPECT_MAX_BYTES,ty=Lt.kMaxLength;});var v=we(()=>{ye();});var Gu=M(ws=>{v();m();_();Object.defineProperty(ws,"__esModule",{value:!0});var bs=class{constructor(e){this.aliasToTopic={},this.max=e;}put(e,r){return r===0||r>this.max?!1:(this.aliasToTopic[r]=e,this.length=Object.keys(this.aliasToTopic).length,!0)}getTopicByAlias(e){return this.aliasToTopic[e]}clear(){this.aliasToTopic={};}};ws.default=bs;});var ce=M((PA,Qu)=>{v();m();_();Qu.exports={ArrayIsArray(t){return Array.isArray(t)},ArrayPrototypeIncludes(t,e){return t.includes(e)},ArrayPrototypeIndexOf(t,e){return t.indexOf(e)},ArrayPrototypeJoin(t,e){return t.join(e)},ArrayPrototypeMap(t,e){return t.map(e)},ArrayPrototypePop(t,e){return t.pop(e)},ArrayPrototypePush(t,e){return t.push(e)},ArrayPrototypeSlice(t,e,r){return t.slice(e,r)},Error,FunctionPrototypeCall(t,e,...r){return t.call(e,...r)},FunctionPrototypeSymbolHasInstance(t,e){return Function.prototype[Symbol.hasInstance].call(t,e)},MathFloor:Math.floor,Number,NumberIsInteger:Number.isInteger,NumberIsNaN:Number.isNaN,NumberMAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER,NumberMIN_SAFE_INTEGER:Number.MIN_SAFE_INTEGER,NumberParseInt:Number.parseInt,ObjectDefineProperties(t,e){return Object.defineProperties(t,e)},ObjectDefineProperty(t,e,r){return Object.defineProperty(t,e,r)},ObjectGetOwnPropertyDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)},ObjectKeys(t){return Object.keys(t)},ObjectSetPrototypeOf(t,e){return Object.setPrototypeOf(t,e)},Promise,PromisePrototypeCatch(t,e){return t.catch(e)},PromisePrototypeThen(t,e,r){return t.then(e,r)},PromiseReject(t){return Promise.reject(t)},ReflectApply:Reflect.apply,RegExpPrototypeTest(t,e){return t.test(e)},SafeSet:Set,String,StringPrototypeSlice(t,e,r){return t.slice(e,r)},StringPrototypeToLowerCase(t){return t.toLowerCase()},StringPrototypeToUpperCase(t){return t.toUpperCase()},StringPrototypeTrim(t){return t.trim()},Symbol,SymbolFor:Symbol.for,SymbolAsyncIterator:Symbol.asyncIterator,SymbolHasInstance:Symbol.hasInstance,SymbolIterator:Symbol.iterator,TypedArrayPrototypeSet(t,e,r){return t.set(e,r)},Uint8Array};});var Je=M((jA,ms)=>{v();m();_();var ry=(ye(),X(_e)),iy=Object.getPrototypeOf(async function(){}).constructor,Yu=globalThis.Blob||ry.Blob,ny=typeof Yu<"u"?function(e){return e instanceof Yu}:function(e){return !1},_s=class extends Error{constructor(e){if(!Array.isArray(e))throw new TypeError(`Expected input to be an Array, got ${typeof e}`);let r="";for(let i=0;i<e.length;i++)r+=`    ${e[i].stack}
`;super(r),this.name="AggregateError",this.errors=e;}};ms.exports={AggregateError:_s,kEmptyObject:Object.freeze({}),once(t){let e=!1;return function(...r){e||(e=!0,t.apply(this,r));}},createDeferredPromise:function(){let t,e;return {promise:new Promise((i,n)=>{t=i,e=n;}),resolve:t,reject:e}},promisify(t){return new Promise((e,r)=>{t((i,...n)=>i?r(i):e(...n));})},debuglog(){return function(){}},format(t,...e){return t.replace(/%([sdifj])/g,function(...[r,i]){let n=e.shift();return i==="f"?n.toFixed(6):i==="j"?JSON.stringify(n):i==="s"&&typeof n=="object"?`${n.constructor!==Object?n.constructor.name:""} {}`.trim():n.toString()})},inspect(t){switch(typeof t){case"string":if(t.includes("'"))if(t.includes('"')){if(!t.includes("`")&&!t.includes("${"))return `\`${t}\``}else return `"${t}"`;return `'${t}'`;case"number":return isNaN(t)?"NaN":Object.is(t,-0)?String(t):t;case"bigint":return `${String(t)}n`;case"boolean":case"undefined":return String(t);case"object":return "{}"}},types:{isAsyncFunction(t){return t instanceof iy},isArrayBufferView(t){return ArrayBuffer.isView(t)}},isBlob:ny};ms.exports.promisify.custom=Symbol.for("nodejs.util.promisify.custom");});var Hi=M((YA,$i)=>{v();m();_();var{AbortController:Ju,AbortSignal:sy}=typeof self<"u"?self:typeof window<"u"?window:void 0;$i.exports=Ju;$i.exports.AbortSignal=sy;$i.exports.default=Ju;});var Se=M((oI,ef)=>{v();m();_();var{format:oy,inspect:Vi,AggregateError:ay}=Je(),ly=globalThis.AggregateError||ay,uy=Symbol("kIsNodeError"),fy=["string","function","number","object","Function","Object","boolean","bigint","symbol"],cy=/^([A-Z][a-z0-9]*)+$/,hy="__node_internal_",zi={};function Xt(t,e){if(!t)throw new zi.ERR_INTERNAL_ASSERTION(e)}function Xu(t){let e="",r=t.length,i=t[0]==="-"?1:0;for(;r>=i+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return `${t.slice(0,r)}${e}`}function dy(t,e,r){if(typeof e=="function")return Xt(e.length<=r.length,`Code: ${t}; The provided arguments length (${r.length}) does not match the required ones (${e.length}).`),e(...r);let i=(e.match(/%[dfijoOs]/g)||[]).length;return Xt(i===r.length,`Code: ${t}; The provided arguments length (${r.length}) does not match the required ones (${i}).`),r.length===0?e:oy(e,...r)}function me(t,e,r){r||(r=Error);class i extends r{constructor(...o){super(dy(t,e,o));}toString(){return `${this.name} [${t}]: ${this.message}`}}Object.defineProperties(i.prototype,{name:{value:r.name,writable:!0,enumerable:!1,configurable:!0},toString:{value(){return `${this.name} [${t}]: ${this.message}`},writable:!0,enumerable:!1,configurable:!0}}),i.prototype.code=t,i.prototype[uy]=!0,zi[t]=i;}function Zu(t){let e=hy+t.name;return Object.defineProperty(t,"name",{value:e}),t}function py(t,e){if(t&&e&&t!==e){if(Array.isArray(e.errors))return e.errors.push(t),e;let r=new ly([e,t],e.message);return r.code=e.code,r}return t||e}var vs=class extends Error{constructor(e="The operation was aborted",r=void 0){if(r!==void 0&&typeof r!="object")throw new zi.ERR_INVALID_ARG_TYPE("options","Object",r);super(e,r),this.code="ABORT_ERR",this.name="AbortError";}};me("ERR_ASSERTION","%s",Error);me("ERR_INVALID_ARG_TYPE",(t,e,r)=>{Xt(typeof t=="string","'name' must be a string"),Array.isArray(e)||(e=[e]);let i="The ";t.endsWith(" argument")?i+=`${t} `:i+=`"${t}" ${t.includes(".")?"property":"argument"} `,i+="must be ";let n=[],o=[],s=[];for(let u of e)Xt(typeof u=="string","All expected entries have to be of type string"),fy.includes(u)?n.push(u.toLowerCase()):cy.test(u)?o.push(u):(Xt(u!=="object",'The value "object" should be written as "Object"'),s.push(u));if(o.length>0){let u=n.indexOf("object");u!==-1&&(n.splice(n,u,1),o.push("Object"));}if(n.length>0){switch(n.length){case 1:i+=`of type ${n[0]}`;break;case 2:i+=`one of type ${n[0]} or ${n[1]}`;break;default:{let u=n.pop();i+=`one of type ${n.join(", ")}, or ${u}`;}}(o.length>0||s.length>0)&&(i+=" or ");}if(o.length>0){switch(o.length){case 1:i+=`an instance of ${o[0]}`;break;case 2:i+=`an instance of ${o[0]} or ${o[1]}`;break;default:{let u=o.pop();i+=`an instance of ${o.join(", ")}, or ${u}`;}}s.length>0&&(i+=" or ");}switch(s.length){case 0:break;case 1:s[0].toLowerCase()!==s[0]&&(i+="an "),i+=`${s[0]}`;break;case 2:i+=`one of ${s[0]} or ${s[1]}`;break;default:{let u=s.pop();i+=`one of ${s.join(", ")}, or ${u}`;}}if(r==null)i+=`. Received ${r}`;else if(typeof r=="function"&&r.name)i+=`. Received function ${r.name}`;else if(typeof r=="object"){var a;if((a=r.constructor)!==null&&a!==void 0&&a.name)i+=`. Received an instance of ${r.constructor.name}`;else {let u=Vi(r,{depth:-1});i+=`. Received ${u}`;}}else {let u=Vi(r,{colors:!1});u.length>25&&(u=`${u.slice(0,25)}...`),i+=`. Received type ${typeof r} (${u})`;}return i},TypeError);me("ERR_INVALID_ARG_VALUE",(t,e,r="is invalid")=>{let i=Vi(e);return i.length>128&&(i=i.slice(0,128)+"..."),`The ${t.includes(".")?"property":"argument"} '${t}' ${r}. Received ${i}`},TypeError);me("ERR_INVALID_RETURN_VALUE",(t,e,r)=>{var i;let n=r!=null&&(i=r.constructor)!==null&&i!==void 0&&i.name?`instance of ${r.constructor.name}`:`type ${typeof r}`;return `Expected ${t} to be returned from the "${e}" function but got ${n}.`},TypeError);me("ERR_MISSING_ARGS",(...t)=>{Xt(t.length>0,"At least one arg needs to be specified");let e,r=t.length;switch(t=(Array.isArray(t)?t:[t]).map(i=>`"${i}"`).join(" or "),r){case 1:e+=`The ${t[0]} argument`;break;case 2:e+=`The ${t[0]} and ${t[1]} arguments`;break;default:{let i=t.pop();e+=`The ${t.join(", ")}, and ${i} arguments`;}break}return `${e} must be specified`},TypeError);me("ERR_OUT_OF_RANGE",(t,e,r)=>{Xt(e,'Missing "range" argument');let i;return Number.isInteger(r)&&Math.abs(r)>2**32?i=Xu(String(r)):typeof r=="bigint"?(i=String(r),(r>2n**32n||r<-(2n**32n))&&(i=Xu(i)),i+="n"):i=Vi(r),`The value of "${t}" is out of range. It must be ${e}. Received ${i}`},RangeError);me("ERR_MULTIPLE_CALLBACK","Callback called multiple times",Error);me("ERR_METHOD_NOT_IMPLEMENTED","The %s method is not implemented",Error);me("ERR_STREAM_ALREADY_FINISHED","Cannot call %s after a stream was finished",Error);me("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable",Error);me("ERR_STREAM_DESTROYED","Cannot call %s after a stream was destroyed",Error);me("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError);me("ERR_STREAM_PREMATURE_CLOSE","Premature close",Error);me("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF",Error);me("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event",Error);me("ERR_STREAM_WRITE_AFTER_END","write after end",Error);me("ERR_UNKNOWN_ENCODING","Unknown encoding: %s",TypeError);ef.exports={AbortError:vs,aggregateTwoErrors:Zu(py),hideStackFrames:Zu,codes:zi};});var fi=M((yI,ff)=>{v();m();_();var{ArrayIsArray:Ss,ArrayPrototypeIncludes:sf,ArrayPrototypeJoin:of,ArrayPrototypeMap:gy,NumberIsInteger:As,NumberIsNaN:yy,NumberMAX_SAFE_INTEGER:by,NumberMIN_SAFE_INTEGER:wy,NumberParseInt:_y,ObjectPrototypeHasOwnProperty:my,RegExpPrototypeExec:af,String:vy,StringPrototypeToUpperCase:Ey,StringPrototypeTrim:Sy}=ce(),{hideStackFrames:Ue,codes:{ERR_SOCKET_BAD_PORT:Ay,ERR_INVALID_ARG_TYPE:Ae,ERR_INVALID_ARG_VALUE:Mr,ERR_OUT_OF_RANGE:Zt,ERR_UNKNOWN_SIGNAL:tf}}=Se(),{normalizeEncoding:Iy}=Je(),{isAsyncFunction:Ty,isArrayBufferView:Ry}=Je().types,rf={};function Cy(t){return t===(t|0)}function By(t){return t===t>>>0}var Py=/^[0-7]+$/,Oy="must be a 32-bit unsigned integer or an octal string";function ky(t,e,r){if(typeof t>"u"&&(t=r),typeof t=="string"){if(af(Py,t)===null)throw new Mr(e,t,Oy);t=_y(t,8);}return lf(t,e),t}var xy=Ue((t,e,r=wy,i=by)=>{if(typeof t!="number")throw new Ae(e,"number",t);if(!As(t))throw new Zt(e,"an integer",t);if(t<r||t>i)throw new Zt(e,`>= ${r} && <= ${i}`,t)}),My=Ue((t,e,r=-2147483648,i=2147483647)=>{if(typeof t!="number")throw new Ae(e,"number",t);if(!As(t))throw new Zt(e,"an integer",t);if(t<r||t>i)throw new Zt(e,`>= ${r} && <= ${i}`,t)}),lf=Ue((t,e,r=!1)=>{if(typeof t!="number")throw new Ae(e,"number",t);if(!As(t))throw new Zt(e,"an integer",t);let i=r?1:0,n=4294967295;if(t<i||t>n)throw new Zt(e,`>= ${i} && <= ${n}`,t)});function Is(t,e){if(typeof t!="string")throw new Ae(e,"string",t)}function Ly(t,e,r=void 0,i){if(typeof t!="number")throw new Ae(e,"number",t);if(r!=null&&t<r||i!=null&&t>i||(r!=null||i!=null)&&yy(t))throw new Zt(e,`${r!=null?`>= ${r}`:""}${r!=null&&i!=null?" && ":""}${i!=null?`<= ${i}`:""}`,t)}var Uy=Ue((t,e,r)=>{if(!sf(r,t)){let n="must be one of: "+of(gy(r,o=>typeof o=="string"?`'${o}'`:vy(o)),", ");throw new Mr(e,t,n)}});function uf(t,e){if(typeof t!="boolean")throw new Ae(e,"boolean",t)}function Es(t,e,r){return t==null||!my(t,e)?r:t[e]}var Ny=Ue((t,e,r=null)=>{let i=Es(r,"allowArray",!1),n=Es(r,"allowFunction",!1);if(!Es(r,"nullable",!1)&&t===null||!i&&Ss(t)||typeof t!="object"&&(!n||typeof t!="function"))throw new Ae(e,"Object",t)}),qy=Ue((t,e)=>{if(t!=null&&typeof t!="object"&&typeof t!="function")throw new Ae(e,"a dictionary",t)}),Ts=Ue((t,e,r=0)=>{if(!Ss(t))throw new Ae(e,"Array",t);if(t.length<r){let i=`must be longer than ${r}`;throw new Mr(e,t,i)}});function Dy(t,e){Ts(t,e);for(let r=0;r<t.length;r++)Is(t[r],`${e}[${r}]`);}function jy(t,e){Ts(t,e);for(let r=0;r<t.length;r++)uf(t[r],`${e}[${r}]`);}function Fy(t,e="signal"){if(Is(t,e),rf[t]===void 0)throw rf[Ey(t)]!==void 0?new tf(t+" (signals must use all capital letters)"):new tf(t)}var Wy=Ue((t,e="buffer")=>{if(!Ry(t))throw new Ae(e,["Buffer","TypedArray","DataView"],t)});function $y(t,e){let r=Iy(e),i=t.length;if(r==="hex"&&i%2!==0)throw new Mr("encoding",e,`is invalid for data of length ${i}`)}function Hy(t,e="Port",r=!0){if(typeof t!="number"&&typeof t!="string"||typeof t=="string"&&Sy(t).length===0||+t!==+t>>>0||t>65535||t===0&&!r)throw new Ay(e,t,r);return t|0}var Vy=Ue((t,e)=>{if(t!==void 0&&(t===null||typeof t!="object"||!("aborted"in t)))throw new Ae(e,"AbortSignal",t)}),zy=Ue((t,e)=>{if(typeof t!="function")throw new Ae(e,"Function",t)}),Ky=Ue((t,e)=>{if(typeof t!="function"||Ty(t))throw new Ae(e,"Function",t)}),Gy=Ue((t,e)=>{if(t!==void 0)throw new Ae(e,"undefined",t)});function Qy(t,e,r){if(!sf(r,t))throw new Ae(e,`('${of(r,"|")}')`,t)}var Yy=/^(?:<[^>]*>)(?:\s*;\s*[^;"\s]+(?:=(")?[^;"\s]*\1)?)*$/;function nf(t,e){if(typeof t>"u"||!af(Yy,t))throw new Mr(e,t,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}function Jy(t){if(typeof t=="string")return nf(t,"hints"),t;if(Ss(t)){let e=t.length,r="";if(e===0)return r;for(let i=0;i<e;i++){let n=t[i];nf(n,"hints"),r+=n,i!==e-1&&(r+=", ");}return r}throw new Mr("hints",t,'must be an array or string of format "</styles.css>; rel=preload; as=style"')}ff.exports={isInt32:Cy,isUint32:By,parseFileMode:ky,validateArray:Ts,validateStringArray:Dy,validateBooleanArray:jy,validateBoolean:uf,validateBuffer:Wy,validateDictionary:qy,validateEncoding:$y,validateFunction:zy,validateInt32:My,validateInteger:xy,validateNumber:Ly,validateObject:Ny,validateOneOf:Uy,validatePlainFunction:Ky,validatePort:Hy,validateSignalName:Fy,validateString:Is,validateUint32:lf,validateUndefined:Gy,validateUnion:Qy,validateAbortSignal:Vy,validateLinkHeaderValue:Jy};});var Ut=M((TI,pf)=>{v();m();_();var ae=pf.exports={},Xe,Ze;function Rs(){throw new Error("setTimeout has not been defined")}function Cs(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?Xe=setTimeout:Xe=Rs;}catch{Xe=Rs;}try{typeof clearTimeout=="function"?Ze=clearTimeout:Ze=Cs;}catch{Ze=Cs;}})();function cf(t){if(Xe===setTimeout)return setTimeout(t,0);if((Xe===Rs||!Xe)&&setTimeout)return Xe=setTimeout,setTimeout(t,0);try{return Xe(t,0)}catch{try{return Xe.call(null,t,0)}catch{return Xe.call(this,t,0)}}}function Xy(t){if(Ze===clearTimeout)return clearTimeout(t);if((Ze===Cs||!Ze)&&clearTimeout)return Ze=clearTimeout,clearTimeout(t);try{return Ze(t)}catch{try{return Ze.call(null,t)}catch{return Ze.call(this,t)}}}var wt=[],Lr=!1,er,Ki=-1;function Zy(){!Lr||!er||(Lr=!1,er.length?wt=er.concat(wt):Ki=-1,wt.length&&hf());}function hf(){if(!Lr){var t=cf(Zy);Lr=!0;for(var e=wt.length;e;){for(er=wt,wt=[];++Ki<e;)er&&er[Ki].run();Ki=-1,e=wt.length;}er=null,Lr=!1,Xy(t);}}ae.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];wt.push(new df(t,e)),wt.length===1&&!Lr&&cf(hf);};function df(t,e){this.fun=t,this.array=e;}df.prototype.run=function(){this.fun.apply(null,this.array);};ae.title="browser";ae.browser=!0;ae.env={};ae.argv=[];ae.version="";ae.versions={};function _t(){}ae.on=_t;ae.addListener=_t;ae.once=_t;ae.off=_t;ae.removeListener=_t;ae.removeAllListeners=_t;ae.emit=_t;ae.prependListener=_t;ae.prependOnceListener=_t;ae.listeners=function(t){return []};ae.binding=function(t){throw new Error("process.binding is not supported")};ae.cwd=function(){return "/"};ae.chdir=function(t){throw new Error("process.chdir is not supported")};ae.umask=function(){return 0};});var tt=M((UI,Pf)=>{v();m();_();var{Symbol:Gi,SymbolAsyncIterator:gf,SymbolIterator:yf,SymbolFor:bf}=ce(),wf=Gi("kDestroyed"),_f=Gi("kIsErrored"),Bs=Gi("kIsReadable"),mf=Gi("kIsDisturbed"),eb=bf("nodejs.webstream.isClosedPromise"),tb=bf("nodejs.webstream.controllerErrorFunction");function Qi(t,e=!1){var r;return !!(t&&typeof t.pipe=="function"&&typeof t.on=="function"&&(!e||typeof t.pause=="function"&&typeof t.resume=="function")&&(!t._writableState||((r=t._readableState)===null||r===void 0?void 0:r.readable)!==!1)&&(!t._writableState||t._readableState))}function Yi(t){var e;return !!(t&&typeof t.write=="function"&&typeof t.on=="function"&&(!t._readableState||((e=t._writableState)===null||e===void 0?void 0:e.writable)!==!1))}function rb(t){return !!(t&&typeof t.pipe=="function"&&t._readableState&&typeof t.on=="function"&&typeof t.write=="function")}function et(t){return t&&(t._readableState||t._writableState||typeof t.write=="function"&&typeof t.on=="function"||typeof t.pipe=="function"&&typeof t.on=="function")}function vf(t){return !!(t&&!et(t)&&typeof t.pipeThrough=="function"&&typeof t.getReader=="function"&&typeof t.cancel=="function")}function Ef(t){return !!(t&&!et(t)&&typeof t.getWriter=="function"&&typeof t.abort=="function")}function Sf(t){return !!(t&&!et(t)&&typeof t.readable=="object"&&typeof t.writable=="object")}function ib(t){return vf(t)||Ef(t)||Sf(t)}function nb(t,e){return t==null?!1:e===!0?typeof t[gf]=="function":e===!1?typeof t[yf]=="function":typeof t[gf]=="function"||typeof t[yf]=="function"}function Ji(t){if(!et(t))return null;let e=t._writableState,r=t._readableState,i=e||r;return !!(t.destroyed||t[wf]||i!=null&&i.destroyed)}function Af(t){if(!Yi(t))return null;if(t.writableEnded===!0)return !0;let e=t._writableState;return e!=null&&e.errored?!1:typeof e?.ended!="boolean"?null:e.ended}function sb(t,e){if(!Yi(t))return null;if(t.writableFinished===!0)return !0;let r=t._writableState;return r!=null&&r.errored?!1:typeof r?.finished!="boolean"?null:!!(r.finished||e===!1&&r.ended===!0&&r.length===0)}function ob(t){if(!Qi(t))return null;if(t.readableEnded===!0)return !0;let e=t._readableState;return !e||e.errored?!1:typeof e?.ended!="boolean"?null:e.ended}function If(t,e){if(!Qi(t))return null;let r=t._readableState;return r!=null&&r.errored?!1:typeof r?.endEmitted!="boolean"?null:!!(r.endEmitted||e===!1&&r.ended===!0&&r.length===0)}function Tf(t){return t&&t[Bs]!=null?t[Bs]:typeof t?.readable!="boolean"?null:Ji(t)?!1:Qi(t)&&t.readable&&!If(t)}function Rf(t){return typeof t?.writable!="boolean"?null:Ji(t)?!1:Yi(t)&&t.writable&&!Af(t)}function ab(t,e){return et(t)?Ji(t)?!0:!(e?.readable!==!1&&Tf(t)||e?.writable!==!1&&Rf(t)):null}function lb(t){var e,r;return et(t)?t.writableErrored?t.writableErrored:(e=(r=t._writableState)===null||r===void 0?void 0:r.errored)!==null&&e!==void 0?e:null:null}function ub(t){var e,r;return et(t)?t.readableErrored?t.readableErrored:(e=(r=t._readableState)===null||r===void 0?void 0:r.errored)!==null&&e!==void 0?e:null:null}function fb(t){if(!et(t))return null;if(typeof t.closed=="boolean")return t.closed;let e=t._writableState,r=t._readableState;return typeof e?.closed=="boolean"||typeof r?.closed=="boolean"?e?.closed||r?.closed:typeof t._closed=="boolean"&&Cf(t)?t._closed:null}function Cf(t){return typeof t._closed=="boolean"&&typeof t._defaultKeepAlive=="boolean"&&typeof t._removedConnection=="boolean"&&typeof t._removedContLen=="boolean"}function Bf(t){return typeof t._sent100=="boolean"&&Cf(t)}function cb(t){var e;return typeof t._consuming=="boolean"&&typeof t._dumped=="boolean"&&((e=t.req)===null||e===void 0?void 0:e.upgradeOrConnect)===void 0}function hb(t){if(!et(t))return null;let e=t._writableState,r=t._readableState,i=e||r;return !i&&Bf(t)||!!(i&&i.autoDestroy&&i.emitClose&&i.closed===!1)}function db(t){var e;return !!(t&&((e=t[mf])!==null&&e!==void 0?e:t.readableDidRead||t.readableAborted))}function pb(t){var e,r,i,n,o,s,a,u,c,h;return !!(t&&((e=(r=(i=(n=(o=(s=t[_f])!==null&&s!==void 0?s:t.readableErrored)!==null&&o!==void 0?o:t.writableErrored)!==null&&n!==void 0?n:(a=t._readableState)===null||a===void 0?void 0:a.errorEmitted)!==null&&i!==void 0?i:(u=t._writableState)===null||u===void 0?void 0:u.errorEmitted)!==null&&r!==void 0?r:(c=t._readableState)===null||c===void 0?void 0:c.errored)!==null&&e!==void 0?e:!((h=t._writableState)===null||h===void 0)&&h.errored))}Pf.exports={kDestroyed:wf,isDisturbed:db,kIsDisturbed:mf,isErrored:pb,kIsErrored:_f,isReadable:Tf,kIsReadable:Bs,kIsClosedPromise:eb,kControllerErrorFunction:tb,isClosed:fb,isDestroyed:Ji,isDuplexNodeStream:rb,isFinished:ab,isIterable:nb,isReadableNodeStream:Qi,isReadableStream:vf,isReadableEnded:ob,isReadableFinished:If,isReadableErrored:ub,isNodeStream:et,isWebStream:ib,isWritable:Rf,isWritableNodeStream:Yi,isWritableStream:Ef,isWritableEnded:Af,isWritableFinished:sb,isWritableErrored:lb,isServerRequest:cb,isServerResponse:Bf,willEmitClose:hb,isTransformStream:Sf};});var mt=M((zI,Ms)=>{v();m();_();var Nt=Ut(),{AbortError:Df,codes:gb}=Se(),{ERR_INVALID_ARG_TYPE:yb,ERR_STREAM_PREMATURE_CLOSE:Of}=gb,{kEmptyObject:Os,once:ks}=Je(),{validateAbortSignal:bb,validateFunction:wb,validateObject:_b,validateBoolean:mb}=fi(),{Promise:vb,PromisePrototypeThen:Eb}=ce(),{isClosed:Sb,isReadable:kf,isReadableNodeStream:Ps,isReadableStream:Ab,isReadableFinished:xf,isReadableErrored:Mf,isWritable:Lf,isWritableNodeStream:Uf,isWritableStream:Ib,isWritableFinished:Nf,isWritableErrored:qf,isNodeStream:Tb,willEmitClose:Rb,kIsClosedPromise:Cb}=tt();function Bb(t){return t.setHeader&&typeof t.abort=="function"}var xs=()=>{};function jf(t,e,r){var i,n;if(arguments.length===2?(r=e,e=Os):e==null?e=Os:_b(e,"options"),wb(r,"callback"),bb(e.signal,"options.signal"),r=ks(r),Ab(t)||Ib(t))return Pb(t,e,r);if(!Tb(t))throw new yb("stream",["ReadableStream","WritableStream","Stream"],t);let o=(i=e.readable)!==null&&i!==void 0?i:Ps(t),s=(n=e.writable)!==null&&n!==void 0?n:Uf(t),a=t._writableState,u=t._readableState,c=()=>{t.writable||g();},h=Rb(t)&&Ps(t)===o&&Uf(t)===s,d=Nf(t,!1),g=()=>{d=!0,t.destroyed&&(h=!1),!(h&&(!t.readable||o))&&(!o||y)&&r.call(t);},y=xf(t,!1),w=()=>{y=!0,t.destroyed&&(h=!1),!(h&&(!t.writable||s))&&(!s||d)&&r.call(t);},E=N=>{r.call(t,N);},S=Sb(t),I=()=>{S=!0;let N=qf(t)||Mf(t);if(N&&typeof N!="boolean")return r.call(t,N);if(o&&!y&&Ps(t,!0)&&!xf(t,!1))return r.call(t,new Of);if(s&&!d&&!Nf(t,!1))return r.call(t,new Of);r.call(t);},C=()=>{S=!0;let N=qf(t)||Mf(t);if(N&&typeof N!="boolean")return r.call(t,N);r.call(t);},R=()=>{t.req.on("finish",g);};Bb(t)?(t.on("complete",g),h||t.on("abort",I),t.req?R():t.on("request",R)):s&&!a&&(t.on("end",c),t.on("close",c)),!h&&typeof t.aborted=="boolean"&&t.on("aborted",I),t.on("end",w),t.on("finish",g),e.error!==!1&&t.on("error",E),t.on("close",I),S?Nt.nextTick(I):a!=null&&a.errorEmitted||u!=null&&u.errorEmitted?h||Nt.nextTick(C):(!o&&(!h||kf(t))&&(d||Lf(t)===!1)||!s&&(!h||Lf(t))&&(y||kf(t)===!1)||u&&t.req&&t.aborted)&&Nt.nextTick(C);let U=()=>{r=xs,t.removeListener("aborted",I),t.removeListener("complete",g),t.removeListener("abort",I),t.removeListener("request",R),t.req&&t.req.removeListener("finish",g),t.removeListener("end",c),t.removeListener("close",c),t.removeListener("finish",g),t.removeListener("end",w),t.removeListener("error",E),t.removeListener("close",I);};if(e.signal&&!S){let N=()=>{let W=r;U(),W.call(t,new Df(void 0,{cause:e.signal.reason}));};if(e.signal.aborted)Nt.nextTick(N);else {let W=r;r=ks((...K)=>{e.signal.removeEventListener("abort",N),W.apply(t,K);}),e.signal.addEventListener("abort",N);}}return U}function Pb(t,e,r){let i=!1,n=xs;if(e.signal)if(n=()=>{i=!0,r.call(t,new Df(void 0,{cause:e.signal.reason}));},e.signal.aborted)Nt.nextTick(n);else {let s=r;r=ks((...a)=>{e.signal.removeEventListener("abort",n),s.apply(t,a);}),e.signal.addEventListener("abort",n);}let o=(...s)=>{i||Nt.nextTick(()=>r.apply(t,s));};return Eb(t[Cb].promise,o,o),xs}function Ob(t,e){var r;let i=!1;return e===null&&(e=Os),(r=e)!==null&&r!==void 0&&r.cleanup&&(mb(e.cleanup,"cleanup"),i=e.cleanup),new vb((n,o)=>{let s=jf(t,e,a=>{i&&s(),a?o(a):n();});})}Ms.exports=jf;Ms.exports.finished=Ob;});var tr=M((rT,Gf)=>{v();m();_();var rt=Ut(),{aggregateTwoErrors:kb,codes:{ERR_MULTIPLE_CALLBACK:xb},AbortError:Mb}=Se(),{Symbol:$f}=ce(),{kDestroyed:Lb,isDestroyed:Ub,isFinished:Nb,isServerRequest:qb}=tt(),Hf=$f("kDestroy"),Ls=$f("kConstruct");function Vf(t,e,r){t&&(t.stack,e&&!e.errored&&(e.errored=t),r&&!r.errored&&(r.errored=t));}function Db(t,e){let r=this._readableState,i=this._writableState,n=i||r;return i!=null&&i.destroyed||r!=null&&r.destroyed?(typeof e=="function"&&e(),this):(Vf(t,i,r),i&&(i.destroyed=!0),r&&(r.destroyed=!0),n.constructed?Ff(this,t,e):this.once(Hf,function(o){Ff(this,kb(o,t),e);}),this)}function Ff(t,e,r){let i=!1;function n(o){if(i)return;i=!0;let s=t._readableState,a=t._writableState;Vf(o,a,s),a&&(a.closed=!0),s&&(s.closed=!0),typeof r=="function"&&r(o),o?rt.nextTick(jb,t,o):rt.nextTick(zf,t);}try{t._destroy(e||null,n);}catch(o){n(o);}}function jb(t,e){Us(t,e),zf(t);}function zf(t){let e=t._readableState,r=t._writableState;r&&(r.closeEmitted=!0),e&&(e.closeEmitted=!0),(r!=null&&r.emitClose||e!=null&&e.emitClose)&&t.emit("close");}function Us(t,e){let r=t._readableState,i=t._writableState;i!=null&&i.errorEmitted||r!=null&&r.errorEmitted||(i&&(i.errorEmitted=!0),r&&(r.errorEmitted=!0),t.emit("error",e));}function Fb(){let t=this._readableState,e=this._writableState;t&&(t.constructed=!0,t.closed=!1,t.closeEmitted=!1,t.destroyed=!1,t.errored=null,t.errorEmitted=!1,t.reading=!1,t.ended=t.readable===!1,t.endEmitted=t.readable===!1),e&&(e.constructed=!0,e.destroyed=!1,e.closed=!1,e.closeEmitted=!1,e.errored=null,e.errorEmitted=!1,e.finalCalled=!1,e.prefinished=!1,e.ended=e.writable===!1,e.ending=e.writable===!1,e.finished=e.writable===!1);}function Ns(t,e,r){let i=t._readableState,n=t._writableState;if(n!=null&&n.destroyed||i!=null&&i.destroyed)return this;i!=null&&i.autoDestroy||n!=null&&n.autoDestroy?t.destroy(e):e&&(e.stack,n&&!n.errored&&(n.errored=e),i&&!i.errored&&(i.errored=e),r?rt.nextTick(Us,t,e):Us(t,e));}function Wb(t,e){if(typeof t._construct!="function")return;let r=t._readableState,i=t._writableState;r&&(r.constructed=!1),i&&(i.constructed=!1),t.once(Ls,e),!(t.listenerCount(Ls)>1)&&rt.nextTick($b,t);}function $b(t){let e=!1;function r(i){if(e){Ns(t,i??new xb);return}e=!0;let n=t._readableState,o=t._writableState,s=o||n;n&&(n.constructed=!0),o&&(o.constructed=!0),s.destroyed?t.emit(Hf,i):i?Ns(t,i,!0):rt.nextTick(Hb,t);}try{t._construct(i=>{rt.nextTick(r,i);});}catch(i){rt.nextTick(r,i);}}function Hb(t){t.emit(Ls);}function Wf(t){return t?.setHeader&&typeof t.abort=="function"}function Kf(t){t.emit("close");}function Vb(t,e){t.emit("error",e),rt.nextTick(Kf,t);}function zb(t,e){!t||Ub(t)||(!e&&!Nb(t)&&(e=new Mb),qb(t)?(t.socket=null,t.destroy(e)):Wf(t)?t.abort():Wf(t.req)?t.req.abort():typeof t.destroy=="function"?t.destroy(e):typeof t.close=="function"?t.close():e?rt.nextTick(Vb,t,e):rt.nextTick(Kf,t),t.destroyed||(t[Lb]=!0));}Gf.exports={construct:Wb,destroyer:zb,destroy:Db,undestroy:Fb,errorOrDestroy:Ns};});function Y(){Y.init.call(this);}function Xi(t){if(typeof t!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t)}function nc(t){return t._maxListeners===void 0?Y.defaultMaxListeners:t._maxListeners}function Xf(t,e,r,i){var n,o,s,a;if(Xi(r),(o=t._events)===void 0?(o=t._events=Object.create(null),t._eventsCount=0):(o.newListener!==void 0&&(t.emit("newListener",e,r.listener?r.listener:r),o=t._events),s=o[e]),s===void 0)s=o[e]=r,++t._eventsCount;else if(typeof s=="function"?s=o[e]=i?[r,s]:[s,r]:i?s.unshift(r):s.push(r),(n=nc(t))>0&&s.length>n&&!s.warned){s.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(e)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=t,u.type=e,u.count=s.length,a=u,console&&console.warn&&console.warn(a);}return t}function Kb(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Zf(t,e,r){var i={fired:!1,wrapFn:void 0,target:t,type:e,listener:r},n=Kb.bind(i);return n.listener=r,i.wrapFn=n,n}function ec(t,e,r){var i=t._events;if(i===void 0)return [];var n=i[e];return n===void 0?[]:typeof n=="function"?r?[n.listener||n]:[n]:r?function(o){for(var s=new Array(o.length),a=0;a<s.length;++a)s[a]=o[a].listener||o[a];return s}(n):sc(n,n.length)}function tc(t){var e=this._events;if(e!==void 0){var r=e[t];if(typeof r=="function")return 1;if(r!==void 0)return r.length}return 0}function sc(t,e){for(var r=new Array(e),i=0;i<e;++i)r[i]=t[i];return r}var rc,ic,Ur,Qf,Yf,Jf,Be,qs=we(()=>{v();m();_();Ur=typeof Reflect=="object"?Reflect:null,Qf=Ur&&typeof Ur.apply=="function"?Ur.apply:function(t,e,r){return Function.prototype.apply.call(t,e,r)};ic=Ur&&typeof Ur.ownKeys=="function"?Ur.ownKeys:Object.getOwnPropertySymbols?function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.getOwnPropertyNames(t)};Yf=Number.isNaN||function(t){return t!=t};rc=Y,Y.EventEmitter=Y,Y.prototype._events=void 0,Y.prototype._eventsCount=0,Y.prototype._maxListeners=void 0;Jf=10;Object.defineProperty(Y,"defaultMaxListeners",{enumerable:!0,get:function(){return Jf},set:function(t){if(typeof t!="number"||t<0||Yf(t))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+t+".");Jf=t;}}),Y.init=function(){this._events!==void 0&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0;},Y.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||Yf(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this},Y.prototype.getMaxListeners=function(){return nc(this)},Y.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e.push(arguments[r]);var i=t==="error",n=this._events;if(n!==void 0)i=i&&n.error===void 0;else if(!i)return !1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var a=n[t];if(a===void 0)return !1;if(typeof a=="function")Qf(a,this,e);else {var u=a.length,c=sc(a,u);for(r=0;r<u;++r)Qf(c[r],this,e);}return !0},Y.prototype.addListener=function(t,e){return Xf(this,t,e,!1)},Y.prototype.on=Y.prototype.addListener,Y.prototype.prependListener=function(t,e){return Xf(this,t,e,!0)},Y.prototype.once=function(t,e){return Xi(e),this.on(t,Zf(this,t,e)),this},Y.prototype.prependOnceListener=function(t,e){return Xi(e),this.prependListener(t,Zf(this,t,e)),this},Y.prototype.removeListener=function(t,e){var r,i,n,o,s;if(Xi(e),(i=this._events)===void 0)return this;if((r=i[t])===void 0)return this;if(r===e||r.listener===e)--this._eventsCount==0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,r.listener||e));else if(typeof r!="function"){for(n=-1,o=r.length-1;o>=0;o--)if(r[o]===e||r[o].listener===e){s=r[o].listener,n=o;break}if(n<0)return this;n===0?r.shift():function(a,u){for(;u+1<a.length;u++)a[u]=a[u+1];a.pop();}(r,n),r.length===1&&(i[t]=r[0]),i.removeListener!==void 0&&this.emit("removeListener",t,s||e);}return this},Y.prototype.off=Y.prototype.removeListener,Y.prototype.removeAllListeners=function(t){var e,r,i;if((r=this._events)===void 0)return this;if(r.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):r[t]!==void 0&&(--this._eventsCount==0?this._events=Object.create(null):delete r[t]),this;if(arguments.length===0){var n,o=Object.keys(r);for(i=0;i<o.length;++i)(n=o[i])!=="removeListener"&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(typeof(e=r[t])=="function")this.removeListener(t,e);else if(e!==void 0)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this},Y.prototype.listeners=function(t){return ec(this,t,!0)},Y.prototype.rawListeners=function(t){return ec(this,t,!1)},Y.listenerCount=function(t,e){return typeof t.listenerCount=="function"?t.listenerCount(e):tc.call(t,e)},Y.prototype.listenerCount=tc,Y.prototype.eventNames=function(){return this._eventsCount>0?ic(this._events):[]};Be=rc;Be.EventEmitter;Be.defaultMaxListeners;Be.init;Be.listenerCount;Be.EventEmitter;Be.defaultMaxListeners;Be.init;Be.listenerCount;});var rr={};Qt(rr,{EventEmitter:()=>Gb,default:()=>Be,defaultMaxListeners:()=>Qb,init:()=>Yb,listenerCount:()=>Jb,on:()=>Xb,once:()=>Zb});var Gb,Qb,Yb,Jb,Xb,Zb,ir=we(()=>{v();m();_();qs();qs();Be.once=function(t,e){return new Promise((r,i)=>{function n(...s){o!==void 0&&t.removeListener("error",o),r(s);}let o;e!=="error"&&(o=s=>{t.removeListener(name,n),i(s);},t.once("error",o)),t.once(e,n);})};Be.on=function(t,e){let r=[],i=[],n=null,o=!1,s={async next(){let c=r.shift();if(c)return createIterResult(c,!1);if(n){let h=Promise.reject(n);return n=null,h}return o?createIterResult(void 0,!0):new Promise((h,d)=>i.push({resolve:h,reject:d}))},async return(){t.removeListener(e,a),t.removeListener("error",u),o=!0;for(let c of i)c.resolve(createIterResult(void 0,!0));return createIterResult(void 0,!0)},throw(c){n=c,t.removeListener(e,a),t.removeListener("error",u);},[Symbol.asyncIterator](){return this}};return t.on(e,a),t.on("error",u),s;function a(...c){let h=i.shift();h?h.resolve(createIterResult(c,!1)):r.push(c);}function u(c){o=!0;let h=i.shift();h?h.reject(c):n=c,s.return();}};({EventEmitter:Gb,defaultMaxListeners:Qb,init:Yb,listenerCount:Jb,on:Xb,once:Zb}=Be);});var tn=M((xT,ac)=>{v();m();_();var{ArrayIsArray:ew,ObjectSetPrototypeOf:oc}=ce(),{EventEmitter:Zi}=(ir(),X(rr));function en(t){Zi.call(this,t);}oc(en.prototype,Zi.prototype);oc(en,Zi);en.prototype.pipe=function(t,e){let r=this;function i(h){t.writable&&t.write(h)===!1&&r.pause&&r.pause();}r.on("data",i);function n(){r.readable&&r.resume&&r.resume();}t.on("drain",n),!t._isStdio&&(!e||e.end!==!1)&&(r.on("end",s),r.on("close",a));let o=!1;function s(){o||(o=!0,t.end());}function a(){o||(o=!0,typeof t.destroy=="function"&&t.destroy());}function u(h){c(),Zi.listenerCount(this,"error")===0&&this.emit("error",h);}Ds(r,"error",u),Ds(t,"error",u);function c(){r.removeListener("data",i),t.removeListener("drain",n),r.removeListener("end",s),r.removeListener("close",a),r.removeListener("error",u),t.removeListener("error",u),r.removeListener("end",c),r.removeListener("close",c),t.removeListener("close",c);}return r.on("end",c),r.on("close",c),t.on("close",c),t.emit("pipe",r),t};function Ds(t,e,r){if(typeof t.prependListener=="function")return t.prependListener(e,r);!t._events||!t._events[e]?t.on(e,r):ew(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]];}ac.exports={Stream:en,prependListener:Ds};});var ci=M(($T,rn)=>{v();m();_();var{AbortError:lc,codes:tw}=Se(),{isNodeStream:uc,isWebStream:rw,kControllerErrorFunction:iw}=tt(),nw=mt(),{ERR_INVALID_ARG_TYPE:fc}=tw,sw=(t,e)=>{if(typeof t!="object"||!("aborted"in t))throw new fc(e,"AbortSignal",t)};rn.exports.addAbortSignal=function(e,r){if(sw(e,"signal"),!uc(r)&&!rw(r))throw new fc("stream",["ReadableStream","WritableStream","Stream"],r);return rn.exports.addAbortSignalNoValidate(e,r)};rn.exports.addAbortSignalNoValidate=function(t,e){if(typeof t!="object"||!("aborted"in t))return e;let r=uc(e)?()=>{e.destroy(new lc(void 0,{cause:t.reason}));}:()=>{e[iw](new lc(void 0,{cause:t.reason}));};return t.aborted?r():(t.addEventListener("abort",r),nw(e,()=>t.removeEventListener("abort",r))),e};});var dc=M((e2,hc)=>{v();m();_();var{StringPrototypeSlice:cc,SymbolIterator:ow,TypedArrayPrototypeSet:nn,Uint8Array:aw}=ce(),{Buffer:js}=(ye(),X(_e)),{inspect:lw}=Je();hc.exports=class{constructor(){this.head=null,this.tail=null,this.length=0;}push(e){let r={data:e,next:null};this.length>0?this.tail.next=r:this.head=r,this.tail=r,++this.length;}unshift(e){let r={data:e,next:this.head};this.length===0&&(this.tail=r),this.head=r,++this.length;}shift(){if(this.length===0)return;let e=this.head.data;return this.length===1?this.head=this.tail=null:this.head=this.head.next,--this.length,e}clear(){this.head=this.tail=null,this.length=0;}join(e){if(this.length===0)return "";let r=this.head,i=""+r.data;for(;(r=r.next)!==null;)i+=e+r.data;return i}concat(e){if(this.length===0)return js.alloc(0);let r=js.allocUnsafe(e>>>0),i=this.head,n=0;for(;i;)nn(r,i.data,n),n+=i.data.length,i=i.next;return r}consume(e,r){let i=this.head.data;if(e<i.length){let n=i.slice(0,e);return this.head.data=i.slice(e),n}return e===i.length?this.shift():r?this._getString(e):this._getBuffer(e)}first(){return this.head.data}*[ow](){for(let e=this.head;e;e=e.next)yield e.data;}_getString(e){let r="",i=this.head,n=0;do{let o=i.data;if(e>o.length)r+=o,e-=o.length;else {e===o.length?(r+=o,++n,i.next?this.head=i.next:this.head=this.tail=null):(r+=cc(o,0,e),this.head=i,i.data=cc(o,e));break}++n;}while((i=i.next)!==null);return this.length-=n,r}_getBuffer(e){let r=js.allocUnsafe(e),i=e,n=this.head,o=0;do{let s=n.data;if(e>s.length)nn(r,s,i-e),e-=s.length;else {e===s.length?(nn(r,s,i-e),++o,n.next?this.head=n.next:this.head=this.tail=null):(nn(r,new aw(s.buffer,s.byteOffset,e),i-e),this.head=n,n.data=s.slice(e));break}++o;}while((n=n.next)!==null);return this.length-=o,r}[Symbol.for("nodejs.util.inspect.custom")](e,r){return lw(this,{...r,depth:0,customInspect:!1})}};});var sn=M((f2,gc)=>{v();m();_();var{MathFloor:uw,NumberIsInteger:fw}=ce(),{ERR_INVALID_ARG_VALUE:cw}=Se().codes;function hw(t,e,r){return t.highWaterMark!=null?t.highWaterMark:e?t[r]:null}function pc(t){return t?16:16*1024}function dw(t,e,r,i){let n=hw(e,i,r);if(n!=null){if(!fw(n)||n<0){let o=i?`options.${r}`:"options.highWaterMark";throw new cw(o,n)}return uw(n)}return pc(t.objectMode)}gc.exports={getHighWaterMark:dw,getDefaultHighWaterMark:pc};});function wc(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return r===-1&&(r=e),[r,r===e?0:4-r%4]}function pw(t,e,r){for(var i,n,o=[],s=e;s<r;s+=3)i=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),o.push($e[(n=i)>>18&63]+$e[n>>12&63]+$e[n>>6&63]+$e[63&n]);return o.join("")}function vt(t){if(t>2147483647)throw new RangeError('The value "'+t+'" is invalid for option "size"');var e=new Uint8Array(t);return Object.setPrototypeOf(e,k.prototype),e}function k(t,e,r){if(typeof t=="number"){if(typeof e=="string")throw new TypeError('The "string" argument must be of type string. Received type number');return Hs(t)}return Cc(t,e,r)}function Cc(t,e,r){if(typeof t=="string")return function(o,s){if(typeof s=="string"&&s!==""||(s="utf8"),!k.isEncoding(s))throw new TypeError("Unknown encoding: "+s);var a=0|Pc(o,s),u=vt(a),c=u.write(o,s);return c!==a&&(u=u.slice(0,c)),u}(t,e);if(ArrayBuffer.isView(t))return Fs(t);if(t==null)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Et(t,ArrayBuffer)||t&&Et(t.buffer,ArrayBuffer)||typeof SharedArrayBuffer<"u"&&(Et(t,SharedArrayBuffer)||t&&Et(t.buffer,SharedArrayBuffer)))return mc(t,e,r);if(typeof t=="number")throw new TypeError('The "value" argument must not be of type number. Received type number');var i=t.valueOf&&t.valueOf();if(i!=null&&i!==t)return k.from(i,e,r);var n=function(o){if(k.isBuffer(o)){var s=0|Ks(o.length),a=vt(s);return a.length===0||o.copy(a,0,0,s),a}if(o.length!==void 0)return typeof o.length!="number"||Gs(o.length)?vt(0):Fs(o);if(o.type==="Buffer"&&Array.isArray(o.data))return Fs(o.data)}(t);if(n)return n;if(typeof Symbol<"u"&&Symbol.toPrimitive!=null&&typeof t[Symbol.toPrimitive]=="function")return k.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function Bc(t){if(typeof t!="number")throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function Hs(t){return Bc(t),vt(t<0?0:0|Ks(t))}function Fs(t){for(var e=t.length<0?0:0|Ks(t.length),r=vt(e),i=0;i<e;i+=1)r[i]=255&t[i];return r}function mc(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');var i;return i=e===void 0&&r===void 0?new Uint8Array(t):r===void 0?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(i,k.prototype),i}function Ks(t){if(t>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647 .toString(16)+" bytes");return 0|t}function Pc(t,e){if(k.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Et(t,ArrayBuffer))return t.byteLength;if(typeof t!="string")throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);var r=t.length,i=arguments.length>2&&arguments[2]===!0;if(!i&&r===0)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return Vs(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Mc(t).length;default:if(n)return i?-1:Vs(t).length;e=(""+e).toLowerCase(),n=!0;}}function yw(t,e,r){var i=!1;if((e===void 0||e<0)&&(e=0),e>this.length||((r===void 0||r>this.length)&&(r=this.length),r<=0)||(r>>>=0)<=(e>>>=0))return "";for(t||(t="utf8");;)switch(t){case"hex":return Iw(this,e,r);case"utf8":case"utf-8":return kc(this,e,r);case"ascii":return Sw(this,e,r);case"latin1":case"binary":return Aw(this,e,r);case"base64":return Ew(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Tw(this,e,r);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0;}}function sr(t,e,r){var i=t[e];t[e]=t[r],t[r]=i;}function vc(t,e,r,i,n){if(t.length===0)return -1;if(typeof r=="string"?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),Gs(r=+r)&&(r=n?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(n)return -1;r=t.length-1;}else if(r<0){if(!n)return -1;r=0;}if(typeof e=="string"&&(e=k.from(e,i)),k.isBuffer(e))return e.length===0?-1:Ec(t,e,r,i,n);if(typeof e=="number")return e&=255,typeof Uint8Array.prototype.indexOf=="function"?n?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):Ec(t,[e],r,i,n);throw new TypeError("val must be string, number or Buffer")}function Ec(t,e,r,i,n){var o,s=1,a=t.length,u=e.length;if(i!==void 0&&((i=String(i).toLowerCase())==="ucs2"||i==="ucs-2"||i==="utf16le"||i==="utf-16le")){if(t.length<2||e.length<2)return -1;s=2,a/=2,u/=2,r/=2;}function c(y,w){return s===1?y[w]:y.readUInt16BE(w*s)}if(n){var h=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,h===-1?0:o-h)){if(h===-1&&(h=o),o-h+1===u)return h*s}else h!==-1&&(o-=o-h),h=-1;}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var d=!0,g=0;g<u;g++)if(c(t,o+g)!==c(e,g)){d=!1;break}if(d)return o}return -1}function bw(t,e,r,i){r=Number(r)||0;var n=t.length-r;i?(i=Number(i))>n&&(i=n):i=n;var o=e.length;i>o/2&&(i=o/2);for(var s=0;s<i;++s){var a=parseInt(e.substr(2*s,2),16);if(Gs(a))return s;t[r+s]=a;}return s}function ww(t,e,r,i){return un(Vs(e,t.length-r),t,r,i)}function Oc(t,e,r,i){return un(function(n){for(var o=[],s=0;s<n.length;++s)o.push(255&n.charCodeAt(s));return o}(e),t,r,i)}function _w(t,e,r,i){return Oc(t,e,r,i)}function mw(t,e,r,i){return un(Mc(e),t,r,i)}function vw(t,e,r,i){return un(function(n,o){for(var s,a,u,c=[],h=0;h<n.length&&!((o-=2)<0);++h)s=n.charCodeAt(h),a=s>>8,u=s%256,c.push(u),c.push(a);return c}(e,t.length-r),t,r,i)}function Ew(t,e,r){return e===0&&r===t.length?$s.fromByteArray(t):$s.fromByteArray(t.slice(e,r))}function kc(t,e,r){r=Math.min(t.length,r);for(var i=[],n=e;n<r;){var o,s,a,u,c=t[n],h=null,d=c>239?4:c>223?3:c>191?2:1;if(n+d<=r)switch(d){case 1:c<128&&(h=c);break;case 2:(192&(o=t[n+1]))==128&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[n+1],s=t[n+2],(192&o)==128&&(192&s)==128&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[n+1],s=t[n+2],a=t[n+3],(192&o)==128&&(192&s)==128&&(192&a)==128&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u);}h===null?(h=65533,d=1):h>65535&&(h-=65536,i.push(h>>>10&1023|55296),h=56320|1023&h),i.push(h),n+=d;}return function(g){var y=g.length;if(y<=4096)return String.fromCharCode.apply(String,g);for(var w="",E=0;E<y;)w+=String.fromCharCode.apply(String,g.slice(E,E+=4096));return w}(i)}function Sw(t,e,r){var i="";r=Math.min(t.length,r);for(var n=e;n<r;++n)i+=String.fromCharCode(127&t[n]);return i}function Aw(t,e,r){var i="";r=Math.min(t.length,r);for(var n=e;n<r;++n)i+=String.fromCharCode(t[n]);return i}function Iw(t,e,r){var i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var n="",o=e;o<r;++o)n+=Cw[t[o]];return n}function Tw(t,e,r){for(var i=t.slice(e,r),n="",o=0;o<i.length;o+=2)n+=String.fromCharCode(i[o]+256*i[o+1]);return n}function be(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function Pe(t,e,r,i,n,o){if(!k.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<o)throw new RangeError('"value" argument is out of bounds');if(r+i>t.length)throw new RangeError("Index out of range")}function xc(t,e,r,i,n,o){if(r+i>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Sc(t,e,r,i,n){return e=+e,r>>>=0,n||xc(t,0,r,4),Nr.write(t,e,r,i,23,4),r+4}function Ac(t,e,r,i,n){return e=+e,r>>>=0,n||xc(t,0,r,8),Nr.write(t,e,r,i,52,8),r+8}function Vs(t,e){var r;e=e||1/0;for(var i=t.length,n=null,o=[],s=0;s<i;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!n){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===i){(e-=3)>-1&&o.push(239,191,189);continue}n=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320);}else n&&(e-=3)>-1&&o.push(239,191,189);if(n=null,r<128){if((e-=1)<0)break;o.push(r);}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128);}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128);}else {if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128);}}return o}function Mc(t){return $s.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Rw,"")).length<2)return "";for(;e.length%4!=0;)e+="=";return e}(t))}function un(t,e,r,i){for(var n=0;n<i&&!(n+r>=e.length||n>=t.length);++n)e[n+r]=t[n];return n}function Et(t,e){return t instanceof e||t!=null&&t.constructor!=null&&t.constructor.name!=null&&t.constructor.name===e.name}function Gs(t){return t!=t}function Ic(t,e){for(var r in t)e[r]=t[r];}function or(t,e,r){return it(t,e,r)}function hi(t){var e;switch(this.encoding=function(r){var i=function(n){if(!n)return "utf8";for(var o;;)switch(n){case"utf8":case"utf-8":return "utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return "utf16le";case"latin1":case"binary":return "latin1";case"base64":case"ascii":case"hex":return n;default:if(o)return;n=(""+n).toLowerCase(),o=!0;}}(r);if(typeof i!="string"&&(zs.isEncoding===Tc||!Tc(r)))throw new Error("Unknown encoding: "+r);return i||r}(t),this.encoding){case"utf16le":this.text=Ow,this.end=kw,e=4;break;case"utf8":this.fillLast=Pw,e=4;break;case"base64":this.text=xw,this.end=Mw,e=3;break;default:return this.write=Lw,this.end=Uw,void 0}this.lastNeed=0,this.lastTotal=0,this.lastChar=zs.allocUnsafe(e);}function Ws(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function Pw(t){var e=this.lastTotal-this.lastNeed,r=function(i,n,o){if((192&n[0])!=128)return i.lastNeed=0,"\uFFFD";if(i.lastNeed>1&&n.length>1){if((192&n[1])!=128)return i.lastNeed=1,"\uFFFD";if(i.lastNeed>2&&n.length>2&&(192&n[2])!=128)return i.lastNeed=2,"\uFFFD"}}(this,t);return r!==void 0?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),this.lastNeed-=t.length,void 0)}function Ow(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var i=r.charCodeAt(r.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function kw(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function xw(t,e){var r=(t.length-e)%3;return r===0?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,r===1?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function Mw(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function Lw(t){return t.toString(this.encoding)}function Uw(t){return t&&t.length?this.write(t):""}var Rc,$e,ke,yc,on,nr,bc,gw,St,$s,Nr,_c,Rw,Cw,an,ln,it,Bw,ar,zs,Tc,Qs=we(()=>{v();m();_();for(Rc={byteLength:function(t){var e=wc(t),r=e[0],i=e[1];return 3*(r+i)/4-i},toByteArray:function(t){var e,r,i=wc(t),n=i[0],o=i[1],s=new yc(function(c,h,d){return 3*(h+d)/4-d}(0,n,o)),a=0,u=o>0?n-4:n;for(r=0;r<u;r+=4)e=ke[t.charCodeAt(r)]<<18|ke[t.charCodeAt(r+1)]<<12|ke[t.charCodeAt(r+2)]<<6|ke[t.charCodeAt(r+3)],s[a++]=e>>16&255,s[a++]=e>>8&255,s[a++]=255&e;return o===2&&(e=ke[t.charCodeAt(r)]<<2|ke[t.charCodeAt(r+1)]>>4,s[a++]=255&e),o===1&&(e=ke[t.charCodeAt(r)]<<10|ke[t.charCodeAt(r+1)]<<4|ke[t.charCodeAt(r+2)]>>2,s[a++]=e>>8&255,s[a++]=255&e),s},fromByteArray:function(t){for(var e,r=t.length,i=r%3,n=[],o=0,s=r-i;o<s;o+=16383)n.push(pw(t,o,o+16383>s?s:o+16383));return i===1?(e=t[r-1],n.push($e[e>>2]+$e[e<<4&63]+"==")):i===2&&(e=(t[r-2]<<8)+t[r-1],n.push($e[e>>10]+$e[e>>4&63]+$e[e<<2&63]+"=")),n.join("")}},$e=[],ke=[],yc=typeof Uint8Array<"u"?Uint8Array:Array,on="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",nr=0,bc=on.length;nr<bc;++nr)$e[nr]=on[nr],ke[on.charCodeAt(nr)]=nr;ke["-".charCodeAt(0)]=62,ke["_".charCodeAt(0)]=63;gw={read:function(t,e,r,i,n){var o,s,a=8*n-i-1,u=(1<<a)-1,c=u>>1,h=-7,d=r?n-1:0,g=r?-1:1,y=t[e+d];for(d+=g,o=y&(1<<-h)-1,y>>=-h,h+=a;h>0;o=256*o+t[e+d],d+=g,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=i;h>0;s=256*s+t[e+d],d+=g,h-=8);if(o===0)o=1-c;else {if(o===u)return s?NaN:1/0*(y?-1:1);s+=Math.pow(2,i),o-=c;}return (y?-1:1)*s*Math.pow(2,o-i)},write:function(t,e,r,i,n,o){var s,a,u,c=8*o-n-1,h=(1<<c)-1,d=h>>1,g=n===23?Math.pow(2,-24)-Math.pow(2,-77):0,y=i?0:o-1,w=i?1:-1,E=e<0||e===0&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+d>=1?g/u:g*Math.pow(2,1-d))*u>=2&&(s++,u/=2),s+d>=h?(a=0,s=h):s+d>=1?(a=(e*u-1)*Math.pow(2,n),s+=d):(a=e*Math.pow(2,d-1)*Math.pow(2,n),s=0));n>=8;t[r+y]=255&a,y+=w,a/=256,n-=8);for(s=s<<n|a,c+=n;c>0;t[r+y]=255&s,y+=w,s/=256,c-=8);t[r+y-w]|=128*E;}},St={},$s=Rc,Nr=gw,_c=typeof Symbol=="function"&&typeof Symbol.for=="function"?Symbol.for("nodejs.util.inspect.custom"):null;St.Buffer=k,St.SlowBuffer=function(t){return +t!=t&&(t=0),k.alloc(+t)},St.INSPECT_MAX_BYTES=50;St.kMaxLength=2147483647,k.TYPED_ARRAY_SUPPORT=function(){try{var t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),t.foo()===42}catch{return !1}}(),k.TYPED_ARRAY_SUPPORT||typeof console>"u"||typeof console.error!="function"||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(k.prototype,"parent",{enumerable:!0,get:function(){if(k.isBuffer(this))return this.buffer}}),Object.defineProperty(k.prototype,"offset",{enumerable:!0,get:function(){if(k.isBuffer(this))return this.byteOffset}}),k.poolSize=8192,k.from=function(t,e,r){return Cc(t,e,r)},Object.setPrototypeOf(k.prototype,Uint8Array.prototype),Object.setPrototypeOf(k,Uint8Array),k.alloc=function(t,e,r){return function(i,n,o){return Bc(i),i<=0?vt(i):n!==void 0?typeof o=="string"?vt(i).fill(n,o):vt(i).fill(n):vt(i)}(t,e,r)},k.allocUnsafe=function(t){return Hs(t)},k.allocUnsafeSlow=function(t){return Hs(t)},k.isBuffer=function(t){return t!=null&&t._isBuffer===!0&&t!==k.prototype},k.compare=function(t,e){if(Et(t,Uint8Array)&&(t=k.from(t,t.offset,t.byteLength)),Et(e,Uint8Array)&&(e=k.from(e,e.offset,e.byteLength)),!k.isBuffer(t)||!k.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;for(var r=t.length,i=e.length,n=0,o=Math.min(r,i);n<o;++n)if(t[n]!==e[n]){r=t[n],i=e[n];break}return r<i?-1:i<r?1:0},k.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},k.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(t.length===0)return k.alloc(0);var r;if(e===void 0)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var i=k.allocUnsafe(e),n=0;for(r=0;r<t.length;++r){var o=t[r];if(Et(o,Uint8Array)&&(o=k.from(o)),!k.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(i,n),n+=o.length;}return i},k.byteLength=Pc,k.prototype._isBuffer=!0,k.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)sr(this,e,e+1);return this},k.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)sr(this,e,e+3),sr(this,e+1,e+2);return this},k.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)sr(this,e,e+7),sr(this,e+1,e+6),sr(this,e+2,e+5),sr(this,e+3,e+4);return this},k.prototype.toString=function(){var t=this.length;return t===0?"":arguments.length===0?kc(this,0,t):yw.apply(this,arguments)},k.prototype.toLocaleString=k.prototype.toString,k.prototype.equals=function(t){if(!k.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||k.compare(this,t)===0},k.prototype.inspect=function(){var t="",e=St.INSPECT_MAX_BYTES;return t=this.toString("hex",0,e).replace(/(.{2})/g,"$1 ").trim(),this.length>e&&(t+=" ... "),"<Buffer "+t+">"},_c&&(k.prototype[_c]=k.prototype.inspect),k.prototype.compare=function(t,e,r,i,n){if(Et(t,Uint8Array)&&(t=k.from(t,t.offset,t.byteLength)),!k.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(e===void 0&&(e=0),r===void 0&&(r=t?t.length:0),i===void 0&&(i=0),n===void 0&&(n=this.length),e<0||r>t.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&e>=r)return 0;if(i>=n)return -1;if(e>=r)return 1;if(this===t)return 0;for(var o=(n>>>=0)-(i>>>=0),s=(r>>>=0)-(e>>>=0),a=Math.min(o,s),u=this.slice(i,n),c=t.slice(e,r),h=0;h<a;++h)if(u[h]!==c[h]){o=u[h],s=c[h];break}return o<s?-1:s<o?1:0},k.prototype.includes=function(t,e,r){return this.indexOf(t,e,r)!==-1},k.prototype.indexOf=function(t,e,r){return vc(this,t,e,r,!0)},k.prototype.lastIndexOf=function(t,e,r){return vc(this,t,e,r,!1)},k.prototype.write=function(t,e,r,i){if(e===void 0)i="utf8",r=this.length,e=0;else if(r===void 0&&typeof e=="string")i=e,r=this.length,e=0;else {if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,i===void 0&&(i="utf8")):(i=r,r=void 0);}var n=this.length-e;if((r===void 0||r>n)&&(r=n),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return bw(this,t,e,r);case"utf8":case"utf-8":return ww(this,t,e,r);case"ascii":return Oc(this,t,e,r);case"latin1":case"binary":return _w(this,t,e,r);case"base64":return mw(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return vw(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0;}},k.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};k.prototype.slice=function(t,e){var r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=e===void 0?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);var i=this.subarray(t,e);return Object.setPrototypeOf(i,k.prototype),i},k.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||be(t,e,this.length);for(var i=this[t],n=1,o=0;++o<e&&(n*=256);)i+=this[t+o]*n;return i},k.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||be(t,e,this.length);for(var i=this[t+--e],n=1;e>0&&(n*=256);)i+=this[t+--e]*n;return i},k.prototype.readUInt8=function(t,e){return t>>>=0,e||be(t,1,this.length),this[t]},k.prototype.readUInt16LE=function(t,e){return t>>>=0,e||be(t,2,this.length),this[t]|this[t+1]<<8},k.prototype.readUInt16BE=function(t,e){return t>>>=0,e||be(t,2,this.length),this[t]<<8|this[t+1]},k.prototype.readUInt32LE=function(t,e){return t>>>=0,e||be(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},k.prototype.readUInt32BE=function(t,e){return t>>>=0,e||be(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},k.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||be(t,e,this.length);for(var i=this[t],n=1,o=0;++o<e&&(n*=256);)i+=this[t+o]*n;return i>=(n*=128)&&(i-=Math.pow(2,8*e)),i},k.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||be(t,e,this.length);for(var i=e,n=1,o=this[t+--i];i>0&&(n*=256);)o+=this[t+--i]*n;return o>=(n*=128)&&(o-=Math.pow(2,8*e)),o},k.prototype.readInt8=function(t,e){return t>>>=0,e||be(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},k.prototype.readInt16LE=function(t,e){t>>>=0,e||be(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},k.prototype.readInt16BE=function(t,e){t>>>=0,e||be(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},k.prototype.readInt32LE=function(t,e){return t>>>=0,e||be(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},k.prototype.readInt32BE=function(t,e){return t>>>=0,e||be(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},k.prototype.readFloatLE=function(t,e){return t>>>=0,e||be(t,4,this.length),Nr.read(this,t,!0,23,4)},k.prototype.readFloatBE=function(t,e){return t>>>=0,e||be(t,4,this.length),Nr.read(this,t,!1,23,4)},k.prototype.readDoubleLE=function(t,e){return t>>>=0,e||be(t,8,this.length),Nr.read(this,t,!0,52,8)},k.prototype.readDoubleBE=function(t,e){return t>>>=0,e||be(t,8,this.length),Nr.read(this,t,!1,52,8)},k.prototype.writeUIntLE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||Pe(this,t,e,r,Math.pow(2,8*r)-1,0);var n=1,o=0;for(this[e]=255&t;++o<r&&(n*=256);)this[e+o]=t/n&255;return e+r},k.prototype.writeUIntBE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||Pe(this,t,e,r,Math.pow(2,8*r)-1,0);var n=r-1,o=1;for(this[e+n]=255&t;--n>=0&&(o*=256);)this[e+n]=t/o&255;return e+r},k.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,1,255,0),this[e]=255&t,e+1},k.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},k.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},k.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},k.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},k.prototype.writeIntLE=function(t,e,r,i){if(t=+t,e>>>=0,!i){var n=Math.pow(2,8*r-1);Pe(this,t,e,r,n-1,-n);}var o=0,s=1,a=0;for(this[e]=255&t;++o<r&&(s*=256);)t<0&&a===0&&this[e+o-1]!==0&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},k.prototype.writeIntBE=function(t,e,r,i){if(t=+t,e>>>=0,!i){var n=Math.pow(2,8*r-1);Pe(this,t,e,r,n-1,-n);}var o=r-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&a===0&&this[e+o+1]!==0&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+r},k.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},k.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},k.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},k.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},k.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||Pe(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},k.prototype.writeFloatLE=function(t,e,r){return Sc(this,t,e,!0,r)},k.prototype.writeFloatBE=function(t,e,r){return Sc(this,t,e,!1,r)},k.prototype.writeDoubleLE=function(t,e,r){return Ac(this,t,e,!0,r)},k.prototype.writeDoubleBE=function(t,e,r){return Ac(this,t,e,!1,r)},k.prototype.copy=function(t,e,r,i){if(!k.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),i||i===0||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<r&&(i=r),i===r||t.length===0||this.length===0)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-r&&(i=t.length-e+r);var n=i-r;if(this===t&&typeof Uint8Array.prototype.copyWithin=="function")this.copyWithin(e,r,i);else if(this===t&&r<e&&e<i)for(var o=n-1;o>=0;--o)t[o+e]=this[o+r];else Uint8Array.prototype.set.call(t,this.subarray(r,i),e);return n},k.prototype.fill=function(t,e,r,i){if(typeof t=="string"){if(typeof e=="string"?(i=e,e=0,r=this.length):typeof r=="string"&&(i=r,r=this.length),i!==void 0&&typeof i!="string")throw new TypeError("encoding must be a string");if(typeof i=="string"&&!k.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(t.length===1){var n=t.charCodeAt(0);(i==="utf8"&&n<128||i==="latin1")&&(t=n);}}else typeof t=="number"?t&=255:typeof t=="boolean"&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var o;if(e>>>=0,r=r===void 0?this.length:r>>>0,t||(t=0),typeof t=="number")for(o=e;o<r;++o)this[o]=t;else {var s=k.isBuffer(t)?t:k.from(t,i),a=s.length;if(a===0)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(o=0;o<r-e;++o)this[o+e]=s[o%a];}return this};Rw=/[^+/0-9A-Za-z-_]/g;Cw=function(){for(var t=new Array(256),e=0;e<16;++e)for(var r=16*e,i=0;i<16;++i)t[r+i]="0123456789abcdef"[e]+"0123456789abcdef"[i];return t}();St.Buffer;St.INSPECT_MAX_BYTES;St.kMaxLength;an={},ln=St,it=ln.Buffer;it.from&&it.alloc&&it.allocUnsafe&&it.allocUnsafeSlow?an=ln:(Ic(ln,an),an.Buffer=or),or.prototype=Object.create(it.prototype),Ic(it,or),or.from=function(t,e,r){if(typeof t=="number")throw new TypeError("Argument must not be a number");return it(t,e,r)},or.alloc=function(t,e,r){if(typeof t!="number")throw new TypeError("Argument must be a number");var i=it(t);return e!==void 0?typeof r=="string"?i.fill(e,r):i.fill(e):i.fill(0),i},or.allocUnsafe=function(t){if(typeof t!="number")throw new TypeError("Argument must be a number");return it(t)},or.allocUnsafeSlow=function(t){if(typeof t!="number")throw new TypeError("Argument must be a number");return ln.SlowBuffer(t)};Bw=an,ar={},zs=Bw.Buffer,Tc=zs.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return !0;default:return !1}};ar.StringDecoder=hi,hi.prototype.write=function(t){if(t.length===0)return "";var e,r;if(this.lastNeed){if((e=this.fillLast(t))===void 0)return "";r=this.lastNeed,this.lastNeed=0;}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},hi.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"\uFFFD":e},hi.prototype.text=function(t,e){var r=function(n,o,s){var a=o.length-1;if(a<s)return 0;var u=Ws(o[a]);return u>=0?(u>0&&(n.lastNeed=u-1),u):--a<s||u===-2?0:(u=Ws(o[a]))>=0?(u>0&&(n.lastNeed=u-2),u):--a<s||u===-2?0:(u=Ws(o[a]))>=0?(u>0&&(u===2?u=0:n.lastNeed=u-3),u):0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var i=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,i),t.toString("utf8",e,i)},hi.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length;};ar.StringDecoder;ar.StringDecoder;});var Lc={};Qt(Lc,{StringDecoder:()=>Nw,default:()=>ar});var Nw,Uc=we(()=>{v();m();_();Qs();Qs();Nw=ar.StringDecoder;});var Ys=M((F2,jc)=>{v();m();_();var Nc=Ut(),{PromisePrototypeThen:qw,SymbolAsyncIterator:qc,SymbolIterator:Dc}=ce(),{Buffer:Dw}=(ye(),X(_e)),{ERR_INVALID_ARG_TYPE:jw,ERR_STREAM_NULL_VALUES:Fw}=Se().codes;function Ww(t,e,r){let i;if(typeof e=="string"||e instanceof Dw)return new t({objectMode:!0,...r,read(){this.push(e),this.push(null);}});let n;if(e&&e[qc])n=!0,i=e[qc]();else if(e&&e[Dc])n=!1,i=e[Dc]();else throw new jw("iterable",["Iterable"],e);let o=new t({objectMode:!0,highWaterMark:1,...r}),s=!1;o._read=function(){s||(s=!0,u());},o._destroy=function(c,h){qw(a(c),()=>Nc.nextTick(h,c),d=>Nc.nextTick(h,d||c));};async function a(c){let h=c!=null,d=typeof i.throw=="function";if(h&&d){let{value:g,done:y}=await i.throw(c);if(await g,y)return}if(typeof i.return=="function"){let{value:g}=await i.return();await g;}}async function u(){for(;;){try{let{value:c,done:h}=n?await i.next():i.next();if(h)o.push(null);else {let d=c&&typeof c.then=="function"?await c:c;if(d===null)throw s=!1,new Fw;if(o.push(d))continue;s=!1;}}catch(c){o.destroy(c);}break}}return o}jc.exports=Ww;});var di=M((J2,Zc)=>{v();m();_();var He=Ut(),{ArrayPrototypeIndexOf:$w,NumberIsInteger:Hw,NumberIsNaN:Vw,NumberParseInt:zw,ObjectDefineProperties:$c,ObjectKeys:Kw,ObjectSetPrototypeOf:Hc,Promise:Gw,SafeSet:Qw,SymbolAsyncIterator:Yw,Symbol:Jw}=ce();Zc.exports=F;F.ReadableState=ro;var{EventEmitter:Xw}=(ir(),X(rr)),{Stream:qt,prependListener:Zw}=tn(),{Buffer:Js}=(ye(),X(_e)),{addAbortSignal:e_}=ci(),t_=mt(),H=Je().debuglog("stream",t=>{H=t;}),r_=dc(),Dr=tr(),{getHighWaterMark:i_,getDefaultHighWaterMark:n_}=sn(),{aggregateTwoErrors:Fc,codes:{ERR_INVALID_ARG_TYPE:s_,ERR_METHOD_NOT_IMPLEMENTED:o_,ERR_OUT_OF_RANGE:a_,ERR_STREAM_PUSH_AFTER_EOF:l_,ERR_STREAM_UNSHIFT_AFTER_END_EVENT:u_}}=Se(),{validateObject:f_}=fi(),lr=Jw("kPaused"),{StringDecoder:Vc}=(Uc(),X(Lc)),c_=Ys();Hc(F.prototype,qt.prototype);Hc(F,qt);var Xs=()=>{},{errorOrDestroy:qr}=Dr;function ro(t,e,r){typeof r!="boolean"&&(r=e instanceof nt()),this.objectMode=!!(t&&t.objectMode),r&&(this.objectMode=this.objectMode||!!(t&&t.readableObjectMode)),this.highWaterMark=t?i_(this,t,"readableHighWaterMark",r):n_(!1),this.buffer=new r_,this.length=0,this.pipes=[],this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.constructed=!0,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this[lr]=null,this.errorEmitted=!1,this.emitClose=!t||t.emitClose!==!1,this.autoDestroy=!t||t.autoDestroy!==!1,this.destroyed=!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this.defaultEncoding=t&&t.defaultEncoding||"utf8",this.awaitDrainWriters=null,this.multiAwaitDrain=!1,this.readingMore=!1,this.dataEmitted=!1,this.decoder=null,this.encoding=null,t&&t.encoding&&(this.decoder=new Vc(t.encoding),this.encoding=t.encoding);}function F(t){if(!(this instanceof F))return new F(t);let e=this instanceof nt();this._readableState=new ro(t,this,e),t&&(typeof t.read=="function"&&(this._read=t.read),typeof t.destroy=="function"&&(this._destroy=t.destroy),typeof t.construct=="function"&&(this._construct=t.construct),t.signal&&!e&&e_(t.signal,this)),qt.call(this,t),Dr.construct(this,()=>{this._readableState.needReadable&&fn(this,this._readableState);});}F.prototype.destroy=Dr.destroy;F.prototype._undestroy=Dr.undestroy;F.prototype._destroy=function(t,e){e(t);};F.prototype[Xw.captureRejectionSymbol]=function(t){this.destroy(t);};F.prototype.push=function(t,e){return zc(this,t,e,!1)};F.prototype.unshift=function(t,e){return zc(this,t,e,!0)};function zc(t,e,r,i){H("readableAddChunk",e);let n=t._readableState,o;if(n.objectMode||(typeof e=="string"?(r=r||n.defaultEncoding,n.encoding!==r&&(i&&n.encoding?e=Js.from(e,r).toString(n.encoding):(e=Js.from(e,r),r=""))):e instanceof Js?r="":qt._isUint8Array(e)?(e=qt._uint8ArrayToBuffer(e),r=""):e!=null&&(o=new s_("chunk",["string","Buffer","Uint8Array"],e))),o)qr(t,o);else if(e===null)n.reading=!1,p_(t,n);else if(n.objectMode||e&&e.length>0)if(i)if(n.endEmitted)qr(t,new u_);else {if(n.destroyed||n.errored)return !1;Zs(t,n,e,!0);}else if(n.ended)qr(t,new l_);else {if(n.destroyed||n.errored)return !1;n.reading=!1,n.decoder&&!r?(e=n.decoder.write(e),n.objectMode||e.length!==0?Zs(t,n,e,!1):fn(t,n)):Zs(t,n,e,!1);}else i||(n.reading=!1,fn(t,n));return !n.ended&&(n.length<n.highWaterMark||n.length===0)}function Zs(t,e,r,i){e.flowing&&e.length===0&&!e.sync&&t.listenerCount("data")>0?(e.multiAwaitDrain?e.awaitDrainWriters.clear():e.awaitDrainWriters=null,e.dataEmitted=!0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,i?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&cn(t)),fn(t,e);}F.prototype.isPaused=function(){let t=this._readableState;return t[lr]===!0||t.flowing===!1};F.prototype.setEncoding=function(t){let e=new Vc(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;let r=this._readableState.buffer,i="";for(let n of r)i+=e.write(n);return r.clear(),i!==""&&r.push(i),this._readableState.length=i.length,this};var h_=1073741824;function d_(t){if(t>h_)throw new a_("size","<= 1GiB",t);return t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++,t}function Wc(t,e){return t<=0||e.length===0&&e.ended?0:e.objectMode?1:Vw(t)?e.flowing&&e.length?e.buffer.first().length:e.length:t<=e.length?t:e.ended?e.length:0}F.prototype.read=function(t){H("read",t),t===void 0?t=NaN:Hw(t)||(t=zw(t,10));let e=this._readableState,r=t;if(t>e.highWaterMark&&(e.highWaterMark=d_(t)),t!==0&&(e.emittedReadable=!1),t===0&&e.needReadable&&((e.highWaterMark!==0?e.length>=e.highWaterMark:e.length>0)||e.ended))return H("read: emitReadable",e.length,e.ended),e.length===0&&e.ended?eo(this):cn(this),null;if(t=Wc(t,e),t===0&&e.ended)return e.length===0&&eo(this),null;let i=e.needReadable;if(H("need readable",i),(e.length===0||e.length-t<e.highWaterMark)&&(i=!0,H("length less than watermark",i)),e.ended||e.reading||e.destroyed||e.errored||!e.constructed)i=!1,H("reading, ended or constructing",i);else if(i){H("do read"),e.reading=!0,e.sync=!0,e.length===0&&(e.needReadable=!0);try{this._read(e.highWaterMark);}catch(o){qr(this,o);}e.sync=!1,e.reading||(t=Wc(r,e));}let n;return t>0?n=Jc(t,e):n=null,n===null?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.multiAwaitDrain?e.awaitDrainWriters.clear():e.awaitDrainWriters=null),e.length===0&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&eo(this)),n!==null&&!e.errorEmitted&&!e.closeEmitted&&(e.dataEmitted=!0,this.emit("data",n)),n};function p_(t,e){if(H("onEofChunk"),!e.ended){if(e.decoder){let r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length);}e.ended=!0,e.sync?cn(t):(e.needReadable=!1,e.emittedReadable=!0,Kc(t));}}function cn(t){let e=t._readableState;H("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(H("emitReadable",e.flowing),e.emittedReadable=!0,He.nextTick(Kc,t));}function Kc(t){let e=t._readableState;H("emitReadable_",e.destroyed,e.length,e.ended),!e.destroyed&&!e.errored&&(e.length||e.ended)&&(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,Qc(t);}function fn(t,e){!e.readingMore&&e.constructed&&(e.readingMore=!0,He.nextTick(g_,t,e));}function g_(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&e.length===0);){let r=e.length;if(H("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1;}F.prototype._read=function(t){throw new o_("_read()")};F.prototype.pipe=function(t,e){let r=this,i=this._readableState;i.pipes.length===1&&(i.multiAwaitDrain||(i.multiAwaitDrain=!0,i.awaitDrainWriters=new Qw(i.awaitDrainWriters?[i.awaitDrainWriters]:[]))),i.pipes.push(t),H("pipe count=%d opts=%j",i.pipes.length,e);let o=(!e||e.end!==!1)&&t!==He.stdout&&t!==He.stderr?a:S;i.endEmitted?He.nextTick(o):r.once("end",o),t.on("unpipe",s);function s(I,C){H("onunpipe"),I===r&&C&&C.hasUnpiped===!1&&(C.hasUnpiped=!0,h());}function a(){H("onend"),t.end();}let u,c=!1;function h(){H("cleanup"),t.removeListener("close",w),t.removeListener("finish",E),u&&t.removeListener("drain",u),t.removeListener("error",y),t.removeListener("unpipe",s),r.removeListener("end",a),r.removeListener("end",S),r.removeListener("data",g),c=!0,u&&i.awaitDrainWriters&&(!t._writableState||t._writableState.needDrain)&&u();}function d(){c||(i.pipes.length===1&&i.pipes[0]===t?(H("false write response, pause",0),i.awaitDrainWriters=t,i.multiAwaitDrain=!1):i.pipes.length>1&&i.pipes.includes(t)&&(H("false write response, pause",i.awaitDrainWriters.size),i.awaitDrainWriters.add(t)),r.pause()),u||(u=y_(r,t),t.on("drain",u));}r.on("data",g);function g(I){H("ondata");let C=t.write(I);H("dest.write",C),C===!1&&d();}function y(I){if(H("onerror",I),S(),t.removeListener("error",y),t.listenerCount("error")===0){let C=t._writableState||t._readableState;C&&!C.errorEmitted?qr(t,I):t.emit("error",I);}}Zw(t,"error",y);function w(){t.removeListener("finish",E),S();}t.once("close",w);function E(){H("onfinish"),t.removeListener("close",w),S();}t.once("finish",E);function S(){H("unpipe"),r.unpipe(t);}return t.emit("pipe",r),t.writableNeedDrain===!0?i.flowing&&d():i.flowing||(H("pipe resume"),r.resume()),t};function y_(t,e){return function(){let i=t._readableState;i.awaitDrainWriters===e?(H("pipeOnDrain",1),i.awaitDrainWriters=null):i.multiAwaitDrain&&(H("pipeOnDrain",i.awaitDrainWriters.size),i.awaitDrainWriters.delete(e)),(!i.awaitDrainWriters||i.awaitDrainWriters.size===0)&&t.listenerCount("data")&&t.resume();}}F.prototype.unpipe=function(t){let e=this._readableState,r={hasUnpiped:!1};if(e.pipes.length===0)return this;if(!t){let n=e.pipes;e.pipes=[],this.pause();for(let o=0;o<n.length;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}let i=$w(e.pipes,t);return i===-1?this:(e.pipes.splice(i,1),e.pipes.length===0&&this.pause(),t.emit("unpipe",this,r),this)};F.prototype.on=function(t,e){let r=qt.prototype.on.call(this,t,e),i=this._readableState;return t==="data"?(i.readableListening=this.listenerCount("readable")>0,i.flowing!==!1&&this.resume()):t==="readable"&&!i.endEmitted&&!i.readableListening&&(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,H("on readable",i.length,i.reading),i.length?cn(this):i.reading||He.nextTick(b_,this)),r};F.prototype.addListener=F.prototype.on;F.prototype.removeListener=function(t,e){let r=qt.prototype.removeListener.call(this,t,e);return t==="readable"&&He.nextTick(Gc,this),r};F.prototype.off=F.prototype.removeListener;F.prototype.removeAllListeners=function(t){let e=qt.prototype.removeAllListeners.apply(this,arguments);return (t==="readable"||t===void 0)&&He.nextTick(Gc,this),e};function Gc(t){let e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&e[lr]===!1?e.flowing=!0:t.listenerCount("data")>0?t.resume():e.readableListening||(e.flowing=null);}function b_(t){H("readable nexttick read 0"),t.read(0);}F.prototype.resume=function(){let t=this._readableState;return t.flowing||(H("resume"),t.flowing=!t.readableListening,w_(this,t)),t[lr]=!1,this};function w_(t,e){e.resumeScheduled||(e.resumeScheduled=!0,He.nextTick(__,t,e));}function __(t,e){H("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),Qc(t),e.flowing&&!e.reading&&t.read(0);}F.prototype.pause=function(){return H("call pause flowing=%j",this._readableState.flowing),this._readableState.flowing!==!1&&(H("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState[lr]=!0,this};function Qc(t){let e=t._readableState;for(H("flow",e.flowing);e.flowing&&t.read()!==null;);}F.prototype.wrap=function(t){let e=!1;t.on("data",i=>{!this.push(i)&&t.pause&&(e=!0,t.pause());}),t.on("end",()=>{this.push(null);}),t.on("error",i=>{qr(this,i);}),t.on("close",()=>{this.destroy();}),t.on("destroy",()=>{this.destroy();}),this._read=()=>{e&&t.resume&&(e=!1,t.resume());};let r=Kw(t);for(let i=1;i<r.length;i++){let n=r[i];this[n]===void 0&&typeof t[n]=="function"&&(this[n]=t[n].bind(t));}return this};F.prototype[Yw]=function(){return Yc(this)};F.prototype.iterator=function(t){return t!==void 0&&f_(t,"options"),Yc(this,t)};function Yc(t,e){typeof t.read!="function"&&(t=F.wrap(t,{objectMode:!0}));let r=m_(t,e);return r.stream=t,r}async function*m_(t,e){let r=Xs;function i(s){this===t?(r(),r=Xs):r=s;}t.on("readable",i);let n,o=t_(t,{writable:!1},s=>{n=s?Fc(n,s):null,r(),r=Xs;});try{for(;;){let s=t.destroyed?null:t.read();if(s!==null)yield s;else {if(n)throw n;if(n===null)return;await new Gw(i);}}}catch(s){throw n=Fc(n,s),n}finally{(n||e?.destroyOnReturn!==!1)&&(n===void 0||t._readableState.autoDestroy)?Dr.destroyer(t,null):(t.off("readable",i),o());}}$c(F.prototype,{readable:{__proto__:null,get(){let t=this._readableState;return !!t&&t.readable!==!1&&!t.destroyed&&!t.errorEmitted&&!t.endEmitted},set(t){this._readableState&&(this._readableState.readable=!!t);}},readableDidRead:{__proto__:null,enumerable:!1,get:function(){return this._readableState.dataEmitted}},readableAborted:{__proto__:null,enumerable:!1,get:function(){return !!(this._readableState.readable!==!1&&(this._readableState.destroyed||this._readableState.errored)&&!this._readableState.endEmitted)}},readableHighWaterMark:{__proto__:null,enumerable:!1,get:function(){return this._readableState.highWaterMark}},readableBuffer:{__proto__:null,enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}},readableFlowing:{__proto__:null,enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t);}},readableLength:{__proto__:null,enumerable:!1,get(){return this._readableState.length}},readableObjectMode:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.objectMode:!1}},readableEncoding:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.encoding:null}},errored:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.errored:null}},closed:{__proto__:null,get(){return this._readableState?this._readableState.closed:!1}},destroyed:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.destroyed:!1},set(t){this._readableState&&(this._readableState.destroyed=t);}},readableEnded:{__proto__:null,enumerable:!1,get(){return this._readableState?this._readableState.endEmitted:!1}}});$c(ro.prototype,{pipesCount:{__proto__:null,get(){return this.pipes.length}},paused:{__proto__:null,get(){return this[lr]!==!1},set(t){this[lr]=!!t;}}});F._fromList=Jc;function Jc(t,e){if(e.length===0)return null;let r;return e.objectMode?r=e.buffer.shift():!t||t>=e.length?(e.decoder?r=e.buffer.join(""):e.buffer.length===1?r=e.buffer.first():r=e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r}function eo(t){let e=t._readableState;H("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,He.nextTick(v_,e,t));}function v_(t,e){if(H("endReadableNT",t.endEmitted,t.length),!t.errored&&!t.closeEmitted&&!t.endEmitted&&t.length===0){if(t.endEmitted=!0,e.emit("end"),e.writable&&e.allowHalfOpen===!1)He.nextTick(E_,e);else if(t.autoDestroy){let r=e._writableState;(!r||r.autoDestroy&&(r.finished||r.writable===!1))&&e.destroy();}}}function E_(t){t.writable&&!t.writableEnded&&!t.destroyed&&t.end();}F.from=function(t,e){return c_(F,t,e)};var to;function Xc(){return to===void 0&&(to={}),to}F.fromWeb=function(t,e){return Xc().newStreamReadableFromReadableStream(t,e)};F.toWeb=function(t,e){return Xc().newReadableStreamFromStreamReadable(t,e)};F.wrap=function(t,e){var r,i;return new F({objectMode:(r=(i=t.readableObjectMode)!==null&&i!==void 0?i:t.objectMode)!==null&&r!==void 0?r:!0,...e,destroy(n,o){Dr.destroyer(t,n),o(n);}}).wrap(t)};});var uo=M((aR,ch)=>{v();m();_();var ur=Ut(),{ArrayPrototypeSlice:rh,Error:S_,FunctionPrototypeSymbolHasInstance:ih,ObjectDefineProperty:nh,ObjectDefineProperties:A_,ObjectSetPrototypeOf:sh,StringPrototypeToLowerCase:I_,Symbol:T_,SymbolHasInstance:R_}=ce();ch.exports=ie;ie.WritableState=yi;var{EventEmitter:C_}=(ir(),X(rr)),pi=tn().Stream,{Buffer:hn}=(ye(),X(_e)),gn=tr(),{addAbortSignal:B_}=ci(),{getHighWaterMark:P_,getDefaultHighWaterMark:O_}=sn(),{ERR_INVALID_ARG_TYPE:k_,ERR_METHOD_NOT_IMPLEMENTED:x_,ERR_MULTIPLE_CALLBACK:oh,ERR_STREAM_CANNOT_PIPE:M_,ERR_STREAM_DESTROYED:gi,ERR_STREAM_ALREADY_FINISHED:L_,ERR_STREAM_NULL_VALUES:U_,ERR_STREAM_WRITE_AFTER_END:N_,ERR_UNKNOWN_ENCODING:ah}=Se().codes,{errorOrDestroy:jr}=gn;sh(ie.prototype,pi.prototype);sh(ie,pi);function so(){}var Fr=T_("kOnFinished");function yi(t,e,r){typeof r!="boolean"&&(r=e instanceof nt()),this.objectMode=!!(t&&t.objectMode),r&&(this.objectMode=this.objectMode||!!(t&&t.writableObjectMode)),this.highWaterMark=t?P_(this,t,"writableHighWaterMark",r):O_(!1),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;let i=!!(t&&t.decodeStrings===!1);this.decodeStrings=!i,this.defaultEncoding=t&&t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=D_.bind(void 0,e),this.writecb=null,this.writelen=0,this.afterWriteTickInfo=null,pn(this),this.pendingcb=0,this.constructed=!0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!t||t.emitClose!==!1,this.autoDestroy=!t||t.autoDestroy!==!1,this.errored=null,this.closed=!1,this.closeEmitted=!1,this[Fr]=[];}function pn(t){t.buffered=[],t.bufferedIndex=0,t.allBuffers=!0,t.allNoop=!0;}yi.prototype.getBuffer=function(){return rh(this.buffered,this.bufferedIndex)};nh(yi.prototype,"bufferedRequestCount",{__proto__:null,get(){return this.buffered.length-this.bufferedIndex}});function ie(t){let e=this instanceof nt();if(!e&&!ih(ie,this))return new ie(t);this._writableState=new yi(t,this,e),t&&(typeof t.write=="function"&&(this._write=t.write),typeof t.writev=="function"&&(this._writev=t.writev),typeof t.destroy=="function"&&(this._destroy=t.destroy),typeof t.final=="function"&&(this._final=t.final),typeof t.construct=="function"&&(this._construct=t.construct),t.signal&&B_(t.signal,this)),pi.call(this,t),gn.construct(this,()=>{let r=this._writableState;r.writing||ao(this,r),lo(this,r);});}nh(ie,R_,{__proto__:null,value:function(t){return ih(this,t)?!0:this!==ie?!1:t&&t._writableState instanceof yi}});ie.prototype.pipe=function(){jr(this,new M_);};function lh(t,e,r,i){let n=t._writableState;if(typeof r=="function")i=r,r=n.defaultEncoding;else {if(!r)r=n.defaultEncoding;else if(r!=="buffer"&&!hn.isEncoding(r))throw new ah(r);typeof i!="function"&&(i=so);}if(e===null)throw new U_;if(!n.objectMode)if(typeof e=="string")n.decodeStrings!==!1&&(e=hn.from(e,r),r="buffer");else if(e instanceof hn)r="buffer";else if(pi._isUint8Array(e))e=pi._uint8ArrayToBuffer(e),r="buffer";else throw new k_("chunk",["string","Buffer","Uint8Array"],e);let o;return n.ending?o=new N_:n.destroyed&&(o=new gi("write")),o?(ur.nextTick(i,o),jr(t,o,!0),o):(n.pendingcb++,q_(t,n,e,r,i))}ie.prototype.write=function(t,e,r){return lh(this,t,e,r)===!0};ie.prototype.cork=function(){this._writableState.corked++;};ie.prototype.uncork=function(){let t=this._writableState;t.corked&&(t.corked--,t.writing||ao(this,t));};ie.prototype.setDefaultEncoding=function(e){if(typeof e=="string"&&(e=I_(e)),!hn.isEncoding(e))throw new ah(e);return this._writableState.defaultEncoding=e,this};function q_(t,e,r,i,n){let o=e.objectMode?1:r.length;e.length+=o;let s=e.length<e.highWaterMark;return s||(e.needDrain=!0),e.writing||e.corked||e.errored||!e.constructed?(e.buffered.push({chunk:r,encoding:i,callback:n}),e.allBuffers&&i!=="buffer"&&(e.allBuffers=!1),e.allNoop&&n!==so&&(e.allNoop=!1)):(e.writelen=o,e.writecb=n,e.writing=!0,e.sync=!0,t._write(r,i,e.onwrite),e.sync=!1),s&&!e.errored&&!e.destroyed}function eh(t,e,r,i,n,o,s){e.writelen=i,e.writecb=s,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new gi("write")):r?t._writev(n,e.onwrite):t._write(n,o,e.onwrite),e.sync=!1;}function th(t,e,r,i){--e.pendingcb,i(r),oo(e),jr(t,r);}function D_(t,e){let r=t._writableState,i=r.sync,n=r.writecb;if(typeof n!="function"){jr(t,new oh);return}r.writing=!1,r.writecb=null,r.length-=r.writelen,r.writelen=0,e?(e.stack,r.errored||(r.errored=e),t._readableState&&!t._readableState.errored&&(t._readableState.errored=e),i?ur.nextTick(th,t,r,e,n):th(t,r,e,n)):(r.buffered.length>r.bufferedIndex&&ao(t,r),i?r.afterWriteTickInfo!==null&&r.afterWriteTickInfo.cb===n?r.afterWriteTickInfo.count++:(r.afterWriteTickInfo={count:1,cb:n,stream:t,state:r},ur.nextTick(j_,r.afterWriteTickInfo)):uh(t,r,1,n));}function j_({stream:t,state:e,count:r,cb:i}){return e.afterWriteTickInfo=null,uh(t,e,r,i)}function uh(t,e,r,i){for(!e.ending&&!t.destroyed&&e.length===0&&e.needDrain&&(e.needDrain=!1,t.emit("drain"));r-- >0;)e.pendingcb--,i();e.destroyed&&oo(e),lo(t,e);}function oo(t){if(t.writing)return;for(let n=t.bufferedIndex;n<t.buffered.length;++n){var e;let{chunk:o,callback:s}=t.buffered[n],a=t.objectMode?1:o.length;t.length-=a,s((e=t.errored)!==null&&e!==void 0?e:new gi("write"));}let r=t[Fr].splice(0);for(let n=0;n<r.length;n++){var i;r[n]((i=t.errored)!==null&&i!==void 0?i:new gi("end"));}pn(t);}function ao(t,e){if(e.corked||e.bufferProcessing||e.destroyed||!e.constructed)return;let{buffered:r,bufferedIndex:i,objectMode:n}=e,o=r.length-i;if(!o)return;let s=i;if(e.bufferProcessing=!0,o>1&&t._writev){e.pendingcb-=o-1;let a=e.allNoop?so:c=>{for(let h=s;h<r.length;++h)r[h].callback(c);},u=e.allNoop&&s===0?r:rh(r,s);u.allBuffers=e.allBuffers,eh(t,e,!0,e.length,u,"",a),pn(e);}else {do{let{chunk:a,encoding:u,callback:c}=r[s];r[s++]=null;let h=n?1:a.length;eh(t,e,!1,h,a,u,c);}while(s<r.length&&!e.writing);s===r.length?pn(e):s>256?(r.splice(0,s),e.bufferedIndex=0):e.bufferedIndex=s;}e.bufferProcessing=!1;}ie.prototype._write=function(t,e,r){if(this._writev)this._writev([{chunk:t,encoding:e}],r);else throw new x_("_write()")};ie.prototype._writev=null;ie.prototype.end=function(t,e,r){let i=this._writableState;typeof t=="function"?(r=t,t=null,e=null):typeof e=="function"&&(r=e,e=null);let n;if(t!=null){let o=lh(this,t,e);o instanceof S_&&(n=o);}return i.corked&&(i.corked=1,this.uncork()),n||(!i.errored&&!i.ending?(i.ending=!0,lo(this,i,!0),i.ended=!0):i.finished?n=new L_("end"):i.destroyed&&(n=new gi("end"))),typeof r=="function"&&(n||i.finished?ur.nextTick(r,n):i[Fr].push(r)),this};function dn(t){return t.ending&&!t.destroyed&&t.constructed&&t.length===0&&!t.errored&&t.buffered.length===0&&!t.finished&&!t.writing&&!t.errorEmitted&&!t.closeEmitted}function F_(t,e){let r=!1;function i(n){if(r){jr(t,n??oh());return}if(r=!0,e.pendingcb--,n){let o=e[Fr].splice(0);for(let s=0;s<o.length;s++)o[s](n);jr(t,n,e.sync);}else dn(e)&&(e.prefinished=!0,t.emit("prefinish"),e.pendingcb++,ur.nextTick(no,t,e));}e.sync=!0,e.pendingcb++;try{t._final(i);}catch(n){i(n);}e.sync=!1;}function W_(t,e){!e.prefinished&&!e.finalCalled&&(typeof t._final=="function"&&!e.destroyed?(e.finalCalled=!0,F_(t,e)):(e.prefinished=!0,t.emit("prefinish")));}function lo(t,e,r){dn(e)&&(W_(t,e),e.pendingcb===0&&(r?(e.pendingcb++,ur.nextTick((i,n)=>{dn(n)?no(i,n):n.pendingcb--;},t,e)):dn(e)&&(e.pendingcb++,no(t,e))));}function no(t,e){e.pendingcb--,e.finished=!0;let r=e[Fr].splice(0);for(let i=0;i<r.length;i++)r[i]();if(t.emit("finish"),e.autoDestroy){let i=t._readableState;(!i||i.autoDestroy&&(i.endEmitted||i.readable===!1))&&t.destroy();}}A_(ie.prototype,{closed:{__proto__:null,get(){return this._writableState?this._writableState.closed:!1}},destroyed:{__proto__:null,get(){return this._writableState?this._writableState.destroyed:!1},set(t){this._writableState&&(this._writableState.destroyed=t);}},writable:{__proto__:null,get(){let t=this._writableState;return !!t&&t.writable!==!1&&!t.destroyed&&!t.errored&&!t.ending&&!t.ended},set(t){this._writableState&&(this._writableState.writable=!!t);}},writableFinished:{__proto__:null,get(){return this._writableState?this._writableState.finished:!1}},writableObjectMode:{__proto__:null,get(){return this._writableState?this._writableState.objectMode:!1}},writableBuffer:{__proto__:null,get(){return this._writableState&&this._writableState.getBuffer()}},writableEnded:{__proto__:null,get(){return this._writableState?this._writableState.ending:!1}},writableNeedDrain:{__proto__:null,get(){let t=this._writableState;return t?!t.destroyed&&!t.ending&&t.needDrain:!1}},writableHighWaterMark:{__proto__:null,get(){return this._writableState&&this._writableState.highWaterMark}},writableCorked:{__proto__:null,get(){return this._writableState?this._writableState.corked:0}},writableLength:{__proto__:null,get(){return this._writableState&&this._writableState.length}},errored:{__proto__:null,enumerable:!1,get(){return this._writableState?this._writableState.errored:null}},writableAborted:{__proto__:null,enumerable:!1,get:function(){return !!(this._writableState.writable!==!1&&(this._writableState.destroyed||this._writableState.errored)&&!this._writableState.finished)}}});var $_=gn.destroy;ie.prototype.destroy=function(t,e){let r=this._writableState;return !r.destroyed&&(r.bufferedIndex<r.buffered.length||r[Fr].length)&&ur.nextTick(oo,r),$_.call(this,t,e),this};ie.prototype._undestroy=gn.undestroy;ie.prototype._destroy=function(t,e){e(t);};ie.prototype[C_.captureRejectionSymbol]=function(t){this.destroy(t);};var io;function fh(){return io===void 0&&(io={}),io}ie.fromWeb=function(t,e){return fh().newStreamWritableFromWritableStream(t,e)};ie.toWeb=function(t){return fh().newWritableStreamFromStreamWritable(t)};});var Sh=M((bR,Eh)=>{v();m();_();var fo=Ut(),H_=(ye(),X(_e)),{isReadable:V_,isWritable:z_,isIterable:hh,isNodeStream:K_,isReadableNodeStream:dh,isWritableNodeStream:ph,isDuplexNodeStream:G_}=tt(),gh=mt(),{AbortError:vh,codes:{ERR_INVALID_ARG_TYPE:Q_,ERR_INVALID_RETURN_VALUE:yh}}=Se(),{destroyer:Wr}=tr(),Y_=nt(),J_=di(),{createDeferredPromise:bh}=Je(),wh=Ys(),_h=globalThis.Blob||H_.Blob,X_=typeof _h<"u"?function(e){return e instanceof _h}:function(e){return !1},Z_=globalThis.AbortController||Hi().AbortController,{FunctionPrototypeCall:mh}=ce(),fr=class extends Y_{constructor(e){super(e),e?.readable===!1&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),e?.writable===!1&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0);}};Eh.exports=function t(e,r){if(G_(e))return e;if(dh(e))return yn({readable:e});if(ph(e))return yn({writable:e});if(K_(e))return yn({writable:!1,readable:!1});if(typeof e=="function"){let{value:n,write:o,final:s,destroy:a}=e0(e);if(hh(n))return wh(fr,n,{objectMode:!0,write:o,final:s,destroy:a});let u=n?.then;if(typeof u=="function"){let c,h=mh(u,n,d=>{if(d!=null)throw new yh("nully","body",d)},d=>{Wr(c,d);});return c=new fr({objectMode:!0,readable:!1,write:o,final(d){s(async()=>{try{await h,fo.nextTick(d,null);}catch(g){fo.nextTick(d,g);}});},destroy:a})}throw new yh("Iterable, AsyncIterable or AsyncFunction",r,n)}if(X_(e))return t(e.arrayBuffer());if(hh(e))return wh(fr,e,{objectMode:!0,writable:!1});if(typeof e?.writable=="object"||typeof e?.readable=="object"){let n=e!=null&&e.readable?dh(e?.readable)?e?.readable:t(e.readable):void 0,o=e!=null&&e.writable?ph(e?.writable)?e?.writable:t(e.writable):void 0;return yn({readable:n,writable:o})}let i=e?.then;if(typeof i=="function"){let n;return mh(i,e,o=>{o!=null&&n.push(o),n.push(null);},o=>{Wr(n,o);}),n=new fr({objectMode:!0,writable:!1,read(){}})}throw new Q_(r,["Blob","ReadableStream","WritableStream","Stream","Iterable","AsyncIterable","Function","{ readable, writable } pair","Promise"],e)};function e0(t){let{promise:e,resolve:r}=bh(),i=new Z_,n=i.signal;return {value:t(async function*(){for(;;){let s=e;e=null;let{chunk:a,done:u,cb:c}=await s;if(fo.nextTick(c),u)return;if(n.aborted)throw new vh(void 0,{cause:n.reason});(({promise:e,resolve:r}=bh())),yield a;}}(),{signal:n}),write(s,a,u){let c=r;r=null,c({chunk:s,done:!1,cb:u});},final(s){let a=r;r=null,a({done:!0,cb:s});},destroy(s,a){i.abort(),a(s);}}}function yn(t){let e=t.readable&&typeof t.readable.read!="function"?J_.wrap(t.readable):t.readable,r=t.writable,i=!!V_(e),n=!!z_(r),o,s,a,u,c;function h(d){let g=u;u=null,g?g(d):d&&c.destroy(d);}return c=new fr({readableObjectMode:!!(e!=null&&e.readableObjectMode),writableObjectMode:!!(r!=null&&r.writableObjectMode),readable:i,writable:n}),n&&(gh(r,d=>{n=!1,d&&Wr(e,d),h(d);}),c._write=function(d,g,y){r.write(d,g)?y():o=y;},c._final=function(d){r.end(),s=d;},r.on("drain",function(){if(o){let d=o;o=null,d();}}),r.on("finish",function(){if(s){let d=s;s=null,d();}})),i&&(gh(e,d=>{i=!1,d&&Wr(e,d),h(d);}),e.on("readable",function(){if(a){let d=a;a=null,d();}}),e.on("end",function(){c.push(null);}),c._read=function(){for(;;){let d=e.read();if(d===null){a=c._read;return}if(!c.push(d))return}}),c._destroy=function(d,g){!d&&u!==null&&(d=new vh),a=null,o=null,s=null,u===null?g(d):(u=g,Wr(r,d),Wr(e,d));},c}});var nt=M((RR,Th)=>{v();m();_();var{ObjectDefineProperties:t0,ObjectGetOwnPropertyDescriptor:At,ObjectKeys:r0,ObjectSetPrototypeOf:Ah}=ce();Th.exports=Ve;var po=di(),Ne=uo();Ah(Ve.prototype,po.prototype);Ah(Ve,po);{let t=r0(Ne.prototype);for(let e=0;e<t.length;e++){let r=t[e];Ve.prototype[r]||(Ve.prototype[r]=Ne.prototype[r]);}}function Ve(t){if(!(this instanceof Ve))return new Ve(t);po.call(this,t),Ne.call(this,t),t?(this.allowHalfOpen=t.allowHalfOpen!==!1,t.readable===!1&&(this._readableState.readable=!1,this._readableState.ended=!0,this._readableState.endEmitted=!0),t.writable===!1&&(this._writableState.writable=!1,this._writableState.ending=!0,this._writableState.ended=!0,this._writableState.finished=!0)):this.allowHalfOpen=!0;}t0(Ve.prototype,{writable:{__proto__:null,...At(Ne.prototype,"writable")},writableHighWaterMark:{__proto__:null,...At(Ne.prototype,"writableHighWaterMark")},writableObjectMode:{__proto__:null,...At(Ne.prototype,"writableObjectMode")},writableBuffer:{__proto__:null,...At(Ne.prototype,"writableBuffer")},writableLength:{__proto__:null,...At(Ne.prototype,"writableLength")},writableFinished:{__proto__:null,...At(Ne.prototype,"writableFinished")},writableCorked:{__proto__:null,...At(Ne.prototype,"writableCorked")},writableEnded:{__proto__:null,...At(Ne.prototype,"writableEnded")},writableNeedDrain:{__proto__:null,...At(Ne.prototype,"writableNeedDrain")},destroyed:{__proto__:null,get(){return this._readableState===void 0||this._writableState===void 0?!1:this._readableState.destroyed&&this._writableState.destroyed},set(t){this._readableState&&this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t);}}});var co;function Ih(){return co===void 0&&(co={}),co}Ve.fromWeb=function(t,e){return Ih().newStreamDuplexFromReadableWritablePair(t,e)};Ve.toWeb=function(t){return Ih().newReadableWritablePairFromDuplex(t)};var ho;Ve.from=function(t){return ho||(ho=Sh()),ho(t,"body")};});var bo=M((NR,Ch)=>{v();m();_();var{ObjectSetPrototypeOf:Rh,Symbol:i0}=ce();Ch.exports=It;var{ERR_METHOD_NOT_IMPLEMENTED:n0}=Se().codes,yo=nt(),{getHighWaterMark:s0}=sn();Rh(It.prototype,yo.prototype);Rh(It,yo);var bi=i0("kCallback");function It(t){if(!(this instanceof It))return new It(t);let e=t?s0(this,t,"readableHighWaterMark",!0):null;e===0&&(t={...t,highWaterMark:null,readableHighWaterMark:e,writableHighWaterMark:t.writableHighWaterMark||0}),yo.call(this,t),this._readableState.sync=!1,this[bi]=null,t&&(typeof t.transform=="function"&&(this._transform=t.transform),typeof t.flush=="function"&&(this._flush=t.flush)),this.on("prefinish",o0);}function go(t){typeof this._flush=="function"&&!this.destroyed?this._flush((e,r)=>{if(e){t?t(e):this.destroy(e);return}r!=null&&this.push(r),this.push(null),t&&t();}):(this.push(null),t&&t());}function o0(){this._final!==go&&go.call(this);}It.prototype._final=go;It.prototype._transform=function(t,e,r){throw new n0("_transform()")};It.prototype._write=function(t,e,r){let i=this._readableState,n=this._writableState,o=i.length;this._transform(t,e,(s,a)=>{if(s){r(s);return}a!=null&&this.push(a),n.ended||o===i.length||i.length<i.highWaterMark?r():this[bi]=r;});};It.prototype._read=function(){if(this[bi]){let t=this[bi];this[bi]=null,t();}};});var _o=M((KR,Ph)=>{v();m();_();var{ObjectSetPrototypeOf:Bh}=ce();Ph.exports=$r;var wo=bo();Bh($r.prototype,wo.prototype);Bh($r,wo);function $r(t){if(!(this instanceof $r))return new $r(t);wo.call(this,t);}$r.prototype._transform=function(t,e,r){r(null,t);};});var mn=M((iC,Lh)=>{v();m();_();var wi=Ut(),{ArrayIsArray:a0,Promise:l0,SymbolAsyncIterator:u0}=ce(),_n=mt(),{once:f0}=Je(),c0=tr(),Oh=nt(),{aggregateTwoErrors:h0,codes:{ERR_INVALID_ARG_TYPE:Ro,ERR_INVALID_RETURN_VALUE:mo,ERR_MISSING_ARGS:d0,ERR_STREAM_DESTROYED:p0,ERR_STREAM_PREMATURE_CLOSE:g0},AbortError:y0}=Se(),{validateFunction:b0,validateAbortSignal:w0}=fi(),{isIterable:cr,isReadable:vo,isReadableNodeStream:wn,isNodeStream:kh,isTransformStream:Hr,isWebStream:_0,isReadableStream:Eo,isReadableEnded:m0}=tt(),v0=globalThis.AbortController||Hi().AbortController,So,Ao;function xh(t,e,r){let i=!1;t.on("close",()=>{i=!0;});let n=_n(t,{readable:e,writable:r},o=>{i=!o;});return {destroy:o=>{i||(i=!0,c0.destroyer(t,o||new p0("pipe")));},cleanup:n}}function E0(t){return b0(t[t.length-1],"streams[stream.length - 1]"),t.pop()}function Io(t){if(cr(t))return t;if(wn(t))return S0(t);throw new Ro("val",["Readable","Iterable","AsyncIterable"],t)}async function*S0(t){Ao||(Ao=di()),yield*Ao.prototype[u0].call(t);}async function bn(t,e,r,{end:i}){let n,o=null,s=c=>{if(c&&(n=c),o){let h=o;o=null,h();}},a=()=>new l0((c,h)=>{n?h(n):o=()=>{n?h(n):c();};});e.on("drain",s);let u=_n(e,{readable:!1},s);try{e.writableNeedDrain&&await a();for await(let c of t)e.write(c)||await a();i&&e.end(),await a(),r();}catch(c){r(n!==c?h0(n,c):c);}finally{u(),e.off("drain",s);}}async function To(t,e,r,{end:i}){Hr(e)&&(e=e.writable);let n=e.getWriter();try{for await(let o of t)await n.ready,n.write(o).catch(()=>{});await n.ready,i&&await n.close(),r();}catch(o){try{await n.abort(o),r(o);}catch(s){r(s);}}}function A0(...t){return Mh(t,f0(E0(t)))}function Mh(t,e,r){if(t.length===1&&a0(t[0])&&(t=t[0]),t.length<2)throw new d0("streams");let i=new v0,n=i.signal,o=r?.signal,s=[];w0(o,"options.signal");function a(){y(new y0);}o?.addEventListener("abort",a);let u,c,h=[],d=0;function g(C){y(C,--d===0);}function y(C,R){if(C&&(!u||u.code==="ERR_STREAM_PREMATURE_CLOSE")&&(u=C),!(!u&&!R)){for(;h.length;)h.shift()(u);o?.removeEventListener("abort",a),i.abort(),R&&(u||s.forEach(U=>U()),wi.nextTick(e,u,c));}}let w;for(let C=0;C<t.length;C++){let R=t[C],U=C<t.length-1,N=C>0,W=U||r?.end!==!1,K=C===t.length-1;if(kh(R)){let z=function(Q){Q&&Q.name!=="AbortError"&&Q.code!=="ERR_STREAM_PREMATURE_CLOSE"&&g(Q);};if(W){let{destroy:Q,cleanup:de}=xh(R,U,N);h.push(Q),vo(R)&&K&&s.push(de);}R.on("error",z),vo(R)&&K&&s.push(()=>{R.removeListener("error",z);});}if(C===0)if(typeof R=="function"){if(w=R({signal:n}),!cr(w))throw new mo("Iterable, AsyncIterable or Stream","source",w)}else cr(R)||wn(R)||Hr(R)?w=R:w=Oh.from(R);else if(typeof R=="function"){if(Hr(w)){var E;w=Io((E=w)===null||E===void 0?void 0:E.readable);}else w=Io(w);if(w=R(w,{signal:n}),U){if(!cr(w,!0))throw new mo("AsyncIterable",`transform[${C-1}]`,w)}else {var S;So||(So=_o());let z=new So({objectMode:!0}),Q=(S=w)===null||S===void 0?void 0:S.then;if(typeof Q=="function")d++,Q.call(w,pe=>{c=pe,pe!=null&&z.write(pe),W&&z.end(),wi.nextTick(g);},pe=>{z.destroy(pe),wi.nextTick(g,pe);});else if(cr(w,!0))d++,bn(w,z,g,{end:W});else if(Eo(w)||Hr(w)){let pe=w.readable||w;d++,bn(pe,z,g,{end:W});}else throw new mo("AsyncIterable or Promise","destination",w);w=z;let{destroy:de,cleanup:Gt}=xh(w,!1,!0);h.push(de),K&&s.push(Gt);}}else if(kh(R)){if(wn(w)){d+=2;let z=I0(w,R,g,{end:W});vo(R)&&K&&s.push(z);}else if(Hr(w)||Eo(w)){let z=w.readable||w;d++,bn(z,R,g,{end:W});}else if(cr(w))d++,bn(w,R,g,{end:W});else throw new Ro("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],w);w=R;}else if(_0(R)){if(wn(w))d++,To(Io(w),R,g,{end:W});else if(Eo(w)||cr(w))d++,To(w,R,g,{end:W});else if(Hr(w))d++,To(w.readable,R,g,{end:W});else throw new Ro("val",["Readable","Iterable","AsyncIterable","ReadableStream","TransformStream"],w);w=R;}else w=Oh.from(R);}return (n!=null&&n.aborted||o!=null&&o.aborted)&&wi.nextTick(a),w}function I0(t,e,r,{end:i}){let n=!1;if(e.on("close",()=>{n||r(new g0);}),t.pipe(e,{end:!1}),i){let s=function(){n=!0,e.end();};m0(t)?wi.nextTick(s):t.once("end",s);}else r();return _n(t,{readable:!0,writable:!1},s=>{let a=t._readableState;s&&s.code==="ERR_STREAM_PREMATURE_CLOSE"&&a&&a.ended&&!a.errored&&!a.errorEmitted?t.once("end",r).once("error",r):r(s);}),_n(e,{readable:!1,writable:!0},r)}Lh.exports={pipelineImpl:Mh,pipeline:A0};});var Bo=M((dC,Fh)=>{v();m();_();var{pipeline:T0}=mn(),vn=nt(),{destroyer:R0}=tr(),{isNodeStream:En,isReadable:Uh,isWritable:Nh,isWebStream:Co,isTransformStream:hr,isWritableStream:qh,isReadableStream:Dh}=tt(),{AbortError:C0,codes:{ERR_INVALID_ARG_VALUE:jh,ERR_MISSING_ARGS:B0}}=Se(),P0=mt();Fh.exports=function(...e){if(e.length===0)throw new B0("streams");if(e.length===1)return vn.from(e[0]);let r=[...e];if(typeof e[0]=="function"&&(e[0]=vn.from(e[0])),typeof e[e.length-1]=="function"){let y=e.length-1;e[y]=vn.from(e[y]);}for(let y=0;y<e.length;++y)if(!(!En(e[y])&&!Co(e[y]))){if(y<e.length-1&&!(Uh(e[y])||Dh(e[y])||hr(e[y])))throw new jh(`streams[${y}]`,r[y],"must be readable");if(y>0&&!(Nh(e[y])||qh(e[y])||hr(e[y])))throw new jh(`streams[${y}]`,r[y],"must be writable")}let i,n,o,s,a;function u(y){let w=s;s=null,w?w(y):y?a.destroy(y):!g&&!d&&a.destroy();}let c=e[0],h=T0(e,u),d=!!(Nh(c)||qh(c)||hr(c)),g=!!(Uh(h)||Dh(h)||hr(h));if(a=new vn({writableObjectMode:!!(c!=null&&c.writableObjectMode),readableObjectMode:!!(h!=null&&h.writableObjectMode),writable:d,readable:g}),d){if(En(c))a._write=function(w,E,S){c.write(w,E)?S():i=S;},a._final=function(w){c.end(),n=w;},c.on("drain",function(){if(i){let w=i;i=null,w();}});else if(Co(c)){let E=(hr(c)?c.writable:c).getWriter();a._write=async function(S,I,C){try{await E.ready,E.write(S).catch(()=>{}),C();}catch(R){C(R);}},a._final=async function(S){try{await E.ready,E.close().catch(()=>{}),n=S;}catch(I){S(I);}};}let y=hr(h)?h.readable:h;P0(y,()=>{if(n){let w=n;n=null,w();}});}if(g){if(En(h))h.on("readable",function(){if(o){let y=o;o=null,y();}}),h.on("end",function(){a.push(null);}),a._read=function(){for(;;){let y=h.read();if(y===null){o=a._read;return}if(!a.push(y))return}};else if(Co(h)){let w=(hr(h)?h.readable:h).getReader();a._read=async function(){for(;;)try{let{value:E,done:S}=await w.read();if(!a.push(E))return;if(S){a.push(null);return}}catch{return}};}}return a._destroy=function(y,w){!y&&s!==null&&(y=new C0),o=null,i=null,n=null,s===null?w(y):(s=w,En(h)&&R0(h,y));},a};});var Qh=M((SC,ko)=>{v();m();_();var Vh=globalThis.AbortController||Hi().AbortController,{codes:{ERR_INVALID_ARG_VALUE:O0,ERR_INVALID_ARG_TYPE:_i,ERR_MISSING_ARGS:k0,ERR_OUT_OF_RANGE:x0},AbortError:st}=Se(),{validateAbortSignal:dr,validateInteger:M0,validateObject:pr}=fi(),L0=ce().Symbol("kWeak"),{finished:U0}=mt(),N0=Bo(),{addAbortSignalNoValidate:q0}=ci(),{isWritable:D0,isNodeStream:j0}=tt(),{ArrayPrototypePush:F0,MathFloor:W0,Number:$0,NumberIsNaN:H0,Promise:Wh,PromiseReject:$h,PromisePrototypeThen:V0,Symbol:zh}=ce(),Sn=zh("kEmpty"),Hh=zh("kEof");function z0(t,e){if(e!=null&&pr(e,"options"),e?.signal!=null&&dr(e.signal,"options.signal"),j0(t)&&!D0(t))throw new O0("stream",t,"must be writable");let r=N0(this,t);return e!=null&&e.signal&&q0(e.signal,r),r}function An(t,e){if(typeof t!="function")throw new _i("fn",["Function","AsyncFunction"],t);e!=null&&pr(e,"options"),e?.signal!=null&&dr(e.signal,"options.signal");let r=1;return e?.concurrency!=null&&(r=W0(e.concurrency)),M0(r,"concurrency",1),async function*(){var n,o;let s=new Vh,a=this,u=[],c=s.signal,h={signal:c},d=()=>s.abort();e!=null&&(n=e.signal)!==null&&n!==void 0&&n.aborted&&d(),e==null||(o=e.signal)===null||o===void 0||o.addEventListener("abort",d);let g,y,w=!1;function E(){w=!0;}async function S(){try{for await(let R of a){var I;if(w)return;if(c.aborted)throw new st;try{R=t(R,h);}catch(U){R=$h(U);}R!==Sn&&(typeof((I=R)===null||I===void 0?void 0:I.catch)=="function"&&R.catch(E),u.push(R),g&&(g(),g=null),!w&&u.length&&u.length>=r&&await new Wh(U=>{y=U;}));}u.push(Hh);}catch(R){let U=$h(R);V0(U,void 0,E),u.push(U);}finally{var C;w=!0,g&&(g(),g=null),e==null||(C=e.signal)===null||C===void 0||C.removeEventListener("abort",d);}}S();try{for(;;){for(;u.length>0;){let I=await u[0];if(I===Hh)return;if(c.aborted)throw new st;I!==Sn&&(yield I),u.shift(),y&&(y(),y=null);}await new Wh(I=>{g=I;});}}finally{s.abort(),w=!0,y&&(y(),y=null);}}.call(this)}function K0(t=void 0){return t!=null&&pr(t,"options"),t?.signal!=null&&dr(t.signal,"options.signal"),async function*(){let r=0;for await(let n of this){var i;if(t!=null&&(i=t.signal)!==null&&i!==void 0&&i.aborted)throw new st({cause:t.signal.reason});yield [r++,n];}}.call(this)}async function Kh(t,e=void 0){for await(let r of Oo.call(this,t,e))return !0;return !1}async function G0(t,e=void 0){if(typeof t!="function")throw new _i("fn",["Function","AsyncFunction"],t);return !await Kh.call(this,async(...r)=>!await t(...r),e)}async function Q0(t,e){for await(let r of Oo.call(this,t,e))return r}async function Y0(t,e){if(typeof t!="function")throw new _i("fn",["Function","AsyncFunction"],t);async function r(i,n){return await t(i,n),Sn}for await(let i of An.call(this,r,e));}function Oo(t,e){if(typeof t!="function")throw new _i("fn",["Function","AsyncFunction"],t);async function r(i,n){return await t(i,n)?i:Sn}return An.call(this,r,e)}var Po=class extends k0{constructor(){super("reduce"),this.message="Reduce of an empty stream requires an initial value";}};async function J0(t,e,r){var i;if(typeof t!="function")throw new _i("reducer",["Function","AsyncFunction"],t);r!=null&&pr(r,"options"),r?.signal!=null&&dr(r.signal,"options.signal");let n=arguments.length>1;if(r!=null&&(i=r.signal)!==null&&i!==void 0&&i.aborted){let c=new st(void 0,{cause:r.signal.reason});throw this.once("error",()=>{}),await U0(this.destroy(c)),c}let o=new Vh,s=o.signal;if(r!=null&&r.signal){let c={once:!0,[L0]:this};r.signal.addEventListener("abort",()=>o.abort(),c);}let a=!1;try{for await(let c of this){var u;if(a=!0,r!=null&&(u=r.signal)!==null&&u!==void 0&&u.aborted)throw new st;n?e=await t(e,c,{signal:s}):(e=c,n=!0);}if(!a&&!n)throw new Po}finally{o.abort();}return e}async function X0(t){t!=null&&pr(t,"options"),t?.signal!=null&&dr(t.signal,"options.signal");let e=[];for await(let i of this){var r;if(t!=null&&(r=t.signal)!==null&&r!==void 0&&r.aborted)throw new st(void 0,{cause:t.signal.reason});F0(e,i);}return e}function Z0(t,e){let r=An.call(this,t,e);return async function*(){for await(let n of r)yield*n;}.call(this)}function Gh(t){if(t=$0(t),H0(t))return 0;if(t<0)throw new x0("number",">= 0",t);return t}function em(t,e=void 0){return e!=null&&pr(e,"options"),e?.signal!=null&&dr(e.signal,"options.signal"),t=Gh(t),async function*(){var i;if(e!=null&&(i=e.signal)!==null&&i!==void 0&&i.aborted)throw new st;for await(let o of this){var n;if(e!=null&&(n=e.signal)!==null&&n!==void 0&&n.aborted)throw new st;t--<=0&&(yield o);}}.call(this)}function tm(t,e=void 0){return e!=null&&pr(e,"options"),e?.signal!=null&&dr(e.signal,"options.signal"),t=Gh(t),async function*(){var i;if(e!=null&&(i=e.signal)!==null&&i!==void 0&&i.aborted)throw new st;for await(let o of this){var n;if(e!=null&&(n=e.signal)!==null&&n!==void 0&&n.aborted)throw new st;if(t-- >0)yield o;else return}}.call(this)}ko.exports.streamReturningOperators={asIndexedPairs:K0,drop:em,filter:Oo,flatMap:Z0,map:An,take:tm,compose:z0};ko.exports.promiseReturningOperators={every:G0,forEach:Y0,reduce:J0,toArray:X0,some:Kh,find:Q0};});var xo=M((xC,Yh)=>{v();m();_();var{ArrayPrototypePop:rm,Promise:im}=ce(),{isIterable:nm,isNodeStream:sm,isWebStream:om}=tt(),{pipelineImpl:am}=mn(),{finished:lm}=mt();Mo();function um(...t){return new im((e,r)=>{let i,n,o=t[t.length-1];if(o&&typeof o=="object"&&!sm(o)&&!nm(o)&&!om(o)){let s=rm(t);i=s.signal,n=s.end;}am(t,(s,a)=>{s?r(s):e(a);},{signal:i,end:n});})}Yh.exports={finished:lm,pipeline:um};});var Mo=M(($C,sd)=>{v();m();_();var{Buffer:fm}=(ye(),X(_e)),{ObjectDefineProperty:Tt,ObjectKeys:Zh,ReflectApply:ed}=ce(),{promisify:{custom:td}}=Je(),{streamReturningOperators:Jh,promiseReturningOperators:Xh}=Qh(),{codes:{ERR_ILLEGAL_CONSTRUCTOR:rd}}=Se(),cm=Bo(),{pipeline:id}=mn(),{destroyer:hm}=tr(),nd=mt(),Lo=xo(),Uo=tt(),le=sd.exports=tn().Stream;le.isDisturbed=Uo.isDisturbed;le.isErrored=Uo.isErrored;le.isReadable=Uo.isReadable;le.Readable=di();for(let t of Zh(Jh)){let r=function(...i){if(new.target)throw rd();return le.Readable.from(ed(e,this,i))};let e=Jh[t];Tt(r,"name",{__proto__:null,value:e.name}),Tt(r,"length",{__proto__:null,value:e.length}),Tt(le.Readable.prototype,t,{__proto__:null,value:r,enumerable:!1,configurable:!0,writable:!0});}for(let t of Zh(Xh)){let r=function(...n){if(new.target)throw rd();return ed(e,this,n)};let e=Xh[t];Tt(r,"name",{__proto__:null,value:e.name}),Tt(r,"length",{__proto__:null,value:e.length}),Tt(le.Readable.prototype,t,{__proto__:null,value:r,enumerable:!1,configurable:!0,writable:!0});}le.Writable=uo();le.Duplex=nt();le.Transform=bo();le.PassThrough=_o();le.pipeline=id;var{addAbortSignal:dm}=ci();le.addAbortSignal=dm;le.finished=nd;le.destroy=hm;le.compose=cm;Tt(le,"promises",{__proto__:null,configurable:!0,enumerable:!0,get(){return Lo}});Tt(id,td,{__proto__:null,enumerable:!0,get(){return Lo.pipeline}});Tt(nd,td,{__proto__:null,enumerable:!0,get(){return Lo.finished}});le.Stream=le;le._isUint8Array=function(e){return e instanceof Uint8Array};le._uint8ArrayToBuffer=function(e){return fm.from(e.buffer,e.byteOffset,e.byteLength)};});var Dt=M((ZC,ue)=>{v();m();_();var he=Mo(),pm=xo(),gm=he.Readable.destroy;ue.exports=he.Readable;ue.exports._uint8ArrayToBuffer=he._uint8ArrayToBuffer;ue.exports._isUint8Array=he._isUint8Array;ue.exports.isDisturbed=he.isDisturbed;ue.exports.isErrored=he.isErrored;ue.exports.isReadable=he.isReadable;ue.exports.Readable=he.Readable;ue.exports.Writable=he.Writable;ue.exports.Duplex=he.Duplex;ue.exports.Transform=he.Transform;ue.exports.PassThrough=he.PassThrough;ue.exports.addAbortSignal=he.addAbortSignal;ue.exports.finished=he.finished;ue.exports.destroy=he.destroy;ue.exports.destroy=gm;ue.exports.pipeline=he.pipeline;ue.exports.compose=he.compose;Object.defineProperty(he,"promises",{configurable:!0,enumerable:!0,get(){return pm}});ue.exports.Stream=he.Stream;ue.exports.default=ue.exports;});var od=M((uB,qo)=>{v();m();_();typeof Object.create=="function"?qo.exports=function(e,r){r&&(e.super_=r,e.prototype=Object.create(r.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}));}:qo.exports=function(e,r){if(r){e.super_=r;var i=function(){};i.prototype=r.prototype,e.prototype=new i,e.prototype.constructor=e;}};});var ud=M((_B,ld)=>{v();m();_();var{Buffer:ze}=(ye(),X(_e)),ad=Symbol.for("BufferList");function ee(t){if(!(this instanceof ee))return new ee(t);ee._init.call(this,t);}ee._init=function(e){Object.defineProperty(this,ad,{value:!0}),this._bufs=[],this.length=0,e&&this.append(e);};ee.prototype._new=function(e){return new ee(e)};ee.prototype._offset=function(e){if(e===0)return [0,0];let r=0;for(let i=0;i<this._bufs.length;i++){let n=r+this._bufs[i].length;if(e<n||i===this._bufs.length-1)return [i,e-r];r=n;}};ee.prototype._reverseOffset=function(t){let e=t[0],r=t[1];for(let i=0;i<e;i++)r+=this._bufs[i].length;return r};ee.prototype.get=function(e){if(e>this.length||e<0)return;let r=this._offset(e);return this._bufs[r[0]][r[1]]};ee.prototype.slice=function(e,r){return typeof e=="number"&&e<0&&(e+=this.length),typeof r=="number"&&r<0&&(r+=this.length),this.copy(null,0,e,r)};ee.prototype.copy=function(e,r,i,n){if((typeof i!="number"||i<0)&&(i=0),(typeof n!="number"||n>this.length)&&(n=this.length),i>=this.length||n<=0)return e||ze.alloc(0);let o=!!e,s=this._offset(i),a=n-i,u=a,c=o&&r||0,h=s[1];if(i===0&&n===this.length){if(!o)return this._bufs.length===1?this._bufs[0]:ze.concat(this._bufs,this.length);for(let d=0;d<this._bufs.length;d++)this._bufs[d].copy(e,c),c+=this._bufs[d].length;return e}if(u<=this._bufs[s[0]].length-h)return o?this._bufs[s[0]].copy(e,r,h,h+u):this._bufs[s[0]].slice(h,h+u);o||(e=ze.allocUnsafe(a));for(let d=s[0];d<this._bufs.length;d++){let g=this._bufs[d].length-h;if(u>g)this._bufs[d].copy(e,c,h),c+=g;else {this._bufs[d].copy(e,c,h,h+u),c+=g;break}u-=g,h&&(h=0);}return e.length>c?e.slice(0,c):e};ee.prototype.shallowSlice=function(e,r){if(e=e||0,r=typeof r!="number"?this.length:r,e<0&&(e+=this.length),r<0&&(r+=this.length),e===r)return this._new();let i=this._offset(e),n=this._offset(r),o=this._bufs.slice(i[0],n[0]+1);return n[1]===0?o.pop():o[o.length-1]=o[o.length-1].slice(0,n[1]),i[1]!==0&&(o[0]=o[0].slice(i[1])),this._new(o)};ee.prototype.toString=function(e,r,i){return this.slice(r,i).toString(e)};ee.prototype.consume=function(e){if(e=Math.trunc(e),Number.isNaN(e)||e<=0)return this;for(;this._bufs.length;)if(e>=this._bufs[0].length)e-=this._bufs[0].length,this.length-=this._bufs[0].length,this._bufs.shift();else {this._bufs[0]=this._bufs[0].slice(e),this.length-=e;break}return this};ee.prototype.duplicate=function(){let e=this._new();for(let r=0;r<this._bufs.length;r++)e.append(this._bufs[r]);return e};ee.prototype.append=function(e){if(e==null)return this;if(e.buffer)this._appendBuffer(ze.from(e.buffer,e.byteOffset,e.byteLength));else if(Array.isArray(e))for(let r=0;r<e.length;r++)this.append(e[r]);else if(this._isBufferList(e))for(let r=0;r<e._bufs.length;r++)this.append(e._bufs[r]);else typeof e=="number"&&(e=e.toString()),this._appendBuffer(ze.from(e));return this};ee.prototype._appendBuffer=function(e){this._bufs.push(e),this.length+=e.length;};ee.prototype.indexOf=function(t,e,r){if(r===void 0&&typeof e=="string"&&(r=e,e=void 0),typeof t=="function"||Array.isArray(t))throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');if(typeof t=="number"?t=ze.from([t]):typeof t=="string"?t=ze.from(t,r):this._isBufferList(t)?t=t.slice():Array.isArray(t.buffer)?t=ze.from(t.buffer,t.byteOffset,t.byteLength):ze.isBuffer(t)||(t=ze.from(t)),e=Number(e||0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),t.length===0)return e>this.length?this.length:e;let i=this._offset(e),n=i[0],o=i[1];for(;n<this._bufs.length;n++){let s=this._bufs[n];for(;o<s.length;)if(s.length-o>=t.length){let u=s.indexOf(t,o);if(u!==-1)return this._reverseOffset([n,u]);o=s.length-t.length+1;}else {let u=this._reverseOffset([n,o]);if(this._match(u,t))return u;o++;}o=0;}return -1};ee.prototype._match=function(t,e){if(this.length-t<e.length)return !1;for(let r=0;r<e.length;r++)if(this.get(t+r)!==e[r])return !1;return !0};(function(){let t={readDoubleBE:8,readDoubleLE:8,readFloatBE:4,readFloatLE:4,readBigInt64BE:8,readBigInt64LE:8,readBigUInt64BE:8,readBigUInt64LE:8,readInt32BE:4,readInt32LE:4,readUInt32BE:4,readUInt32LE:4,readInt16BE:2,readInt16LE:2,readUInt16BE:2,readUInt16LE:2,readInt8:1,readUInt8:1,readIntBE:null,readIntLE:null,readUIntBE:null,readUIntLE:null};for(let e in t)(function(r){t[r]===null?ee.prototype[r]=function(i,n){return this.slice(i,i+n)[r](0,n)}:ee.prototype[r]=function(i=0){return this.slice(i,i+t[r])[r](0)};})(e);})();ee.prototype._isBufferList=function(e){return e instanceof ee||ee.isBufferList(e)};ee.isBufferList=function(e){return e!=null&&e[ad]};ld.exports=ee;});var fd=M((BB,In)=>{v();m();_();var Do=Dt().Duplex,ym=od(),mi=ud();function Ee(t){if(!(this instanceof Ee))return new Ee(t);if(typeof t=="function"){this._callback=t;let e=function(i){this._callback&&(this._callback(i),this._callback=null);}.bind(this);this.on("pipe",function(i){i.on("error",e);}),this.on("unpipe",function(i){i.removeListener("error",e);}),t=null;}mi._init.call(this,t),Do.call(this);}ym(Ee,Do);Object.assign(Ee.prototype,mi.prototype);Ee.prototype._new=function(e){return new Ee(e)};Ee.prototype._write=function(e,r,i){this._appendBuffer(e),typeof i=="function"&&i();};Ee.prototype._read=function(e){if(!this.length)return this.push(null);e=Math.min(e,this.length),this.push(this.slice(0,e)),this.consume(e);};Ee.prototype.end=function(e){Do.prototype.end.call(this,e),this._callback&&(this._callback(null,this.slice()),this._callback=null);};Ee.prototype._destroy=function(e,r){this._bufs.length=0,this.length=0,r(e);};Ee.prototype._isBufferList=function(e){return e instanceof Ee||e instanceof mi||Ee.isBufferList(e)};Ee.isBufferList=mi.isBufferList;In.exports=Ee;In.exports.BufferListStream=Ee;In.exports.BufferList=mi;});var hd=M((DB,cd)=>{v();m();_();var jo=class{constructor(){this.cmd=null,this.retain=!1,this.qos=0,this.dup=!1,this.length=-1,this.topic=null,this.payload=null;}};cd.exports=jo;});var Fo=M((QB,dd)=>{v();m();_();var L=dd.exports,{Buffer:Oe}=(ye(),X(_e));L.types={0:"reserved",1:"connect",2:"connack",3:"publish",4:"puback",5:"pubrec",6:"pubrel",7:"pubcomp",8:"subscribe",9:"suback",10:"unsubscribe",11:"unsuback",12:"pingreq",13:"pingresp",14:"disconnect",15:"auth"};L.requiredHeaderFlags={1:0,2:0,4:0,5:0,6:2,7:0,8:2,9:0,10:2,11:0,12:0,13:0,14:0,15:0};L.requiredHeaderFlagsErrors={};for(let t in L.requiredHeaderFlags){let e=L.requiredHeaderFlags[t];L.requiredHeaderFlagsErrors[t]="Invalid header flag bits, must be 0x"+e.toString(16)+" for "+L.types[t]+" packet";}L.codes={};for(let t in L.types){let e=L.types[t];L.codes[e]=t;}L.CMD_SHIFT=4;L.CMD_MASK=240;L.DUP_MASK=8;L.QOS_MASK=3;L.QOS_SHIFT=1;L.RETAIN_MASK=1;L.VARBYTEINT_MASK=127;L.VARBYTEINT_FIN_MASK=128;L.VARBYTEINT_MAX=268435455;L.SESSIONPRESENT_MASK=1;L.SESSIONPRESENT_HEADER=Oe.from([L.SESSIONPRESENT_MASK]);L.CONNACK_HEADER=Oe.from([L.codes.connack<<L.CMD_SHIFT]);L.USERNAME_MASK=128;L.PASSWORD_MASK=64;L.WILL_RETAIN_MASK=32;L.WILL_QOS_MASK=24;L.WILL_QOS_SHIFT=3;L.WILL_FLAG_MASK=4;L.CLEAN_SESSION_MASK=2;L.CONNECT_HEADER=Oe.from([L.codes.connect<<L.CMD_SHIFT]);L.properties={sessionExpiryInterval:17,willDelayInterval:24,receiveMaximum:33,maximumPacketSize:39,topicAliasMaximum:34,requestResponseInformation:25,requestProblemInformation:23,userProperties:38,authenticationMethod:21,authenticationData:22,payloadFormatIndicator:1,messageExpiryInterval:2,contentType:3,responseTopic:8,correlationData:9,maximumQoS:36,retainAvailable:37,assignedClientIdentifier:18,reasonString:31,wildcardSubscriptionAvailable:40,subscriptionIdentifiersAvailable:41,sharedSubscriptionAvailable:42,serverKeepAlive:19,responseInformation:26,serverReference:28,topicAlias:35,subscriptionIdentifier:11};L.propertiesCodes={};for(let t in L.properties){let e=L.properties[t];L.propertiesCodes[e]=t;}L.propertiesTypes={sessionExpiryInterval:"int32",willDelayInterval:"int32",receiveMaximum:"int16",maximumPacketSize:"int32",topicAliasMaximum:"int16",requestResponseInformation:"byte",requestProblemInformation:"byte",userProperties:"pair",authenticationMethod:"string",authenticationData:"binary",payloadFormatIndicator:"byte",messageExpiryInterval:"int32",contentType:"string",responseTopic:"string",correlationData:"binary",maximumQoS:"int8",retainAvailable:"byte",assignedClientIdentifier:"string",reasonString:"string",wildcardSubscriptionAvailable:"byte",subscriptionIdentifiersAvailable:"byte",sharedSubscriptionAvailable:"byte",serverKeepAlive:"int16",responseInformation:"string",serverReference:"string",topicAlias:"int16",subscriptionIdentifier:"var"};function jt(t){return [0,1,2].map(e=>[0,1].map(r=>[0,1].map(i=>{let n=Oe.alloc(1);return n.writeUInt8(L.codes[t]<<L.CMD_SHIFT|(r?L.DUP_MASK:0)|e<<L.QOS_SHIFT|i,0,!0),n})))}L.PUBLISH_HEADER=jt("publish");L.SUBSCRIBE_HEADER=jt("subscribe");L.SUBSCRIBE_OPTIONS_QOS_MASK=3;L.SUBSCRIBE_OPTIONS_NL_MASK=1;L.SUBSCRIBE_OPTIONS_NL_SHIFT=2;L.SUBSCRIBE_OPTIONS_RAP_MASK=1;L.SUBSCRIBE_OPTIONS_RAP_SHIFT=3;L.SUBSCRIBE_OPTIONS_RH_MASK=3;L.SUBSCRIBE_OPTIONS_RH_SHIFT=4;L.SUBSCRIBE_OPTIONS_RH=[0,16,32];L.SUBSCRIBE_OPTIONS_NL=4;L.SUBSCRIBE_OPTIONS_RAP=8;L.SUBSCRIBE_OPTIONS_QOS=[0,1,2];L.UNSUBSCRIBE_HEADER=jt("unsubscribe");L.ACKS={unsuback:jt("unsuback"),puback:jt("puback"),pubcomp:jt("pubcomp"),pubrel:jt("pubrel"),pubrec:jt("pubrec")};L.SUBACK_HEADER=Oe.from([L.codes.suback<<L.CMD_SHIFT]);L.VERSION3=Oe.from([3]);L.VERSION4=Oe.from([4]);L.VERSION5=Oe.from([5]);L.VERSION131=Oe.from([131]);L.VERSION132=Oe.from([132]);L.QOS=[0,1,2].map(t=>Oe.from([t]));L.EMPTY={pingreq:Oe.from([L.codes.pingreq<<4,0]),pingresp:Oe.from([L.codes.pingresp<<4,0]),disconnect:Oe.from([L.codes.disconnect<<4,0])};L.MQTT5_PUBACK_PUBREC_CODES={0:"Success",16:"No matching subscribers",128:"Unspecified error",131:"Implementation specific error",135:"Not authorized",144:"Topic Name invalid",145:"Packet identifier in use",151:"Quota exceeded",153:"Payload format invalid"};L.MQTT5_PUBREL_PUBCOMP_CODES={0:"Success",146:"Packet Identifier not found"};L.MQTT5_SUBACK_CODES={0:"Granted QoS 0",1:"Granted QoS 1",2:"Granted QoS 2",128:"Unspecified error",131:"Implementation specific error",135:"Not authorized",143:"Topic Filter invalid",145:"Packet Identifier in use",151:"Quota exceeded",158:"Shared Subscriptions not supported",161:"Subscription Identifiers not supported",162:"Wildcard Subscriptions not supported"};L.MQTT5_UNSUBACK_CODES={0:"Success",17:"No subscription existed",128:"Unspecified error",131:"Implementation specific error",135:"Not authorized",143:"Topic Filter invalid",145:"Packet Identifier in use"};L.MQTT5_DISCONNECT_CODES={0:"Normal disconnection",4:"Disconnect with Will Message",128:"Unspecified error",129:"Malformed Packet",130:"Protocol Error",131:"Implementation specific error",135:"Not authorized",137:"Server busy",139:"Server shutting down",141:"Keep Alive timeout",142:"Session taken over",143:"Topic Filter invalid",144:"Topic Name invalid",147:"Receive Maximum exceeded",148:"Topic Alias invalid",149:"Packet too large",150:"Message rate too high",151:"Quota exceeded",152:"Administrative action",153:"Payload format invalid",154:"Retain not supported",155:"QoS not supported",156:"Use another server",157:"Server moved",158:"Shared Subscriptions not supported",159:"Connection rate exceeded",160:"Maximum connect time",161:"Subscription Identifiers not supported",162:"Wildcard Subscriptions not supported"};L.MQTT5_AUTH_CODES={0:"Success",24:"Continue authentication",25:"Re-authenticate"};});var gd=M((sP,pd)=>{v();m();_();var Vr=1e3,zr=Vr*60,Kr=zr*60,gr=Kr*24,bm=gr*7,wm=gr*365.25;pd.exports=function(t,e){e=e||{};var r=typeof t;if(r==="string"&&t.length>0)return _m(t);if(r==="number"&&isFinite(t))return e.long?vm(t):mm(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))};function _m(t){if(t=String(t),!(t.length>100)){var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(e){var r=parseFloat(e[1]),i=(e[2]||"ms").toLowerCase();switch(i){case"years":case"year":case"yrs":case"yr":case"y":return r*wm;case"weeks":case"week":case"w":return r*bm;case"days":case"day":case"d":return r*gr;case"hours":case"hour":case"hrs":case"hr":case"h":return r*Kr;case"minutes":case"minute":case"mins":case"min":case"m":return r*zr;case"seconds":case"second":case"secs":case"sec":case"s":return r*Vr;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function mm(t){var e=Math.abs(t);return e>=gr?Math.round(t/gr)+"d":e>=Kr?Math.round(t/Kr)+"h":e>=zr?Math.round(t/zr)+"m":e>=Vr?Math.round(t/Vr)+"s":t+"ms"}function vm(t){var e=Math.abs(t);return e>=gr?Tn(t,e,gr,"day"):e>=Kr?Tn(t,e,Kr,"hour"):e>=zr?Tn(t,e,zr,"minute"):e>=Vr?Tn(t,e,Vr,"second"):t+" ms"}function Tn(t,e,r,i){var n=e>=r*1.5;return Math.round(t/r)+" "+i+(n?"s":"")}});var bd=M((gP,yd)=>{v();m();_();function Em(t){r.debug=r,r.default=r,r.coerce=u,r.disable=o,r.enable=n,r.enabled=s,r.humanize=gd(),r.destroy=c,Object.keys(t).forEach(h=>{r[h]=t[h];}),r.names=[],r.skips=[],r.formatters={};function e(h){let d=0;for(let g=0;g<h.length;g++)d=(d<<5)-d+h.charCodeAt(g),d|=0;return r.colors[Math.abs(d)%r.colors.length]}r.selectColor=e;function r(h){let d,g=null,y,w;function E(...S){if(!E.enabled)return;let I=E,C=Number(new Date),R=C-(d||C);I.diff=R,I.prev=d,I.curr=C,d=C,S[0]=r.coerce(S[0]),typeof S[0]!="string"&&S.unshift("%O");let U=0;S[0]=S[0].replace(/%([a-zA-Z%])/g,(W,K)=>{if(W==="%%")return "%";U++;let z=r.formatters[K];if(typeof z=="function"){let Q=S[U];W=z.call(I,Q),S.splice(U,1),U--;}return W}),r.formatArgs.call(I,S),(I.log||r.log).apply(I,S);}return E.namespace=h,E.useColors=r.useColors(),E.color=r.selectColor(h),E.extend=i,E.destroy=r.destroy,Object.defineProperty(E,"enabled",{enumerable:!0,configurable:!1,get:()=>g!==null?g:(y!==r.namespaces&&(y=r.namespaces,w=r.enabled(h)),w),set:S=>{g=S;}}),typeof r.init=="function"&&r.init(E),E}function i(h,d){let g=r(this.namespace+(typeof d>"u"?":":d)+h);return g.log=this.log,g}function n(h){r.save(h),r.namespaces=h,r.names=[],r.skips=[];let d,g=(typeof h=="string"?h:"").split(/[\s,]+/),y=g.length;for(d=0;d<y;d++)g[d]&&(h=g[d].replace(/\*/g,".*?"),h[0]==="-"?r.skips.push(new RegExp("^"+h.slice(1)+"$")):r.names.push(new RegExp("^"+h+"$")));}function o(){let h=[...r.names.map(a),...r.skips.map(a).map(d=>"-"+d)].join(",");return r.enable(""),h}function s(h){if(h[h.length-1]==="*")return !0;let d,g;for(d=0,g=r.skips.length;d<g;d++)if(r.skips[d].test(h))return !1;for(d=0,g=r.names.length;d<g;d++)if(r.names[d].test(h))return !0;return !1}function a(h){return h.toString().substring(2,h.toString().length-2).replace(/\.\*\?$/,"*")}function u(h){return h instanceof Error?h.stack||h.message:h}function c(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");}return r.enable(r.load()),r}yd.exports=Em;});var ot=M((xe,Rn)=>{v();m();_();xe.formatArgs=Am;xe.save=Im;xe.load=Tm;xe.useColors=Sm;xe.storage=Rm();xe.destroy=(()=>{let t=!1;return ()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));}})();xe.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function Sm(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof B<"u"&&B.userAgent&&B.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof B<"u"&&B.userAgent&&B.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof B<"u"&&B.userAgent&&B.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function Am(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+Rn.exports.humanize(this.diff),!this.useColors)return;let e="color: "+this.color;t.splice(1,0,e,"color: inherit");let r=0,i=0;t[0].replace(/%[a-zA-Z%]/g,n=>{n!=="%%"&&(r++,n==="%c"&&(i=r));}),t.splice(i,0,e);}xe.log=console.debug||console.log||(()=>{});function Im(t){try{t?xe.storage.setItem("debug",t):xe.storage.removeItem("debug");}catch{}}function Tm(){let t;try{t=xe.storage.getItem("debug");}catch{}return !t&&typeof P<"u"&&"env"in P&&(t=P.env.DEBUG),t}function Rm(){try{return localStorage}catch{}}Rn.exports=bd()(xe);var{formatters:Cm}=Rn.exports;Cm.j=function(t){try{return JSON.stringify(t)}catch(e){return "[UnexpectedJSONParseError]: "+e.message}};});var md=M((MP,_d)=>{v();m();_();var Bm=fd(),{EventEmitter:Pm}=(ir(),X(rr)),wd=hd(),V=Fo(),D=ot()("mqtt-packet:parser"),Wo=class t extends Pm{constructor(){super(),this.parser=this.constructor.parser;}static parser(e){return this instanceof t?(this.settings=e||{},this._states=["_parseHeader","_parseLength","_parsePayload","_newPacket"],this._resetState(),this):new t().parser(e)}_resetState(){D("_resetState: resetting packet, error, _list, and _stateCounter"),this.packet=new wd,this.error=null,this._list=Bm(),this._stateCounter=0;}parse(e){for(this.error&&this._resetState(),this._list.append(e),D("parse: current state: %s",this._states[this._stateCounter]);(this.packet.length!==-1||this._list.length>0)&&this[this._states[this._stateCounter]]()&&!this.error;)this._stateCounter++,D("parse: state complete. _stateCounter is now: %d",this._stateCounter),D("parse: packet.length: %d, buffer list length: %d",this.packet.length,this._list.length),this._stateCounter>=this._states.length&&(this._stateCounter=0);return D("parse: exited while loop. packet: %d, buffer list length: %d",this.packet.length,this._list.length),this._list.length}_parseHeader(){let e=this._list.readUInt8(0),r=e>>V.CMD_SHIFT;this.packet.cmd=V.types[r];let i=e&15,n=V.requiredHeaderFlags[r];return n!=null&&i!==n?this._emitError(new Error(V.requiredHeaderFlagsErrors[r])):(this.packet.retain=(e&V.RETAIN_MASK)!==0,this.packet.qos=e>>V.QOS_SHIFT&V.QOS_MASK,this.packet.qos>2?this._emitError(new Error("Packet must not have both QoS bits set to 1")):(this.packet.dup=(e&V.DUP_MASK)!==0,D("_parseHeader: packet: %o",this.packet),this._list.consume(1),!0))}_parseLength(){let e=this._parseVarByteNum(!0);return e&&(this.packet.length=e.value,this._list.consume(e.bytes)),D("_parseLength %d",e.value),!!e}_parsePayload(){D("_parsePayload: payload %O",this._list);let e=!1;if(this.packet.length===0||this._list.length>=this.packet.length){switch(this._pos=0,this.packet.cmd){case"connect":this._parseConnect();break;case"connack":this._parseConnack();break;case"publish":this._parsePublish();break;case"puback":case"pubrec":case"pubrel":case"pubcomp":this._parseConfirmation();break;case"subscribe":this._parseSubscribe();break;case"suback":this._parseSuback();break;case"unsubscribe":this._parseUnsubscribe();break;case"unsuback":this._parseUnsuback();break;case"pingreq":case"pingresp":break;case"disconnect":this._parseDisconnect();break;case"auth":this._parseAuth();break;default:this._emitError(new Error("Not supported"));}e=!0;}return D("_parsePayload complete result: %s",e),e}_parseConnect(){D("_parseConnect");let e,r,i,n,o={},s=this.packet,a=this._parseString();if(a===null)return this._emitError(new Error("Cannot parse protocolId"));if(a!=="MQTT"&&a!=="MQIsdp")return this._emitError(new Error("Invalid protocolId"));if(s.protocolId=a,this._pos>=this._list.length)return this._emitError(new Error("Packet too short"));if(s.protocolVersion=this._list.readUInt8(this._pos),s.protocolVersion>=128&&(s.bridgeMode=!0,s.protocolVersion=s.protocolVersion-128),s.protocolVersion!==3&&s.protocolVersion!==4&&s.protocolVersion!==5)return this._emitError(new Error("Invalid protocol version"));if(this._pos++,this._pos>=this._list.length)return this._emitError(new Error("Packet too short"));if(this._list.readUInt8(this._pos)&1)return this._emitError(new Error("Connect flag bit 0 must be 0, but got 1"));o.username=this._list.readUInt8(this._pos)&V.USERNAME_MASK,o.password=this._list.readUInt8(this._pos)&V.PASSWORD_MASK,o.will=this._list.readUInt8(this._pos)&V.WILL_FLAG_MASK;let u=!!(this._list.readUInt8(this._pos)&V.WILL_RETAIN_MASK),c=(this._list.readUInt8(this._pos)&V.WILL_QOS_MASK)>>V.WILL_QOS_SHIFT;if(o.will)s.will={},s.will.retain=u,s.will.qos=c;else {if(u)return this._emitError(new Error("Will Retain Flag must be set to zero when Will Flag is set to 0"));if(c)return this._emitError(new Error("Will QoS must be set to zero when Will Flag is set to 0"))}if(s.clean=(this._list.readUInt8(this._pos)&V.CLEAN_SESSION_MASK)!==0,this._pos++,s.keepalive=this._parseNum(),s.keepalive===-1)return this._emitError(new Error("Packet too short"));if(s.protocolVersion===5){let d=this._parseProperties();Object.getOwnPropertyNames(d).length&&(s.properties=d);}let h=this._parseString();if(h===null)return this._emitError(new Error("Packet too short"));if(s.clientId=h,D("_parseConnect: packet.clientId: %s",s.clientId),o.will){if(s.protocolVersion===5){let d=this._parseProperties();Object.getOwnPropertyNames(d).length&&(s.will.properties=d);}if(e=this._parseString(),e===null)return this._emitError(new Error("Cannot parse will topic"));if(s.will.topic=e,D("_parseConnect: packet.will.topic: %s",s.will.topic),r=this._parseBuffer(),r===null)return this._emitError(new Error("Cannot parse will payload"));s.will.payload=r,D("_parseConnect: packet.will.paylaod: %s",s.will.payload);}if(o.username){if(n=this._parseString(),n===null)return this._emitError(new Error("Cannot parse username"));s.username=n,D("_parseConnect: packet.username: %s",s.username);}if(o.password){if(i=this._parseBuffer(),i===null)return this._emitError(new Error("Cannot parse password"));s.password=i;}return this.settings=s,D("_parseConnect: complete"),s}_parseConnack(){D("_parseConnack");let e=this.packet;if(this._list.length<1)return null;let r=this._list.readUInt8(this._pos++);if(r>1)return this._emitError(new Error("Invalid connack flags, bits 7-1 must be set to 0"));if(e.sessionPresent=!!(r&V.SESSIONPRESENT_MASK),this.settings.protocolVersion===5)this._list.length>=2?e.reasonCode=this._list.readUInt8(this._pos++):e.reasonCode=0;else {if(this._list.length<2)return null;e.returnCode=this._list.readUInt8(this._pos++);}if(e.returnCode===-1||e.reasonCode===-1)return this._emitError(new Error("Cannot parse return code"));if(this.settings.protocolVersion===5){let i=this._parseProperties();Object.getOwnPropertyNames(i).length&&(e.properties=i);}D("_parseConnack: complete");}_parsePublish(){D("_parsePublish");let e=this.packet;if(e.topic=this._parseString(),e.topic===null)return this._emitError(new Error("Cannot parse topic"));if(!(e.qos>0&&!this._parseMessageId())){if(this.settings.protocolVersion===5){let r=this._parseProperties();Object.getOwnPropertyNames(r).length&&(e.properties=r);}e.payload=this._list.slice(this._pos,e.length),D("_parsePublish: payload from buffer list: %o",e.payload);}}_parseSubscribe(){D("_parseSubscribe");let e=this.packet,r,i,n,o,s,a,u;if(e.subscriptions=[],!!this._parseMessageId()){if(this.settings.protocolVersion===5){let c=this._parseProperties();Object.getOwnPropertyNames(c).length&&(e.properties=c);}if(e.length<=0)return this._emitError(new Error("Malformed subscribe, no payload specified"));for(;this._pos<e.length;){if(r=this._parseString(),r===null)return this._emitError(new Error("Cannot parse topic"));if(this._pos>=e.length)return this._emitError(new Error("Malformed Subscribe Payload"));if(i=this._parseByte(),this.settings.protocolVersion===5){if(i&192)return this._emitError(new Error("Invalid subscribe topic flag bits, bits 7-6 must be 0"))}else if(i&252)return this._emitError(new Error("Invalid subscribe topic flag bits, bits 7-2 must be 0"));if(n=i&V.SUBSCRIBE_OPTIONS_QOS_MASK,n>2)return this._emitError(new Error("Invalid subscribe QoS, must be <= 2"));if(a=(i>>V.SUBSCRIBE_OPTIONS_NL_SHIFT&V.SUBSCRIBE_OPTIONS_NL_MASK)!==0,s=(i>>V.SUBSCRIBE_OPTIONS_RAP_SHIFT&V.SUBSCRIBE_OPTIONS_RAP_MASK)!==0,o=i>>V.SUBSCRIBE_OPTIONS_RH_SHIFT&V.SUBSCRIBE_OPTIONS_RH_MASK,o>2)return this._emitError(new Error("Invalid retain handling, must be <= 2"));u={topic:r,qos:n},this.settings.protocolVersion===5?(u.nl=a,u.rap=s,u.rh=o):this.settings.bridgeMode&&(u.rh=0,u.rap=!0,u.nl=!0),D("_parseSubscribe: push subscription `%s` to subscription",u),e.subscriptions.push(u);}}}_parseSuback(){D("_parseSuback");let e=this.packet;if(this.packet.granted=[],!!this._parseMessageId()){if(this.settings.protocolVersion===5){let r=this._parseProperties();Object.getOwnPropertyNames(r).length&&(e.properties=r);}if(e.length<=0)return this._emitError(new Error("Malformed suback, no payload specified"));for(;this._pos<this.packet.length;){let r=this._list.readUInt8(this._pos++);if(this.settings.protocolVersion===5){if(!V.MQTT5_SUBACK_CODES[r])return this._emitError(new Error("Invalid suback code"))}else if(r>2&&r!==128)return this._emitError(new Error("Invalid suback QoS, must be 0, 1, 2 or 128"));this.packet.granted.push(r);}}}_parseUnsubscribe(){D("_parseUnsubscribe");let e=this.packet;if(e.unsubscriptions=[],!!this._parseMessageId()){if(this.settings.protocolVersion===5){let r=this._parseProperties();Object.getOwnPropertyNames(r).length&&(e.properties=r);}if(e.length<=0)return this._emitError(new Error("Malformed unsubscribe, no payload specified"));for(;this._pos<e.length;){let r=this._parseString();if(r===null)return this._emitError(new Error("Cannot parse topic"));D("_parseUnsubscribe: push topic `%s` to unsubscriptions",r),e.unsubscriptions.push(r);}}}_parseUnsuback(){D("_parseUnsuback");let e=this.packet;if(!this._parseMessageId())return this._emitError(new Error("Cannot parse messageId"));if((this.settings.protocolVersion===3||this.settings.protocolVersion===4)&&e.length!==2)return this._emitError(new Error("Malformed unsuback, payload length must be 2"));if(e.length<=0)return this._emitError(new Error("Malformed unsuback, no payload specified"));if(this.settings.protocolVersion===5){let r=this._parseProperties();for(Object.getOwnPropertyNames(r).length&&(e.properties=r),e.granted=[];this._pos<this.packet.length;){let i=this._list.readUInt8(this._pos++);if(!V.MQTT5_UNSUBACK_CODES[i])return this._emitError(new Error("Invalid unsuback code"));this.packet.granted.push(i);}}}_parseConfirmation(){D("_parseConfirmation: packet.cmd: `%s`",this.packet.cmd);let e=this.packet;if(this._parseMessageId(),this.settings.protocolVersion===5){if(e.length>2){switch(e.reasonCode=this._parseByte(),this.packet.cmd){case"puback":case"pubrec":if(!V.MQTT5_PUBACK_PUBREC_CODES[e.reasonCode])return this._emitError(new Error("Invalid "+this.packet.cmd+" reason code"));break;case"pubrel":case"pubcomp":if(!V.MQTT5_PUBREL_PUBCOMP_CODES[e.reasonCode])return this._emitError(new Error("Invalid "+this.packet.cmd+" reason code"));break}D("_parseConfirmation: packet.reasonCode `%d`",e.reasonCode);}else e.reasonCode=0;if(e.length>3){let r=this._parseProperties();Object.getOwnPropertyNames(r).length&&(e.properties=r);}}return !0}_parseDisconnect(){let e=this.packet;if(D("_parseDisconnect"),this.settings.protocolVersion===5){this._list.length>0?(e.reasonCode=this._parseByte(),V.MQTT5_DISCONNECT_CODES[e.reasonCode]||this._emitError(new Error("Invalid disconnect reason code"))):e.reasonCode=0;let r=this._parseProperties();Object.getOwnPropertyNames(r).length&&(e.properties=r);}return D("_parseDisconnect result: true"),!0}_parseAuth(){D("_parseAuth");let e=this.packet;if(this.settings.protocolVersion!==5)return this._emitError(new Error("Not supported auth packet for this version MQTT"));if(e.reasonCode=this._parseByte(),!V.MQTT5_AUTH_CODES[e.reasonCode])return this._emitError(new Error("Invalid auth reason code"));let r=this._parseProperties();return Object.getOwnPropertyNames(r).length&&(e.properties=r),D("_parseAuth: result: true"),!0}_parseMessageId(){let e=this.packet;return e.messageId=this._parseNum(),e.messageId===null?(this._emitError(new Error("Cannot parse messageId")),!1):(D("_parseMessageId: packet.messageId %d",e.messageId),!0)}_parseString(e){let r=this._parseNum(),i=r+this._pos;if(r===-1||i>this._list.length||i>this.packet.length)return null;let n=this._list.toString("utf8",this._pos,i);return this._pos+=r,D("_parseString: result: %s",n),n}_parseStringPair(){return D("_parseStringPair"),{name:this._parseString(),value:this._parseString()}}_parseBuffer(){let e=this._parseNum(),r=e+this._pos;if(e===-1||r>this._list.length||r>this.packet.length)return null;let i=this._list.slice(this._pos,r);return this._pos+=e,D("_parseBuffer: result: %o",i),i}_parseNum(){if(this._list.length-this._pos<2)return -1;let e=this._list.readUInt16BE(this._pos);return this._pos+=2,D("_parseNum: result: %s",e),e}_parse4ByteNum(){if(this._list.length-this._pos<4)return -1;let e=this._list.readUInt32BE(this._pos);return this._pos+=4,D("_parse4ByteNum: result: %s",e),e}_parseVarByteNum(e){D("_parseVarByteNum");let r=4,i=0,n=1,o=0,s=!1,a,u=this._pos?this._pos:0;for(;i<r&&u+i<this._list.length;){if(a=this._list.readUInt8(u+i++),o+=n*(a&V.VARBYTEINT_MASK),n*=128,!(a&V.VARBYTEINT_FIN_MASK)){s=!0;break}if(this._list.length<=i)break}return !s&&i===r&&this._list.length>=i&&this._emitError(new Error("Invalid variable byte integer")),u&&(this._pos+=i),s?e?s={bytes:i,value:o}:s=o:s=!1,D("_parseVarByteNum: result: %o",s),s}_parseByte(){let e;return this._pos<this._list.length&&(e=this._list.readUInt8(this._pos),this._pos++),D("_parseByte: result: %o",e),e}_parseByType(e){switch(D("_parseByType: type: %s",e),e){case"byte":return this._parseByte()!==0;case"int8":return this._parseByte();case"int16":return this._parseNum();case"int32":return this._parse4ByteNum();case"var":return this._parseVarByteNum();case"string":return this._parseString();case"pair":return this._parseStringPair();case"binary":return this._parseBuffer()}}_parseProperties(){D("_parseProperties");let e=this._parseVarByteNum(),i=this._pos+e,n={};for(;this._pos<i;){let o=this._parseByte();if(!o)return this._emitError(new Error("Cannot parse property code type")),!1;let s=V.propertiesCodes[o];if(!s)return this._emitError(new Error("Unknown property")),!1;if(s==="userProperties"){n[s]||(n[s]=Object.create(null));let a=this._parseByType(V.propertiesTypes[s]);if(n[s][a.name])if(Array.isArray(n[s][a.name]))n[s][a.name].push(a.value);else {let u=n[s][a.name];n[s][a.name]=[u],n[s][a.name].push(a.value);}else n[s][a.name]=a.value;continue}n[s]?Array.isArray(n[s])?n[s].push(this._parseByType(V.propertiesTypes[s])):(n[s]=[n[s]],n[s].push(this._parseByType(V.propertiesTypes[s]))):n[s]=this._parseByType(V.propertiesTypes[s]);}return n}_newPacket(){return D("_newPacket"),this.packet&&(this._list.consume(this.packet.length),D("_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d",this.packet.cmd,this.packet.payload,this.packet.length),this.emit("packet",this.packet)),D("_newPacket: new packet"),this.packet=new wd,this._pos=0,!0}_emitError(e){D("_emitError",e),this.error=e,this.emit("error",e);}};_d.exports=Wo;});var Ad=M((HP,Sd)=>{v();m();_();var{Buffer:vi}=(ye(),X(_e)),Om=65536,vd={},km=vi.isBuffer(vi.from([1,2]).subarray(0,1));function Ed(t){let e=vi.allocUnsafe(2);return e.writeUInt8(t>>8,0),e.writeUInt8(t&255,0+1),e}function xm(){for(let t=0;t<Om;t++)vd[t]=Ed(t);}function Mm(t){let r=0,i=0,n=vi.allocUnsafe(4);do r=t%128|0,t=t/128|0,t>0&&(r=r|128),n.writeUInt8(r,i++);while(t>0&&i<4);return t>0&&(i=0),km?n.subarray(0,i):n.slice(0,i)}function Lm(t){let e=vi.allocUnsafe(4);return e.writeUInt32BE(t,0),e}Sd.exports={cache:vd,generateCache:xm,generateNumber:Ed,genBufVariableByteInt:Mm,generate4ByteBuffer:Lm};});var Id=M((eO,$o)=>{v();m();_();typeof P>"u"||!P.version||P.version.indexOf("v0.")===0||P.version.indexOf("v1.")===0&&P.version.indexOf("v1.8.")!==0?$o.exports={nextTick:Um}:$o.exports=P;function Um(t,e,r,i){if(typeof t!="function")throw new TypeError('"callback" argument must be a function');var n=arguments.length,o,s;switch(n){case 0:case 1:return P.nextTick(t);case 2:return P.nextTick(function(){t.call(null,e);});case 3:return P.nextTick(function(){t.call(null,e,r);});case 4:return P.nextTick(function(){t.call(null,e,r,i);});default:for(o=new Array(n-1),s=0;s<o.length;)o[s++]=arguments[s];return P.nextTick(function(){t.apply(null,o);})}}});var zo=M((fO,xd)=>{v();m();_();var j=Fo(),{Buffer:q}=(ye(),X(_e)),Nm=q.allocUnsafe(0),qm=q.from([0]),Ei=Ad(),Dm=Id().nextTick,qe=ot()("mqtt-packet:writeToStream"),Cn=Ei.cache,jm=Ei.generateNumber,Fm=Ei.generateCache,Ho=Ei.genBufVariableByteInt,Wm=Ei.generate4ByteBuffer,Ie=Vo,Bn=!0;function Od(t,e,r){switch(qe("generate called"),e.cork&&(e.cork(),Dm($m,e)),Bn&&(Bn=!1,Fm()),qe("generate: packet.cmd: %s",t.cmd),t.cmd){case"connect":return Hm(t,e);case"connack":return Vm(t,e,r);case"publish":return zm(t,e,r);case"puback":case"pubrec":case"pubrel":case"pubcomp":return Km(t,e,r);case"subscribe":return Gm(t,e,r);case"suback":return Qm(t,e,r);case"unsubscribe":return Ym(t,e,r);case"unsuback":return Jm(t,e,r);case"pingreq":case"pingresp":return Xm(t,e);case"disconnect":return Zm(t,e,r);case"auth":return e1(t,e,r);default:return e.destroy(new Error("Unknown command")),!1}}Object.defineProperty(Od,"cacheNumbers",{get(){return Ie===Vo},set(t){t?((!Cn||Object.keys(Cn).length===0)&&(Bn=!0),Ie=Vo):(Bn=!1,Ie=t1);}});function $m(t){t.uncork();}function Hm(t,e,r){let i=t||{},n=i.protocolId||"MQTT",o=i.protocolVersion||4,s=i.will,a=i.clean,u=i.keepalive||0,c=i.clientId||"",h=i.username,d=i.password,g=i.properties;a===void 0&&(a=!0);let y=0;if(!n||typeof n!="string"&&!q.isBuffer(n))return e.destroy(new Error("Invalid protocolId")),!1;if(y+=n.length+2,o!==3&&o!==4&&o!==5)return e.destroy(new Error("Invalid protocol version")),!1;if(y+=1,(typeof c=="string"||q.isBuffer(c))&&(c||o>=4)&&(c||a))y+=q.byteLength(c)+2;else {if(o<4)return e.destroy(new Error("clientId must be supplied before 3.1.1")),!1;if(a*1===0)return e.destroy(new Error("clientId must be given if cleanSession set to 0")),!1}if(typeof u!="number"||u<0||u>65535||u%1!==0)return e.destroy(new Error("Invalid keepalive")),!1;y+=2,y+=1;let w,E;if(o===5){if(w=Ft(e,g),!w)return !1;y+=w.length;}if(s){if(typeof s!="object")return e.destroy(new Error("Invalid will")),!1;if(!s.topic||typeof s.topic!="string")return e.destroy(new Error("Invalid will topic")),!1;if(y+=q.byteLength(s.topic)+2,y+=2,s.payload)if(s.payload.length>=0)typeof s.payload=="string"?y+=q.byteLength(s.payload):y+=s.payload.length;else return e.destroy(new Error("Invalid will payload")),!1;if(E={},o===5){if(E=Ft(e,s.properties),!E)return !1;y+=E.length;}}let S=!1;if(h!=null)if(Pd(h))S=!0,y+=q.byteLength(h)+2;else return e.destroy(new Error("Invalid username")),!1;if(d!=null){if(!S)return e.destroy(new Error("Username is required to use password")),!1;if(Pd(d))y+=kd(d)+2;else return e.destroy(new Error("Invalid password")),!1}e.write(j.CONNECT_HEADER),De(e,y),Gr(e,n),i.bridgeMode&&(o+=128),e.write(o===131?j.VERSION131:o===132?j.VERSION132:o===4?j.VERSION4:o===5?j.VERSION5:j.VERSION3);let I=0;return I|=h!=null?j.USERNAME_MASK:0,I|=d!=null?j.PASSWORD_MASK:0,I|=s&&s.retain?j.WILL_RETAIN_MASK:0,I|=s&&s.qos?s.qos<<j.WILL_QOS_SHIFT:0,I|=s?j.WILL_FLAG_MASK:0,I|=a?j.CLEAN_SESSION_MASK:0,e.write(q.from([I])),Ie(e,u),o===5&&w.write(),Gr(e,c),s&&(o===5&&E.write(),yr(e,s.topic),Gr(e,s.payload)),h!=null&&Gr(e,h),d!=null&&Gr(e,d),!0}function Vm(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=i===5?n.reasonCode:n.returnCode,s=n.properties,a=2;if(typeof o!="number")return e.destroy(new Error("Invalid return code")),!1;let u=null;if(i===5){if(u=Ft(e,s),!u)return !1;a+=u.length;}return e.write(j.CONNACK_HEADER),De(e,a),e.write(n.sessionPresent?j.SESSIONPRESENT_HEADER:qm),e.write(q.from([o])),u?.write(),!0}function zm(t,e,r){qe("publish: packet: %o",t);let i=r?r.protocolVersion:4,n=t||{},o=n.qos||0,s=n.retain?j.RETAIN_MASK:0,a=n.topic,u=n.payload||Nm,c=n.messageId,h=n.properties,d=0;if(typeof a=="string")d+=q.byteLength(a)+2;else if(q.isBuffer(a))d+=a.length+2;else return e.destroy(new Error("Invalid topic")),!1;if(q.isBuffer(u)?d+=u.length:d+=q.byteLength(u),o&&typeof c!="number")return e.destroy(new Error("Invalid messageId")),!1;o&&(d+=2);let g=null;if(i===5){if(g=Ft(e,h),!g)return !1;d+=g.length;}return e.write(j.PUBLISH_HEADER[o][n.dup?1:0][s?1:0]),De(e,d),Ie(e,kd(a)),e.write(a),o>0&&Ie(e,c),g?.write(),qe("publish: payload: %o",u),e.write(u)}function Km(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.cmd||"puback",s=n.messageId,a=n.dup&&o==="pubrel"?j.DUP_MASK:0,u=0,c=n.reasonCode,h=n.properties,d=i===5?3:2;if(o==="pubrel"&&(u=1),typeof s!="number")return e.destroy(new Error("Invalid messageId")),!1;let g=null;if(i===5&&typeof h=="object"){if(g=Si(e,h,r,d),!g)return !1;d+=g.length;}return e.write(j.ACKS[o][u][a][0]),d===3&&(d+=c!==0?1:-1),De(e,d),Ie(e,s),i===5&&d!==2&&e.write(q.from([c])),g!==null?g.write():d===4&&e.write(q.from([0])),!0}function Gm(t,e,r){qe("subscribe: packet: ");let i=r?r.protocolVersion:4,n=t||{},o=n.dup?j.DUP_MASK:0,s=n.messageId,a=n.subscriptions,u=n.properties,c=0;if(typeof s!="number")return e.destroy(new Error("Invalid messageId")),!1;c+=2;let h=null;if(i===5){if(h=Ft(e,u),!h)return !1;c+=h.length;}if(typeof a=="object"&&a.length)for(let g=0;g<a.length;g+=1){let y=a[g].topic,w=a[g].qos;if(typeof y!="string")return e.destroy(new Error("Invalid subscriptions - invalid topic")),!1;if(typeof w!="number")return e.destroy(new Error("Invalid subscriptions - invalid qos")),!1;if(i===5){if(typeof(a[g].nl||!1)!="boolean")return e.destroy(new Error("Invalid subscriptions - invalid No Local")),!1;if(typeof(a[g].rap||!1)!="boolean")return e.destroy(new Error("Invalid subscriptions - invalid Retain as Published")),!1;let I=a[g].rh||0;if(typeof I!="number"||I>2)return e.destroy(new Error("Invalid subscriptions - invalid Retain Handling")),!1}c+=q.byteLength(y)+2+1;}else return e.destroy(new Error("Invalid subscriptions")),!1;qe("subscribe: writing to stream: %o",j.SUBSCRIBE_HEADER),e.write(j.SUBSCRIBE_HEADER[1][o?1:0][0]),De(e,c),Ie(e,s),h!==null&&h.write();let d=!0;for(let g of a){let y=g.topic,w=g.qos,E=+g.nl,S=+g.rap,I=g.rh,C;yr(e,y),C=j.SUBSCRIBE_OPTIONS_QOS[w],i===5&&(C|=E?j.SUBSCRIBE_OPTIONS_NL:0,C|=S?j.SUBSCRIBE_OPTIONS_RAP:0,C|=I?j.SUBSCRIBE_OPTIONS_RH[I]:0),d=e.write(q.from([C]));}return d}function Qm(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.messageId,s=n.granted,a=n.properties,u=0;if(typeof o!="number")return e.destroy(new Error("Invalid messageId")),!1;if(u+=2,typeof s=="object"&&s.length)for(let h=0;h<s.length;h+=1){if(typeof s[h]!="number")return e.destroy(new Error("Invalid qos vector")),!1;u+=1;}else return e.destroy(new Error("Invalid qos vector")),!1;let c=null;if(i===5){if(c=Si(e,a,r,u),!c)return !1;u+=c.length;}return e.write(j.SUBACK_HEADER),De(e,u),Ie(e,o),c!==null&&c.write(),e.write(q.from(s))}function Ym(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.messageId,s=n.dup?j.DUP_MASK:0,a=n.unsubscriptions,u=n.properties,c=0;if(typeof o!="number")return e.destroy(new Error("Invalid messageId")),!1;if(c+=2,typeof a=="object"&&a.length)for(let g=0;g<a.length;g+=1){if(typeof a[g]!="string")return e.destroy(new Error("Invalid unsubscriptions")),!1;c+=q.byteLength(a[g])+2;}else return e.destroy(new Error("Invalid unsubscriptions")),!1;let h=null;if(i===5){if(h=Ft(e,u),!h)return !1;c+=h.length;}e.write(j.UNSUBSCRIBE_HEADER[1][s?1:0][0]),De(e,c),Ie(e,o),h!==null&&h.write();let d=!0;for(let g=0;g<a.length;g++)d=yr(e,a[g]);return d}function Jm(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.messageId,s=n.dup?j.DUP_MASK:0,a=n.granted,u=n.properties,c=n.cmd,h=0,d=2;if(typeof o!="number")return e.destroy(new Error("Invalid messageId")),!1;if(i===5)if(typeof a=="object"&&a.length)for(let y=0;y<a.length;y+=1){if(typeof a[y]!="number")return e.destroy(new Error("Invalid qos vector")),!1;d+=1;}else return e.destroy(new Error("Invalid qos vector")),!1;let g=null;if(i===5){if(g=Si(e,u,r,d),!g)return !1;d+=g.length;}return e.write(j.ACKS[c][h][s][0]),De(e,d),Ie(e,o),g!==null&&g.write(),i===5&&e.write(q.from(a)),!0}function Xm(t,e,r){return e.write(j.EMPTY[t.cmd])}function Zm(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.reasonCode,s=n.properties,a=i===5?1:0,u=null;if(i===5){if(u=Si(e,s,r,a),!u)return !1;a+=u.length;}return e.write(q.from([j.codes.disconnect<<4])),De(e,a),i===5&&e.write(q.from([o])),u!==null&&u.write(),!0}function e1(t,e,r){let i=r?r.protocolVersion:4,n=t||{},o=n.reasonCode,s=n.properties,a=i===5?1:0;i!==5&&e.destroy(new Error("Invalid mqtt version for auth packet"));let u=Si(e,s,r,a);return u?(a+=u.length,e.write(q.from([j.codes.auth<<4])),De(e,a),e.write(q.from([o])),u!==null&&u.write(),!0):!1}var Td={};function De(t,e){if(e>j.VARBYTEINT_MAX)return t.destroy(new Error(`Invalid variable byte integer: ${e}`)),!1;let r=Td[e];return r||(r=Ho(e),e<16384&&(Td[e]=r)),qe("writeVarByteInt: writing to stream: %o",r),t.write(r)}function yr(t,e){let r=q.byteLength(e);return Ie(t,r),qe("writeString: %s",e),t.write(e,"utf8")}function Rd(t,e,r){yr(t,e),yr(t,r);}function Vo(t,e){return qe("writeNumberCached: number: %d",e),qe("writeNumberCached: %o",Cn[e]),t.write(Cn[e])}function t1(t,e){let r=jm(e);return qe("writeNumberGenerated: %o",r),t.write(r)}function r1(t,e){let r=Wm(e);return qe("write4ByteNumber: %o",r),t.write(r)}function Gr(t,e){typeof e=="string"?yr(t,e):e?(Ie(t,e.length),t.write(e)):Ie(t,0);}function Ft(t,e){if(typeof e!="object"||e.length!=null)return {length:1,write(){Bd(t,{},0);}};let r=0;function i(o,s){let a=j.propertiesTypes[o],u=0;switch(a){case"byte":{if(typeof s!="boolean")return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+1;break}case"int8":{if(typeof s!="number"||s<0||s>255)return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+1;break}case"binary":{if(s&&s===null)return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+q.byteLength(s)+2;break}case"int16":{if(typeof s!="number"||s<0||s>65535)return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+2;break}case"int32":{if(typeof s!="number"||s<0||s>4294967295)return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+4;break}case"var":{if(typeof s!="number"||s<0||s>268435455)return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+q.byteLength(Ho(s));break}case"string":{if(typeof s!="string")return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=1+2+q.byteLength(s.toString());break}case"pair":{if(typeof s!="object")return t.destroy(new Error(`Invalid ${o}: ${s}`)),!1;u+=Object.getOwnPropertyNames(s).reduce((c,h)=>{let d=s[h];return Array.isArray(d)?c+=d.reduce((g,y)=>(g+=1+2+q.byteLength(h.toString())+2+q.byteLength(y.toString()),g),0):c+=1+2+q.byteLength(h.toString())+2+q.byteLength(s[h].toString()),c},0);break}default:return t.destroy(new Error(`Invalid property ${o}: ${s}`)),!1}return u}if(e)for(let o in e){let s=0,a=0,u=e[o];if(Array.isArray(u))for(let c=0;c<u.length;c++){if(a=i(o,u[c]),!a)return !1;s+=a;}else {if(a=i(o,u),!a)return !1;s=a;}if(!s)return !1;r+=s;}return {length:q.byteLength(Ho(r))+r,write(){Bd(t,e,r);}}}function Si(t,e,r,i){let n=["reasonString","userProperties"],o=r&&r.properties&&r.properties.maximumPacketSize?r.properties.maximumPacketSize:0,s=Ft(t,e);if(o)for(;i+s.length>o;){let a=n.shift();if(a&&e[a])delete e[a],s=Ft(t,e);else return !1}return s}function Cd(t,e,r){switch(j.propertiesTypes[e]){case"byte":{t.write(q.from([j.properties[e]])),t.write(q.from([+r]));break}case"int8":{t.write(q.from([j.properties[e]])),t.write(q.from([r]));break}case"binary":{t.write(q.from([j.properties[e]])),Gr(t,r);break}case"int16":{t.write(q.from([j.properties[e]])),Ie(t,r);break}case"int32":{t.write(q.from([j.properties[e]])),r1(t,r);break}case"var":{t.write(q.from([j.properties[e]])),De(t,r);break}case"string":{t.write(q.from([j.properties[e]])),yr(t,r);break}case"pair":{Object.getOwnPropertyNames(r).forEach(n=>{let o=r[n];Array.isArray(o)?o.forEach(s=>{t.write(q.from([j.properties[e]])),Rd(t,n.toString(),s.toString());}):(t.write(q.from([j.properties[e]])),Rd(t,n.toString(),o.toString()));});break}default:return t.destroy(new Error(`Invalid property ${e} value: ${r}`)),!1}}function Bd(t,e,r){De(t,r);for(let i in e)if(Object.prototype.hasOwnProperty.call(e,i)&&e[i]!==null){let n=e[i];if(Array.isArray(n))for(let o=0;o<n.length;o++)Cd(t,i,n[o]);else Cd(t,i,n);}}function kd(t){return t?t instanceof q?t.length:q.byteLength(t):0}function Pd(t){return typeof t=="string"||t instanceof q}xd.exports=Od;});var Ud=M((mO,Ld)=>{v();m();_();var i1=zo(),{EventEmitter:n1}=(ir(),X(rr)),{Buffer:Md}=(ye(),X(_e));function s1(t,e){let r=new Ko;return i1(t,r,e),r.concat()}var Ko=class extends n1{constructor(){super(),this._array=new Array(20),this._i=0;}write(e){return this._array[this._i++]=e,!0}concat(){let e=0,r=new Array(this._array.length),i=this._array,n=0,o;for(o=0;o<i.length&&i[o]!==void 0;o++)typeof i[o]!="string"?r[o]=i[o].length:r[o]=Md.byteLength(i[o]),e+=r[o];let s=Md.allocUnsafe(e);for(o=0;o<i.length&&i[o]!==void 0;o++)typeof i[o]!="string"?(i[o].copy(s,n),n+=r[o]):(s.write(i[o],n),n+=r[o]);return s}destroy(e){e&&this.emit("error",e);}};Ld.exports=s1;});var Nd=M(Pn=>{v();m();_();Pn.parser=md().parser;Pn.generate=Ud();Pn.writeToStream=zo();});var Yo=M(Qo=>{v();m();_();Object.defineProperty(Qo,"__esModule",{value:!0});var Go=class{constructor(){this.nextId=Math.max(1,Math.floor(Math.random()*65535));}allocate(){let e=this.nextId++;return this.nextId===65536&&(this.nextId=1),e}getLastAllocated(){return this.nextId===1?65535:this.nextId-1}register(e){return !0}deallocate(e){}clear(){}};Qo.default=Go;});var Dd=M((YO,qd)=>{v();m();_();qd.exports=o1;function Qr(t){return t instanceof x?x.from(t):new t.constructor(t.buffer.slice(),t.byteOffset,t.length)}function o1(t){if(t=t||{},t.circles)return a1(t);return t.proto?i:r;function e(n,o){for(var s=Object.keys(n),a=new Array(s.length),u=0;u<s.length;u++){var c=s[u],h=n[c];typeof h!="object"||h===null?a[c]=h:h instanceof Date?a[c]=new Date(h):ArrayBuffer.isView(h)?a[c]=Qr(h):a[c]=o(h);}return a}function r(n){if(typeof n!="object"||n===null)return n;if(n instanceof Date)return new Date(n);if(Array.isArray(n))return e(n,r);if(n instanceof Map)return new Map(e(Array.from(n),r));if(n instanceof Set)return new Set(e(Array.from(n),r));var o={};for(var s in n)if(Object.hasOwnProperty.call(n,s)!==!1){var a=n[s];typeof a!="object"||a===null?o[s]=a:a instanceof Date?o[s]=new Date(a):a instanceof Map?o[s]=new Map(e(Array.from(a),r)):a instanceof Set?o[s]=new Set(e(Array.from(a),r)):ArrayBuffer.isView(a)?o[s]=Qr(a):o[s]=r(a);}return o}function i(n){if(typeof n!="object"||n===null)return n;if(n instanceof Date)return new Date(n);if(Array.isArray(n))return e(n,i);if(n instanceof Map)return new Map(e(Array.from(n),i));if(n instanceof Set)return new Set(e(Array.from(n),i));var o={};for(var s in n){var a=n[s];typeof a!="object"||a===null?o[s]=a:a instanceof Date?o[s]=new Date(a):a instanceof Map?o[s]=new Map(e(Array.from(a),i)):a instanceof Set?o[s]=new Set(e(Array.from(a),i)):ArrayBuffer.isView(a)?o[s]=Qr(a):o[s]=i(a);}return o}}function a1(t){var e=[],r=[];return t.proto?o:n;function i(s,a){for(var u=Object.keys(s),c=new Array(u.length),h=0;h<u.length;h++){var d=u[h],g=s[d];if(typeof g!="object"||g===null)c[d]=g;else if(g instanceof Date)c[d]=new Date(g);else if(ArrayBuffer.isView(g))c[d]=Qr(g);else {var y=e.indexOf(g);y!==-1?c[d]=r[y]:c[d]=a(g);}}return c}function n(s){if(typeof s!="object"||s===null)return s;if(s instanceof Date)return new Date(s);if(Array.isArray(s))return i(s,n);if(s instanceof Map)return new Map(i(Array.from(s),n));if(s instanceof Set)return new Set(i(Array.from(s),n));var a={};e.push(s),r.push(a);for(var u in s)if(Object.hasOwnProperty.call(s,u)!==!1){var c=s[u];if(typeof c!="object"||c===null)a[u]=c;else if(c instanceof Date)a[u]=new Date(c);else if(c instanceof Map)a[u]=new Map(i(Array.from(c),n));else if(c instanceof Set)a[u]=new Set(i(Array.from(c),n));else if(ArrayBuffer.isView(c))a[u]=Qr(c);else {var h=e.indexOf(c);h!==-1?a[u]=r[h]:a[u]=n(c);}}return e.pop(),r.pop(),a}function o(s){if(typeof s!="object"||s===null)return s;if(s instanceof Date)return new Date(s);if(Array.isArray(s))return i(s,o);if(s instanceof Map)return new Map(i(Array.from(s),o));if(s instanceof Set)return new Set(i(Array.from(s),o));var a={};e.push(s),r.push(a);for(var u in s){var c=s[u];if(typeof c!="object"||c===null)a[u]=c;else if(c instanceof Date)a[u]=new Date(c);else if(c instanceof Map)a[u]=new Map(i(Array.from(c),o));else if(c instanceof Set)a[u]=new Set(i(Array.from(c),o));else if(ArrayBuffer.isView(c))a[u]=Qr(c);else {var h=e.indexOf(c);h!==-1?a[u]=r[h]:a[u]=o(c);}}return e.pop(),r.pop(),a}}});var Fd=M((ok,jd)=>{v();m();_();jd.exports=Dd()();});var $d=M(Yr=>{v();m();_();Object.defineProperty(Yr,"__esModule",{value:!0});Yr.validateTopics=Yr.validateTopic=void 0;function Wd(t){let e=t.split("/");for(let r=0;r<e.length;r++)if(e[r]!=="+"){if(e[r]==="#")return r===e.length-1;if(e[r].indexOf("+")!==-1||e[r].indexOf("#")!==-1)return !1}return !0}Yr.validateTopic=Wd;function l1(t){if(t.length===0)return "empty_topic_list";for(let e=0;e<t.length;e++)if(!Wd(t[e]))return t[e];return null}Yr.validateTopics=l1;});var Zo=M(Xo=>{v();m();_();Object.defineProperty(Xo,"__esModule",{value:!0});var u1=Dt(),f1={objectMode:!0},c1={clean:!0},Jo=class{constructor(e){this.options=e||{},this.options=Object.assign(Object.assign({},c1),e),this._inflights=new Map;}put(e,r){return this._inflights.set(e.messageId,e),r&&r(),this}createStream(){let e=new u1.Readable(f1),r=[],i=!1,n=0;return this._inflights.forEach((o,s)=>{r.push(o);}),e._read=()=>{!i&&n<r.length?e.push(r[n++]):e.push(null);},e.destroy=o=>{if(!i)return i=!0,setTimeout(()=>{e.emit("close");},0),e},e}del(e,r){let i=this._inflights.get(e.messageId);return i?(this._inflights.delete(e.messageId),r(null,i)):r&&r(new Error("missing packet")),this}get(e,r){let i=this._inflights.get(e.messageId);return i?r(null,i):r&&r(new Error("missing packet")),this}close(e){this.options.clean&&(this._inflights=null),e&&e();}};Xo.default=Jo;});var Vd=M(ea=>{v();m();_();Object.defineProperty(ea,"__esModule",{value:!0});var Hd=[0,16,128,131,135,144,145,151,153],h1=(t,e,r)=>{t.log("handlePublish: packet %o",e),r=typeof r<"u"?r:t.noop;let i=e.topic.toString(),n=e.payload,{qos:o}=e,{messageId:s}=e,{options:a}=t;if(t.options.protocolVersion===5){let u;if(e.properties&&(u=e.properties.topicAlias),typeof u<"u")if(i.length===0)if(u>0&&u<=65535){let c=t.topicAliasRecv.getTopicByAlias(u);if(c)i=c,t.log("handlePublish :: topic complemented by alias. topic: %s - alias: %d",i,u);else {t.log("handlePublish :: unregistered topic alias. alias: %d",u),t.emit("error",new Error("Received unregistered Topic Alias"));return}}else {t.log("handlePublish :: topic alias out of range. alias: %d",u),t.emit("error",new Error("Received Topic Alias is out of range"));return}else if(t.topicAliasRecv.put(i,u))t.log("handlePublish :: registered topic: %s - alias: %d",i,u);else {t.log("handlePublish :: topic alias out of range. alias: %d",u),t.emit("error",new Error("Received Topic Alias is out of range"));return}}switch(t.log("handlePublish: qos %d",o),o){case 2:{a.customHandleAcks(i,n,e,(u,c)=>{if(typeof u=="number"&&(c=u,u=null),u)return t.emit("error",u);if(Hd.indexOf(c)===-1)return t.emit("error",new Error("Wrong reason code for pubrec"));c?t._sendPacket({cmd:"pubrec",messageId:s,reasonCode:c},r):t.incomingStore.put(e,()=>{t._sendPacket({cmd:"pubrec",messageId:s},r);});});break}case 1:{a.customHandleAcks(i,n,e,(u,c)=>{if(typeof u=="number"&&(c=u,u=null),u)return t.emit("error",u);if(Hd.indexOf(c)===-1)return t.emit("error",new Error("Wrong reason code for puback"));c||t.emit("message",i,n,e),t.handleMessage(e,h=>{if(h)return r&&r(h);t._sendPacket({cmd:"puback",messageId:s,reasonCode:c},r);});});break}case 0:t.emit("message",i,n,e),t.handleMessage(e,r);break;default:t.log("handlePublish: unknown QoS. Doing nothing.");break}};ea.default=h1;});var Jr=M(Wt=>{v();m();_();Object.defineProperty(Wt,"__esModule",{value:!0});Wt.nextTick=Wt.applyMixin=Wt.ErrorWithReasonCode=void 0;var ta=class t extends Error{constructor(e,r){super(e),this.code=r,Object.setPrototypeOf(this,t.prototype),Object.getPrototypeOf(this).name="ErrorWithReasonCode";}};Wt.ErrorWithReasonCode=ta;function d1(t,e,r=!1){var i;let n=[e];for(;;){let o=n[0],s=Object.getPrototypeOf(o);if(s?.prototype)n.unshift(s);else break}for(let o of n)for(let s of Object.getOwnPropertyNames(o.prototype))(r||s!=="constructor")&&Object.defineProperty(t.prototype,s,(i=Object.getOwnPropertyDescriptor(o.prototype,s))!==null&&i!==void 0?i:Object.create(null));}Wt.applyMixin=d1;Wt.nextTick=typeof(P===null||P===void 0?void 0:P.nextTick)=="function"?P.nextTick:t=>{setTimeout(t,0);};});var Ai=M(br=>{v();m();_();Object.defineProperty(br,"__esModule",{value:!0});br.ReasonCodes=void 0;br.ReasonCodes={0:"",1:"Unacceptable protocol version",2:"Identifier rejected",3:"Server unavailable",4:"Bad username or password",5:"Not authorized",16:"No matching subscribers",17:"No subscription existed",128:"Unspecified error",129:"Malformed Packet",130:"Protocol Error",131:"Implementation specific error",132:"Unsupported Protocol Version",133:"Client Identifier not valid",134:"Bad User Name or Password",135:"Not authorized",136:"Server unavailable",137:"Server busy",138:"Banned",139:"Server shutting down",140:"Bad authentication method",141:"Keep Alive timeout",142:"Session taken over",143:"Topic Filter invalid",144:"Topic Name invalid",145:"Packet identifier in use",146:"Packet Identifier not found",147:"Receive Maximum exceeded",148:"Topic Alias invalid",149:"Packet too large",150:"Message rate too high",151:"Quota exceeded",152:"Administrative action",153:"Payload format invalid",154:"Retain not supported",155:"QoS not supported",156:"Use another server",157:"Server moved",158:"Shared Subscriptions not supported",159:"Connection rate exceeded",160:"Maximum connect time",161:"Subscription Identifiers not supported",162:"Wildcard Subscriptions not supported"};var p1=(t,e)=>{let{messageId:r}=e,i=e.cmd,n=null,o=t.outgoing[r]?t.outgoing[r].cb:null,s;if(!o){t.log("_handleAck :: Server sent an ack in error. Ignoring.");return}switch(t.log("_handleAck :: packet type",i),i){case"pubcomp":case"puback":{let a=e.reasonCode;a&&a>0&&a!==16?(s=new Error(`Publish error: ${br.ReasonCodes[a]}`),s.code=a,t._removeOutgoingAndStoreMessage(r,()=>{o(s,e);})):t._removeOutgoingAndStoreMessage(r,o);break}case"pubrec":{n={cmd:"pubrel",qos:2,messageId:r};let a=e.reasonCode;a&&a>0&&a!==16?(s=new Error(`Publish error: ${br.ReasonCodes[a]}`),s.code=a,t._removeOutgoingAndStoreMessage(r,()=>{o(s,e);})):t._sendPacket(n);break}case"suback":{delete t.outgoing[r],t.messageIdProvider.deallocate(r);let a=e.granted;for(let u=0;u<a.length;u++)if(a[u]&128){let c=t.messageIdToTopic[r];c&&c.forEach(h=>{delete t._resubscribeTopics[h];});}delete t.messageIdToTopic[r],t._invokeStoreProcessingQueue(),o(null,e);break}case"unsuback":{delete t.outgoing[r],t.messageIdProvider.deallocate(r),t._invokeStoreProcessingQueue(),o(null);break}default:t.emit("error",new Error("unrecognized packet type"));}t.disconnecting&&Object.keys(t.outgoing).length===0&&t.emit("outgoingEmpty");};br.default=p1;});var Kd=M(ra=>{v();m();_();Object.defineProperty(ra,"__esModule",{value:!0});var zd=Jr(),g1=Ai(),y1=(t,e)=>{let{options:r}=t,i=r.protocolVersion,n=i===5?e.reasonCode:e.returnCode;if(i!==5){let o=new zd.ErrorWithReasonCode(`Protocol error: Auth packets are only supported in MQTT 5. Your version:${i}`,n);t.emit("error",o);return}t.handleAuth(e,(o,s)=>{if(o){t.emit("error",o);return}if(n===24)t.reconnecting=!1,t._sendPacket(s);else {let a=new zd.ErrorWithReasonCode(`Connection refused: ${g1.ReasonCodes[n]}`,n);t.emit("error",a);}});};ra.default=y1;});var Xd=M(kn=>{v();m();_();Object.defineProperty(kn,"__esModule",{value:!0});kn.LRUCache=void 0;var Ii=typeof performance=="object"&&performance&&typeof performance.now=="function"?performance:Date,Qd=new Set,ia=typeof P=="object"&&P?P:{},Yd=(t,e,r,i)=>{typeof ia.emitWarning=="function"?ia.emitWarning(t,e,r,i):console.error(`[${r}] ${e}: ${t}`);},On=globalThis.AbortController,Gd=globalThis.AbortSignal;if(typeof On>"u"){Gd=class{onabort;_onabort=[];reason;aborted=!1;addEventListener(i,n){this._onabort.push(n);}},On=class{constructor(){e();}signal=new Gd;abort(i){if(!this.signal.aborted){this.signal.reason=i,this.signal.aborted=!0;for(let n of this.signal._onabort)n(i);this.signal.onabort?.(i);}}};let t=ia.env?.LRU_CACHE_IGNORE_AC_WARNING!=="1",e=()=>{t&&(t=!1,Yd("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.","NO_ABORT_CONTROLLER","ENOTSUP",e));};}var b1=t=>!Qd.has(t),$t=t=>t&&t===Math.floor(t)&&t>0&&isFinite(t),Jd=t=>$t(t)?t<=Math.pow(2,8)?Uint8Array:t<=Math.pow(2,16)?Uint16Array:t<=Math.pow(2,32)?Uint32Array:t<=Number.MAX_SAFE_INTEGER?Xr:null:null,Xr=class extends Array{constructor(e){super(e),this.fill(0);}},na=class t{heap;length;static#l=!1;static create(e){let r=Jd(e);if(!r)return [];t.#l=!0;let i=new t(e,r);return t.#l=!1,i}constructor(e,r){if(!t.#l)throw new TypeError("instantiate Stack using Stack.create(n)");this.heap=new r(e),this.length=0;}push(e){this.heap[this.length++]=e;}pop(){return this.heap[--this.length]}},sa=class t{#l;#c;#p;#g;#B;ttl;ttlResolution;ttlAutopurge;updateAgeOnGet;updateAgeOnHas;allowStale;noDisposeOnSet;noUpdateTTL;maxEntrySize;sizeCalculation;noDeleteOnFetchRejection;noDeleteOnStaleGet;allowStaleOnFetchAbort;allowStaleOnFetchRejection;ignoreFetchAbort;#i;#y;#n;#r;#e;#u;#h;#a;#s;#b;#o;#E;#S;#w;#_;#I;#f;static unsafeExposeInternals(e){return {starts:e.#S,ttls:e.#w,sizes:e.#E,keyMap:e.#n,keyList:e.#r,valList:e.#e,next:e.#u,prev:e.#h,get head(){return e.#a},get tail(){return e.#s},free:e.#b,isBackgroundFetch:r=>e.#t(r),backgroundFetch:(r,i,n,o)=>e.#k(r,i,n,o),moveToTail:r=>e.#C(r),indexes:r=>e.#m(r),rindexes:r=>e.#v(r),isStale:r=>e.#d(r)}}get max(){return this.#l}get maxSize(){return this.#c}get calculatedSize(){return this.#y}get size(){return this.#i}get fetchMethod(){return this.#B}get dispose(){return this.#p}get disposeAfter(){return this.#g}constructor(e){let{max:r=0,ttl:i,ttlResolution:n=1,ttlAutopurge:o,updateAgeOnGet:s,updateAgeOnHas:a,allowStale:u,dispose:c,disposeAfter:h,noDisposeOnSet:d,noUpdateTTL:g,maxSize:y=0,maxEntrySize:w=0,sizeCalculation:E,fetchMethod:S,noDeleteOnFetchRejection:I,noDeleteOnStaleGet:C,allowStaleOnFetchRejection:R,allowStaleOnFetchAbort:U,ignoreFetchAbort:N}=e;if(r!==0&&!$t(r))throw new TypeError("max option must be a nonnegative integer");let W=r?Jd(r):Array;if(!W)throw new Error("invalid max value: "+r);if(this.#l=r,this.#c=y,this.maxEntrySize=w||this.#c,this.sizeCalculation=E,this.sizeCalculation){if(!this.#c&&!this.maxEntrySize)throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");if(typeof this.sizeCalculation!="function")throw new TypeError("sizeCalculation set to non-function")}if(S!==void 0&&typeof S!="function")throw new TypeError("fetchMethod must be a function if specified");if(this.#B=S,this.#I=!!S,this.#n=new Map,this.#r=new Array(r).fill(void 0),this.#e=new Array(r).fill(void 0),this.#u=new W(r),this.#h=new W(r),this.#a=0,this.#s=0,this.#b=na.create(r),this.#i=0,this.#y=0,typeof c=="function"&&(this.#p=c),typeof h=="function"?(this.#g=h,this.#o=[]):(this.#g=void 0,this.#o=void 0),this.#_=!!this.#p,this.#f=!!this.#g,this.noDisposeOnSet=!!d,this.noUpdateTTL=!!g,this.noDeleteOnFetchRejection=!!I,this.allowStaleOnFetchRejection=!!R,this.allowStaleOnFetchAbort=!!U,this.ignoreFetchAbort=!!N,this.maxEntrySize!==0){if(this.#c!==0&&!$t(this.#c))throw new TypeError("maxSize must be a positive integer if specified");if(!$t(this.maxEntrySize))throw new TypeError("maxEntrySize must be a positive integer if specified");this.#q();}if(this.allowStale=!!u,this.noDeleteOnStaleGet=!!C,this.updateAgeOnGet=!!s,this.updateAgeOnHas=!!a,this.ttlResolution=$t(n)||n===0?n:1,this.ttlAutopurge=!!o,this.ttl=i||0,this.ttl){if(!$t(this.ttl))throw new TypeError("ttl must be a positive integer if specified");this.#x();}if(this.#l===0&&this.ttl===0&&this.#c===0)throw new TypeError("At least one of max, maxSize, or ttl is required");if(!this.ttlAutopurge&&!this.#l&&!this.#c){let K="LRU_CACHE_UNBOUNDED";b1(K)&&(Qd.add(K),Yd("TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.","UnboundedCacheWarning",K,t));}}getRemainingTTL(e){return this.#n.has(e)?1/0:0}#x(){let e=new Xr(this.#l),r=new Xr(this.#l);this.#w=e,this.#S=r,this.#M=(o,s,a=Ii.now())=>{if(r[o]=s!==0?a:0,e[o]=s,s!==0&&this.ttlAutopurge){let u=setTimeout(()=>{this.#d(o)&&this.delete(this.#r[o]);},s+1);u.unref&&u.unref();}},this.#T=o=>{r[o]=e[o]!==0?Ii.now():0;},this.#A=(o,s)=>{if(e[s]){let a=e[s],u=r[s];o.ttl=a,o.start=u,o.now=i||n();let c=o.now-u;o.remainingTTL=a-c;}};let i=0,n=()=>{let o=Ii.now();if(this.ttlResolution>0){i=o;let s=setTimeout(()=>i=0,this.ttlResolution);s.unref&&s.unref();}return o};this.getRemainingTTL=o=>{let s=this.#n.get(o);if(s===void 0)return 0;let a=e[s],u=r[s];if(a===0||u===0)return 1/0;let c=(i||n())-u;return a-c},this.#d=o=>e[o]!==0&&r[o]!==0&&(i||n())-r[o]>e[o];}#T=()=>{};#A=()=>{};#M=()=>{};#d=()=>!1;#q(){let e=new Xr(this.#l);this.#y=0,this.#E=e,this.#R=r=>{this.#y-=e[r],e[r]=0;},this.#L=(r,i,n,o)=>{if(this.#t(i))return 0;if(!$t(n))if(o){if(typeof o!="function")throw new TypeError("sizeCalculation must be a function");if(n=o(i,r),!$t(n))throw new TypeError("sizeCalculation return invalid (expect positive integer)")}else throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");return n},this.#P=(r,i,n)=>{if(e[r]=i,this.#c){let o=this.#c-e[r];for(;this.#y>o;)this.#O(!0);}this.#y+=e[r],n&&(n.entrySize=i,n.totalCalculatedSize=this.#y);};}#R=e=>{};#P=(e,r,i)=>{};#L=(e,r,i,n)=>{if(i||n)throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");return 0};*#m({allowStale:e=this.allowStale}={}){if(this.#i)for(let r=this.#s;!(!this.#U(r)||((e||!this.#d(r))&&(yield r),r===this.#a));)r=this.#h[r];}*#v({allowStale:e=this.allowStale}={}){if(this.#i)for(let r=this.#a;!(!this.#U(r)||((e||!this.#d(r))&&(yield r),r===this.#s));)r=this.#u[r];}#U(e){return e!==void 0&&this.#n.get(this.#r[e])===e}*entries(){for(let e of this.#m())this.#e[e]!==void 0&&this.#r[e]!==void 0&&!this.#t(this.#e[e])&&(yield [this.#r[e],this.#e[e]]);}*rentries(){for(let e of this.#v())this.#e[e]!==void 0&&this.#r[e]!==void 0&&!this.#t(this.#e[e])&&(yield [this.#r[e],this.#e[e]]);}*keys(){for(let e of this.#m()){let r=this.#r[e];r!==void 0&&!this.#t(this.#e[e])&&(yield r);}}*rkeys(){for(let e of this.#v()){let r=this.#r[e];r!==void 0&&!this.#t(this.#e[e])&&(yield r);}}*values(){for(let e of this.#m())this.#e[e]!==void 0&&!this.#t(this.#e[e])&&(yield this.#e[e]);}*rvalues(){for(let e of this.#v())this.#e[e]!==void 0&&!this.#t(this.#e[e])&&(yield this.#e[e]);}[Symbol.iterator](){return this.entries()}find(e,r={}){for(let i of this.#m()){let n=this.#e[i],o=this.#t(n)?n.__staleWhileFetching:n;if(o!==void 0&&e(o,this.#r[i],this))return this.get(this.#r[i],r)}}forEach(e,r=this){for(let i of this.#m()){let n=this.#e[i],o=this.#t(n)?n.__staleWhileFetching:n;o!==void 0&&e.call(r,o,this.#r[i],this);}}rforEach(e,r=this){for(let i of this.#v()){let n=this.#e[i],o=this.#t(n)?n.__staleWhileFetching:n;o!==void 0&&e.call(r,o,this.#r[i],this);}}purgeStale(){let e=!1;for(let r of this.#v({allowStale:!0}))this.#d(r)&&(this.delete(this.#r[r]),e=!0);return e}dump(){let e=[];for(let r of this.#m({allowStale:!0})){let i=this.#r[r],n=this.#e[r],o=this.#t(n)?n.__staleWhileFetching:n;if(o===void 0||i===void 0)continue;let s={value:o};if(this.#w&&this.#S){s.ttl=this.#w[r];let a=Ii.now()-this.#S[r];s.start=Math.floor(Date.now()-a);}this.#E&&(s.size=this.#E[r]),e.unshift([i,s]);}return e}load(e){this.clear();for(let[r,i]of e){if(i.start){let n=Date.now()-i.start;i.start=Ii.now()-n;}this.set(r,i.value,i);}}set(e,r,i={}){if(r===void 0)return this.delete(e),this;let{ttl:n=this.ttl,start:o,noDisposeOnSet:s=this.noDisposeOnSet,sizeCalculation:a=this.sizeCalculation,status:u}=i,{noUpdateTTL:c=this.noUpdateTTL}=i,h=this.#L(e,r,i.size||0,a);if(this.maxEntrySize&&h>this.maxEntrySize)return u&&(u.set="miss",u.maxEntrySizeExceeded=!0),this.delete(e),this;let d=this.#i===0?void 0:this.#n.get(e);if(d===void 0)d=this.#i===0?this.#s:this.#b.length!==0?this.#b.pop():this.#i===this.#l?this.#O(!1):this.#i,this.#r[d]=e,this.#e[d]=r,this.#n.set(e,d),this.#u[this.#s]=d,this.#h[d]=this.#s,this.#s=d,this.#i++,this.#P(d,h,u),u&&(u.set="add"),c=!1;else {this.#C(d);let g=this.#e[d];if(r!==g){if(this.#I&&this.#t(g)){g.__abortController.abort(new Error("replaced"));let{__staleWhileFetching:y}=g;y!==void 0&&!s&&(this.#_&&this.#p?.(y,e,"set"),this.#f&&this.#o?.push([y,e,"set"]));}else s||(this.#_&&this.#p?.(g,e,"set"),this.#f&&this.#o?.push([g,e,"set"]));if(this.#R(d),this.#P(d,h,u),this.#e[d]=r,u){u.set="replace";let y=g&&this.#t(g)?g.__staleWhileFetching:g;y!==void 0&&(u.oldValue=y);}}else u&&(u.set="update");}if(n!==0&&!this.#w&&this.#x(),this.#w&&(c||this.#M(d,n,o),u&&this.#A(u,d)),!s&&this.#f&&this.#o){let g=this.#o,y;for(;y=g?.shift();)this.#g?.(...y);}return this}pop(){try{for(;this.#i;){let e=this.#e[this.#a];if(this.#O(!0),this.#t(e)){if(e.__staleWhileFetching)return e.__staleWhileFetching}else if(e!==void 0)return e}}finally{if(this.#f&&this.#o){let e=this.#o,r;for(;r=e?.shift();)this.#g?.(...r);}}}#O(e){let r=this.#a,i=this.#r[r],n=this.#e[r];return this.#I&&this.#t(n)?n.__abortController.abort(new Error("evicted")):(this.#_||this.#f)&&(this.#_&&this.#p?.(n,i,"evict"),this.#f&&this.#o?.push([n,i,"evict"])),this.#R(r),e&&(this.#r[r]=void 0,this.#e[r]=void 0,this.#b.push(r)),this.#i===1?(this.#a=this.#s=0,this.#b.length=0):this.#a=this.#u[r],this.#n.delete(i),this.#i--,r}has(e,r={}){let{updateAgeOnHas:i=this.updateAgeOnHas,status:n}=r,o=this.#n.get(e);if(o!==void 0){let s=this.#e[o];if(this.#t(s)&&s.__staleWhileFetching===void 0)return !1;if(this.#d(o))n&&(n.has="stale",this.#A(n,o));else return i&&this.#T(o),n&&(n.has="hit",this.#A(n,o)),!0}else n&&(n.has="miss");return !1}peek(e,r={}){let{allowStale:i=this.allowStale}=r,n=this.#n.get(e);if(n!==void 0&&(i||!this.#d(n))){let o=this.#e[n];return this.#t(o)?o.__staleWhileFetching:o}}#k(e,r,i,n){let o=r===void 0?void 0:this.#e[r];if(this.#t(o))return o;let s=new On,{signal:a}=i;a?.addEventListener("abort",()=>s.abort(a.reason),{signal:s.signal});let u={signal:s.signal,options:i,context:n},c=(E,S=!1)=>{let{aborted:I}=s.signal,C=i.ignoreFetchAbort&&E!==void 0;if(i.status&&(I&&!S?(i.status.fetchAborted=!0,i.status.fetchError=s.signal.reason,C&&(i.status.fetchAbortIgnored=!0)):i.status.fetchResolved=!0),I&&!C&&!S)return d(s.signal.reason);let R=y;return this.#e[r]===y&&(E===void 0?R.__staleWhileFetching?this.#e[r]=R.__staleWhileFetching:this.delete(e):(i.status&&(i.status.fetchUpdated=!0),this.set(e,E,u.options))),E},h=E=>(i.status&&(i.status.fetchRejected=!0,i.status.fetchError=E),d(E)),d=E=>{let{aborted:S}=s.signal,I=S&&i.allowStaleOnFetchAbort,C=I||i.allowStaleOnFetchRejection,R=C||i.noDeleteOnFetchRejection,U=y;if(this.#e[r]===y&&(!R||U.__staleWhileFetching===void 0?this.delete(e):I||(this.#e[r]=U.__staleWhileFetching)),C)return i.status&&U.__staleWhileFetching!==void 0&&(i.status.returnedStale=!0),U.__staleWhileFetching;if(U.__returned===U)throw E},g=(E,S)=>{let I=this.#B?.(e,o,u);I&&I instanceof Promise&&I.then(C=>E(C===void 0?void 0:C),S),s.signal.addEventListener("abort",()=>{(!i.ignoreFetchAbort||i.allowStaleOnFetchAbort)&&(E(void 0),i.allowStaleOnFetchAbort&&(E=C=>c(C,!0)));});};i.status&&(i.status.fetchDispatched=!0);let y=new Promise(g).then(c,h),w=Object.assign(y,{__abortController:s,__staleWhileFetching:o,__returned:void 0});return r===void 0?(this.set(e,w,{...u.options,status:void 0}),r=this.#n.get(e)):this.#e[r]=w,w}#t(e){if(!this.#I)return !1;let r=e;return !!r&&r instanceof Promise&&r.hasOwnProperty("__staleWhileFetching")&&r.__abortController instanceof On}async fetch(e,r={}){let{allowStale:i=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,ttl:s=this.ttl,noDisposeOnSet:a=this.noDisposeOnSet,size:u=0,sizeCalculation:c=this.sizeCalculation,noUpdateTTL:h=this.noUpdateTTL,noDeleteOnFetchRejection:d=this.noDeleteOnFetchRejection,allowStaleOnFetchRejection:g=this.allowStaleOnFetchRejection,ignoreFetchAbort:y=this.ignoreFetchAbort,allowStaleOnFetchAbort:w=this.allowStaleOnFetchAbort,context:E,forceRefresh:S=!1,status:I,signal:C}=r;if(!this.#I)return I&&(I.fetch="get"),this.get(e,{allowStale:i,updateAgeOnGet:n,noDeleteOnStaleGet:o,status:I});let R={allowStale:i,updateAgeOnGet:n,noDeleteOnStaleGet:o,ttl:s,noDisposeOnSet:a,size:u,sizeCalculation:c,noUpdateTTL:h,noDeleteOnFetchRejection:d,allowStaleOnFetchRejection:g,allowStaleOnFetchAbort:w,ignoreFetchAbort:y,status:I,signal:C},U=this.#n.get(e);if(U===void 0){I&&(I.fetch="miss");let N=this.#k(e,U,R,E);return N.__returned=N}else {let N=this.#e[U];if(this.#t(N)){let de=i&&N.__staleWhileFetching!==void 0;return I&&(I.fetch="inflight",de&&(I.returnedStale=!0)),de?N.__staleWhileFetching:N.__returned=N}let W=this.#d(U);if(!S&&!W)return I&&(I.fetch="hit"),this.#C(U),n&&this.#T(U),I&&this.#A(I,U),N;let K=this.#k(e,U,R,E),Q=K.__staleWhileFetching!==void 0&&i;return I&&(I.fetch=W?"stale":"refresh",Q&&W&&(I.returnedStale=!0)),Q?K.__staleWhileFetching:K.__returned=K}}get(e,r={}){let{allowStale:i=this.allowStale,updateAgeOnGet:n=this.updateAgeOnGet,noDeleteOnStaleGet:o=this.noDeleteOnStaleGet,status:s}=r,a=this.#n.get(e);if(a!==void 0){let u=this.#e[a],c=this.#t(u);return s&&this.#A(s,a),this.#d(a)?(s&&(s.get="stale"),c?(s&&i&&u.__staleWhileFetching!==void 0&&(s.returnedStale=!0),i?u.__staleWhileFetching:void 0):(o||this.delete(e),s&&i&&(s.returnedStale=!0),i?u:void 0)):(s&&(s.get="hit"),c?u.__staleWhileFetching:(this.#C(a),n&&this.#T(a),u))}else s&&(s.get="miss");}#N(e,r){this.#h[r]=e,this.#u[e]=r;}#C(e){e!==this.#s&&(e===this.#a?this.#a=this.#u[e]:this.#N(this.#h[e],this.#u[e]),this.#N(this.#s,e),this.#s=e);}delete(e){let r=!1;if(this.#i!==0){let i=this.#n.get(e);if(i!==void 0)if(r=!0,this.#i===1)this.clear();else {this.#R(i);let n=this.#e[i];this.#t(n)?n.__abortController.abort(new Error("deleted")):(this.#_||this.#f)&&(this.#_&&this.#p?.(n,e,"delete"),this.#f&&this.#o?.push([n,e,"delete"])),this.#n.delete(e),this.#r[i]=void 0,this.#e[i]=void 0,i===this.#s?this.#s=this.#h[i]:i===this.#a?this.#a=this.#u[i]:(this.#u[this.#h[i]]=this.#u[i],this.#h[this.#u[i]]=this.#h[i]),this.#i--,this.#b.push(i);}}if(this.#f&&this.#o?.length){let i=this.#o,n;for(;n=i?.shift();)this.#g?.(...n);}return r}clear(){for(let e of this.#v({allowStale:!0})){let r=this.#e[e];if(this.#t(r))r.__abortController.abort(new Error("deleted"));else {let i=this.#r[e];this.#_&&this.#p?.(r,i,"delete"),this.#f&&this.#o?.push([r,i,"delete"]);}}if(this.#n.clear(),this.#e.fill(void 0),this.#r.fill(void 0),this.#w&&this.#S&&(this.#w.fill(0),this.#S.fill(0)),this.#E&&this.#E.fill(0),this.#a=0,this.#s=0,this.#b.length=0,this.#y=0,this.#i=0,this.#f&&this.#o){let e=this.#o,r;for(;r=e?.shift();)this.#g?.(...r);}}};kn.LRUCache=sa;});var at=M(Ht=>{v();m();_();Object.defineProperty(Ht,"t",{value:!0});Ht.ContainerIterator=Ht.Container=Ht.Base=void 0;var oa=class{constructor(e=0){this.iteratorType=e;}equals(e){return this.o===e.o}};Ht.ContainerIterator=oa;var xn=class{constructor(){this.i=0;}get length(){return this.i}size(){return this.i}empty(){return this.i===0}};Ht.Base=xn;var aa=class extends xn{};Ht.Container=aa;});var Zd=M(Mn=>{v();m();_();Object.defineProperty(Mn,"t",{value:!0});Mn.default=void 0;var w1=at(),la=class extends w1.Base{constructor(e=[]){super(),this.S=[];let r=this;e.forEach(function(i){r.push(i);});}clear(){this.i=0,this.S=[];}push(e){return this.S.push(e),this.i+=1,this.i}pop(){if(this.i!==0)return this.i-=1,this.S.pop()}top(){return this.S[this.i-1]}},_1=la;Mn.default=_1;});var ep=M(Ln=>{v();m();_();Object.defineProperty(Ln,"t",{value:!0});Ln.default=void 0;var m1=at(),ua=class extends m1.Base{constructor(e=[]){super(),this.j=0,this.q=[];let r=this;e.forEach(function(i){r.push(i);});}clear(){this.q=[],this.i=this.j=0;}push(e){let r=this.q.length;if(this.j/r>.5&&this.j+this.i>=r&&r>4096){let i=this.i;for(let n=0;n<i;++n)this.q[n]=this.q[this.j+n];this.j=0,this.q[this.i]=e;}else this.q[this.j+this.i]=e;return ++this.i}pop(){if(this.i===0)return;let e=this.q[this.j++];return this.i-=1,e}front(){if(this.i!==0)return this.q[this.j]}},v1=ua;Ln.default=v1;});var tp=M(Un=>{v();m();_();Object.defineProperty(Un,"t",{value:!0});Un.default=void 0;var E1=at(),fa=class extends E1.Base{constructor(e=[],r=function(n,o){return n>o?-1:n<o?1:0},i=!0){if(super(),this.v=r,Array.isArray(e))this.C=i?[...e]:e;else {this.C=[];let o=this;e.forEach(function(s){o.C.push(s);});}this.i=this.C.length;let n=this.i>>1;for(let o=this.i-1>>1;o>=0;--o)this.k(o,n);}m(e){let r=this.C[e];for(;e>0;){let i=e-1>>1,n=this.C[i];if(this.v(n,r)<=0)break;this.C[e]=n,e=i;}this.C[e]=r;}k(e,r){let i=this.C[e];for(;e<r;){let n=e<<1|1,o=n+1,s=this.C[n];if(o<this.i&&this.v(s,this.C[o])>0&&(n=o,s=this.C[o]),this.v(s,i)>=0)break;this.C[e]=s,e=n;}this.C[e]=i;}clear(){this.i=0,this.C.length=0;}push(e){this.C.push(e),this.m(this.i),this.i+=1;}pop(){if(this.i===0)return;let e=this.C[0],r=this.C.pop();return this.i-=1,this.i&&(this.C[0]=r,this.k(0,this.i>>1)),e}top(){return this.C[0]}find(e){return this.C.indexOf(e)>=0}remove(e){let r=this.C.indexOf(e);return r<0?!1:(r===0?this.pop():r===this.i-1?(this.C.pop(),this.i-=1):(this.C.splice(r,1,this.C.pop()),this.i-=1,this.m(r),this.k(r,this.i>>1)),!0)}updateItem(e){let r=this.C.indexOf(e);return r<0?!1:(this.m(r),this.k(r,this.i>>1),!0)}toArray(){return [...this.C]}},S1=fa;Un.default=S1;});var qn=M(Nn=>{v();m();_();Object.defineProperty(Nn,"t",{value:!0});Nn.default=void 0;var A1=at(),ca=class extends A1.Container{},I1=ca;Nn.default=I1;});var lt=M(ha=>{v();m();_();Object.defineProperty(ha,"t",{value:!0});ha.throwIteratorAccessError=T1;function T1(){throw new RangeError("Iterator access denied!")}});var pa=M(jn=>{v();m();_();Object.defineProperty(jn,"t",{value:!0});jn.RandomIterator=void 0;var R1=at(),Dn=lt(),da=class extends R1.ContainerIterator{constructor(e,r){super(r),this.o=e,this.iteratorType===0?(this.pre=function(){return this.o===0&&(0, Dn.throwIteratorAccessError)(),this.o-=1,this},this.next=function(){return this.o===this.container.size()&&(0, Dn.throwIteratorAccessError)(),this.o+=1,this}):(this.pre=function(){return this.o===this.container.size()-1&&(0, Dn.throwIteratorAccessError)(),this.o+=1,this},this.next=function(){return this.o===-1&&(0, Dn.throwIteratorAccessError)(),this.o-=1,this});}get pointer(){return this.container.getElementByPos(this.o)}set pointer(e){this.container.setElementByPos(this.o,e);}};jn.RandomIterator=da;});var rp=M(Fn=>{v();m();_();Object.defineProperty(Fn,"t",{value:!0});Fn.default=void 0;var C1=P1(qn()),B1=pa();function P1(t){return t&&t.t?t:{default:t}}var wr=class t extends B1.RandomIterator{constructor(e,r,i){super(e,i),this.container=r;}copy(){return new t(this.o,this.container,this.iteratorType)}},ga=class extends C1.default{constructor(e=[],r=!0){if(super(),Array.isArray(e))this.J=r?[...e]:e,this.i=e.length;else {this.J=[];let i=this;e.forEach(function(n){i.pushBack(n);});}}clear(){this.i=0,this.J.length=0;}begin(){return new wr(0,this)}end(){return new wr(this.i,this)}rBegin(){return new wr(this.i-1,this,1)}rEnd(){return new wr(-1,this,1)}front(){return this.J[0]}back(){return this.J[this.i-1]}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;return this.J[e]}eraseElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;return this.J.splice(e,1),this.i-=1,this.i}eraseElementByValue(e){let r=0;for(let i=0;i<this.i;++i)this.J[i]!==e&&(this.J[r++]=this.J[i]);return this.i=this.J.length=r,this.i}eraseElementByIterator(e){let r=e.o;return e=e.next(),this.eraseElementByPos(r),e}pushBack(e){return this.J.push(e),this.i+=1,this.i}popBack(){if(this.i!==0)return this.i-=1,this.J.pop()}setElementByPos(e,r){if(e<0||e>this.i-1)throw new RangeError;this.J[e]=r;}insert(e,r,i=1){if(e<0||e>this.i)throw new RangeError;return this.J.splice(e,0,...new Array(i).fill(r)),this.i+=i,this.i}find(e){for(let r=0;r<this.i;++r)if(this.J[r]===e)return new wr(r,this);return this.end()}reverse(){this.J.reverse();}unique(){let e=1;for(let r=1;r<this.i;++r)this.J[r]!==this.J[r-1]&&(this.J[e++]=this.J[r]);return this.i=this.J.length=e,this.i}sort(e){this.J.sort(e);}forEach(e){for(let r=0;r<this.i;++r)e(this.J[r],r,this);}[Symbol.iterator](){return function*(){yield*this.J;}.bind(this)()}},O1=ga;Fn.default=O1;});var ip=M(Wn=>{v();m();_();Object.defineProperty(Wn,"t",{value:!0});Wn.default=void 0;var k1=M1(qn()),x1=at(),_r=lt();function M1(t){return t&&t.t?t:{default:t}}var mr=class t extends x1.ContainerIterator{constructor(e,r,i,n){super(n),this.o=e,this.h=r,this.container=i,this.iteratorType===0?(this.pre=function(){return this.o.L===this.h&&(0, _r.throwIteratorAccessError)(),this.o=this.o.L,this},this.next=function(){return this.o===this.h&&(0, _r.throwIteratorAccessError)(),this.o=this.o.B,this}):(this.pre=function(){return this.o.B===this.h&&(0, _r.throwIteratorAccessError)(),this.o=this.o.B,this},this.next=function(){return this.o===this.h&&(0, _r.throwIteratorAccessError)(),this.o=this.o.L,this});}get pointer(){return this.o===this.h&&(0, _r.throwIteratorAccessError)(),this.o.l}set pointer(e){this.o===this.h&&(0, _r.throwIteratorAccessError)(),this.o.l=e;}copy(){return new t(this.o,this.h,this.container,this.iteratorType)}},ya=class extends k1.default{constructor(e=[]){super(),this.h={},this.p=this._=this.h.L=this.h.B=this.h;let r=this;e.forEach(function(i){r.pushBack(i);});}V(e){let{L:r,B:i}=e;r.B=i,i.L=r,e===this.p&&(this.p=i),e===this._&&(this._=r),this.i-=1;}G(e,r){let i=r.B,n={l:e,L:r,B:i};r.B=n,i.L=n,r===this.h&&(this.p=n),i===this.h&&(this._=n),this.i+=1;}clear(){this.i=0,this.p=this._=this.h.L=this.h.B=this.h;}begin(){return new mr(this.p,this.h,this)}end(){return new mr(this.h,this.h,this)}rBegin(){return new mr(this._,this.h,this,1)}rEnd(){return new mr(this.h,this.h,this,1)}front(){return this.p.l}back(){return this._.l}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=this.p;for(;e--;)r=r.B;return r.l}eraseElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=this.p;for(;e--;)r=r.B;return this.V(r),this.i}eraseElementByValue(e){let r=this.p;for(;r!==this.h;)r.l===e&&this.V(r),r=r.B;return this.i}eraseElementByIterator(e){let r=e.o;return r===this.h&&(0, _r.throwIteratorAccessError)(),e=e.next(),this.V(r),e}pushBack(e){return this.G(e,this._),this.i}popBack(){if(this.i===0)return;let e=this._.l;return this.V(this._),e}pushFront(e){return this.G(e,this.h),this.i}popFront(){if(this.i===0)return;let e=this.p.l;return this.V(this.p),e}setElementByPos(e,r){if(e<0||e>this.i-1)throw new RangeError;let i=this.p;for(;e--;)i=i.B;i.l=r;}insert(e,r,i=1){if(e<0||e>this.i)throw new RangeError;if(i<=0)return this.i;if(e===0)for(;i--;)this.pushFront(r);else if(e===this.i)for(;i--;)this.pushBack(r);else {let n=this.p;for(let s=1;s<e;++s)n=n.B;let o=n.B;for(this.i+=i;i--;)n.B={l:r,L:n},n.B.L=n,n=n.B;n.B=o,o.L=n;}return this.i}find(e){let r=this.p;for(;r!==this.h;){if(r.l===e)return new mr(r,this.h,this);r=r.B;}return this.end()}reverse(){if(this.i<=1)return;let e=this.p,r=this._,i=0;for(;i<<1<this.i;){let n=e.l;e.l=r.l,r.l=n,e=e.B,r=r.L,i+=1;}}unique(){if(this.i<=1)return this.i;let e=this.p;for(;e!==this.h;){let r=e;for(;r.B!==this.h&&r.l===r.B.l;)r=r.B,this.i-=1;e.B=r.B,e.B.L=e,e=e.B;}return this.i}sort(e){if(this.i<=1)return;let r=[];this.forEach(function(n){r.push(n);}),r.sort(e);let i=this.p;r.forEach(function(n){i.l=n,i=i.B;});}merge(e){let r=this;if(this.i===0)e.forEach(function(i){r.pushBack(i);});else {let i=this.p;e.forEach(function(n){for(;i!==r.h&&i.l<=n;)i=i.B;r.G(n,i.L);});}return this.i}forEach(e){let r=this.p,i=0;for(;r!==this.h;)e(r.l,i++,this),r=r.B;}[Symbol.iterator](){return function*(){if(this.i===0)return;let e=this.p;for(;e!==this.h;)yield e.l,e=e.B;}.bind(this)()}},L1=ya;Wn.default=L1;});var np=M($n=>{v();m();_();Object.defineProperty($n,"t",{value:!0});$n.default=void 0;var U1=q1(qn()),N1=pa();function q1(t){return t&&t.t?t:{default:t}}var vr=class t extends N1.RandomIterator{constructor(e,r,i){super(e,i),this.container=r;}copy(){return new t(this.o,this.container,this.iteratorType)}},ba=class extends U1.default{constructor(e=[],r=4096){super(),this.j=0,this.D=0,this.R=0,this.N=0,this.P=0,this.A=[];let i=(()=>{if(typeof e.length=="number")return e.length;if(typeof e.size=="number")return e.size;if(typeof e.size=="function")return e.size();throw new TypeError("Cannot get the length or size of the container")})();this.F=r,this.P=Math.max(Math.ceil(i/this.F),1);for(let s=0;s<this.P;++s)this.A.push(new Array(this.F));let n=Math.ceil(i/this.F);this.j=this.R=(this.P>>1)-(n>>1),this.D=this.N=this.F-i%this.F>>1;let o=this;e.forEach(function(s){o.pushBack(s);});}T(){let e=[],r=Math.max(this.P>>1,1);for(let i=0;i<r;++i)e[i]=new Array(this.F);for(let i=this.j;i<this.P;++i)e[e.length]=this.A[i];for(let i=0;i<this.R;++i)e[e.length]=this.A[i];e[e.length]=[...this.A[this.R]],this.j=r,this.R=e.length-1;for(let i=0;i<r;++i)e[e.length]=new Array(this.F);this.A=e,this.P=e.length;}O(e){let r=this.D+e+1,i=r%this.F,n=i-1,o=this.j+(r-i)/this.F;return i===0&&(o-=1),o%=this.P,n<0&&(n+=this.F),{curNodeBucketIndex:o,curNodePointerIndex:n}}clear(){this.A=[new Array(this.F)],this.P=1,this.j=this.R=this.i=0,this.D=this.N=this.F>>1;}begin(){return new vr(0,this)}end(){return new vr(this.i,this)}rBegin(){return new vr(this.i-1,this,1)}rEnd(){return new vr(-1,this,1)}front(){if(this.i!==0)return this.A[this.j][this.D]}back(){if(this.i!==0)return this.A[this.R][this.N]}pushBack(e){return this.i&&(this.N<this.F-1?this.N+=1:this.R<this.P-1?(this.R+=1,this.N=0):(this.R=0,this.N=0),this.R===this.j&&this.N===this.D&&this.T()),this.i+=1,this.A[this.R][this.N]=e,this.i}popBack(){if(this.i===0)return;let e=this.A[this.R][this.N];return this.i!==1&&(this.N>0?this.N-=1:this.R>0?(this.R-=1,this.N=this.F-1):(this.R=this.P-1,this.N=this.F-1)),this.i-=1,e}pushFront(e){return this.i&&(this.D>0?this.D-=1:this.j>0?(this.j-=1,this.D=this.F-1):(this.j=this.P-1,this.D=this.F-1),this.j===this.R&&this.D===this.N&&this.T()),this.i+=1,this.A[this.j][this.D]=e,this.i}popFront(){if(this.i===0)return;let e=this.A[this.j][this.D];return this.i!==1&&(this.D<this.F-1?this.D+=1:this.j<this.P-1?(this.j+=1,this.D=0):(this.j=0,this.D=0)),this.i-=1,e}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let{curNodeBucketIndex:r,curNodePointerIndex:i}=this.O(e);return this.A[r][i]}setElementByPos(e,r){if(e<0||e>this.i-1)throw new RangeError;let{curNodeBucketIndex:i,curNodePointerIndex:n}=this.O(e);this.A[i][n]=r;}insert(e,r,i=1){if(e<0||e>this.i)throw new RangeError;if(e===0)for(;i--;)this.pushFront(r);else if(e===this.i)for(;i--;)this.pushBack(r);else {let n=[];for(let o=e;o<this.i;++o)n.push(this.getElementByPos(o));this.cut(e-1);for(let o=0;o<i;++o)this.pushBack(r);for(let o=0;o<n.length;++o)this.pushBack(n[o]);}return this.i}cut(e){if(e<0)return this.clear(),0;let{curNodeBucketIndex:r,curNodePointerIndex:i}=this.O(e);return this.R=r,this.N=i,this.i=e+1,this.i}eraseElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;if(e===0)this.popFront();else if(e===this.i-1)this.popBack();else {let r=[];for(let n=e+1;n<this.i;++n)r.push(this.getElementByPos(n));this.cut(e),this.popBack();let i=this;r.forEach(function(n){i.pushBack(n);});}return this.i}eraseElementByValue(e){if(this.i===0)return 0;let r=[];for(let n=0;n<this.i;++n){let o=this.getElementByPos(n);o!==e&&r.push(o);}let i=r.length;for(let n=0;n<i;++n)this.setElementByPos(n,r[n]);return this.cut(i-1)}eraseElementByIterator(e){let r=e.o;return this.eraseElementByPos(r),e=e.next(),e}find(e){for(let r=0;r<this.i;++r)if(this.getElementByPos(r)===e)return new vr(r,this);return this.end()}reverse(){let e=0,r=this.i-1;for(;e<r;){let i=this.getElementByPos(e);this.setElementByPos(e,this.getElementByPos(r)),this.setElementByPos(r,i),e+=1,r-=1;}}unique(){if(this.i<=1)return this.i;let e=1,r=this.getElementByPos(0);for(let i=1;i<this.i;++i){let n=this.getElementByPos(i);n!==r&&(r=n,this.setElementByPos(e++,n));}for(;this.i>e;)this.popBack();return this.i}sort(e){let r=[];for(let i=0;i<this.i;++i)r.push(this.getElementByPos(i));r.sort(e);for(let i=0;i<this.i;++i)this.setElementByPos(i,r[i]);}shrinkToFit(){if(this.i===0)return;let e=[];this.forEach(function(r){e.push(r);}),this.P=Math.max(Math.ceil(this.i/this.F),1),this.i=this.j=this.R=this.D=this.N=0,this.A=[];for(let r=0;r<this.P;++r)this.A.push(new Array(this.F));for(let r=0;r<e.length;++r)this.pushBack(e[r]);}forEach(e){for(let r=0;r<this.i;++r)e(this.getElementByPos(r),r,this);}[Symbol.iterator](){return function*(){for(let e=0;e<this.i;++e)yield this.getElementByPos(e);}.bind(this)()}},D1=ba;$n.default=D1;});var sp=M(Zr=>{v();m();_();Object.defineProperty(Zr,"t",{value:!0});Zr.TreeNodeEnableIndex=Zr.TreeNode=void 0;var Hn=class{constructor(e,r){this.ee=1,this.u=void 0,this.l=void 0,this.U=void 0,this.W=void 0,this.tt=void 0,this.u=e,this.l=r;}L(){let e=this;if(e.ee===1&&e.tt.tt===e)e=e.W;else if(e.U)for(e=e.U;e.W;)e=e.W;else {let r=e.tt;for(;r.U===e;)e=r,r=e.tt;e=r;}return e}B(){let e=this;if(e.W){for(e=e.W;e.U;)e=e.U;return e}else {let r=e.tt;for(;r.W===e;)e=r,r=e.tt;return e.W!==r?r:e}}te(){let e=this.tt,r=this.W,i=r.U;return e.tt===this?e.tt=r:e.U===this?e.U=r:e.W=r,r.tt=e,r.U=this,this.tt=r,this.W=i,i&&(i.tt=this),r}se(){let e=this.tt,r=this.U,i=r.W;return e.tt===this?e.tt=r:e.U===this?e.U=r:e.W=r,r.tt=e,r.W=this,this.tt=r,this.U=i,i&&(i.tt=this),r}};Zr.TreeNode=Hn;var wa=class extends Hn{constructor(){super(...arguments),this.rt=1;}te(){let e=super.te();return this.ie(),e.ie(),e}se(){let e=super.se();return this.ie(),e.ie(),e}ie(){this.rt=1,this.U&&(this.rt+=this.U.rt),this.W&&(this.rt+=this.W.rt);}};Zr.TreeNodeEnableIndex=wa;});var ma=M(Vn=>{v();m();_();Object.defineProperty(Vn,"t",{value:!0});Vn.default=void 0;var op=sp(),j1=at(),ap=lt(),_a=class extends j1.Container{constructor(e=function(i,n){return i<n?-1:i>n?1:0},r=!1){super(),this.Y=void 0,this.v=e,r?(this.re=op.TreeNodeEnableIndex,this.M=function(i,n,o){let s=this.ne(i,n,o);if(s){let a=s.tt;for(;a!==this.h;)a.rt+=1,a=a.tt;let u=this.he(s);if(u){let{parentNode:c,grandParent:h,curNode:d}=u;c.ie(),h.ie(),d.ie();}}return this.i},this.V=function(i){let n=this.fe(i);for(;n!==this.h;)n.rt-=1,n=n.tt;}):(this.re=op.TreeNode,this.M=function(i,n,o){let s=this.ne(i,n,o);return s&&this.he(s),this.i},this.V=this.fe),this.h=new this.re;}X(e,r){let i=this.h;for(;e;){let n=this.v(e.u,r);if(n<0)e=e.W;else if(n>0)i=e,e=e.U;else return e}return i}Z(e,r){let i=this.h;for(;e;)this.v(e.u,r)<=0?e=e.W:(i=e,e=e.U);return i}$(e,r){let i=this.h;for(;e;){let n=this.v(e.u,r);if(n<0)i=e,e=e.W;else if(n>0)e=e.U;else return e}return i}rr(e,r){let i=this.h;for(;e;)this.v(e.u,r)<0?(i=e,e=e.W):e=e.U;return i}ue(e){for(;;){let r=e.tt;if(r===this.h)return;if(e.ee===1){e.ee=0;return}if(e===r.U){let i=r.W;if(i.ee===1)i.ee=0,r.ee=1,r===this.Y?this.Y=r.te():r.te();else if(i.W&&i.W.ee===1){i.ee=r.ee,r.ee=0,i.W.ee=0,r===this.Y?this.Y=r.te():r.te();return}else i.U&&i.U.ee===1?(i.ee=1,i.U.ee=0,i.se()):(i.ee=1,e=r);}else {let i=r.U;if(i.ee===1)i.ee=0,r.ee=1,r===this.Y?this.Y=r.se():r.se();else if(i.U&&i.U.ee===1){i.ee=r.ee,r.ee=0,i.U.ee=0,r===this.Y?this.Y=r.se():r.se();return}else i.W&&i.W.ee===1?(i.ee=1,i.W.ee=0,i.te()):(i.ee=1,e=r);}}}fe(e){if(this.i===1)return this.clear(),this.h;let r=e;for(;r.U||r.W;){if(r.W)for(r=r.W;r.U;)r=r.U;else r=r.U;[e.u,r.u]=[r.u,e.u],[e.l,r.l]=[r.l,e.l],e=r;}this.h.U===r?this.h.U=r.tt:this.h.W===r&&(this.h.W=r.tt),this.ue(r);let i=r.tt;return r===i.U?i.U=void 0:i.W=void 0,this.i-=1,this.Y.ee=0,i}oe(e,r){return e===void 0?!1:this.oe(e.U,r)||r(e)?!0:this.oe(e.W,r)}he(e){for(;;){let r=e.tt;if(r.ee===0)return;let i=r.tt;if(r===i.U){let n=i.W;if(n&&n.ee===1){if(n.ee=r.ee=0,i===this.Y)return;i.ee=1,e=i;continue}else if(e===r.W){if(e.ee=0,e.U&&(e.U.tt=r),e.W&&(e.W.tt=i),r.W=e.U,i.U=e.W,e.U=r,e.W=i,i===this.Y)this.Y=e,this.h.tt=e;else {let o=i.tt;o.U===i?o.U=e:o.W=e;}return e.tt=i.tt,r.tt=e,i.tt=e,i.ee=1,{parentNode:r,grandParent:i,curNode:e}}else r.ee=0,i===this.Y?this.Y=i.se():i.se(),i.ee=1;}else {let n=i.U;if(n&&n.ee===1){if(n.ee=r.ee=0,i===this.Y)return;i.ee=1,e=i;continue}else if(e===r.U){if(e.ee=0,e.U&&(e.U.tt=i),e.W&&(e.W.tt=r),i.W=e.U,r.U=e.W,e.U=i,e.W=r,i===this.Y)this.Y=e,this.h.tt=e;else {let o=i.tt;o.U===i?o.U=e:o.W=e;}return e.tt=i.tt,r.tt=e,i.tt=e,i.ee=1,{parentNode:r,grandParent:i,curNode:e}}else r.ee=0,i===this.Y?this.Y=i.te():i.te(),i.ee=1;}return}}ne(e,r,i){if(this.Y===void 0){this.i+=1,this.Y=new this.re(e,r),this.Y.ee=0,this.Y.tt=this.h,this.h.tt=this.Y,this.h.U=this.Y,this.h.W=this.Y;return}let n,o=this.h.U,s=this.v(o.u,e);if(s===0){o.l=r;return}else if(s>0)o.U=new this.re(e,r),o.U.tt=o,n=o.U,this.h.U=n;else {let a=this.h.W,u=this.v(a.u,e);if(u===0){a.l=r;return}else if(u<0)a.W=new this.re(e,r),a.W.tt=a,n=a.W,this.h.W=n;else {if(i!==void 0){let c=i.o;if(c!==this.h){let h=this.v(c.u,e);if(h===0){c.l=r;return}else if(h>0){let d=c.L(),g=this.v(d.u,e);if(g===0){d.l=r;return}else g<0&&(n=new this.re(e,r),d.W===void 0?(d.W=n,n.tt=d):(c.U=n,n.tt=c));}}}if(n===void 0)for(n=this.Y;;){let c=this.v(n.u,e);if(c>0){if(n.U===void 0){n.U=new this.re(e,r),n.U.tt=n,n=n.U;break}n=n.U;}else if(c<0){if(n.W===void 0){n.W=new this.re(e,r),n.W.tt=n,n=n.W;break}n=n.W;}else {n.l=r;return}}}}return this.i+=1,n}I(e,r){for(;e;){let i=this.v(e.u,r);if(i<0)e=e.W;else if(i>0)e=e.U;else return e}return e||this.h}clear(){this.i=0,this.Y=void 0,this.h.tt=void 0,this.h.U=this.h.W=void 0;}updateKeyByIterator(e,r){let i=e.o;if(i===this.h&&(0, ap.throwIteratorAccessError)(),this.i===1)return i.u=r,!0;if(i===this.h.U)return this.v(i.B().u,r)>0?(i.u=r,!0):!1;if(i===this.h.W)return this.v(i.L().u,r)<0?(i.u=r,!0):!1;let n=i.L().u;if(this.v(n,r)>=0)return !1;let o=i.B().u;return this.v(o,r)<=0?!1:(i.u=r,!0)}eraseElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=0,i=this;return this.oe(this.Y,function(n){return e===r?(i.V(n),!0):(r+=1,!1)}),this.i}eraseElementByKey(e){if(this.i===0)return !1;let r=this.I(this.Y,e);return r===this.h?!1:(this.V(r),!0)}eraseElementByIterator(e){let r=e.o;r===this.h&&(0, ap.throwIteratorAccessError)();let i=r.W===void 0;return e.iteratorType===0?i&&e.next():(!i||r.U===void 0)&&e.next(),this.V(r),e}forEach(e){let r=0;for(let i of this)e(i,r++,this);}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r,i=0;for(let n of this){if(i===e){r=n;break}i+=1;}return r}getHeight(){if(this.i===0)return 0;let e=function(r){return r?Math.max(e(r.U),e(r.W))+1:0};return e(this.Y)}},F1=_a;Vn.default=F1;});var Ea=M(Kn=>{v();m();_();Object.defineProperty(Kn,"t",{value:!0});Kn.default=void 0;var W1=at(),zn=lt(),va=class extends W1.ContainerIterator{constructor(e,r,i){super(i),this.o=e,this.h=r,this.iteratorType===0?(this.pre=function(){return this.o===this.h.U&&(0, zn.throwIteratorAccessError)(),this.o=this.o.L(),this},this.next=function(){return this.o===this.h&&(0, zn.throwIteratorAccessError)(),this.o=this.o.B(),this}):(this.pre=function(){return this.o===this.h.W&&(0, zn.throwIteratorAccessError)(),this.o=this.o.B(),this},this.next=function(){return this.o===this.h&&(0, zn.throwIteratorAccessError)(),this.o=this.o.L(),this});}get index(){let e=this.o,r=this.h.tt;if(e===this.h)return r?r.rt-1:0;let i=0;for(e.U&&(i+=e.U.rt);e!==r;){let n=e.tt;e===n.W&&(i+=1,n.U&&(i+=n.U.rt)),e=n;}return i}},$1=va;Kn.default=$1;});var up=M(Gn=>{v();m();_();Object.defineProperty(Gn,"t",{value:!0});Gn.default=void 0;var H1=lp(ma()),V1=lp(Ea()),z1=lt();function lp(t){return t&&t.t?t:{default:t}}var Ke=class t extends V1.default{constructor(e,r,i,n){super(e,r,n),this.container=i;}get pointer(){return this.o===this.h&&(0, z1.throwIteratorAccessError)(),this.o.u}copy(){return new t(this.o,this.h,this.container,this.iteratorType)}},Sa=class extends H1.default{constructor(e=[],r,i){super(r,i);let n=this;e.forEach(function(o){n.insert(o);});}*K(e){e!==void 0&&(yield*this.K(e.U),yield e.u,yield*this.K(e.W));}begin(){return new Ke(this.h.U||this.h,this.h,this)}end(){return new Ke(this.h,this.h,this)}rBegin(){return new Ke(this.h.W||this.h,this.h,this,1)}rEnd(){return new Ke(this.h,this.h,this,1)}front(){return this.h.U?this.h.U.u:void 0}back(){return this.h.W?this.h.W.u:void 0}insert(e,r){return this.M(e,void 0,r)}find(e){let r=this.I(this.Y,e);return new Ke(r,this.h,this)}lowerBound(e){let r=this.X(this.Y,e);return new Ke(r,this.h,this)}upperBound(e){let r=this.Z(this.Y,e);return new Ke(r,this.h,this)}reverseLowerBound(e){let r=this.$(this.Y,e);return new Ke(r,this.h,this)}reverseUpperBound(e){let r=this.rr(this.Y,e);return new Ke(r,this.h,this)}union(e){let r=this;return e.forEach(function(i){r.insert(i);}),this.i}[Symbol.iterator](){return this.K(this.Y)}},K1=Sa;Gn.default=K1;});var cp=M(Qn=>{v();m();_();Object.defineProperty(Qn,"t",{value:!0});Qn.default=void 0;var G1=fp(ma()),Q1=fp(Ea()),Y1=lt();function fp(t){return t&&t.t?t:{default:t}}var Ge=class t extends Q1.default{constructor(e,r,i,n){super(e,r,n),this.container=i;}get pointer(){this.o===this.h&&(0, Y1.throwIteratorAccessError)();let e=this;return new Proxy([],{get(r,i){if(i==="0")return e.o.u;if(i==="1")return e.o.l},set(r,i,n){if(i!=="1")throw new TypeError("props must be 1");return e.o.l=n,!0}})}copy(){return new t(this.o,this.h,this.container,this.iteratorType)}},Aa=class extends G1.default{constructor(e=[],r,i){super(r,i);let n=this;e.forEach(function(o){n.setElement(o[0],o[1]);});}*K(e){e!==void 0&&(yield*this.K(e.U),yield [e.u,e.l],yield*this.K(e.W));}begin(){return new Ge(this.h.U||this.h,this.h,this)}end(){return new Ge(this.h,this.h,this)}rBegin(){return new Ge(this.h.W||this.h,this.h,this,1)}rEnd(){return new Ge(this.h,this.h,this,1)}front(){if(this.i===0)return;let e=this.h.U;return [e.u,e.l]}back(){if(this.i===0)return;let e=this.h.W;return [e.u,e.l]}lowerBound(e){let r=this.X(this.Y,e);return new Ge(r,this.h,this)}upperBound(e){let r=this.Z(this.Y,e);return new Ge(r,this.h,this)}reverseLowerBound(e){let r=this.$(this.Y,e);return new Ge(r,this.h,this)}reverseUpperBound(e){let r=this.rr(this.Y,e);return new Ge(r,this.h,this)}setElement(e,r,i){return this.M(e,r,i)}find(e){let r=this.I(this.Y,e);return new Ge(r,this.h,this)}getElementByKey(e){return this.I(this.Y,e).l}union(e){let r=this;return e.forEach(function(i){r.setElement(i[0],i[1]);}),this.i}[Symbol.iterator](){return this.K(this.Y)}},J1=Aa;Qn.default=J1;});var Ta=M(Ia=>{v();m();_();Object.defineProperty(Ia,"t",{value:!0});Ia.default=X1;function X1(t){let e=typeof t;return e==="object"&&t!==null||e==="function"}});var Pa=M(ei=>{v();m();_();Object.defineProperty(ei,"t",{value:!0});ei.HashContainerIterator=ei.HashContainer=void 0;var hp=at(),Ra=Z1(Ta()),Ti=lt();function Z1(t){return t&&t.t?t:{default:t}}var Ca=class extends hp.ContainerIterator{constructor(e,r,i){super(i),this.o=e,this.h=r,this.iteratorType===0?(this.pre=function(){return this.o.L===this.h&&(0, Ti.throwIteratorAccessError)(),this.o=this.o.L,this},this.next=function(){return this.o===this.h&&(0, Ti.throwIteratorAccessError)(),this.o=this.o.B,this}):(this.pre=function(){return this.o.B===this.h&&(0, Ti.throwIteratorAccessError)(),this.o=this.o.B,this},this.next=function(){return this.o===this.h&&(0, Ti.throwIteratorAccessError)(),this.o=this.o.L,this});}};ei.HashContainerIterator=Ca;var Ba=class extends hp.Container{constructor(){super(),this.H=[],this.g={},this.HASH_TAG=Symbol("@@HASH_TAG"),Object.setPrototypeOf(this.g,null),this.h={},this.h.L=this.h.B=this.p=this._=this.h;}V(e){let{L:r,B:i}=e;r.B=i,i.L=r,e===this.p&&(this.p=i),e===this._&&(this._=r),this.i-=1;}M(e,r,i){i===void 0&&(i=(0, Ra.default)(e));let n;if(i){let o=e[this.HASH_TAG];if(o!==void 0)return this.H[o].l=r,this.i;Object.defineProperty(e,this.HASH_TAG,{value:this.H.length,configurable:!0}),n={u:e,l:r,L:this._,B:this.h},this.H.push(n);}else {let o=this.g[e];if(o)return o.l=r,this.i;n={u:e,l:r,L:this._,B:this.h},this.g[e]=n;}return this.i===0?(this.p=n,this.h.B=n):this._.B=n,this._=n,this.h.L=n,++this.i}I(e,r){if(r===void 0&&(r=(0, Ra.default)(e)),r){let i=e[this.HASH_TAG];return i===void 0?this.h:this.H[i]}else return this.g[e]||this.h}clear(){let e=this.HASH_TAG;this.H.forEach(function(r){delete r.u[e];}),this.H=[],this.g={},Object.setPrototypeOf(this.g,null),this.i=0,this.p=this._=this.h.L=this.h.B=this.h;}eraseElementByKey(e,r){let i;if(r===void 0&&(r=(0, Ra.default)(e)),r){let n=e[this.HASH_TAG];if(n===void 0)return !1;delete e[this.HASH_TAG],i=this.H[n],delete this.H[n];}else {if(i=this.g[e],i===void 0)return !1;delete this.g[e];}return this.V(i),!0}eraseElementByIterator(e){let r=e.o;return r===this.h&&(0, Ti.throwIteratorAccessError)(),this.V(r),e.next()}eraseElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=this.p;for(;e--;)r=r.B;return this.V(r),this.i}};ei.HashContainer=Ba;});var pp=M(Yn=>{v();m();_();Object.defineProperty(Yn,"t",{value:!0});Yn.default=void 0;var dp=Pa(),ev=lt(),Er=class t extends dp.HashContainerIterator{constructor(e,r,i,n){super(e,r,n),this.container=i;}get pointer(){return this.o===this.h&&(0, ev.throwIteratorAccessError)(),this.o.u}copy(){return new t(this.o,this.h,this.container,this.iteratorType)}},Oa=class extends dp.HashContainer{constructor(e=[]){super();let r=this;e.forEach(function(i){r.insert(i);});}begin(){return new Er(this.p,this.h,this)}end(){return new Er(this.h,this.h,this)}rBegin(){return new Er(this._,this.h,this,1)}rEnd(){return new Er(this.h,this.h,this,1)}front(){return this.p.u}back(){return this._.u}insert(e,r){return this.M(e,void 0,r)}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=this.p;for(;e--;)r=r.B;return r.u}find(e,r){let i=this.I(e,r);return new Er(i,this.h,this)}forEach(e){let r=0,i=this.p;for(;i!==this.h;)e(i.u,r++,this),i=i.B;}[Symbol.iterator](){return function*(){let e=this.p;for(;e!==this.h;)yield e.u,e=e.B;}.bind(this)()}},tv=Oa;Yn.default=tv;});var yp=M(Jn=>{v();m();_();Object.defineProperty(Jn,"t",{value:!0});Jn.default=void 0;var gp=Pa(),rv=nv(Ta()),iv=lt();function nv(t){return t&&t.t?t:{default:t}}var Sr=class t extends gp.HashContainerIterator{constructor(e,r,i,n){super(e,r,n),this.container=i;}get pointer(){this.o===this.h&&(0, iv.throwIteratorAccessError)();let e=this;return new Proxy([],{get(r,i){if(i==="0")return e.o.u;if(i==="1")return e.o.l},set(r,i,n){if(i!=="1")throw new TypeError("props must be 1");return e.o.l=n,!0}})}copy(){return new t(this.o,this.h,this.container,this.iteratorType)}},ka=class extends gp.HashContainer{constructor(e=[]){super();let r=this;e.forEach(function(i){r.setElement(i[0],i[1]);});}begin(){return new Sr(this.p,this.h,this)}end(){return new Sr(this.h,this.h,this)}rBegin(){return new Sr(this._,this.h,this,1)}rEnd(){return new Sr(this.h,this.h,this,1)}front(){if(this.i!==0)return [this.p.u,this.p.l]}back(){if(this.i!==0)return [this._.u,this._.l]}setElement(e,r,i){return this.M(e,r,i)}getElementByKey(e,r){if(r===void 0&&(r=(0, rv.default)(e)),r){let n=e[this.HASH_TAG];return n!==void 0?this.H[n].l:void 0}let i=this.g[e];return i?i.l:void 0}getElementByPos(e){if(e<0||e>this.i-1)throw new RangeError;let r=this.p;for(;e--;)r=r.B;return [r.u,r.l]}find(e,r){let i=this.I(e,r);return new Sr(i,this.h,this)}forEach(e){let r=0,i=this.p;for(;i!==this.h;)e([i.u,i.l],r++,this),i=i.B;}[Symbol.iterator](){return function*(){let e=this.p;for(;e!==this.h;)yield [e.u,e.l],e=e.B;}.bind(this)()}},sv=ka;Jn.default=sv;});var bp=M(je=>{v();m();_();Object.defineProperty(je,"t",{value:!0});Object.defineProperty(je,"Deque",{enumerable:!0,get:function(){return cv.default}});Object.defineProperty(je,"HashMap",{enumerable:!0,get:function(){return gv.default}});Object.defineProperty(je,"HashSet",{enumerable:!0,get:function(){return pv.default}});Object.defineProperty(je,"LinkList",{enumerable:!0,get:function(){return fv.default}});Object.defineProperty(je,"OrderedMap",{enumerable:!0,get:function(){return dv.default}});Object.defineProperty(je,"OrderedSet",{enumerable:!0,get:function(){return hv.default}});Object.defineProperty(je,"PriorityQueue",{enumerable:!0,get:function(){return lv.default}});Object.defineProperty(je,"Queue",{enumerable:!0,get:function(){return av.default}});Object.defineProperty(je,"Stack",{enumerable:!0,get:function(){return ov.default}});Object.defineProperty(je,"Vector",{enumerable:!0,get:function(){return uv.default}});var ov=ut(Zd()),av=ut(ep()),lv=ut(tp()),uv=ut(rp()),fv=ut(ip()),cv=ut(np()),hv=ut(up()),dv=ut(cp()),pv=ut(pp()),gv=ut(yp());function ut(t){return t&&t.t?t:{default:t}}});var _p=M((mN,wp)=>{v();m();_();var yv=bp().OrderedSet,ft=ot()("number-allocator:trace"),bv=ot()("number-allocator:error");function Te(t,e){this.low=t,this.high=e;}Te.prototype.equals=function(t){return this.low===t.low&&this.high===t.high};Te.prototype.compare=function(t){return this.low<t.low&&this.high<t.low?-1:t.low<this.low&&t.high<this.low?1:0};function ct(t,e){if(!(this instanceof ct))return new ct(t,e);this.min=t,this.max=e,this.ss=new yv([],(r,i)=>r.compare(i)),ft("Create"),this.clear();}ct.prototype.firstVacant=function(){return this.ss.size()===0?null:this.ss.front().low};ct.prototype.alloc=function(){if(this.ss.size()===0)return ft("alloc():empty"),null;let t=this.ss.begin(),e=t.pointer.low,r=t.pointer.high,i=e;return i+1<=r?this.ss.updateKeyByIterator(t,new Te(e+1,r)):this.ss.eraseElementByPos(0),ft("alloc():"+i),i};ct.prototype.use=function(t){let e=new Te(t,t),r=this.ss.lowerBound(e);if(!r.equals(this.ss.end())){let i=r.pointer.low,n=r.pointer.high;return r.pointer.equals(e)?(this.ss.eraseElementByIterator(r),ft("use():"+t),!0):i>t?!1:i===t?(this.ss.updateKeyByIterator(r,new Te(i+1,n)),ft("use():"+t),!0):n===t?(this.ss.updateKeyByIterator(r,new Te(i,n-1)),ft("use():"+t),!0):(this.ss.updateKeyByIterator(r,new Te(t+1,n)),this.ss.insert(new Te(i,t-1)),ft("use():"+t),!0)}return ft("use():failed"),!1};ct.prototype.free=function(t){if(t<this.min||t>this.max){bv("free():"+t+" is out of range");return}let e=new Te(t,t),r=this.ss.upperBound(e);if(r.equals(this.ss.end())){if(r.equals(this.ss.begin())){this.ss.insert(e);return}r.pre();let i=r.pointer.high;r.pointer.high+1===t?this.ss.updateKeyByIterator(r,new Te(i,t)):this.ss.insert(e);}else if(r.equals(this.ss.begin()))if(t+1===r.pointer.low){let i=r.pointer.high;this.ss.updateKeyByIterator(r,new Te(t,i));}else this.ss.insert(e);else {let i=r.pointer.low,n=r.pointer.high;r.pre();let o=r.pointer.low;r.pointer.high+1===t?t+1===i?(this.ss.eraseElementByIterator(r),this.ss.updateKeyByIterator(r,new Te(o,n))):this.ss.updateKeyByIterator(r,new Te(o,t)):t+1===i?(this.ss.eraseElementByIterator(r.next()),this.ss.insert(new Te(t,n))):this.ss.insert(e);}ft("free():"+t);};ct.prototype.clear=function(){ft("clear()"),this.ss.clear(),this.ss.insert(new Te(this.min,this.max));};ct.prototype.intervalCount=function(){return this.ss.size()};ct.prototype.dump=function(){console.log("length:"+this.ss.size());for(let t of this.ss)console.log(t);};wp.exports=ct;});var xa=M((PN,mp)=>{v();m();_();var wv=_p();mp.exports.NumberAllocator=wv;});var vp=M(La=>{v();m();_();Object.defineProperty(La,"__esModule",{value:!0});var _v=Xd(),mv=xa(),Ma=class{constructor(e){e>0&&(this.aliasToTopic=new _v.LRUCache({max:e}),this.topicToAlias={},this.numberAllocator=new mv.NumberAllocator(1,e),this.max=e,this.length=0);}put(e,r){if(r===0||r>this.max)return !1;let i=this.aliasToTopic.get(r);return i&&delete this.topicToAlias[i],this.aliasToTopic.set(r,e),this.topicToAlias[e]=r,this.numberAllocator.use(r),this.length=this.aliasToTopic.size,!0}getTopicByAlias(e){return this.aliasToTopic.get(e)}getAliasByTopic(e){let r=this.topicToAlias[e];return typeof r<"u"&&this.aliasToTopic.get(r),r}clear(){this.aliasToTopic.clear(),this.topicToAlias={},this.numberAllocator.clear(),this.length=0;}getLruAlias(){let e=this.numberAllocator.firstVacant();return e||[...this.aliasToTopic.keys()][this.aliasToTopic.size-1]}};La.default=Ma;});var Ep=M(Ri=>{v();m();_();var vv=Ri&&Ri.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Ri,"__esModule",{value:!0});var Ev=Ai(),Sv=vv(vp()),Av=Jr(),Iv=(t,e)=>{t.log("_handleConnack");let{options:r}=t,n=r.protocolVersion===5?e.reasonCode:e.returnCode;if(clearTimeout(t.connackTimer),delete t.topicAliasSend,e.properties){if(e.properties.topicAliasMaximum){if(e.properties.topicAliasMaximum>65535){t.emit("error",new Error("topicAliasMaximum from broker is out of range"));return}e.properties.topicAliasMaximum>0&&(t.topicAliasSend=new Sv.default(e.properties.topicAliasMaximum));}e.properties.serverKeepAlive&&r.keepalive&&(r.keepalive=e.properties.serverKeepAlive,t._shiftPingInterval()),e.properties.maximumPacketSize&&(r.properties||(r.properties={}),r.properties.maximumPacketSize=e.properties.maximumPacketSize);}if(n===0)t.reconnecting=!1,t._onConnect(e);else if(n>0){let o=new Av.ErrorWithReasonCode(`Connection refused: ${Ev.ReasonCodes[n]}`,n);t.emit("error",o);}};Ri.default=Iv;});var Sp=M(Ua=>{v();m();_();Object.defineProperty(Ua,"__esModule",{value:!0});var Tv=(t,e,r)=>{t.log("handling pubrel packet");let i=typeof r<"u"?r:t.noop,{messageId:n}=e,o={cmd:"pubcomp",messageId:n};t.incomingStore.get(e,(s,a)=>{s?t._sendPacket(o,i):(t.emit("message",a.topic,a.payload,a),t.handleMessage(a,u=>{if(u)return i(u);t.incomingStore.del(a,t.noop),t._sendPacket(o,i);}));});};Ua.default=Tv;});var Ap=M(Ci=>{v();m();_();var Bi=Ci&&Ci.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Ci,"__esModule",{value:!0});var Rv=Bi(Vd()),Cv=Bi(Kd()),Bv=Bi(Ep()),Pv=Bi(Ai()),Ov=Bi(Sp()),kv=(t,e,r)=>{let{options:i}=t;if(i.protocolVersion===5&&i.properties&&i.properties.maximumPacketSize&&i.properties.maximumPacketSize<e.length)return t.emit("error",new Error(`exceeding packets size ${e.cmd}`)),t.end({reasonCode:149,properties:{reasonString:"Maximum packet size was exceeded"}}),t;switch(t.log("_handlePacket :: emitting packetreceive"),t.emit("packetreceive",e),e.cmd){case"publish":(0, Rv.default)(t,e,r);break;case"puback":case"pubrec":case"pubcomp":case"suback":case"unsuback":(0, Pv.default)(t,e),r();break;case"pubrel":(0, Ov.default)(t,e,r);break;case"connack":(0, Bv.default)(t,e),r();break;case"auth":(0, Cv.default)(t,e),r();break;case"pingresp":t.pingResp=!0,r();break;case"disconnect":t.emit("disconnect",e),r();break;default:t.log("_handlePacket :: unknown command"),r();break}};Ci.default=kv;});var Ip=M(ti=>{v();m();_();var xv=ti&&ti.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(ti,"__esModule",{value:!0});ti.TypedEventEmitter=void 0;var Mv=xv((ir(),X(rr))),Lv=Jr(),Xn=class{};ti.TypedEventEmitter=Xn;(0, Lv.applyMixin)(Xn,Mv.default);});var Pi=M(Ar=>{v();m();_();Object.defineProperty(Ar,"__esModule",{value:!0});Ar.isReactNativeBrowser=Ar.isWebWorker=void 0;var Uv=()=>typeof window<"u"&&typeof window.document<"u",Tp=()=>{var t,e;return !!(typeof self=="object"&&(!((e=(t=self?.constructor)===null||t===void 0?void 0:t.name)===null||e===void 0)&&e.includes("WorkerGlobalScope")))},Rp=()=>typeof B<"u"&&B.product==="ReactNative",Nv=Uv()||Tp()||Rp();Ar.isWebWorker=Tp();Ar.isReactNativeBrowser=Rp();Ar.default=Nv;});var Bp=M((Zn,Cp)=>{v();m();_();(function(t,e){typeof Zn=="object"&&typeof Cp<"u"?e(Zn):typeof define=="function"&&__webpack_require__.amdO?define(["exports"],e):(t=typeof globalThis<"u"?globalThis:t||self,e(t.fastUniqueNumbers={}));})(Zn,function(t){var e=function(g){return function(y){var w=g(y);return y.add(w),w}},r=function(g){return function(y,w){return g.set(y,w),w}},i=Number.MAX_SAFE_INTEGER===void 0?9007199254740991:Number.MAX_SAFE_INTEGER,n=536870912,o=n*2,s=function(g,y){return function(w){var E=y.get(w),S=E===void 0?w.size:E<o?E+1:0;if(!w.has(S))return g(w,S);if(w.size<n){for(;w.has(S);)S=Math.floor(Math.random()*o);return g(w,S)}if(w.size>i)throw new Error("Congratulations, you created a collection of unique numbers which uses all available integers!");for(;w.has(S);)S=Math.floor(Math.random()*i);return g(w,S)}},a=new WeakMap,u=r(a),c=s(u,a),h=e(c);t.addUniqueNumber=h,t.generateUniqueNumber=c;});});var Op=M((es,Pp)=>{v();m();_();(function(t,e){typeof es=="object"&&typeof Pp<"u"?e(es,Bp()):typeof define=="function"&&__webpack_require__.amdO?define(["exports","fast-unique-numbers"],e):(t=typeof globalThis<"u"?globalThis:t||self,e(t.workerTimersBroker={},t.fastUniqueNumbers));})(es,function(t,e){var r=function(s){return s.method!==void 0&&s.method==="call"},i=function(s){return s.error===null&&typeof s.id=="number"},n=function(s){var a=new Map([[0,function(){}]]),u=new Map([[0,function(){}]]),c=new Map,h=new Worker(s);h.addEventListener("message",function(E){var S=E.data;if(r(S)){var I=S.params,C=I.timerId,R=I.timerType;if(R==="interval"){var U=a.get(C);if(typeof U=="number"){var N=c.get(U);if(N===void 0||N.timerId!==C||N.timerType!==R)throw new Error("The timer is in an undefined state.")}else if(typeof U<"u")U();else throw new Error("The timer is in an undefined state.")}else if(R==="timeout"){var W=u.get(C);if(typeof W=="number"){var K=c.get(W);if(K===void 0||K.timerId!==C||K.timerType!==R)throw new Error("The timer is in an undefined state.")}else if(typeof W<"u")W(),u.delete(C);else throw new Error("The timer is in an undefined state.")}}else if(i(S)){var z=S.id,Q=c.get(z);if(Q===void 0)throw new Error("The timer is in an undefined state.");var de=Q.timerId,Gt=Q.timerType;c.delete(z),Gt==="interval"?a.delete(de):u.delete(de);}else {var pe=S.error.message;throw new Error(pe)}});var d=function(S){var I=e.generateUniqueNumber(c);c.set(I,{timerId:S,timerType:"interval"}),a.set(S,I),h.postMessage({id:I,method:"clear",params:{timerId:S,timerType:"interval"}});},g=function(S){var I=e.generateUniqueNumber(c);c.set(I,{timerId:S,timerType:"timeout"}),u.set(S,I),h.postMessage({id:I,method:"clear",params:{timerId:S,timerType:"timeout"}});},y=function(S){var I=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,C=e.generateUniqueNumber(a);return a.set(C,function(){S(),typeof a.get(C)=="function"&&h.postMessage({id:null,method:"set",params:{delay:I,now:performance.now(),timerId:C,timerType:"interval"}});}),h.postMessage({id:null,method:"set",params:{delay:I,now:performance.now(),timerId:C,timerType:"interval"}}),C},w=function(S){var I=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,C=e.generateUniqueNumber(u);return u.set(C,S),h.postMessage({id:null,method:"set",params:{delay:I,now:performance.now(),timerId:C,timerType:"timeout"}}),C};return {clearInterval:d,clearTimeout:g,setInterval:y,setTimeout:w}};t.load=n;});});var xp=M((ts,kp)=>{v();m();_();(function(t,e){typeof ts=="object"&&typeof kp<"u"?e(ts,Op()):typeof define=="function"&&__webpack_require__.amdO?define(["exports","worker-timers-broker"],e):(t=typeof globalThis<"u"?globalThis:t||self,e(t.workerTimers={},t.workerTimersBroker));})(ts,function(t,e){var r=function(h,d){var g=null;return function(){if(g!==null)return g;var y=new Blob([d],{type:"application/javascript; charset=utf-8"}),w=URL.createObjectURL(y);return g=h(w),setTimeout(function(){return URL.revokeObjectURL(w)}),g}},i=`(()=>{var e={472:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error('There is no interval scheduled with the given id "'.concat(t,'".'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error('There is no timeout scheduled with the given id "'.concat(e,'".'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error('The given type "'.concat(c,'" is not supported'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error('The given method "'.concat(t.method,'" is not supported'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error('The given type "'.concat(v,'" is not supported'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(472)})()})();`,n=r(e.load,i),o=function(h){return n().clearInterval(h)},s=function(h){return n().clearTimeout(h)},a=function(){var h;return (h=n()).setInterval.apply(h,arguments)},u=function(){var h;return (h=n()).setTimeout.apply(h,arguments)};t.clearInterval=o,t.clearTimeout=s,t.setInterval=a,t.setTimeout=u;});});var Np=M(Rt=>{v();m();_();var qv=Rt&&Rt.__createBinding||(Object.create?function(t,e,r,i){i===void 0&&(i=r);var n=Object.getOwnPropertyDescriptor(e,r);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,i,n);}:function(t,e,r,i){i===void 0&&(i=r),t[i]=e[r];}),Dv=Rt&&Rt.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e});}:function(t,e){t.default=e;}),jv=Rt&&Rt.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var r in t)r!=="default"&&Object.prototype.hasOwnProperty.call(t,r)&&qv(e,t,r);return Dv(e,t),e};Object.defineProperty(Rt,"__esModule",{value:!0});var Na=jv(Pi()),Mp=xp(),Lp={set:Mp.setTimeout,clear:Mp.clearTimeout},Up={set:(t,e)=>setTimeout(t,e),clear:t=>clearTimeout(t)},Fv=t=>{switch(t){case"native":return Up;case"worker":return Lp;case"auto":default:return Na.default&&!Na.isWebWorker&&!Na.isReactNativeBrowser?Lp:Up}};Rt.default=Fv;});var Da=M(Oi=>{v();m();_();var Wv=Oi&&Oi.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Oi,"__esModule",{value:!0});var $v=Wv(Np()),qa=class{constructor(e,r,i){this.keepalive=e*1e3,this.checkPing=r,this.timer=(0, $v.default)(i),this.reschedule();}clear(){this.timerId&&(this.timer.clear(this.timerId),this.timerId=null);}reschedule(){this.clear(),this.timerId=this.timer.set(()=>{this.checkPing(),this.timerId&&this.reschedule();},this.keepalive);}};Oi.default=qa;});var ns=M(Qe=>{v();m();_();var Hv=Qe&&Qe.__createBinding||(Object.create?function(t,e,r,i){i===void 0&&(i=r);var n=Object.getOwnPropertyDescriptor(e,r);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,i,n);}:function(t,e,r,i){i===void 0&&(i=r),t[i]=e[r];}),Vv=Qe&&Qe.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e});}:function(t,e){t.default=e;}),Wp=Qe&&Qe.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var r in t)r!=="default"&&Object.prototype.hasOwnProperty.call(t,r)&&Hv(e,t,r);return Vv(e,t),e},Vt=Qe&&Qe.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Qe,"__esModule",{value:!0});var zv=Vt(Gu()),ja=Vt(Nd()),Kv=Vt(Yo()),Gv=Dt(),qp=Vt(Fd()),Dp=Wp($d()),Qv=Vt(ot()),rs=Vt(Zo()),Yv=Vt(Ap()),Wa=Jr(),Jv=Ip(),Xv=Vt(Da()),jp=Wp(Pi()),Fa=globalThis.setImmediate||((...t)=>{let e=t.shift();(0, Wa.nextTick)(()=>{e(...t);});}),Fp={keepalive:60,reschedulePings:!0,protocolId:"MQTT",protocolVersion:4,reconnectPeriod:1e3,connectTimeout:30*1e3,clean:!0,resubscribe:!0,writeCache:!0,timerVariant:"auto"},is=class t extends Jv.TypedEventEmitter{static defaultId(){return `mqttjs_${Math.random().toString(16).substr(2,8)}`}constructor(e,r){super(),this.options=r||{};for(let i in Fp)typeof this.options[i]>"u"?this.options[i]=Fp[i]:this.options[i]=r[i];this.log=this.options.log||(0, Qv.default)("mqttjs:client"),this.noop=this._noop.bind(this),this.log("MqttClient :: version:",t.VERSION),jp.isWebWorker?this.log("MqttClient :: environment","webworker"):this.log("MqttClient :: environment",jp.default?"browser":"node"),this.log("MqttClient :: options.protocol",r.protocol),this.log("MqttClient :: options.protocolVersion",r.protocolVersion),this.log("MqttClient :: options.username",r.username),this.log("MqttClient :: options.keepalive",r.keepalive),this.log("MqttClient :: options.reconnectPeriod",r.reconnectPeriod),this.log("MqttClient :: options.rejectUnauthorized",r.rejectUnauthorized),this.log("MqttClient :: options.properties.topicAliasMaximum",r.properties?r.properties.topicAliasMaximum:void 0),this.options.clientId=typeof r.clientId=="string"?r.clientId:t.defaultId(),this.log("MqttClient :: clientId",this.options.clientId),this.options.customHandleAcks=r.protocolVersion===5&&r.customHandleAcks?r.customHandleAcks:(...i)=>{i[3](null,0);},this.options.writeCache||(ja.default.writeToStream.cacheNumbers=!1),this.streamBuilder=e,this.messageIdProvider=typeof this.options.messageIdProvider>"u"?new Kv.default:this.options.messageIdProvider,this.outgoingStore=r.outgoingStore||new rs.default,this.incomingStore=r.incomingStore||new rs.default,this.queueQoSZero=r.queueQoSZero===void 0?!0:r.queueQoSZero,this._resubscribeTopics={},this.messageIdToTopic={},this.pingTimer=null,this.connected=!1,this.disconnecting=!1,this.reconnecting=!1,this.queue=[],this.connackTimer=null,this.reconnectTimer=null,this._storeProcessing=!1,this._packetIdsDuringStoreProcessing={},this._storeProcessingQueue=[],this.outgoing={},this._firstConnection=!0,r.properties&&r.properties.topicAliasMaximum>0&&(r.properties.topicAliasMaximum>65535?this.log("MqttClient :: options.properties.topicAliasMaximum is out of range"):this.topicAliasRecv=new zv.default(r.properties.topicAliasMaximum)),this.on("connect",()=>{let{queue:i}=this,n=()=>{let o=i.shift();this.log("deliver :: entry %o",o);let s=null;if(!o){this._resubscribe();return}s=o.packet,this.log("deliver :: call _sendPacket for %o",s);let a=!0;s.messageId&&s.messageId!==0&&(this.messageIdProvider.register(s.messageId)||(a=!1)),a?this._sendPacket(s,u=>{o.cb&&o.cb(u),n();}):(this.log("messageId: %d has already used. The message is skipped and removed.",s.messageId),n());};this.log("connect :: sending queued packets"),n();}),this.on("close",()=>{this.log("close :: connected set to `false`"),this.connected=!1,this.log("close :: clearing connackTimer"),clearTimeout(this.connackTimer),this.log("close :: clearing ping timer"),this.pingTimer&&(this.pingTimer.clear(),this.pingTimer=null),this.topicAliasRecv&&this.topicAliasRecv.clear(),this.log("close :: calling _setupReconnect"),this._setupReconnect();}),this.options.manualConnect||(this.log("MqttClient :: setting up stream"),this.connect());}handleAuth(e,r){r();}handleMessage(e,r){r();}_nextId(){return this.messageIdProvider.allocate()}getLastMessageId(){return this.messageIdProvider.getLastAllocated()}connect(){var e;let r=new Gv.Writable,i=ja.default.parser(this.options),n=null,o=[];this.log("connect :: calling method to clear reconnect"),this._clearReconnect(),this.log("connect :: using streamBuilder provided to client to create stream"),this.stream=this.streamBuilder(this),i.on("packet",h=>{this.log("parser :: on packet push to packets array."),o.push(h);});let s=()=>{this.log("work :: getting next packet in queue");let h=o.shift();if(h)this.log("work :: packet pulled from queue"),(0, Yv.default)(this,h,a);else {this.log("work :: no packets in queue");let d=n;n=null,this.log("work :: done flag is %s",!!d),d&&d();}},a=()=>{if(o.length)(0, Wa.nextTick)(s);else {let h=n;n=null,h();}};r._write=(h,d,g)=>{n=g,this.log("writable stream :: parsing buffer"),i.parse(h),s();};let u=h=>{this.log("streamErrorHandler :: error",h.message),h.code?(this.log("streamErrorHandler :: emitting error"),this.emit("error",h)):this.noop(h);};this.log("connect :: pipe stream to writable stream"),this.stream.pipe(r),this.stream.on("error",u),this.stream.on("close",()=>{this.log("(%s)stream :: on close",this.options.clientId),this._flushVolatile(),this.log("stream: emit close to MqttClient"),this.emit("close");}),this.log("connect: sending packet `connect`");let c={cmd:"connect",protocolId:this.options.protocolId,protocolVersion:this.options.protocolVersion,clean:this.options.clean,clientId:this.options.clientId,keepalive:this.options.keepalive,username:this.options.username,password:this.options.password,properties:this.options.properties};if(this.options.will&&(c.will=Object.assign(Object.assign({},this.options.will),{payload:(e=this.options.will)===null||e===void 0?void 0:e.payload})),this.topicAliasRecv&&(c.properties||(c.properties={}),this.topicAliasRecv&&(c.properties.topicAliasMaximum=this.topicAliasRecv.max)),this._writePacket(c),i.on("error",this.emit.bind(this,"error")),this.options.properties){if(!this.options.properties.authenticationMethod&&this.options.properties.authenticationData)return this.end(()=>this.emit("error",new Error("Packet has no Authentication Method"))),this;if(this.options.properties.authenticationMethod&&this.options.authPacket&&typeof this.options.authPacket=="object"){let h=Object.assign({cmd:"auth",reasonCode:0},this.options.authPacket);this._writePacket(h);}}return this.stream.setMaxListeners(1e3),clearTimeout(this.connackTimer),this.connackTimer=setTimeout(()=>{this.log("!!connectTimeout hit!! Calling _cleanUp with force `true`"),this.emit("error",new Error("connack timeout")),this._cleanUp(!0);},this.options.connectTimeout),this}publish(e,r,i,n){this.log("publish :: message `%s` to topic `%s`",r,e);let{options:o}=this;typeof i=="function"&&(n=i,i=null),i=i||{},i=Object.assign(Object.assign({},{qos:0,retain:!1,dup:!1}),i);let{qos:a,retain:u,dup:c,properties:h,cbStorePut:d}=i;if(this._checkDisconnecting(n))return this;let g=()=>{let y=0;if((a===1||a===2)&&(y=this._nextId(),y===null))return this.log("No messageId left"),!1;let w={cmd:"publish",topic:e,payload:r,qos:a,retain:u,messageId:y,dup:c};switch(o.protocolVersion===5&&(w.properties=h),this.log("publish :: qos",a),a){case 1:case 2:this.outgoing[w.messageId]={volatile:!1,cb:n||this.noop},this.log("MqttClient:publish: packet cmd: %s",w.cmd),this._sendPacket(w,void 0,d);break;default:this.log("MqttClient:publish: packet cmd: %s",w.cmd),this._sendPacket(w,n,d);break}return !0};return (this._storeProcessing||this._storeProcessingQueue.length>0||!g())&&this._storeProcessingQueue.push({invoke:g,cbStorePut:i.cbStorePut,callback:n}),this}publishAsync(e,r,i){return new Promise((n,o)=>{this.publish(e,r,i,(s,a)=>{s?o(s):n(a);});})}subscribe(e,r,i){let n=this.options.protocolVersion;typeof r=="function"&&(i=r),i=i||this.noop;let o=!1,s=[];typeof e=="string"?(e=[e],s=e):Array.isArray(e)?s=e:typeof e=="object"&&(o=e.resubscribe,delete e.resubscribe,s=Object.keys(e));let a=Dp.validateTopics(s);if(a!==null)return Fa(i,new Error(`Invalid topic ${a}`)),this;if(this._checkDisconnecting(i))return this.log("subscribe: discconecting true"),this;let u={qos:0};n===5&&(u.nl=!1,u.rap=!1,u.rh=0),r=Object.assign(Object.assign({},u),r);let c=r.properties,h=[],d=(y,w)=>{if(w=w||r,!Object.prototype.hasOwnProperty.call(this._resubscribeTopics,y)||this._resubscribeTopics[y].qos<w.qos||o){let E={topic:y,qos:w.qos};n===5&&(E.nl=w.nl,E.rap=w.rap,E.rh=w.rh,E.properties=c),this.log("subscribe: pushing topic `%s` and qos `%s` to subs list",E.topic,E.qos),h.push(E);}};if(Array.isArray(e)?e.forEach(y=>{this.log("subscribe: array topic %s",y),d(y);}):Object.keys(e).forEach(y=>{this.log("subscribe: object topic %s, %o",y,e[y]),d(y,e[y]);}),!h.length)return i(null,[]),this;let g=()=>{let y=this._nextId();if(y===null)return this.log("No messageId left"),!1;let w={cmd:"subscribe",subscriptions:h,messageId:y};if(c&&(w.properties=c),this.options.resubscribe){this.log("subscribe :: resubscribe true");let E=[];h.forEach(S=>{if(this.options.reconnectPeriod>0){let I={qos:S.qos};n===5&&(I.nl=S.nl||!1,I.rap=S.rap||!1,I.rh=S.rh||0,I.properties=S.properties),this._resubscribeTopics[S.topic]=I,E.push(S.topic);}}),this.messageIdToTopic[w.messageId]=E;}return this.outgoing[w.messageId]={volatile:!0,cb(E,S){if(!E){let{granted:I}=S;for(let C=0;C<I.length;C+=1)h[C].qos=I[C];}i(E,h);}},this.log("subscribe :: call _sendPacket"),this._sendPacket(w),!0};return (this._storeProcessing||this._storeProcessingQueue.length>0||!g())&&this._storeProcessingQueue.push({invoke:g,callback:i}),this}subscribeAsync(e,r){return new Promise((i,n)=>{this.subscribe(e,r,(o,s)=>{o?n(o):i(s);});})}unsubscribe(e,r,i){typeof e=="string"&&(e=[e]),typeof r=="function"&&(i=r),i=i||this.noop;let n=Dp.validateTopics(e);if(n!==null)return Fa(i,new Error(`Invalid topic ${n}`)),this;if(this._checkDisconnecting(i))return this;let o=()=>{let s=this._nextId();if(s===null)return this.log("No messageId left"),!1;let a={cmd:"unsubscribe",messageId:s,unsubscriptions:[]};return typeof e=="string"?a.unsubscriptions=[e]:Array.isArray(e)&&(a.unsubscriptions=e),this.options.resubscribe&&a.unsubscriptions.forEach(u=>{delete this._resubscribeTopics[u];}),typeof r=="object"&&r.properties&&(a.properties=r.properties),this.outgoing[a.messageId]={volatile:!0,cb:i},this.log("unsubscribe: call _sendPacket"),this._sendPacket(a),!0};return (this._storeProcessing||this._storeProcessingQueue.length>0||!o())&&this._storeProcessingQueue.push({invoke:o,callback:i}),this}unsubscribeAsync(e,r){return new Promise((i,n)=>{this.unsubscribe(e,r,(o,s)=>{o?n(o):i(s);});})}end(e,r,i){this.log("end :: (%s)",this.options.clientId),(e==null||typeof e!="boolean")&&(i=i||r,r=e,e=!1),typeof r!="object"&&(i=i||r,r=null),this.log("end :: cb? %s",!!i),(!i||typeof i!="function")&&(i=this.noop);let n=()=>{this.log("end :: closeStores: closing incoming and outgoing stores"),this.disconnected=!0,this.incomingStore.close(s=>{this.outgoingStore.close(a=>{if(this.log("end :: closeStores: emitting end"),this.emit("end"),i){let u=s||a;this.log("end :: closeStores: invoking callback with args"),i(u);}});}),this._deferredReconnect&&this._deferredReconnect();},o=()=>{this.log("end :: (%s) :: finish :: calling _cleanUp with force %s",this.options.clientId,e),this._cleanUp(e,()=>{this.log("end :: finish :: calling process.nextTick on closeStores"),(0, Wa.nextTick)(n);},r);};return this.disconnecting?(i(),this):(this._clearReconnect(),this.disconnecting=!0,!e&&Object.keys(this.outgoing).length>0?(this.log("end :: (%s) :: calling finish in 10ms once outgoing is empty",this.options.clientId),this.once("outgoingEmpty",setTimeout.bind(null,o,10))):(this.log("end :: (%s) :: immediately calling finish",this.options.clientId),o()),this)}endAsync(e,r){return new Promise((i,n)=>{this.end(e,r,o=>{o?n(o):i();});})}removeOutgoingMessage(e){if(this.outgoing[e]){let{cb:r}=this.outgoing[e];this._removeOutgoingAndStoreMessage(e,()=>{r(new Error("Message removed"));});}return this}reconnect(e){this.log("client reconnect");let r=()=>{e?(this.options.incomingStore=e.incomingStore,this.options.outgoingStore=e.outgoingStore):(this.options.incomingStore=null,this.options.outgoingStore=null),this.incomingStore=this.options.incomingStore||new rs.default,this.outgoingStore=this.options.outgoingStore||new rs.default,this.disconnecting=!1,this.disconnected=!1,this._deferredReconnect=null,this._reconnect();};return this.disconnecting&&!this.disconnected?this._deferredReconnect=r:r(),this}_flushVolatile(){this.outgoing&&(this.log("_flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function"),Object.keys(this.outgoing).forEach(e=>{this.outgoing[e].volatile&&typeof this.outgoing[e].cb=="function"&&(this.outgoing[e].cb(new Error("Connection closed")),delete this.outgoing[e]);}));}_flush(){this.outgoing&&(this.log("_flush: queue exists? %b",!!this.outgoing),Object.keys(this.outgoing).forEach(e=>{typeof this.outgoing[e].cb=="function"&&(this.outgoing[e].cb(new Error("Connection closed")),delete this.outgoing[e]);}));}_removeTopicAliasAndRecoverTopicName(e){let r;e.properties&&(r=e.properties.topicAlias);let i=e.topic.toString();if(this.log("_removeTopicAliasAndRecoverTopicName :: alias %d, topic %o",r,i),i.length===0){if(typeof r>"u")return new Error("Unregistered Topic Alias");if(i=this.topicAliasSend.getTopicByAlias(r),typeof i>"u")return new Error("Unregistered Topic Alias");e.topic=i;}r&&delete e.properties.topicAlias;}_checkDisconnecting(e){return this.disconnecting&&(e&&e!==this.noop?e(new Error("client disconnecting")):this.emit("error",new Error("client disconnecting"))),this.disconnecting}_reconnect(){this.log("_reconnect: emitting reconnect to client"),this.emit("reconnect"),this.connected?(this.end(()=>{this.connect();}),this.log("client already connected. disconnecting first.")):(this.log("_reconnect: calling connect"),this.connect());}_setupReconnect(){!this.disconnecting&&!this.reconnectTimer&&this.options.reconnectPeriod>0?(this.reconnecting||(this.log("_setupReconnect :: emit `offline` state"),this.emit("offline"),this.log("_setupReconnect :: set `reconnecting` to `true`"),this.reconnecting=!0),this.log("_setupReconnect :: setting reconnectTimer for %d ms",this.options.reconnectPeriod),this.reconnectTimer=setInterval(()=>{this.log("reconnectTimer :: reconnect triggered!"),this._reconnect();},this.options.reconnectPeriod)):this.log("_setupReconnect :: doing nothing...");}_clearReconnect(){this.log("_clearReconnect : clearing reconnect timer"),this.reconnectTimer&&(clearInterval(this.reconnectTimer),this.reconnectTimer=null);}_cleanUp(e,r,i={}){if(r&&(this.log("_cleanUp :: done callback provided for on stream close"),this.stream.on("close",r)),this.log("_cleanUp :: forced? %s",e),e)this.options.reconnectPeriod===0&&this.options.clean&&this._flush(),this.log("_cleanUp :: (%s) :: destroying stream",this.options.clientId),this.stream.destroy();else {let n=Object.assign({cmd:"disconnect"},i);this.log("_cleanUp :: (%s) :: call _sendPacket with disconnect packet",this.options.clientId),this._sendPacket(n,()=>{this.log("_cleanUp :: (%s) :: destroying stream",this.options.clientId),Fa(()=>{this.stream.end(()=>{this.log("_cleanUp :: (%s) :: stream destroyed",this.options.clientId);});});});}!this.disconnecting&&!this.reconnecting&&(this.log("_cleanUp :: client not disconnecting/reconnecting. Clearing and resetting reconnect."),this._clearReconnect(),this._setupReconnect()),this.pingTimer&&(this.log("_cleanUp :: clearing pingTimer"),this.pingTimer.clear(),this.pingTimer=null),r&&!this.connected&&(this.log("_cleanUp :: (%s) :: removing stream `done` callback `close` listener",this.options.clientId),this.stream.removeListener("close",r),r());}_storeAndSend(e,r,i){this.log("storeAndSend :: store packet with cmd %s to outgoingStore",e.cmd);let n=e,o;if(n.cmd==="publish"&&(n=(0, qp.default)(e),o=this._removeTopicAliasAndRecoverTopicName(n),o))return r&&r(o);this.outgoingStore.put(n,s=>{if(s)return r&&r(s);i(),this._writePacket(e,r);});}_applyTopicAlias(e){if(this.options.protocolVersion===5&&e.cmd==="publish"){let r;e.properties&&(r=e.properties.topicAlias);let i=e.topic.toString();if(this.topicAliasSend)if(r){if(i.length!==0&&(this.log("applyTopicAlias :: register topic: %s - alias: %d",i,r),!this.topicAliasSend.put(i,r)))return this.log("applyTopicAlias :: error out of range. topic: %s - alias: %d",i,r),new Error("Sending Topic Alias out of range")}else i.length!==0&&(this.options.autoAssignTopicAlias?(r=this.topicAliasSend.getAliasByTopic(i),r?(e.topic="",e.properties=Object.assign(Object.assign({},e.properties),{topicAlias:r}),this.log("applyTopicAlias :: auto assign(use) topic: %s - alias: %d",i,r)):(r=this.topicAliasSend.getLruAlias(),this.topicAliasSend.put(i,r),e.properties=Object.assign(Object.assign({},e.properties),{topicAlias:r}),this.log("applyTopicAlias :: auto assign topic: %s - alias: %d",i,r))):this.options.autoUseTopicAlias&&(r=this.topicAliasSend.getAliasByTopic(i),r&&(e.topic="",e.properties=Object.assign(Object.assign({},e.properties),{topicAlias:r}),this.log("applyTopicAlias :: auto use topic: %s - alias: %d",i,r))));else if(r)return this.log("applyTopicAlias :: error out of range. topic: %s - alias: %d",i,r),new Error("Sending Topic Alias out of range")}}_noop(e){this.log("noop ::",e);}_writePacket(e,r){this.log("_writePacket :: packet: %O",e),this.log("_writePacket :: emitting `packetsend`"),this.emit("packetsend",e),this._shiftPingInterval(),this.log("_writePacket :: writing to stream");let i=ja.default.writeToStream(e,this.stream,this.options);this.log("_writePacket :: writeToStream result %s",i),!i&&r&&r!==this.noop?(this.log("_writePacket :: handle events on `drain` once through callback."),this.stream.once("drain",r)):r&&(this.log("_writePacket :: invoking cb"),r());}_sendPacket(e,r,i,n){this.log("_sendPacket :: (%s) ::  start",this.options.clientId),i=i||this.noop,r=r||this.noop;let o=this._applyTopicAlias(e);if(o){r(o);return}if(!this.connected){if(e.cmd==="auth"){this._writePacket(e,r);return}this.log("_sendPacket :: client not connected. Storing packet offline."),this._storePacket(e,r,i);return}if(n){this._writePacket(e,r);return}switch(e.cmd){case"publish":break;case"pubrel":this._storeAndSend(e,r,i);return;default:this._writePacket(e,r);return}switch(e.qos){case 2:case 1:this._storeAndSend(e,r,i);break;case 0:default:this._writePacket(e,r);break}this.log("_sendPacket :: (%s) ::  end",this.options.clientId);}_storePacket(e,r,i){this.log("_storePacket :: packet: %o",e),this.log("_storePacket :: cb? %s",!!r),i=i||this.noop;let n=e;if(n.cmd==="publish"){n=(0, qp.default)(e);let s=this._removeTopicAliasAndRecoverTopicName(n);if(s)return r&&r(s)}let o=n.qos||0;o===0&&this.queueQoSZero||n.cmd!=="publish"?this.queue.push({packet:n,cb:r}):o>0?(r=this.outgoing[n.messageId]?this.outgoing[n.messageId].cb:null,this.outgoingStore.put(n,s=>{if(s)return r&&r(s);i();})):r&&r(new Error("No connection to broker"));}_setupPingTimer(){this.log("_setupPingTimer :: keepalive %d (seconds)",this.options.keepalive),!this.pingTimer&&this.options.keepalive&&(this.pingResp=!0,this.pingTimer=new Xv.default(this.options.keepalive,()=>{this._checkPing();},this.options.timerVariant));}_shiftPingInterval(){this.pingTimer&&this.options.keepalive&&this.options.reschedulePings&&this.pingTimer.reschedule();}_checkPing(){this.log("_checkPing :: checking ping..."),this.pingResp?(this.log("_checkPing :: ping response received. Clearing flag and sending `pingreq`"),this.pingResp=!1,this._sendPacket({cmd:"pingreq"})):(this.emit("error",new Error("Keepalive timeout")),this.log("_checkPing :: calling _cleanUp with force true"),this._cleanUp(!0));}_resubscribe(){this.log("_resubscribe");let e=Object.keys(this._resubscribeTopics);if(!this._firstConnection&&(this.options.clean||this.options.protocolVersion>=4&&!this.connackPacket.sessionPresent)&&e.length>0)if(this.options.resubscribe)if(this.options.protocolVersion===5){this.log("_resubscribe: protocolVersion 5");for(let r=0;r<e.length;r++){let i={};i[e[r]]=this._resubscribeTopics[e[r]],i.resubscribe=!0,this.subscribe(i,{properties:i[e[r]].properties});}}else this._resubscribeTopics.resubscribe=!0,this.subscribe(this._resubscribeTopics);else this._resubscribeTopics={};this._firstConnection=!1;}_onConnect(e){if(this.disconnected){this.emit("connect",e);return}this.connackPacket=e,this.messageIdProvider.clear(),this._setupPingTimer(),this.connected=!0;let r=()=>{let i=this.outgoingStore.createStream(),n=()=>{i.destroy(),i=null,this._flushStoreProcessingQueue(),o();},o=()=>{this._storeProcessing=!1,this._packetIdsDuringStoreProcessing={};};this.once("close",n),i.on("error",a=>{o(),this._flushStoreProcessingQueue(),this.removeListener("close",n),this.emit("error",a);});let s=()=>{if(!i)return;let a=i.read(1),u;if(!a){i.once("readable",s);return}if(this._storeProcessing=!0,this._packetIdsDuringStoreProcessing[a.messageId]){s();return}!this.disconnecting&&!this.reconnectTimer?(u=this.outgoing[a.messageId]?this.outgoing[a.messageId].cb:null,this.outgoing[a.messageId]={volatile:!1,cb(c,h){u&&u(c,h),s();}},this._packetIdsDuringStoreProcessing[a.messageId]=!0,this.messageIdProvider.register(a.messageId)?this._sendPacket(a,void 0,void 0,!0):this.log("messageId: %d has already used.",a.messageId)):i.destroy&&i.destroy();};i.on("end",()=>{let a=!0;for(let u in this._packetIdsDuringStoreProcessing)if(!this._packetIdsDuringStoreProcessing[u]){a=!1;break}this.removeListener("close",n),a?(o(),this._invokeAllStoreProcessingQueue(),this.emit("connect",e)):r();}),s();};r();}_invokeStoreProcessingQueue(){if(!this._storeProcessing&&this._storeProcessingQueue.length>0){let e=this._storeProcessingQueue[0];if(e&&e.invoke())return this._storeProcessingQueue.shift(),!0}return !1}_invokeAllStoreProcessingQueue(){for(;this._invokeStoreProcessingQueue(););}_flushStoreProcessingQueue(){for(let e of this._storeProcessingQueue)e.cbStorePut&&e.cbStorePut(new Error("Connection closed")),e.callback&&e.callback(new Error("Connection closed"));this._storeProcessingQueue.splice(0);}_removeOutgoingAndStoreMessage(e,r){delete this.outgoing[e],this.outgoingStore.del({messageId:e},(i,n)=>{r(i,n),this.messageIdProvider.deallocate(e),this._invokeStoreProcessingQueue();});}};is.VERSION="5.5.2";Qe.default=is;});var $p=M(Ha=>{v();m();_();Object.defineProperty(Ha,"__esModule",{value:!0});var Zv=xa(),$a=class{constructor(){this.numberAllocator=new Zv.NumberAllocator(1,65535);}allocate(){return this.lastId=this.numberAllocator.alloc(),this.lastId}getLastAllocated(){return this.lastId}register(e){return this.numberAllocator.use(e)}deallocate(e){this.numberAllocator.free(e);}clear(){this.numberAllocator.clear();}};Ha.default=$a;});function Ir(t){throw new RangeError(iE[t])}function Hp(t,e){let r=t.split("@"),i="";r.length>1&&(i=r[0]+"@",t=r[1]);let n=function(o,s){let a=[],u=o.length;for(;u--;)a[u]=s(o[u]);return a}((t=t.replace(rE,".")).split("."),e).join(".");return i+n}function Gp(t){let e=[],r=0,i=t.length;for(;r<i;){let n=t.charCodeAt(r++);if(n>=55296&&n<=56319&&r<i){let o=t.charCodeAt(r++);(64512&o)==56320?e.push(((1023&n)<<10)+(1023&o)+65536):(e.push(n),r--);}else e.push(n);}return e}var eE,tE,rE,iE,ht,Va,Vp,Qp,zp,Kp,zt,Yp=we(()=>{v();m();_();eE=/^xn--/,tE=/[^\0-\x7E]/,rE=/[\x2E\u3002\uFF0E\uFF61]/g,iE={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},ht=Math.floor,Va=String.fromCharCode;Vp=function(t,e){return t+22+75*(t<26)-((e!=0)<<5)},Qp=function(t,e,r){let i=0;for(t=r?ht(t/700):t>>1,t+=ht(t/e);t>455;i+=36)t=ht(t/35);return ht(i+36*t/(t+38))},zp=function(t){let e=[],r=t.length,i=0,n=128,o=72,s=t.lastIndexOf("-");s<0&&(s=0);for(let u=0;u<s;++u)t.charCodeAt(u)>=128&&Ir("not-basic"),e.push(t.charCodeAt(u));for(let u=s>0?s+1:0;u<r;){let c=i;for(let d=1,g=36;;g+=36){u>=r&&Ir("invalid-input");let y=(a=t.charCodeAt(u++))-48<10?a-22:a-65<26?a-65:a-97<26?a-97:36;(y>=36||y>ht((2147483647-i)/d))&&Ir("overflow"),i+=y*d;let w=g<=o?1:g>=o+26?26:g-o;if(y<w)break;let E=36-w;d>ht(2147483647/E)&&Ir("overflow"),d*=E;}let h=e.length+1;o=Qp(i-c,h,c==0),ht(i/h)>2147483647-n&&Ir("overflow"),n+=ht(i/h),i%=h,e.splice(i++,0,n);}var a;return String.fromCodePoint(...e)},Kp=function(t){let e=[],r=(t=Gp(t)).length,i=128,n=0,o=72;for(let u of t)u<128&&e.push(Va(u));let s=e.length,a=s;for(s&&e.push("-");a<r;){let u=2147483647;for(let h of t)h>=i&&h<u&&(u=h);let c=a+1;u-i>ht((2147483647-n)/c)&&Ir("overflow"),n+=(u-i)*c,i=u;for(let h of t)if(h<i&&++n>2147483647&&Ir("overflow"),h==i){let d=n;for(let g=36;;g+=36){let y=g<=o?1:g>=o+26?26:g-o;if(d<y)break;let w=d-y,E=36-y;e.push(Va(Vp(y+w%E,0))),d=ht(w/E);}e.push(Va(Vp(d,0))),o=Qp(n,c,a==s),n=0,++a;}++n,++i;}return e.join("")},zt={version:"2.1.0",ucs2:{decode:Gp,encode:t=>String.fromCodePoint(...t)},decode:zp,encode:Kp,toASCII:function(t){return Hp(t,function(e){return tE.test(e)?"xn--"+Kp(e):e})},toUnicode:function(t){return Hp(t,function(e){return eE.test(e)?zp(e.slice(4).toLowerCase()):e})}};zt.decode;zt.encode;zt.toASCII;zt.toUnicode;zt.ucs2;zt.version;});function nE(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var sE,ki,oE,dt,Jp=we(()=>{v();m();_();sE=function(t,e,r,i){e=e||"&",r=r||"=";var n={};if(typeof t!="string"||t.length===0)return n;var o=/\+/g;t=t.split(e);var s=1e3;i&&typeof i.maxKeys=="number"&&(s=i.maxKeys);var a=t.length;s>0&&a>s&&(a=s);for(var u=0;u<a;++u){var c,h,d,g,y=t[u].replace(o,"%20"),w=y.indexOf(r);w>=0?(c=y.substr(0,w),h=y.substr(w+1)):(c=y,h=""),d=decodeURIComponent(c),g=decodeURIComponent(h),nE(n,d)?Array.isArray(n[d])?n[d].push(g):n[d]=[n[d],g]:n[d]=g;}return n},ki=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return ""}},oE=function(t,e,r,i){return e=e||"&",r=r||"=",t===null&&(t=void 0),typeof t=="object"?Object.keys(t).map(function(n){var o=encodeURIComponent(ki(n))+r;return Array.isArray(t[n])?t[n].map(function(s){return o+encodeURIComponent(ki(s))}).join(e):o+encodeURIComponent(ki(t[n]))}).join(e):i?encodeURIComponent(ki(i))+r+encodeURIComponent(ki(t)):""},dt={};dt.decode=dt.parse=sE,dt.encode=dt.stringify=oE;dt.decode;dt.encode;dt.parse;dt.stringify;});function za(){throw new Error("setTimeout has not been defined")}function Ka(){throw new Error("clearTimeout has not been defined")}function eg(t){if(Bt===setTimeout)return setTimeout(t,0);if((Bt===za||!Bt)&&setTimeout)return Bt=setTimeout,setTimeout(t,0);try{return Bt(t,0)}catch{try{return Bt.call(null,t,0)}catch{return Bt.call(this||ii,t,0)}}}function aE(){ri&&Tr&&(ri=!1,Tr.length?Ot=Tr.concat(Ot):ss=-1,Ot.length&&tg());}function tg(){if(!ri){var t=eg(aE);ri=!0;for(var e=Ot.length;e;){for(Tr=Ot,Ot=[];++ss<e;)Tr&&Tr[ss].run();ss=-1,e=Ot.length;}Tr=null,ri=!1,function(r){if(Pt===clearTimeout)return clearTimeout(r);if((Pt===Ka||!Pt)&&clearTimeout)return Pt=clearTimeout,clearTimeout(r);try{Pt(r);}catch{try{return Pt.call(null,r)}catch{return Pt.call(this||ii,r)}}}(t);}}function Xp(t,e){(this||ii).fun=t,(this||ii).array=e;}function Ct(){}var Zp,Bt,Pt,ii,fe,Tr,Ot,ri,ss,ne,rg=we(()=>{v();m();_();ii=typeof globalThis<"u"?globalThis:typeof self<"u"?self:__webpack_require__.g,fe=Zp={};(function(){try{Bt=typeof setTimeout=="function"?setTimeout:za;}catch{Bt=za;}try{Pt=typeof clearTimeout=="function"?clearTimeout:Ka;}catch{Pt=Ka;}})();Ot=[],ri=!1,ss=-1;fe.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];Ot.push(new Xp(t,e)),Ot.length!==1||ri||eg(tg);},Xp.prototype.run=function(){(this||ii).fun.apply(null,(this||ii).array);},fe.title="browser",fe.browser=!0,fe.env={},fe.argv=[],fe.version="",fe.versions={},fe.on=Ct,fe.addListener=Ct,fe.once=Ct,fe.off=Ct,fe.removeListener=Ct,fe.removeAllListeners=Ct,fe.emit=Ct,fe.prependListener=Ct,fe.prependOnceListener=Ct,fe.listeners=function(t){return []},fe.binding=function(t){throw new Error("process.binding is not supported")},fe.cwd=function(){return "/"},fe.chdir=function(t){throw new Error("process.chdir is not supported")},fe.umask=function(){return 0};ne=Zp;ne.addListener;ne.argv;ne.binding;ne.browser;ne.chdir;ne.cwd;ne.emit;ne.env;ne.listeners;ne.nextTick;ne.off;ne.on;ne.once;ne.prependListener;ne.prependOnceListener;ne.removeAllListeners;ne.removeListener;ne.title;ne.umask;ne.version;ne.versions;});function lE(){if(ig)return Ga;ig=!0;var t=Ga={},e,r;function i(){throw new Error("setTimeout has not been defined")}function n(){throw new Error("clearTimeout has not been defined")}(function(){try{typeof setTimeout=="function"?e=setTimeout:e=i;}catch{e=i;}try{typeof clearTimeout=="function"?r=clearTimeout:r=n;}catch{r=n;}})();function o(E){if(e===setTimeout)return setTimeout(E,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(E,0);try{return e(E,0)}catch{try{return e.call(null,E,0)}catch{return e.call(this||ni,E,0)}}}function s(E){if(r===clearTimeout)return clearTimeout(E);if((r===n||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(E);try{return r(E)}catch{try{return r.call(null,E)}catch{return r.call(this||ni,E)}}}var a=[],u=!1,c,h=-1;function d(){!u||!c||(u=!1,c.length?a=c.concat(a):h=-1,a.length&&g());}function g(){if(!u){var E=o(d);u=!0;for(var S=a.length;S;){for(c=a,a=[];++h<S;)c&&c[h].run();h=-1,S=a.length;}c=null,u=!1,s(E);}}t.nextTick=function(E){var S=new Array(arguments.length-1);if(arguments.length>1)for(var I=1;I<arguments.length;I++)S[I-1]=arguments[I];a.push(new y(E,S)),a.length===1&&!u&&o(g);};function y(E,S){(this||ni).fun=E,(this||ni).array=S;}y.prototype.run=function(){(this||ni).fun.apply(null,(this||ni).array);},t.title="browser",t.browser=!0,t.env={},t.argv=[],t.version="",t.versions={};function w(){}return t.on=w,t.addListener=w,t.once=w,t.off=w,t.removeListener=w,t.removeAllListeners=w,t.emit=w,t.prependListener=w,t.prependOnceListener=w,t.listeners=function(E){return []},t.binding=function(E){throw new Error("process.binding is not supported")},t.cwd=function(){return "/"},t.chdir=function(E){throw new Error("process.chdir is not supported")},t.umask=function(){return 0},Ga}var Ga,ig,ni,re,Qa=we(()=>{v();m();_();Ga={},ig=!1,ni=typeof globalThis<"u"?globalThis:typeof self<"u"?self:__webpack_require__.g;re=lE();re.platform="browser";re.addListener;re.argv;re.binding;re.browser;re.chdir;re.cwd;re.emit;re.env;re.listeners;re.nextTick;re.off;re.on;re.once;re.prependListener;re.prependOnceListener;re.removeAllListeners;re.removeListener;re.title;re.umask;re.version;re.versions;});function uE(){if(ng)return Ya;ng=!0;var t=re;function e(o){if(typeof o!="string")throw new TypeError("Path must be a string. Received "+JSON.stringify(o))}function r(o,s){for(var a="",u=0,c=-1,h=0,d,g=0;g<=o.length;++g){if(g<o.length)d=o.charCodeAt(g);else {if(d===47)break;d=47;}if(d===47){if(!(c===g-1||h===1))if(c!==g-1&&h===2){if(a.length<2||u!==2||a.charCodeAt(a.length-1)!==46||a.charCodeAt(a.length-2)!==46){if(a.length>2){var y=a.lastIndexOf("/");if(y!==a.length-1){y===-1?(a="",u=0):(a=a.slice(0,y),u=a.length-1-a.lastIndexOf("/")),c=g,h=0;continue}}else if(a.length===2||a.length===1){a="",u=0,c=g,h=0;continue}}s&&(a.length>0?a+="/..":a="..",u=2);}else a.length>0?a+="/"+o.slice(c+1,g):a=o.slice(c+1,g),u=g-c-1;c=g,h=0;}else d===46&&h!==-1?++h:h=-1;}return a}function i(o,s){var a=s.dir||s.root,u=s.base||(s.name||"")+(s.ext||"");return a?a===s.root?a+u:a+o+u:u}var n={resolve:function(){for(var s="",a=!1,u,c=arguments.length-1;c>=-1&&!a;c--){var h;c>=0?h=arguments[c]:(u===void 0&&(u=t.cwd()),h=u),e(h),h.length!==0&&(s=h+"/"+s,a=h.charCodeAt(0)===47);}return s=r(s,!a),a?s.length>0?"/"+s:"/":s.length>0?s:"."},normalize:function(s){if(e(s),s.length===0)return ".";var a=s.charCodeAt(0)===47,u=s.charCodeAt(s.length-1)===47;return s=r(s,!a),s.length===0&&!a&&(s="."),s.length>0&&u&&(s+="/"),a?"/"+s:s},isAbsolute:function(s){return e(s),s.length>0&&s.charCodeAt(0)===47},join:function(){if(arguments.length===0)return ".";for(var s,a=0;a<arguments.length;++a){var u=arguments[a];e(u),u.length>0&&(s===void 0?s=u:s+="/"+u);}return s===void 0?".":n.normalize(s)},relative:function(s,a){if(e(s),e(a),s===a||(s=n.resolve(s),a=n.resolve(a),s===a))return "";for(var u=1;u<s.length&&s.charCodeAt(u)===47;++u);for(var c=s.length,h=c-u,d=1;d<a.length&&a.charCodeAt(d)===47;++d);for(var g=a.length,y=g-d,w=h<y?h:y,E=-1,S=0;S<=w;++S){if(S===w){if(y>w){if(a.charCodeAt(d+S)===47)return a.slice(d+S+1);if(S===0)return a.slice(d+S)}else h>w&&(s.charCodeAt(u+S)===47?E=S:S===0&&(E=0));break}var I=s.charCodeAt(u+S),C=a.charCodeAt(d+S);if(I!==C)break;I===47&&(E=S);}var R="";for(S=u+E+1;S<=c;++S)(S===c||s.charCodeAt(S)===47)&&(R.length===0?R+="..":R+="/..");return R.length>0?R+a.slice(d+E):(d+=E,a.charCodeAt(d)===47&&++d,a.slice(d))},_makeLong:function(s){return s},dirname:function(s){if(e(s),s.length===0)return ".";for(var a=s.charCodeAt(0),u=a===47,c=-1,h=!0,d=s.length-1;d>=1;--d)if(a=s.charCodeAt(d),a===47){if(!h){c=d;break}}else h=!1;return c===-1?u?"/":".":u&&c===1?"//":s.slice(0,c)},basename:function(s,a){if(a!==void 0&&typeof a!="string")throw new TypeError('"ext" argument must be a string');e(s);var u=0,c=-1,h=!0,d;if(a!==void 0&&a.length>0&&a.length<=s.length){if(a.length===s.length&&a===s)return "";var g=a.length-1,y=-1;for(d=s.length-1;d>=0;--d){var w=s.charCodeAt(d);if(w===47){if(!h){u=d+1;break}}else y===-1&&(h=!1,y=d+1),g>=0&&(w===a.charCodeAt(g)?--g===-1&&(c=d):(g=-1,c=y));}return u===c?c=y:c===-1&&(c=s.length),s.slice(u,c)}else {for(d=s.length-1;d>=0;--d)if(s.charCodeAt(d)===47){if(!h){u=d+1;break}}else c===-1&&(h=!1,c=d+1);return c===-1?"":s.slice(u,c)}},extname:function(s){e(s);for(var a=-1,u=0,c=-1,h=!0,d=0,g=s.length-1;g>=0;--g){var y=s.charCodeAt(g);if(y===47){if(!h){u=g+1;break}continue}c===-1&&(h=!1,c=g+1),y===46?a===-1?a=g:d!==1&&(d=1):a!==-1&&(d=-1);}return a===-1||c===-1||d===0||d===1&&a===c-1&&a===u+1?"":s.slice(a,c)},format:function(s){if(s===null||typeof s!="object")throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof s);return i("/",s)},parse:function(s){e(s);var a={root:"",dir:"",base:"",ext:"",name:""};if(s.length===0)return a;var u=s.charCodeAt(0),c=u===47,h;c?(a.root="/",h=1):h=0;for(var d=-1,g=0,y=-1,w=!0,E=s.length-1,S=0;E>=h;--E){if(u=s.charCodeAt(E),u===47){if(!w){g=E+1;break}continue}y===-1&&(w=!1,y=E+1),u===46?d===-1?d=E:S!==1&&(S=1):d!==-1&&(S=-1);}return d===-1||y===-1||S===0||S===1&&d===y-1&&d===g+1?y!==-1&&(g===0&&c?a.base=a.name=s.slice(1,y):a.base=a.name=s.slice(g,y)):(g===0&&c?(a.name=s.slice(1,d),a.base=s.slice(1,y)):(a.name=s.slice(g,d),a.base=s.slice(g,y)),a.ext=s.slice(d,y)),g>0?a.dir=s.slice(0,g-1):c&&(a.dir="/"),a},sep:"/",delimiter:":",win32:null,posix:null};return n.posix=n,Ya=n,Ya}var Ya,ng,Ja,sg=we(()=>{v();m();_();Qa();Ya={},ng=!1;Ja=uE();});var dg={};Qt(dg,{URL:()=>DE,Url:()=>ME,default:()=>Z,fileURLToPath:()=>cg,format:()=>LE,parse:()=>qE,pathToFileURL:()=>hg,resolve:()=>UE,resolveObject:()=>NE});function Fe(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null;}function xi(t,e,r){if(t&&pt.isObject(t)&&t instanceof Fe)return t;var i=new Fe;return i.parse(t,e,r),i}function bE(){if(ug)return el;ug=!0;var t=ne;function e(o){if(typeof o!="string")throw new TypeError("Path must be a string. Received "+JSON.stringify(o))}function r(o,s){for(var a="",u=0,c=-1,h=0,d,g=0;g<=o.length;++g){if(g<o.length)d=o.charCodeAt(g);else {if(d===47)break;d=47;}if(d===47){if(!(c===g-1||h===1))if(c!==g-1&&h===2){if(a.length<2||u!==2||a.charCodeAt(a.length-1)!==46||a.charCodeAt(a.length-2)!==46){if(a.length>2){var y=a.lastIndexOf("/");if(y!==a.length-1){y===-1?(a="",u=0):(a=a.slice(0,y),u=a.length-1-a.lastIndexOf("/")),c=g,h=0;continue}}else if(a.length===2||a.length===1){a="",u=0,c=g,h=0;continue}}s&&(a.length>0?a+="/..":a="..",u=2);}else a.length>0?a+="/"+o.slice(c+1,g):a=o.slice(c+1,g),u=g-c-1;c=g,h=0;}else d===46&&h!==-1?++h:h=-1;}return a}function i(o,s){var a=s.dir||s.root,u=s.base||(s.name||"")+(s.ext||"");return a?a===s.root?a+u:a+o+u:u}var n={resolve:function(){for(var s="",a=!1,u,c=arguments.length-1;c>=-1&&!a;c--){var h;c>=0?h=arguments[c]:(u===void 0&&(u=t.cwd()),h=u),e(h),h.length!==0&&(s=h+"/"+s,a=h.charCodeAt(0)===47);}return s=r(s,!a),a?s.length>0?"/"+s:"/":s.length>0?s:"."},normalize:function(s){if(e(s),s.length===0)return ".";var a=s.charCodeAt(0)===47,u=s.charCodeAt(s.length-1)===47;return s=r(s,!a),s.length===0&&!a&&(s="."),s.length>0&&u&&(s+="/"),a?"/"+s:s},isAbsolute:function(s){return e(s),s.length>0&&s.charCodeAt(0)===47},join:function(){if(arguments.length===0)return ".";for(var s,a=0;a<arguments.length;++a){var u=arguments[a];e(u),u.length>0&&(s===void 0?s=u:s+="/"+u);}return s===void 0?".":n.normalize(s)},relative:function(s,a){if(e(s),e(a),s===a||(s=n.resolve(s),a=n.resolve(a),s===a))return "";for(var u=1;u<s.length&&s.charCodeAt(u)===47;++u);for(var c=s.length,h=c-u,d=1;d<a.length&&a.charCodeAt(d)===47;++d);for(var g=a.length,y=g-d,w=h<y?h:y,E=-1,S=0;S<=w;++S){if(S===w){if(y>w){if(a.charCodeAt(d+S)===47)return a.slice(d+S+1);if(S===0)return a.slice(d+S)}else h>w&&(s.charCodeAt(u+S)===47?E=S:S===0&&(E=0));break}var I=s.charCodeAt(u+S),C=a.charCodeAt(d+S);if(I!==C)break;I===47&&(E=S);}var R="";for(S=u+E+1;S<=c;++S)(S===c||s.charCodeAt(S)===47)&&(R.length===0?R+="..":R+="/..");return R.length>0?R+a.slice(d+E):(d+=E,a.charCodeAt(d)===47&&++d,a.slice(d))},_makeLong:function(s){return s},dirname:function(s){if(e(s),s.length===0)return ".";for(var a=s.charCodeAt(0),u=a===47,c=-1,h=!0,d=s.length-1;d>=1;--d)if(a=s.charCodeAt(d),a===47){if(!h){c=d;break}}else h=!1;return c===-1?u?"/":".":u&&c===1?"//":s.slice(0,c)},basename:function(s,a){if(a!==void 0&&typeof a!="string")throw new TypeError('"ext" argument must be a string');e(s);var u=0,c=-1,h=!0,d;if(a!==void 0&&a.length>0&&a.length<=s.length){if(a.length===s.length&&a===s)return "";var g=a.length-1,y=-1;for(d=s.length-1;d>=0;--d){var w=s.charCodeAt(d);if(w===47){if(!h){u=d+1;break}}else y===-1&&(h=!1,y=d+1),g>=0&&(w===a.charCodeAt(g)?--g===-1&&(c=d):(g=-1,c=y));}return u===c?c=y:c===-1&&(c=s.length),s.slice(u,c)}else {for(d=s.length-1;d>=0;--d)if(s.charCodeAt(d)===47){if(!h){u=d+1;break}}else c===-1&&(h=!1,c=d+1);return c===-1?"":s.slice(u,c)}},extname:function(s){e(s);for(var a=-1,u=0,c=-1,h=!0,d=0,g=s.length-1;g>=0;--g){var y=s.charCodeAt(g);if(y===47){if(!h){u=g+1;break}continue}c===-1&&(h=!1,c=g+1),y===46?a===-1?a=g:d!==1&&(d=1):a!==-1&&(d=-1);}return a===-1||c===-1||d===0||d===1&&a===c-1&&a===u+1?"":s.slice(a,c)},format:function(s){if(s===null||typeof s!="object")throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof s);return i("/",s)},parse:function(s){e(s);var a={root:"",dir:"",base:"",ext:"",name:""};if(s.length===0)return a;var u=s.charCodeAt(0),c=u===47,h;c?(a.root="/",h=1):h=0;for(var d=-1,g=0,y=-1,w=!0,E=s.length-1,S=0;E>=h;--E){if(u=s.charCodeAt(E),u===47){if(!w){g=E+1;break}continue}y===-1&&(w=!1,y=E+1),u===46?d===-1?d=E:S!==1&&(S=1):d!==-1&&(S=-1);}return d===-1||y===-1||S===0||S===1&&d===y-1&&d===g+1?y!==-1&&(g===0&&c?a.base=a.name=s.slice(1,y):a.base=a.name=s.slice(g,y)):(g===0&&c?(a.name=s.slice(1,d),a.base=s.slice(1,y)):(a.name=s.slice(g,d),a.base=s.slice(g,y)),a.ext=s.slice(d,y)),g>0?a.dir=s.slice(0,g-1):c&&(a.dir="/"),a},sep:"/",delimiter:":",win32:null,posix:null};return n.posix=n,el=n,el}function BE(t){if(typeof t=="string")t=new URL(t);else if(!(t instanceof URL))throw new Deno.errors.InvalidData("invalid argument path , must be a string or URL");if(t.protocol!=="file:")throw new Deno.errors.InvalidData("invalid url scheme");return rl?PE(t):OE(t)}function PE(t){let e=t.hostname,r=t.pathname;for(let i=0;i<r.length;i++)if(r[i]==="%"){let n=r.codePointAt(i+2)||32;if(r[i+1]==="2"&&n===102||r[i+1]==="5"&&n===99)throw new Deno.errors.InvalidData("must not include encoded \\ or / characters")}if(r=r.replace(SE,"\\"),r=decodeURIComponent(r),e!=="")return `\\\\${e}${r}`;{let i=r.codePointAt(1)|32,n=r[2];if(i<vE||i>EE||n!==":")throw new Deno.errors.InvalidData("file url path must be absolute");return r.slice(1)}}function OE(t){if(t.hostname!=="")throw new Deno.errors.InvalidData("invalid file url hostname");let e=t.pathname;for(let r=0;r<e.length;r++)if(e[r]==="%"){let i=e.codePointAt(r+2)||32;if(e[r+1]==="2"&&i===102)throw new Deno.errors.InvalidData("must not include encoded / characters")}return decodeURIComponent(e)}function kE(t){let e=fg.resolve(t),r=t.charCodeAt(t.length-1);(r===mE||rl&&r===_E)&&e[e.length-1]!==fg.sep&&(e+="/");let i=new URL("file://");return e.includes("%")&&(e=e.replace(AE,"%25")),!rl&&e.includes("\\")&&(e=e.replace(IE,"%5C")),e.includes(`
`)&&(e=e.replace(TE,"%0A")),e.includes("\r")&&(e=e.replace(RE,"%0D")),e.includes("	")&&(e=e.replace(CE,"%09")),i.pathname=e,i}function cg(t){if(typeof t=="string")t=new URL(t);else if(!(t instanceof URL))throw new Deno.errors.InvalidData("invalid argument path , must be a string or URL");if(t.protocol!=="file:")throw new Deno.errors.InvalidData("invalid url scheme");return il?YE(t):JE(t)}function YE(t){let e=t.hostname,r=t.pathname;for(let i=0;i<r.length;i++)if(r[i]==="%"){let n=r.codePointAt(i+2)||32;if(r[i+1]==="2"&&n===102||r[i+1]==="5"&&n===99)throw new Deno.errors.InvalidData("must not include encoded \\ or / characters")}if(r=r.replace(HE,"\\"),r=decodeURIComponent(r),e!=="")return `\\\\${e}${r}`;{let i=r.codePointAt(1)|32,n=r[2];if(i<WE||i>$E||n!==":")throw new Deno.errors.InvalidData("file url path must be absolute");return r.slice(1)}}function JE(t){if(t.hostname!=="")throw new Deno.errors.InvalidData("invalid file url hostname");let e=t.pathname;for(let r=0;r<e.length;r++)if(e[r]==="%"){let i=e.codePointAt(r+2)||32;if(e[r+1]==="2"&&i===102)throw new Deno.errors.InvalidData("must not include encoded / characters")}return decodeURIComponent(e)}function hg(t){let e=Ja.resolve(t),r=t.charCodeAt(t.length-1);(r===FE||il&&r===jE)&&e[e.length-1]!==Ja.sep&&(e+="/");let i=new URL("file://");return e.includes("%")&&(e=e.replace(VE,"%25")),!il&&e.includes("\\")&&(e=e.replace(zE,"%5C")),e.includes(`
`)&&(e=e.replace(KE,"%0A")),e.includes("\r")&&(e=e.replace(GE,"%0D")),e.includes("	")&&(e=e.replace(QE,"%09")),i.pathname=e,i}var Z,fE,pt,cE,hE,dE,pE,tl,og,ag,lg,gE,yE,Xa,si,Za,el,ug,fg,wE,_E,mE,vE,EE,rl,SE,AE,IE,TE,RE,CE,xE,ME,LE,UE,NE,qE,DE,jE,FE,WE,$E,il,HE,VE,zE,KE,GE,QE,pg=we(()=>{v();m();_();Yp();Jp();rg();sg();Qa();Z={},fE=zt,pt={isString:function(t){return typeof t=="string"},isObject:function(t){return typeof t=="object"&&t!==null},isNull:function(t){return t===null},isNullOrUndefined:function(t){return t==null}};Z.parse=xi,Z.resolve=function(t,e){return xi(t,!1,!0).resolve(e)},Z.resolveObject=function(t,e){return t?xi(t,!1,!0).resolveObject(e):e},Z.format=function(t){return pt.isString(t)&&(t=xi(t)),t instanceof Fe?t.format():Fe.prototype.format.call(t)},Z.Url=Fe;cE=/^([a-z0-9.+-]+:)/i,hE=/:[0-9]*$/,dE=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,pE=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r",`
`,"	"]),tl=["'"].concat(pE),og=["%","/","?",";","#"].concat(tl),ag=["/","?","#"],lg=/^[+a-z0-9A-Z_-]{0,63}$/,gE=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,yE={javascript:!0,"javascript:":!0},Xa={javascript:!0,"javascript:":!0},si={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},Za=dt;Fe.prototype.parse=function(t,e,r){if(!pt.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var i=t.indexOf("?"),n=i!==-1&&i<t.indexOf("#")?"?":"#",o=t.split(n);o[0]=o[0].replace(/\\/g,"/");var s=t=o.join(n);if(s=s.trim(),!r&&t.split("#").length===1){var a=dE.exec(s);if(a)return this.path=s,this.href=s,this.pathname=a[1],a[2]?(this.search=a[2],this.query=e?Za.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var u=cE.exec(s);if(u){var c=(u=u[0]).toLowerCase();this.protocol=c,s=s.substr(u.length);}if(r||u||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var h=s.substr(0,2)==="//";!h||u&&Xa[u]||(s=s.substr(2),this.slashes=!0);}if(!Xa[u]&&(h||u&&!si[u])){for(var d,g,y=-1,w=0;w<ag.length;w++)(E=s.indexOf(ag[w]))!==-1&&(y===-1||E<y)&&(y=E);for((g=y===-1?s.lastIndexOf("@"):s.lastIndexOf("@",y))!==-1&&(d=s.slice(0,g),s=s.slice(g+1),this.auth=decodeURIComponent(d)),y=-1,w=0;w<og.length;w++){var E;(E=s.indexOf(og[w]))!==-1&&(y===-1||E<y)&&(y=E);}y===-1&&(y=s.length),this.host=s.slice(0,y),s=s.slice(y),this.parseHost(),this.hostname=this.hostname||"";var S=this.hostname[0]==="["&&this.hostname[this.hostname.length-1]==="]";if(!S)for(var I=this.hostname.split(/\./),C=(w=0,I.length);w<C;w++){var R=I[w];if(R&&!R.match(lg)){for(var U="",N=0,W=R.length;N<W;N++)R.charCodeAt(N)>127?U+="x":U+=R[N];if(!U.match(lg)){var K=I.slice(0,w),z=I.slice(w+1),Q=R.match(gE);Q&&(K.push(Q[1]),z.unshift(Q[2])),z.length&&(s="/"+z.join(".")+s),this.hostname=K.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),S||(this.hostname=fE.toASCII(this.hostname));var de=this.port?":"+this.port:"",Gt=this.hostname||"";this.host=Gt+de,this.href+=this.host,S&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),s[0]!=="/"&&(s="/"+s));}if(!yE[c])for(w=0,C=tl.length;w<C;w++){var pe=tl[w];if(s.indexOf(pe)!==-1){var Cr=encodeURIComponent(pe);Cr===pe&&(Cr=escape(pe)),s=s.split(pe).join(Cr);}}var Br=s.indexOf("#");Br!==-1&&(this.hash=s.substr(Br),s=s.slice(0,Br));var Pr=s.indexOf("?");if(Pr!==-1?(this.search=s.substr(Pr),this.query=s.substr(Pr+1),e&&(this.query=Za.parse(this.query)),s=s.slice(0,Pr)):e&&(this.search="",this.query={}),s&&(this.pathname=s),si[c]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){de=this.pathname||"";var us=this.search||"";this.path=de+us;}return this.href=this.format(),this},Fe.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",i=this.hash||"",n=!1,o="";this.host?n=t+this.host:this.hostname&&(n=t+(this.hostname.indexOf(":")===-1?this.hostname:"["+this.hostname+"]"),this.port&&(n+=":"+this.port)),this.query&&pt.isObject(this.query)&&Object.keys(this.query).length&&(o=Za.stringify(this.query));var s=this.search||o&&"?"+o||"";return e&&e.substr(-1)!==":"&&(e+=":"),this.slashes||(!e||si[e])&&n!==!1?(n="//"+(n||""),r&&r.charAt(0)!=="/"&&(r="/"+r)):n||(n=""),i&&i.charAt(0)!=="#"&&(i="#"+i),s&&s.charAt(0)!=="?"&&(s="?"+s),e+n+(r=r.replace(/[?#]/g,function(a){return encodeURIComponent(a)}))+(s=s.replace("#","%23"))+i},Fe.prototype.resolve=function(t){return this.resolveObject(xi(t,!1,!0)).format()},Fe.prototype.resolveObject=function(t){if(pt.isString(t)){var e=new Fe;e.parse(t,!1,!0),t=e;}for(var r=new Fe,i=Object.keys(this),n=0;n<i.length;n++){var o=i[n];r[o]=this[o];}if(r.hash=t.hash,t.href==="")return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var s=Object.keys(t),a=0;a<s.length;a++){var u=s[a];u!=="protocol"&&(r[u]=t[u]);}return si[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!si[t.protocol]){for(var c=Object.keys(t),h=0;h<c.length;h++){var d=c[h];r[d]=t[d];}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||Xa[t.protocol])r.pathname=t.pathname;else {for(var g=(t.pathname||"").split("/");g.length&&!(t.host=g.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),g[0]!==""&&g.unshift(""),g.length<2&&g.unshift(""),r.pathname=g.join("/");}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var y=r.pathname||"",w=r.search||"";r.path=y+w;}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var E=r.pathname&&r.pathname.charAt(0)==="/",S=t.host||t.pathname&&t.pathname.charAt(0)==="/",I=S||E||r.host&&t.pathname,C=I,R=r.pathname&&r.pathname.split("/")||[],U=(g=t.pathname&&t.pathname.split("/")||[],r.protocol&&!si[r.protocol]);if(U&&(r.hostname="",r.port=null,r.host&&(R[0]===""?R[0]=r.host:R.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(g[0]===""?g[0]=t.host:g.unshift(t.host)),t.host=null),I=I&&(g[0]===""||R[0]==="")),S)r.host=t.host||t.host===""?t.host:r.host,r.hostname=t.hostname||t.hostname===""?t.hostname:r.hostname,r.search=t.search,r.query=t.query,R=g;else if(g.length)R||(R=[]),R.pop(),R=R.concat(g),r.search=t.search,r.query=t.query;else if(!pt.isNullOrUndefined(t.search))return U&&(r.hostname=r.host=R.shift(),(Q=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=Q.shift(),r.host=r.hostname=Q.shift())),r.search=t.search,r.query=t.query,pt.isNull(r.pathname)&&pt.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!R.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var N=R.slice(-1)[0],W=(r.host||t.host||R.length>1)&&(N==="."||N==="..")||N==="",K=0,z=R.length;z>=0;z--)(N=R[z])==="."?R.splice(z,1):N===".."?(R.splice(z,1),K++):K&&(R.splice(z,1),K--);if(!I&&!C)for(;K--;K)R.unshift("..");!I||R[0]===""||R[0]&&R[0].charAt(0)==="/"||R.unshift(""),W&&R.join("/").substr(-1)!=="/"&&R.push("");var Q,de=R[0]===""||R[0]&&R[0].charAt(0)==="/";return U&&(r.hostname=r.host=de?"":R.length?R.shift():"",(Q=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=Q.shift(),r.host=r.hostname=Q.shift())),(I=I||r.host&&R.length)&&!de&&R.unshift(""),R.length?r.pathname=R.join("/"):(r.pathname=null,r.path=null),pt.isNull(r.pathname)&&pt.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},Fe.prototype.parseHost=function(){var t=this.host,e=hE.exec(t);e&&((e=e[0])!==":"&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t);};Z.Url;Z.format;Z.resolve;Z.resolveObject;el={},ug=!1;fg=bE(),wE=typeof Deno<"u"?Deno.build.os==="windows"?"win32":Deno.build.os:void 0;Z.URL=typeof URL<"u"?URL:null;Z.pathToFileURL=kE;Z.fileURLToPath=BE;Z.Url;Z.format;Z.resolve;Z.resolveObject;Z.URL;_E=92,mE=47,vE=97,EE=122,rl=wE==="win32",SE=/\//g,AE=/%/g,IE=/\\/g,TE=/\n/g,RE=/\r/g,CE=/\t/g;xE=typeof Deno<"u"?Deno.build.os==="windows"?"win32":Deno.build.os:void 0;Z.URL=typeof URL<"u"?URL:null;Z.pathToFileURL=hg;Z.fileURLToPath=cg;ME=Z.Url,LE=Z.format,UE=Z.resolve,NE=Z.resolveObject,qE=Z.parse,DE=Z.URL,jE=92,FE=47,WE=97,$E=122,il=xE==="win32",HE=/\//g,VE=/%/g,zE=/\\/g,KE=/\n/g,GE=/\r/g,QE=/\t/g;});var nl={};Qt(nl,{Server:()=>Me,Socket:()=>Me,Stream:()=>Me,_createServerHandle:()=>Me,_normalizeArgs:()=>Me,_setSimultaneousAccepts:()=>Me,connect:()=>Me,createConnection:()=>Me,createServer:()=>Me,default:()=>XE,isIP:()=>Me,isIPv4:()=>Me,isIPv6:()=>Me});function Me(){throw new Error("Node.js net module is not supported by JSPM core outside of Node.js")}var XE,sl=we(()=>{v();m();_();XE={_createServerHandle:Me,_normalizeArgs:Me,_setSimultaneousAccepts:Me,connect:Me,createConnection:Me,createServer:Me,isIP:Me,isIPv4:Me,isIPv6:Me,Server:Me,Socket:Me,Stream:Me};});var ol=M(Mi=>{v();m();_();var gg=Mi&&Mi.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Mi,"__esModule",{value:!0});var ZE=gg((sl(),X(nl))),eS=gg(ot()),tS=(0, eS.default)("mqttjs:tcp"),rS=(t,e)=>{e.port=e.port||1883,e.hostname=e.hostname||e.host||"localhost";let{port:r}=e,i=e.hostname;return tS("port %d and host %s",r,i),ZE.default.createConnection(r,i)};Mi.default=rS;});var yg={};Qt(yg,{default:()=>iS});var iS,bg=we(()=>{v();m();_();iS={};});var ll=M(Li=>{v();m();_();var al=Li&&Li.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Li,"__esModule",{value:!0});var nS=al((bg(),X(yg))),sS=al((sl(),X(nl))),oS=al(ot()),aS=(0, oS.default)("mqttjs:tls"),lS=(t,e)=>{e.port=e.port||8883,e.host=e.hostname||e.host||"localhost",sS.default.isIP(e.host)===0&&(e.servername=e.host),e.rejectUnauthorized=e.rejectUnauthorized!==!1,delete e.path,aS("port %d host %s rejectUnauthorized %b",e.port,e.host,e.rejectUnauthorized);let r=nS.default.connect(e);r.on("secureConnect",()=>{e.rejectUnauthorized&&!r.authorized?r.emit("error",new Error("TLS not authorized")):r.removeListener("error",i);});function i(n){e.rejectUnauthorized&&t.emit("error",n),r.end();}return r.on("error",i),r};Li.default=lS;});var os=M(oi=>{v();m();_();Object.defineProperty(oi,"__esModule",{value:!0});oi.BufferedDuplex=oi.writev=void 0;var uS=Dt(),wg=(ye(),X(_e));function _g(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)typeof t[i].chunk=="string"?r[i]=wg.Buffer.from(t[i].chunk,"utf8"):r[i]=t[i].chunk;this._write(wg.Buffer.concat(r),"binary",e);}oi.writev=_g;var ul=class extends uS.Duplex{constructor(e,r,i){super({objectMode:!0}),this.proxy=r,this.socket=i,this.writeQueue=[],e.objectMode||(this._writev=_g.bind(this)),this.isSocketOpen=!1,this.proxy.on("data",n=>{this.push(n);});}_read(e){this.proxy.read(e);}_write(e,r,i){this.isSocketOpen?this.writeToProxy(e,r,i):this.writeQueue.push({chunk:e,encoding:r,cb:i});}_final(e){this.writeQueue=[],this.proxy.end(e);}_destroy(e,r){this.writeQueue=[],this.proxy.destroy(),r(e);}socketReady(){this.emit("connect"),this.isSocketOpen=!0,this.processWriteQueue();}writeToProxy(e,r,i){this.proxy.write(e,r)===!1?this.proxy.once("drain",i):i();}processWriteQueue(){for(;this.writeQueue.length>0;){let{chunk:e,encoding:r,cb:i}=this.writeQueue.shift();this.writeToProxy(e,r,i);}}};oi.BufferedDuplex=ul;});var hl=M(cl=>{v();m();_();Object.defineProperty(cl,"__esModule",{value:!0});var mg=(ye(),X(_e)),fS=Dt(),cS=os(),gt,fl,Le;function hS(){let t=new fS.Transform;return t._write=(e,r,i)=>{gt.send({data:e.buffer,success(){i();},fail(n){i(new Error(n));}});},t._flush=e=>{gt.close({success(){e();}});},t}function dS(t){t.hostname||(t.hostname="localhost"),t.path||(t.path="/"),t.wsOptions||(t.wsOptions={});}function pS(t,e){let r=t.protocol==="wxs"?"wss":"ws",i=`${r}://${t.hostname}${t.path}`;return t.port&&t.port!==80&&t.port!==443&&(i=`${r}://${t.hostname}:${t.port}${t.path}`),typeof t.transformWsUrl=="function"&&(i=t.transformWsUrl(i,t,e)),i}function gS(){gt.onOpen(()=>{Le.socketReady();}),gt.onMessage(t=>{let{data:e}=t;e instanceof ArrayBuffer?e=mg.Buffer.from(e):e=mg.Buffer.from(e,"utf8"),fl.push(e);}),gt.onClose(()=>{Le.emit("close"),Le.end(),Le.destroy();}),gt.onError(t=>{let e=new Error(t.errMsg);Le.destroy(e);});}var yS=(t,e)=>{if(e.hostname=e.hostname||e.host,!e.hostname)throw new Error("Could not determine host. Specify host manually.");let r=e.protocolId==="MQIsdp"&&e.protocolVersion===3?"mqttv3.1":"mqtt";dS(e);let i=pS(e,t);gt=wx.connectSocket({url:i,protocols:[r]}),fl=hS(),Le=new cS.BufferedDuplex(e,fl,gt),Le._destroy=(o,s)=>{gt.close({success(){s&&s(o);}});};let n=Le.destroy;return Le.destroy=(o,s)=>(Le.destroy=n,setTimeout(()=>{gt.close({fail(){Le._destroy(o,s);}});},0),Le),gS(),Le};cl.default=yS;});var gl=M(pl=>{v();m();_();Object.defineProperty(pl,"__esModule",{value:!0});var dl=(ye(),X(_e)),bS=Dt(),wS=os(),kt,as,ai,vg=!1;function _S(){let t=new bS.Transform;return t._write=(e,r,i)=>{kt.sendSocketMessage({data:e.buffer,success(){i();},fail(){i(new Error);}});},t._flush=e=>{kt.closeSocket({success(){e();}});},t}function mS(t){t.hostname||(t.hostname="localhost"),t.path||(t.path="/"),t.wsOptions||(t.wsOptions={});}function vS(t,e){let r=t.protocol==="alis"?"wss":"ws",i=`${r}://${t.hostname}${t.path}`;return t.port&&t.port!==80&&t.port!==443&&(i=`${r}://${t.hostname}:${t.port}${t.path}`),typeof t.transformWsUrl=="function"&&(i=t.transformWsUrl(i,t,e)),i}function ES(){vg||(vg=!0,kt.onSocketOpen(()=>{ai.socketReady();}),kt.onSocketMessage(t=>{if(typeof t.data=="string"){let e=dl.Buffer.from(t.data,"base64");as.push(e);}else {let e=new FileReader;e.addEventListener("load",()=>{let r=e.result;r instanceof ArrayBuffer?r=dl.Buffer.from(r):r=dl.Buffer.from(r,"utf8"),as.push(r);}),e.readAsArrayBuffer(t.data);}}),kt.onSocketClose(()=>{ai.end(),ai.destroy();}),kt.onSocketError(t=>{ai.destroy(t);}));}var SS=(t,e)=>{if(e.hostname=e.hostname||e.host,!e.hostname)throw new Error("Could not determine host. Specify host manually.");let r=e.protocolId==="MQIsdp"&&e.protocolVersion===3?"mqttv3.1":"mqtt";mS(e);let i=vS(e,t);return kt=e.my,kt.connectSocket({url:i,protocols:r}),as=_S(),ai=new wS.BufferedDuplex(e,as,kt),ES(),ai};pl.default=SS;});var Sg=M((PD,Eg)=>{v();m();_();Eg.exports=function(){throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object")};});var _l=M(Ui=>{v();m();_();var wl=Ui&&Ui.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Ui,"__esModule",{value:!0});var yl=(ye(),X(_e)),Ag=wl(Sg()),AS=wl(ot()),IS=Dt(),Ig=wl(Pi()),bl=os(),Kt=(0, AS.default)("mqttjs:ws"),TS=["rejectUnauthorized","ca","cert","key","pfx","passphrase"];function Tg(t,e){let r=`${t.protocol}://${t.hostname}:${t.port}${t.path}`;return typeof t.transformWsUrl=="function"&&(r=t.transformWsUrl(r,t,e)),r}function Rg(t){let e=t;return t.hostname||(e.hostname="localhost"),t.port||(t.protocol==="wss"?e.port=443:e.port=80),t.path||(e.path="/"),t.wsOptions||(e.wsOptions={}),!Ig.default&&t.protocol==="wss"&&TS.forEach(r=>{Object.prototype.hasOwnProperty.call(t,r)&&!Object.prototype.hasOwnProperty.call(t.wsOptions,r)&&(e.wsOptions[r]=t[r]);}),e}function RS(t){let e=Rg(t);if(e.hostname||(e.hostname=e.host),!e.hostname){if(typeof document>"u")throw new Error("Could not determine host. Specify host manually.");let r=new URL(document.URL);e.hostname=r.hostname,e.port||(e.port=Number(r.port));}return e.objectMode===void 0&&(e.objectMode=!(e.binary===!0||e.binary===void 0)),e}function CS(t,e,r){Kt("createWebSocket"),Kt(`protocol: ${r.protocolId} ${r.protocolVersion}`);let i=r.protocolId==="MQIsdp"&&r.protocolVersion===3?"mqttv3.1":"mqtt";Kt(`creating new Websocket for url: ${e} and protocol: ${i}`);let n;return r.createWebsocket?n=r.createWebsocket(e,[i],r):n=new Ag.default(e,[i],r.wsOptions),n}function BS(t,e){let r=e.protocolId==="MQIsdp"&&e.protocolVersion===3?"mqttv3.1":"mqtt",i=Tg(e,t),n;return e.createWebsocket?n=e.createWebsocket(i,[r],e):n=new WebSocket(i,[r]),n.binaryType="arraybuffer",n}var PS=(t,e)=>{Kt("streamBuilder");let r=Rg(e),i=Tg(r,t),n=CS(t,i,r),o=Ag.default.createWebSocketStream(n,r.wsOptions);return o.url=i,n.on("close",()=>{o.destroy();}),o},OS=(t,e)=>{Kt("browserStreamBuilder");let r,n=RS(e).browserBufferSize||1024*512,o=e.browserBufferTimeout||1e3,s=!e.objectMode,a=BS(t,e),u=h(e,E,S);e.objectMode||(u._writev=bl.writev.bind(u)),u.on("close",()=>{a.close();});let c=typeof a.addEventListener<"u";a.readyState===a.OPEN?(r=u,r.socket=a):(r=new bl.BufferedDuplex(e,u,a),c?a.addEventListener("open",d):a.onopen=d),c?(a.addEventListener("close",g),a.addEventListener("error",y),a.addEventListener("message",w)):(a.onclose=g,a.onerror=y,a.onmessage=w);function h(I,C,R){let U=new IS.Transform({objectMode:I.objectMode});return U._write=C,U._flush=R,U}function d(){Kt("WebSocket onOpen"),r instanceof bl.BufferedDuplex&&r.socketReady();}function g(I){Kt("WebSocket onClose",I),r.end(),r.destroy();}function y(I){Kt("WebSocket onError",I);let C=new Error("WebSocket error");C.event=I,r.destroy(C);}function w(I){let{data:C}=I;C instanceof ArrayBuffer?C=yl.Buffer.from(C):C=yl.Buffer.from(C,"utf8"),u.push(C);}function E(I,C,R){if(a.bufferedAmount>n){setTimeout(E,o,I,C,R);return}s&&typeof I=="string"&&(I=yl.Buffer.from(I,"utf8"));try{a.send(I);}catch(U){return R(U)}R();}function S(I){a.close(),I();}return r};Ui.default=Ig.default?OS:PS;});var Pg=M(Rr=>{v();m();_();var ls=Rr&&Rr.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Rr,"__esModule",{value:!0});Rr.connectAsync=void 0;var kS=ls(ot()),xS=ls((pg(),X(dg))),MS=ls(ns()),LS=ls(Pi()),Cg=(0, kS.default)("mqttjs"),Re={};LS.default?(Re.wx=hl().default,Re.wxs=hl().default,Re.ali=gl().default,Re.alis=gl().default):(Re.mqtt=ol().default,Re.tcp=ol().default,Re.ssl=ll().default,Re.tls=Re.ssl,Re.mqtts=ll().default);Re.ws=_l().default;Re.wss=_l().default;function US(t){let e;t.auth&&(e=t.auth.match(/^(.+):(.+)$/),e?(t.username=e[1],t.password=e[2]):t.username=t.auth);}function Bg(t,e){if(Cg("connecting to an MQTT broker..."),typeof t=="object"&&!e&&(e=t,t=""),e=e||{},t&&typeof t=="string"){let n=xS.default.parse(t,!0);if(n.port!=null&&(n.port=Number(n.port)),e=Object.assign(Object.assign({},n),e),e.protocol===null)throw new Error("Missing protocol");e.protocol=e.protocol.replace(/:$/,"");}if(US(e),e.query&&typeof e.query.clientId=="string"&&(e.clientId=e.query.clientId),e.cert&&e.key)if(e.protocol){if(["mqtts","wss","wxs","alis"].indexOf(e.protocol)===-1)switch(e.protocol){case"mqtt":e.protocol="mqtts";break;case"ws":e.protocol="wss";break;case"wx":e.protocol="wxs";break;case"ali":e.protocol="alis";break;default:throw new Error(`Unknown protocol for secure connection: "${e.protocol}"!`)}}else throw new Error("Missing secure protocol key");if(!Re[e.protocol]){let n=["mqtts","wss"].indexOf(e.protocol)!==-1;e.protocol=["mqtt","mqtts","ws","wss","wx","wxs","ali","alis"].filter((o,s)=>n&&s%2===0?!1:typeof Re[o]=="function")[0];}if(e.clean===!1&&!e.clientId)throw new Error("Missing clientId for unclean clients");e.protocol&&(e.defaultProtocol=e.protocol);function r(n){return e.servers&&((!n._reconnectCount||n._reconnectCount===e.servers.length)&&(n._reconnectCount=0),e.host=e.servers[n._reconnectCount].host,e.port=e.servers[n._reconnectCount].port,e.protocol=e.servers[n._reconnectCount].protocol?e.servers[n._reconnectCount].protocol:e.defaultProtocol,e.hostname=e.host,n._reconnectCount++),Cg("calling streambuilder for",e.protocol),Re[e.protocol](n,e)}let i=new MS.default(r,e);return i.on("error",()=>{}),i}function NS(t,e,r=!0){return new Promise((i,n)=>{let o=Bg(t,e),s={connect:u=>{a(),i(o);},end:()=>{a(),i(o);},error:u=>{a(),o.end(),n(u);}};r===!1&&(s.close=()=>{s.error(new Error("Couldn't connect to server"));});function a(){Object.keys(s).forEach(u=>{o.off(u,s[u]);});}Object.keys(s).forEach(u=>{o.on(u,s[u]);});})}Rr.connectAsync=NS;Rr.default=Bg;});var ml=M(G=>{v();m();_();var Og=G&&G.__createBinding||(Object.create?function(t,e,r,i){i===void 0&&(i=r);var n=Object.getOwnPropertyDescriptor(e,r);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,i,n);}:function(t,e,r,i){i===void 0&&(i=r),t[i]=e[r];}),qS=G&&G.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e});}:function(t,e){t.default=e;}),DS=G&&G.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var r in t)r!=="default"&&Object.prototype.hasOwnProperty.call(t,r)&&Og(e,t,r);return qS(e,t),e},kg=G&&G.__exportStar||function(t,e){for(var r in t)r!=="default"&&!Object.prototype.hasOwnProperty.call(e,r)&&Og(e,t,r);},Ni=G&&G.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(G,"__esModule",{value:!0});G.ReasonCodes=G.PingTimer=G.UniqueMessageIdProvider=G.DefaultMessageIdProvider=G.Store=G.MqttClient=G.connectAsync=G.connect=G.Client=void 0;var xg=Ni(ns());G.MqttClient=xg.default;var jS=Ni(Yo());G.DefaultMessageIdProvider=jS.default;var FS=Ni($p());G.UniqueMessageIdProvider=FS.default;var WS=Ni(Zo());G.Store=WS.default;var Mg=DS(Pg());G.connect=Mg.default;Object.defineProperty(G,"connectAsync",{enumerable:!0,get:function(){return Mg.connectAsync}});var $S=Ni(Da());G.PingTimer=$S.default;G.Client=xg.default;kg(ns(),G);kg(Jr(),G);var HS=Ai();Object.defineProperty(G,"ReasonCodes",{enumerable:!0,get:function(){return HS.ReasonCodes}});});var QS=M(We=>{v();m();_();var Lg=We&&We.__createBinding||(Object.create?function(t,e,r,i){i===void 0&&(i=r);var n=Object.getOwnPropertyDescriptor(e,r);(!n||("get"in n?!e.__esModule:n.writable||n.configurable))&&(n={enumerable:!0,get:function(){return e[r]}}),Object.defineProperty(t,i,n);}:function(t,e,r,i){i===void 0&&(i=r),t[i]=e[r];}),VS=We&&We.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e});}:function(t,e){t.default=e;}),zS=We&&We.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(t!=null)for(var r in t)r!=="default"&&Object.prototype.hasOwnProperty.call(t,r)&&Lg(e,t,r);return VS(e,t),e},KS=We&&We.__exportStar||function(t,e){for(var r in t)r!=="default"&&!Object.prototype.hasOwnProperty.call(e,r)&&Lg(e,t,r);};Object.defineProperty(We,"__esModule",{value:!0});var GS=zS(ml());We.default=GS;KS(ml(),We);});var mqtt = QS();
/*! Bundled license information:

@jspm/core/nodelibs/browser/buffer.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/

class CloudInteropAPI {
    connectParams;
    _sessionDetails;
    _mqttClient;
    reconnectRetryLimit = 30;
    reconnectRetries = 0;
    contextListener;
    constructor(connectParams) {
        this.connectParams = connectParams;
    }
    get sessionDetails() {
        return this._sessionDetails;
    }
    get mqttClient() {
        return this._mqttClient;
    }
    async connect(params) {
        const { userId, password, sourceId, platformId } = params;
        let connectResponse;
        try {
            connectResponse = await axios.post(`${this.connectParams.url}/sessions`, {
                userId,
                sourceId,
                platformId
            });
            if (connectResponse.status !== 200) {
                throw new Error(`Failed to connect to Cloud Interop url: ${this.connectParams.url}`);
            }
            const { sessionRootTopic } = connectResponse.data;
            const lastWillPayload = {
                userId,
                sourceId,
                platformId,
                sessionId: connectResponse.data.sessionId
            };
            const clientOptions = {
                clientId: connectResponse.data.sessionId,
                clean: true,
                protocolVersion: 5,
                will: {
                    topic: 'interop/lastwill',
                    payload: buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(JSON.stringify(lastWillPayload)),
                    qos: 0,
                    retain: false
                },
                username: userId,
                password
            };
            this._mqttClient = await mqtt.connectAsync(connectResponse.data.mqttUrl, clientOptions);
            this._sessionDetails = connectResponse.data;
            console.log(`Cloud Interop successfully connected to ${this.connectParams.url}`);
            this._mqttClient.on('error', (error) => {
                console.error(`Cloud Interop Error: ${error}`);
            });
            this._mqttClient.stream.on('error', (error) => {
                console.error(`Cloud Interop Connection Error: ${error}`);
            });
            this._mqttClient.on('reconnect', () => {
                console.warn(`Cloud Interop attempting reconnection...`);
                // Default reconnectPeriod = 30 seconds
                // Attempt reconnection 30 times before ending session
                this.reconnectRetries += 1;
                if (this.reconnectRetries === this.reconnectRetryLimit) {
                    console.warn(`Cloud Interop reached max reconnection attempts...`);
                    this.disconnect();
                }
            });
            // Does not fire on initial connection, only successful reconnection attempts
            this._mqttClient.on('connect', () => {
                console.log(`Cloud Interop successfully reconnected`);
                this.reconnectRetries = 0;
            });
            this._mqttClient.on('message', (topic, message) => {
                this.handleCommand(topic, message, this._sessionDetails);
            });
            // Subscribe to all context groups
            this._mqttClient.subscribe(`${sessionRootTopic}/context-groups/#`);
            // Listen out for global commands
            this._mqttClient.subscribe(`${sessionRootTopic}/commands`);
        }
        catch (error) {
            console.warn(`Failed to connect to Cloud Interop at ${this.connectParams.url}`, error);
        }
    }
    async disconnect() {
        if (!this._sessionDetails) {
            return;
        }
        try {
            const disconnectResponse = await axios.delete(`${this.connectParams.url}/sessions/${this._sessionDetails.sessionId}`);
            if (disconnectResponse.status !== 200) {
                console.warn(`Cloud Interop disconnection failed`, disconnectResponse);
            }
        }
        catch (error) {
            console.warn(`Cloud Interop error during disconnection`, error);
        }
        finally {
            this._mqttClient?.removeAllListeners();
            this._mqttClient?.end(true);
            this._sessionDetails = undefined;
            this._mqttClient = undefined;
            this.reconnectRetries = 0;
        }
    }
    async setContext(contextGroup, context) {
        if (!this._sessionDetails) {
            return;
        }
        const { userId, sourceId } = this.connectParams;
        const payload = {
            userId,
            sourceId,
            context
        };
        await axios.post(`${this.connectParams.url}/context-groups/${this._sessionDetails.sessionId}/${contextGroup}`, payload);
    }
    addContextListener(callback) {
        this.contextListener = callback;
    }
    startIntentDiscovery(intentName, context) {
        throw new Error('Method not implemented.');
    }
    endIntentDiscovery(discoveryId) {
        throw new Error('Method not implemented.');
    }
    sendIntentDetail(discoveryId, intentDetail) {
        throw new Error('Method not implemented.');
    }
    raiseIntent(targetSession, intentInstanceId, context) {
        throw new Error('Method not implemented.');
    }
    addIntentDetailListener(callback) {
        throw new Error('Method not implemented.');
    }
    handleCommand(topic, message, sessionDetails) {
        if (message.length === 0 || !sessionDetails) {
            // Ignore clean up messages
            return;
        }
        const messageEnvelope = JSON.parse(message.toString());
        if (topic.startsWith(`${sessionDetails.sessionRootTopic}/context-groups/`)) {
            if (messageEnvelope.source.sessionId === sessionDetails.sessionId) {
                return;
            }
            if (this.contextListener) {
                const { channelName: contextGroup, payload: context, source } = messageEnvelope;
                this.contextListener(contextGroup, context, source);
            }
        }
    }
}

async function cloudInteropOverride(config) {
    const client = new CloudInteropAPI(config);
    try {
        await client.connect(config);
    }
    catch (err) {
        console.warn(err);
        return (Base) => {
            return class NoOpOverride extends Base {
                constructor() {
                    super();
                }
            };
        };
    }
    return (Base) => {
        return class CloudInteropOverride extends Base {
            constructor() {
                super();
                client.addContextListener((contextGroup, context, source) => {
                    if (this.getContextGroups()
                        .map(({ id }) => id)
                        .includes(contextGroup) &&
                        client.sessionDetails?.sessionId !== source.sessionId) {
                        super.setContextForGroup({ context: context }, contextGroup);
                    }
                });
            }
            async setContextForGroup({ context }, contextGroupId) {
                client.setContext(contextGroupId, context);
                super.setContextForGroup({ context }, contextGroupId);
            }
            async cloudReconnect() {
                await client.connect(config);
            }
            get cloudConnectionState() {
                if (client.mqttClient?.connected) {
                    return 'connected';
                }
                if (client.mqttClient?.reconnecting) {
                    return 'reconnecting';
                }
                return 'disconnected';
            }
        };
    };
}




/***/ }),

/***/ "../../../node_modules/base64-js/index.js":
/*!************************************************!*\
  !*** ../../../node_modules/base64-js/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "../../../node_modules/buffer/index.js":
/*!*********************************************!*\
  !*** ../../../node_modules/buffer/index.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "../../../node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "../../../node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "../../../node_modules/ieee754/index.js":
/*!**********************************************!*\
  !*** ../../../node_modules/ieee754/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./client/src/settings.ts":
/*!********************************!*\
  !*** ./client/src/settings.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getManifestCustomSettings: () => (/* binding */ getManifestCustomSettings)
/* harmony export */ });
/**
 * Load the customSettings section from the application manifest.
 * @returns The custom settings from the manifest.
 */
async function getManifestCustomSettings() {
    const app = await fin.Application.getCurrent();
    const manifest = await app.getManifest();
    return manifest.customSettings;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!********************************!*\
  !*** ./client/src/provider.ts ***!
  \********************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _openfin_cloud_interop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @openfin/cloud-interop */ "../../../node_modules/@openfin/cloud-interop/out/index.js");
/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./settings */ "./client/src/settings.ts");


window.addEventListener("DOMContentLoaded", async () => {
    const customSettings = await (0,_settings__WEBPACK_IMPORTED_MODULE_1__.getManifestCustomSettings)();
    const interopOverrides = [];
    if (customSettings?.cloudInteropProvider?.enabled) {
        const initializedCloudInteropOverride = (await (0,_openfin_cloud_interop__WEBPACK_IMPORTED_MODULE_0__.cloudInteropOverride)(customSettings?.cloudInteropProvider?.connectParams));
        interopOverrides.push(initializedCloudInteropOverride);
    }
    fin.Platform.init({ interopOverride: interopOverrides }).catch((error) => console.error(error));
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxRQUFRO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdB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QUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkIsbUJBQW1CO0FBQzlDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtB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QTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE1BQU07QUFDL0MsTUFBTTtBQUNOO0FBQ0E7QUFDQSw4Q0FBOEMsTUFBTTtBQUNwRDtBQUNBLENBQUM7O0FBRUQsc0NBQXNDLE9BQU87O0FBRTdDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTs7QUFFQTs7QUFFQSxvQkFBb0IsWUFBWTtBQUNoQztBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQsR0FBRztBQUN0RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EseUNBQXlDLElBQUk7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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QUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZDtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQSx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxpQkFBaUI7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixTQUFTO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsa0JBQWtCLFNBQVM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixlQUFlO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHlCQUF5QixRQUFRO0FBQ2pDO0FBQ0Esc0JBQXNCLGVBQWU7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsWUFBWTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0JBQXNCLFNBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNCQUFzQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVB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QyxrQkFBa0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN0RCxNQUFNLGNBQWMsR0FBRyxNQUFNLG9FQUF5QixFQUFFLENBQUM7SUFDekQsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7SUFFNUIsSUFBSSxjQUFjLEVBQUUsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLENBQUM7UUFDbkQsTUFBTSwrQkFBK0IsR0FBRyxDQUFDLE1BQU0sNEVBQW9CLENBQ2xFLGNBQWMsRUFBRSxvQkFBb0IsRUFBRSxhQUFhLENBQ25ELENBQWtFLENBQUM7UUFDcEUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUNELEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztBQUNqRyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnRhaW5lci1zdGFydGVyLXVzZS1pbnRlcm9wLS1jbG91ZC1pbnRlcm9wLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9Ab3BlbmZpbi9jbG91ZC1pbnRlcm9wL291dC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jb250YWluZXItc3RhcnRlci11c2UtaW50ZXJvcC0tY2xvdWQtaW50ZXJvcC8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovL2NvbnRhaW5lci1zdGFydGVyLXVzZS1pbnRlcm9wLS1jbG91ZC1pbnRlcm9wLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29udGFpbmVyLXN0YXJ0ZXItdXNlLWludGVyb3AtLWNsb3VkLWludGVyb3AvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY29udGFpbmVyLXN0YXJ0ZXItdXNlLWludGVyb3AtLWNsb3VkLWludGVyb3AvLi9jbGllbnQvc3JjL3NldHRpbmdzLnRzIiwid2VicGFjazovL2NvbnRhaW5lci1zdGFydGVyLXVzZS1pbnRlcm9wLS1jbG91ZC1pbnRlcm9wL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2NvbnRhaW5lci1zdGFydGVyLXVzZS1pbnRlcm9wLS1jbG91ZC1pbnRlcm9wL3dlYnBhY2svcnVudGltZS9hbWQgb3B0aW9ucyIsIndlYnBhY2s6Ly9jb250YWluZXItc3RhcnRlci11c2UtaW50ZXJvcC0tY2xvdWQtaW50ZXJvcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY29udGFpbmVyLXN0YXJ0ZXItdXNlLWludGVyb3AtLWNsb3VkLWludGVyb3Avd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jb250YWluZXItc3RhcnRlci11c2UtaW50ZXJvcC0tY2xvdWQtaW50ZXJvcC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2NvbnRhaW5lci1zdGFydGVyLXVzZS1pbnRlcm9wLS1jbG91ZC1pbnRlcm9wL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY29udGFpbmVyLXN0YXJ0ZXItdXNlLWludGVyb3AtLWNsb3VkLWludGVyb3AvLi9jbGllbnQvc3JjL3Byb3ZpZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5cbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn07XG5cbmNvbnN0IHR5cGVPZlRlc3QgPSB0eXBlID0+IHRoaW5nID0+IHR5cGVvZiB0aGluZyA9PT0gdHlwZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IHtpc0FycmF5fSA9IEFycmF5O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVW5kZWZpbmVkID0gdHlwZU9mVGVzdCgndW5kZWZpbmVkJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCdWZmZXIodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbCkgJiYgdmFsLmNvbnN0cnVjdG9yICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwuY29uc3RydWN0b3IpXG4gICAgJiYgaXNGdW5jdGlvbih2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIpICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgbGV0IHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAoaXNBcnJheUJ1ZmZlcih2YWwuYnVmZmVyKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmluZ1xuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmluZyA9IHR5cGVPZlRlc3QoJ3N0cmluZycpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRnVuY3Rpb24gPSB0eXBlT2ZUZXN0KCdmdW5jdGlvbicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzTnVtYmVyID0gdHlwZU9mVGVzdCgnbnVtYmVyJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQm9vbGVhblxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQm9vbGVhbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQm9vbGVhbiA9IHRoaW5nID0+IHRoaW5nID09PSB0cnVlIHx8IHRoaW5nID09PSBmYWxzZTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1BsYWluT2JqZWN0ID0gKHZhbCkgPT4ge1xuICBpZiAoa2luZE9mKHZhbCkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgcHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIChwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90b3R5cGUpID09PSBudWxsKSAmJiAhKFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWwpICYmICEoU3ltYm9sLml0ZXJhdG9yIGluIHZhbCk7XG59O1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgYXJndW1lbnRzW2ldICYmIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXNdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmNvbnN0IGV4dGVuZCA9IChhLCBiLCB0aGlzQXJnLCB7YWxsT3duS2V5c309IHt9KSA9PiB7XG4gIGZvckVhY2goYiwgKHZhbCwga2V5KSA9PiB7XG4gICAgaWYgKHRoaXNBcmcgJiYgaXNGdW5jdGlvbih2YWwpKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0sIHthbGxPd25LZXlzfSk7XG4gIHJldHVybiBhO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn07XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbnxCb29sZWFufSBbZmlsdGVyXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Byb3BGaWx0ZXJdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuY29uc3QgdG9GbGF0T2JqZWN0ID0gKHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyLCBwcm9wRmlsdGVyKSA9PiB7XG4gIGxldCBwcm9wcztcbiAgbGV0IGk7XG4gIGxldCBwcm9wO1xuICBjb25zdCBtZXJnZWQgPSB7fTtcblxuICBkZXN0T2JqID0gZGVzdE9iaiB8fCB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIGlmIChzb3VyY2VPYmogPT0gbnVsbCkgcmV0dXJuIGRlc3RPYmo7XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoKCFwcm9wRmlsdGVyIHx8IHByb3BGaWx0ZXIocHJvcCwgc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBmaWx0ZXIgIT09IGZhbHNlICYmIGdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59O1xuXG4vKipcbiAqIENoZWNraW5nIGlmIHRoZSBVaW50OEFycmF5IGV4aXN0cyBhbmQgaWYgaXQgZG9lcywgaXQgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgY2hlY2tzIGlmIHRoZVxuICogdGhpbmcgcGFzc2VkIGluIGlzIGFuIGluc3RhbmNlIG9mIFVpbnQ4QXJyYXlcbiAqXG4gKiBAcGFyYW0ge1R5cGVkQXJyYXl9XG4gKlxuICogQHJldHVybnMge0FycmF5fVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuY29uc3QgaXNUeXBlZEFycmF5ID0gKFR5cGVkQXJyYXkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gdGhpbmcgPT4ge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBnZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbi8qKlxuICogRm9yIGVhY2ggZW50cnkgaW4gdGhlIG9iamVjdCwgY2FsbCB0aGUgZnVuY3Rpb24gd2l0aCB0aGUga2V5IGFuZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBlbnRyeS5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgZm9yRWFjaEVudHJ5ID0gKG9iaiwgZm4pID0+IHtcbiAgY29uc3QgZ2VuZXJhdG9yID0gb2JqICYmIG9ialtTeW1ib2wuaXRlcmF0b3JdO1xuXG4gIGNvbnN0IGl0ZXJhdG9yID0gZ2VuZXJhdG9yLmNhbGwob2JqKTtcblxuICBsZXQgcmVzdWx0O1xuXG4gIHdoaWxlICgocmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpKSAmJiAhcmVzdWx0LmRvbmUpIHtcbiAgICBjb25zdCBwYWlyID0gcmVzdWx0LnZhbHVlO1xuICAgIGZuLmNhbGwob2JqLCBwYWlyWzBdLCBwYWlyWzFdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59O1xuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn07XG5cbi8qKlxuICogTWFrZXMgYWxsIG1ldGhvZHMgcmVhZC1vbmx5XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblxuY29uc3QgZnJlZXplTWV0aG9kcyA9IChvYmopID0+IHtcbiAgcmVkdWNlRGVzY3JpcHRvcnMob2JqLCAoZGVzY3JpcHRvciwgbmFtZSkgPT4ge1xuICAgIC8vIHNraXAgcmVzdHJpY3RlZCBwcm9wcyBpbiBzdHJpY3QgbW9kZVxuICAgIGlmIChpc0Z1bmN0aW9uKG9iaikgJiYgWydhcmd1bWVudHMnLCAnY2FsbGVyJywgJ2NhbGxlZSddLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSBvYmpbbmFtZV07XG5cbiAgICBpZiAoIWlzRnVuY3Rpb24odmFsdWUpKSByZXR1cm47XG5cbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBmYWxzZTtcblxuICAgIGlmICgnd3JpdGFibGUnIGluIGRlc2NyaXB0b3IpIHtcbiAgICAgIGRlc2NyaXB0b3Iud3JpdGFibGUgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWRlc2NyaXB0b3Iuc2V0KSB7XG4gICAgICBkZXNjcmlwdG9yLnNldCA9ICgpID0+IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NhbiBub3QgcmV3cml0ZSByZWFkLW9ubHkgbWV0aG9kIFxcJycgKyBuYW1lICsgJ1xcJycpO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3QgdG9PYmplY3RTZXQgPSAoYXJyYXlPclN0cmluZywgZGVsaW1pdGVyKSA9PiB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuXG4gIGNvbnN0IGRlZmluZSA9IChhcnIpID0+IHtcbiAgICBhcnIuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICBvYmpbdmFsdWVdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5jb25zdCB0b0Zpbml0ZU51bWJlciA9ICh2YWx1ZSwgZGVmYXVsdFZhbHVlKSA9PiB7XG4gIHZhbHVlID0gK3ZhbHVlO1xuICByZXR1cm4gTnVtYmVyLmlzRmluaXRlKHZhbHVlKSA/IHZhbHVlIDogZGVmYXVsdFZhbHVlO1xufTtcblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuXG5jb25zdCBESUdJVCA9ICcwMTIzNDU2Nzg5JztcblxuY29uc3QgQUxQSEFCRVQgPSB7XG4gIERJR0lULFxuICBBTFBIQSxcbiAgQUxQSEFfRElHSVQ6IEFMUEhBICsgQUxQSEEudG9VcHBlckNhc2UoKSArIERJR0lUXG59O1xuXG5jb25zdCBnZW5lcmF0ZVN0cmluZyA9IChzaXplID0gMTYsIGFscGhhYmV0ID0gQUxQSEFCRVQuQUxQSEFfRElHSVQpID0+IHtcbiAgbGV0IHN0ciA9ICcnO1xuICBjb25zdCB7bGVuZ3RofSA9IGFscGhhYmV0O1xuICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgc3RyICs9IGFscGhhYmV0W01hdGgucmFuZG9tKCkgKiBsZW5ndGh8MF07XG4gIH1cblxuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBJZiB0aGUgdGhpbmcgaXMgYSBGb3JtRGF0YSBvYmplY3QsIHJldHVybiB0cnVlLCBvdGhlcndpc2UgcmV0dXJuIGZhbHNlLlxuICpcbiAqIEBwYXJhbSB7dW5rbm93bn0gdGhpbmcgLSBUaGUgdGhpbmcgdG8gY2hlY2suXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3BlY0NvbXBsaWFudEZvcm0odGhpbmcpIHtcbiAgcmV0dXJuICEhKHRoaW5nICYmIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiB0aGluZ1tTeW1ib2wudG9TdHJpbmdUYWddID09PSAnRm9ybURhdGEnICYmIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0pO1xufVxuXG5jb25zdCB0b0pTT05PYmplY3QgPSAob2JqKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEFycmF5KDEwKTtcblxuICBjb25zdCB2aXNpdCA9IChzb3VyY2UsIGkpID0+IHtcblxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihzb3VyY2UpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZighKCd0b0pTT04nIGluIHNvdXJjZSkpIHtcbiAgICAgICAgc3RhY2tbaV0gPSBzb3VyY2U7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDoge307XG5cbiAgICAgICAgZm9yRWFjaChzb3VyY2UsICh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gdmlzaXQodmFsdWUsIGkgKyAxKTtcbiAgICAgICAgICAhaXNVbmRlZmluZWQocmVkdWNlZFZhbHVlKSAmJiAodGFyZ2V0W2tleV0gPSByZWR1Y2VkVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzdGFja1tpXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3VyY2U7XG4gIH07XG5cbiAgcmV0dXJuIHZpc2l0KG9iaiwgMCk7XG59O1xuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbnZhciB1dGlscyQxID0ge1xuICBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nLFxuICBpc051bWJlcixcbiAgaXNCb29sZWFuLFxuICBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQsXG4gIGlzRGF0ZSxcbiAgaXNGaWxlLFxuICBpc0Jsb2IsXG4gIGlzUmVnRXhwLFxuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdCxcbiAgZm9yRWFjaCxcbiAgbWVyZ2UsXG4gIGV4dGVuZCxcbiAgdHJpbSxcbiAgc3RyaXBCT00sXG4gIGluaGVyaXRzLFxuICB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZixcbiAga2luZE9mVGVzdCxcbiAgZW5kc1dpdGgsXG4gIHRvQXJyYXksXG4gIGZvckVhY2hFbnRyeSxcbiAgbWF0Y2hBbGwsXG4gIGlzSFRNTEZvcm0sXG4gIGhhc093blByb3BlcnR5LFxuICBoYXNPd25Qcm9wOiBoYXNPd25Qcm9wZXJ0eSwgLy8gYW4gYWxpYXMgdG8gYXZvaWQgRVNMaW50IG5vLXByb3RvdHlwZS1idWlsdGlucyBkZXRlY3Rpb25cbiAgcmVkdWNlRGVzY3JpcHRvcnMsXG4gIGZyZWV6ZU1ldGhvZHMsXG4gIHRvT2JqZWN0U2V0LFxuICB0b0NhbWVsQ2FzZSxcbiAgbm9vcCxcbiAgdG9GaW5pdGVOdW1iZXIsXG4gIGZpbmRLZXksXG4gIGdsb2JhbDogX2dsb2JhbCxcbiAgaXNDb250ZXh0RGVmaW5lZCxcbiAgQUxQSEFCRVQsXG4gIGdlbmVyYXRlU3RyaW5nLFxuICBpc1NwZWNDb21wbGlhbnRGb3JtLFxuICB0b0pTT05PYmplY3QsXG4gIGlzQXN5bmNGbixcbiAgaXNUaGVuYWJsZVxufTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMkMS5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB1dGlscyQxLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlJDEgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlJDEsICdpc0F4aW9zRXJyb3InLCB7dmFsdWU6IHRydWV9KTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbkF4aW9zRXJyb3IuZnJvbSA9IChlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpID0+IHtcbiAgY29uc3QgYXhpb3NFcnJvciA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlJDEpO1xuXG4gIHV0aWxzJDEudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3RcbnZhciBodHRwQWRhcHRlciA9IG51bGw7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMkMS5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscyQxLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscyQxLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMkMS5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzJDEudG9GbGF0T2JqZWN0KHV0aWxzJDEsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscyQxLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoRm9ybURhdGEpKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG9wdGlvbnMgPSB1dGlscyQxLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMkMS5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzJDEuaXNTcGVjQ29tcGxpYW50Rm9ybShmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscyQxLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMkMS5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMkMS5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMkMS5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscyQxLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscyQxLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMkMS5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMkMS5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscyQxLmVuZHNXaXRoKGtleSwgJ1tdJykpICYmIChhcnIgPSB1dGlscyQxLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscyQxLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMkMS5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcblxuICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhdGguam9pbignLicpKTtcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHV0aWxzJDEuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzJDEuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMkMS5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzJDEuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlJDEoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUkMSk7XG4gIH0gOiBlbmNvZGUkMTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMkMS5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMkMS5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtcyQxID0gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgPyBVUkxTZWFyY2hQYXJhbXMgOiBBeGlvc1VSTFNlYXJjaFBhcmFtcztcblxudmFyIEZvcm1EYXRhJDEgPSB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuXG52YXIgQmxvYiQxID0gdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGw7XG5cbnZhciBwbGF0Zm9ybSQxID0ge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyQxLFxuICAgIEZvcm1EYXRhOiBGb3JtRGF0YSQxLFxuICAgIEJsb2I6IEJsb2IkMVxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcblxuY29uc3QgaGFzQnJvd3NlckVudiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJFbnYgPSAoXG4gIChwcm9kdWN0KSA9PiB7XG4gICAgcmV0dXJuIGhhc0Jyb3dzZXJFbnYgJiYgWydSZWFjdE5hdGl2ZScsICdOYXRpdmVTY3JpcHQnLCAnTlMnXS5pbmRleE9mKHByb2R1Y3QpIDwgMFxuICB9KSh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIHdlYldvcmtlciBlbnZpcm9ubWVudFxuICpcbiAqIEFsdGhvdWdoIHRoZSBgaXNTdGFuZGFyZEJyb3dzZXJFbnZgIG1ldGhvZCBpbmRpY2F0ZXMgdGhhdFxuICogYGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyYCwgdGhlIFdlYldvcmtlciB3aWxsIHN0aWxsIGJlXG4gKiBmaWx0ZXJlZCBvdXQgZHVlIHRvIGl0cyBqdWRnbWVudCBzdGFuZGFyZFxuICogYHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdgLlxuICogVGhpcyBsZWFkcyB0byBhIHByb2JsZW0gd2hlbiBheGlvcyBwb3N0IGBGb3JtRGF0YWAgaW4gd2ViV29ya2VyXG4gKi9cbmNvbnN0IGhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiA9ICgoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSAmJlxuICAgIHR5cGVvZiBzZWxmLmltcG9ydFNjcmlwdHMgPT09ICdmdW5jdGlvbidcbiAgKTtcbn0pKCk7XG5cbnZhciB1dGlscyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgX19wcm90b19fOiBudWxsLFxuICBoYXNCcm93c2VyRW52OiBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJFbnY6IGhhc1N0YW5kYXJkQnJvd3NlckVudixcbiAgaGFzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52OiBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnZcbn0pO1xuXG52YXIgcGxhdGZvcm0gPSB7XG4gIC4uLnV0aWxzLFxuICAuLi5wbGF0Zm9ybSQxXG59O1xuXG5mdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMkMS5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoa2V5LCB2YWx1ZS50b1N0cmluZygnYmFzZTY0JykpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoZWxwZXJzLmRlZmF1bHRWaXNpdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LCBvcHRpb25zKSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzJDEubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcblxuICAgIGlmIChuYW1lID09PSAnX19wcm90b19fJykgcmV0dXJuIHRydWU7XG5cbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0KSA/IHRhcmdldC5sZW5ndGggOiBuYW1lO1xuXG4gICAgaWYgKGlzTGFzdCkge1xuICAgICAgaWYgKHV0aWxzJDEuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMkMS5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscyQxLmlzQXJyYXkodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gYXJyYXlUb09iamVjdCh0YXJnZXRbbmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICB9XG5cbiAgaWYgKHV0aWxzJDEuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMkMS5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscyQxLmZvckVhY2hFbnRyeShmb3JtRGF0YSwgKG5hbWUsIHZhbHVlKSA9PiB7XG4gICAgICBidWlsZFBhdGgocGFyc2VQcm9wUGF0aChuYW1lKSwgdmFsdWUsIG9iaiwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscyQxLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzJDEuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzJDEuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMkMS5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzJDEuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscyQxLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscyQxLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscyQxLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscyQxLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChkYXRhICYmIHV0aWxzJDEuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxuICAgIH1cbiAgfVxufTtcblxudXRpbHMkMS5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudmFyIGRlZmF1bHRzJDEgPSBkZWZhdWx0cztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscyQxLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbnZhciBwYXJzZUhlYWRlcnMgPSByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMkMS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzJDEuaXNGdW5jdGlvbihmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci5jYWxsKHRoaXMsIHZhbHVlLCBoZWFkZXIpO1xuICB9XG5cbiAgaWYgKGlzSGVhZGVyTmFtZUZpbHRlcikge1xuICAgIHZhbHVlID0gaGVhZGVyO1xuICB9XG5cbiAgaWYgKCF1dGlscyQxLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscyQxLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscyQxLmlzUmVnRXhwKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLnRlc3QodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlci50cmltKClcbiAgICAudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8oW2EtelxcZF0pKFxcdyopL2csICh3LCBjaGFyLCBzdHIpID0+IHtcbiAgICAgIHJldHVybiBjaGFyLnRvVXBwZXJDYXNlKCkgKyBzdHI7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkQWNjZXNzb3JzKG9iaiwgaGVhZGVyKSB7XG4gIGNvbnN0IGFjY2Vzc29yTmFtZSA9IHV0aWxzJDEudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMkMS5mb3JFYWNoKGhlYWRlcnMsIChfdmFsdWUsIF9oZWFkZXIpID0+IHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSk7XG5cbiAgICBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKTtcbiAgICB9IGVsc2UgaWYodXRpbHMkMS5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMkMS5pc0Z1bmN0aW9uKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGwodGhpcywgdmFsdWUsIGtleSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMkMS5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMkMS5maW5kS2V5KHNlbGYsIF9oZWFkZXIpO1xuXG4gICAgICAgIGlmIChrZXkgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUoc2VsZiwgc2VsZltrZXldLCBrZXksIG1hdGNoZXIpKSkge1xuICAgICAgICAgIGRlbGV0ZSBzZWxmW2tleV07XG5cbiAgICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscyQxLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscyQxLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzJDEuZmluZEtleShoZWFkZXJzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIHNlbGZba2V5XSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBub3JtYWxpemVkID0gZm9ybWF0ID8gZm9ybWF0SGVhZGVyKGhlYWRlcikgOiBTdHJpbmcoaGVhZGVyKS50cmltKCk7XG5cbiAgICAgIGlmIChub3JtYWxpemVkICE9PSBoZWFkZXIpIHtcbiAgICAgICAgZGVsZXRlIHNlbGZbaGVhZGVyXTtcbiAgICAgIH1cblxuICAgICAgc2VsZltub3JtYWxpemVkXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcblxuICAgICAgaGVhZGVyc1tub3JtYWxpemVkXSA9IHRydWU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNvbmNhdCguLi50YXJnZXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY29uY2F0KHRoaXMsIC4uLnRhcmdldHMpO1xuICB9XG5cbiAgdG9KU09OKGFzU3RyaW5ncykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICB1dGlscyQxLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscyQxLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscyQxLmlzQXJyYXkoaGVhZGVyKSA/IGhlYWRlci5mb3JFYWNoKGRlZmluZUFjY2Vzc29yKSA6IGRlZmluZUFjY2Vzc29yKGhlYWRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5BeGlvc0hlYWRlcnMuYWNjZXNzb3IoWydDb250ZW50LVR5cGUnLCAnQ29udGVudC1MZW5ndGgnLCAnQWNjZXB0JywgJ0FjY2VwdC1FbmNvZGluZycsICdVc2VyLUFnZW50JywgJ0F1dGhvcml6YXRpb24nXSk7XG5cbi8vIHJlc2VydmVkIG5hbWVzIGhvdGZpeFxudXRpbHMkMS5yZWR1Y2VEZXNjcmlwdG9ycyhBeGlvc0hlYWRlcnMucHJvdG90eXBlLCAoe3ZhbHVlfSwga2V5KSA9PiB7XG4gIGxldCBtYXBwZWQgPSBrZXlbMF0udG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTsgLy8gbWFwIGBzZXRgID0+IGBTZXRgXG4gIHJldHVybiB7XG4gICAgZ2V0OiAoKSA9PiB2YWx1ZSxcbiAgICBzZXQoaGVhZGVyVmFsdWUpIHtcbiAgICAgIHRoaXNbbWFwcGVkXSA9IGhlYWRlclZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnV0aWxzJDEuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG52YXIgQXhpb3NIZWFkZXJzJDEgPSBBeGlvc0hlYWRlcnM7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHMkMTtcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29udGV4dC5oZWFkZXJzKTtcbiAgbGV0IGRhdGEgPSBjb250ZXh0LmRhdGE7XG5cbiAgdXRpbHMkMS5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzJDEuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuXG52YXIgY29va2llcyA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzJDEuaXNOdW1iZXIoZXhwaXJlcykgJiYgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuXG4gICAgICB1dGlscyQxLmlzU3RyaW5nKHBhdGgpICYmIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcblxuICAgICAgdXRpbHMkMS5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkK1xcLS5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBVUkxcbiAqL1xuZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLz9cXC8kLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5mdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cblxudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXRzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIGxldCBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICBjb25zdCBwYXJzZWQgPSAodXRpbHMkMS5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG5cbmZ1bmN0aW9uIHBhcnNlUHJvdG9jb2wodXJsKSB7XG4gIGNvbnN0IG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBkYXRhIG1heFJhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlc0NvdW50PSAxMF1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbbWluPSAxMDAwXVxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBzcGVlZG9tZXRlcihzYW1wbGVzQ291bnQsIG1pbikge1xuICBzYW1wbGVzQ291bnQgPSBzYW1wbGVzQ291bnQgfHwgMTA7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGNvbnN0IHRpbWVzdGFtcHMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgbGV0IGhlYWQgPSAwO1xuICBsZXQgdGFpbCA9IDA7XG4gIGxldCBmaXJzdFNhbXBsZVRTO1xuXG4gIG1pbiA9IG1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogMTAwMDtcblxuICByZXR1cm4gZnVuY3Rpb24gcHVzaChjaHVua0xlbmd0aCkge1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cbiAgICBjb25zdCBzdGFydGVkQXQgPSB0aW1lc3RhbXBzW3RhaWxdO1xuXG4gICAgaWYgKCFmaXJzdFNhbXBsZVRTKSB7XG4gICAgICBmaXJzdFNhbXBsZVRTID0gbm93O1xuICAgIH1cblxuICAgIGJ5dGVzW2hlYWRdID0gY2h1bmtMZW5ndGg7XG4gICAgdGltZXN0YW1wc1toZWFkXSA9IG5vdztcblxuICAgIGxldCBpID0gdGFpbDtcbiAgICBsZXQgYnl0ZXNDb3VudCA9IDA7XG5cbiAgICB3aGlsZSAoaSAhPT0gaGVhZCkge1xuICAgICAgYnl0ZXNDb3VudCArPSBieXRlc1tpKytdO1xuICAgICAgaSA9IGkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaGVhZCA9IChoZWFkICsgMSkgJSBzYW1wbGVzQ291bnQ7XG5cbiAgICBpZiAoaGVhZCA9PT0gdGFpbCkge1xuICAgICAgdGFpbCA9ICh0YWlsICsgMSkgJSBzYW1wbGVzQ291bnQ7XG4gICAgfVxuXG4gICAgaWYgKG5vdyAtIGZpcnN0U2FtcGxlVFMgPCBtaW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwYXNzZWQgPSBzdGFydGVkQXQgJiYgbm93IC0gc3RhcnRlZEF0O1xuXG4gICAgcmV0dXJuIHBhc3NlZCA/IE1hdGgucm91bmQoYnl0ZXNDb3VudCAqIDEwMDAgLyBwYXNzZWQpIDogdW5kZWZpbmVkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9ncmVzc0V2ZW50UmVkdWNlcihsaXN0ZW5lciwgaXNEb3dubG9hZFN0cmVhbSkge1xuICBsZXQgYnl0ZXNOb3RpZmllZCA9IDA7XG4gIGNvbnN0IF9zcGVlZG9tZXRlciA9IHNwZWVkb21ldGVyKDUwLCAyNTApO1xuXG4gIHJldHVybiBlID0+IHtcbiAgICBjb25zdCBsb2FkZWQgPSBlLmxvYWRlZDtcbiAgICBjb25zdCB0b3RhbCA9IGUubGVuZ3RoQ29tcHV0YWJsZSA/IGUudG90YWwgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJvZ3Jlc3NCeXRlcyA9IGxvYWRlZCAtIGJ5dGVzTm90aWZpZWQ7XG4gICAgY29uc3QgcmF0ZSA9IF9zcGVlZG9tZXRlcihwcm9ncmVzc0J5dGVzKTtcbiAgICBjb25zdCBpblJhbmdlID0gbG9hZGVkIDw9IHRvdGFsO1xuXG4gICAgYnl0ZXNOb3RpZmllZCA9IGxvYWRlZDtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICBsb2FkZWQsXG4gICAgICB0b3RhbCxcbiAgICAgIHByb2dyZXNzOiB0b3RhbCA/IChsb2FkZWQgLyB0b3RhbCkgOiB1bmRlZmluZWQsXG4gICAgICBieXRlczogcHJvZ3Jlc3NCeXRlcyxcbiAgICAgIHJhdGU6IHJhdGUgPyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXN0aW1hdGVkOiByYXRlICYmIHRvdGFsICYmIGluUmFuZ2UgPyAodG90YWwgLSBsb2FkZWQpIC8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGV2ZW50OiBlXG4gICAgfTtcblxuICAgIGRhdGFbaXNEb3dubG9hZFN0cmVhbSA/ICdkb3dubG9hZCcgOiAndXBsb2FkJ10gPSB0cnVlO1xuXG4gICAgbGlzdGVuZXIoZGF0YSk7XG4gIH07XG59XG5cbmNvbnN0IGlzWEhSQWRhcHRlclN1cHBvcnRlZCA9IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB4aHJBZGFwdGVyID0gaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGxldCB7cmVzcG9uc2VUeXBlLCB3aXRoWFNSRlRva2VufSA9IGNvbmZpZztcbiAgICBsZXQgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgY29udGVudFR5cGU7XG5cbiAgICBpZiAodXRpbHMkMS5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgaWYgKHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoZmFsc2UpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgICB9IGVsc2UgaWYgKChjb250ZW50VHlwZSA9IHJlcXVlc3RIZWFkZXJzLmdldENvbnRlbnRUeXBlKCkpICE9PSBmYWxzZSkge1xuICAgICAgICAvLyBmaXggc2VtaWNvbG9uIGR1cGxpY2F0aW9uIGlzc3VlIGZvciBSZWFjdE5hdGl2ZSBGb3JtRGF0YSBpbXBsZW1lbnRhdGlvblxuICAgICAgICBjb25zdCBbdHlwZSwgLi4udG9rZW5zXSA9IGNvbnRlbnRUeXBlID8gY29udGVudFR5cGUuc3BsaXQoJzsnKS5tYXAodG9rZW4gPT4gdG9rZW4udHJpbSgpKS5maWx0ZXIoQm9vbGVhbikgOiBbXTtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoW3R5cGUgfHwgJ211bHRpcGFydC9mb3JtLWRhdGEnLCAuLi50b2tlbnNdLmpvaW4oJzsgJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzJDEuaXNGdW5jdGlvbih3aXRoWFNSRlRva2VuKSAmJiAod2l0aFhTUkZUb2tlbiA9IHdpdGhYU1JGVG9rZW4oY29uZmlnKSk7XG5cbiAgICAgIGlmICh3aXRoWFNSRlRva2VuIHx8ICh3aXRoWFNSRlRva2VuICE9PSBmYWxzZSAmJiBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSkge1xuICAgICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgICAgY29uc3QgeHNyZlZhbHVlID0gY29uZmlnLnhzcmZIZWFkZXJOYW1lICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzJDEuZm9yRWFjaChyZXF1ZXN0SGVhZGVycy50b0pTT04oKSwgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMkMS5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufTtcblxuY29uc3Qga25vd25BZGFwdGVycyA9IHtcbiAgaHR0cDogaHR0cEFkYXB0ZXIsXG4gIHhocjogeGhyQWRhcHRlclxufTtcblxudXRpbHMkMS5mb3JFYWNoKGtub3duQWRhcHRlcnMsIChmbiwgdmFsdWUpID0+IHtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ25hbWUnLCB7dmFsdWV9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnYWRhcHRlck5hbWUnLCB7dmFsdWV9KTtcbiAgfVxufSk7XG5cbmNvbnN0IHJlbmRlclJlYXNvbiA9IChyZWFzb24pID0+IGAtICR7cmVhc29ufWA7XG5cbmNvbnN0IGlzUmVzb2x2ZWRIYW5kbGUgPSAoYWRhcHRlcikgPT4gdXRpbHMkMS5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbnZhciBhZGFwdGVycyA9IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscyQxLmlzQXJyYXkoYWRhcHRlcnMpID8gYWRhcHRlcnMgOiBbYWRhcHRlcnNdO1xuXG4gICAgY29uc3Qge2xlbmd0aH0gPSBhZGFwdGVycztcbiAgICBsZXQgbmFtZU9yQWRhcHRlcjtcbiAgICBsZXQgYWRhcHRlcjtcblxuICAgIGNvbnN0IHJlamVjdGVkUmVhc29ucyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgbGV0IGlkO1xuXG4gICAgICBhZGFwdGVyID0gbmFtZU9yQWRhcHRlcjtcblxuICAgICAgaWYgKCFpc1Jlc29sdmVkSGFuZGxlKG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGFkYXB0ZXIgPSBrbm93bkFkYXB0ZXJzWyhpZCA9IFN0cmluZyhuYW1lT3JBZGFwdGVyKSkudG9Mb3dlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKGBVbmtub3duIGFkYXB0ZXIgJyR7aWR9J2ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGFwdGVyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZWplY3RlZFJlYXNvbnNbaWQgfHwgJyMnICsgaV0gPSBhZGFwdGVyO1xuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuXG4gICAgICBjb25zdCByZWFzb25zID0gT2JqZWN0LmVudHJpZXMocmVqZWN0ZWRSZWFzb25zKVxuICAgICAgICAubWFwKChbaWQsIHN0YXRlXSkgPT4gYGFkYXB0ZXIgJHtpZH0gYCArXG4gICAgICAgICAgKHN0YXRlID09PSBmYWxzZSA/ICdpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBlbnZpcm9ubWVudCcgOiAnaXMgbm90IGF2YWlsYWJsZSBpbiB0aGUgYnVpbGQnKVxuICAgICAgICApO1xuXG4gICAgICBsZXQgcyA9IGxlbmd0aCA/XG4gICAgICAgIChyZWFzb25zLmxlbmd0aCA+IDEgPyAnc2luY2UgOlxcbicgKyByZWFzb25zLm1hcChyZW5kZXJSZWFzb24pLmpvaW4oJ1xcbicpIDogJyAnICsgcmVuZGVyUmVhc29uKHJlYXNvbnNbMF0pKSA6XG4gICAgICAgICdhcyBubyBhZGFwdGVyIHNwZWNpZmllZCc7XG5cbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBgVGhlcmUgaXMgbm8gc3VpdGFibGUgYWRhcHRlciB0byBkaXNwYXRjaCB0aGUgcmVxdWVzdCBgICsgcyxcbiAgICAgICAgJ0VSUl9OT1RfU1VQUE9SVCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkYXB0ZXI7XG4gIH0sXG4gIGFkYXB0ZXJzOiBrbm93bkFkYXB0ZXJzXG59O1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzJDEuYWRhcHRlcik7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2UsXG4gICAgICByZXNwb25zZVxuICAgICk7XG5cbiAgICByZXNwb25zZS5oZWFkZXJzID0gQXhpb3NIZWFkZXJzJDEuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMkMS5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG5cbmNvbnN0IGhlYWRlcnNUb09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgaW5zdGFuY2VvZiBBeGlvc0hlYWRlcnMkMSA/IHsgLi4udGhpbmcgfSA6IHRoaW5nO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICBjb25zdCBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSwgY2FzZWxlc3MpIHtcbiAgICBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMkMS5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscyQxLm1lcmdlLmNhbGwoe2Nhc2VsZXNzfSwgdGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMkMS5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscyQxLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMkMS5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKGEsIGIsIGNhc2VsZXNzKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzJDEuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscyQxLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscyQxLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscyQxLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufVxuXG5jb25zdCBWRVJTSU9OID0gXCIxLjYuOFwiO1xuXG5jb25zdCB2YWxpZGF0b3JzJDEgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKCh0eXBlLCBpKSA9PiB7XG4gIHZhbGlkYXRvcnMkMVt0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzJDEudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsaWRhdG9yID0ge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzJDFcbn07XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9yZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIGxldCBkdW1teTtcblxuICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA/IEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGR1bW15ID0ge30pIDogKGR1bW15ID0gbmV3IEVycm9yKCkpO1xuXG4gICAgICAgIC8vIHNsaWNlIG9mZiB0aGUgRXJyb3I6IC4uLiBsaW5lXG4gICAgICAgIGNvbnN0IHN0YWNrID0gZHVtbXkuc3RhY2sgPyBkdW1teS5zdGFjay5yZXBsYWNlKC9eLitcXG4vLCAnJykgOiAnJztcblxuICAgICAgICBpZiAoIWVyci5zdGFjaykge1xuICAgICAgICAgIGVyci5zdGFjayA9IHN0YWNrO1xuICAgICAgICAgIC8vIG1hdGNoIHdpdGhvdXQgdGhlIDIgdG9wIHN0YWNrIGxpbmVzXG4gICAgICAgIH0gZWxzZSBpZiAoc3RhY2sgJiYgIVN0cmluZyhlcnIuc3RhY2spLmVuZHNXaXRoKHN0YWNrLnJlcGxhY2UoL14uK1xcbi4rXFxuLywgJycpKSkge1xuICAgICAgICAgIGVyci5zdGFjayArPSAnXFxuJyArIHN0YWNrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cblxuICBfcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscyQxLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMkMS5tZXJnZShcbiAgICAgIGhlYWRlcnMuY29tbW9uLFxuICAgICAgaGVhZGVyc1tjb25maWcubWV0aG9kXVxuICAgICk7XG5cbiAgICBoZWFkZXJzICYmIHV0aWxzJDEuZm9yRWFjaChcbiAgICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgICAgKG1ldGhvZCkgPT4ge1xuICAgICAgICBkZWxldGUgaGVhZGVyc1ttZXRob2RdO1xuICAgICAgfVxuICAgICk7XG5cbiAgICBjb25maWcuaGVhZGVycyA9IEF4aW9zSGVhZGVycyQxLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMkMS5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzJDEuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmwsXG4gICAgICAgIGRhdGFcbiAgICAgIH0pKTtcbiAgICB9O1xuICB9XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBnZW5lcmF0ZUhUVFBNZXRob2QoKTtcblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kICsgJ0Zvcm0nXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCh0cnVlKTtcbn0pO1xuXG52YXIgQXhpb3MkMSA9IEF4aW9zO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbnZhciBDYW5jZWxUb2tlbiQxID0gQ2FuY2VsVG9rZW47XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMkMS5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufVxuXG5jb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxudmFyIEh0dHBTdGF0dXNDb2RlJDEgPSBIdHRwU3RhdHVzQ29kZTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zJDEoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcyQxLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscyQxLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MkMS5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzJDEuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0LCBudWxsLCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbmNvbnN0IGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMkMSk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcyQxO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbiQxO1xuYXhpb3MuaXNDYW5jZWwgPSBpc0NhbmNlbDtcbmF4aW9zLlZFUlNJT04gPSBWRVJTSU9OO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHRvRm9ybURhdGE7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gQXhpb3NFcnJvcjtcblxuLy8gYWxpYXMgZm9yIENhbmNlbGVkRXJyb3IgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbmF4aW9zLkNhbmNlbCA9IGF4aW9zLkNhbmNlbGVkRXJyb3I7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbmF4aW9zLnNwcmVhZCA9IHNwcmVhZDtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gaXNBeGlvc0Vycm9yO1xuXG4vLyBFeHBvc2UgbWVyZ2VDb25maWdcbmF4aW9zLm1lcmdlQ29uZmlnID0gbWVyZ2VDb25maWc7XG5cbmF4aW9zLkF4aW9zSGVhZGVycyA9IEF4aW9zSGVhZGVycyQxO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMkMS5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlJDE7XG5cbmF4aW9zLmRlZmF1bHQgPSBheGlvcztcblxudmFyIGRzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgemc9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgS2c9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIEdnPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIHdlPSh0LGUpPT4oKT0+KHQmJihlPXQodD0wKSksZSk7dmFyIE09KHQsZSk9PigpPT4oZXx8dCgoZT17ZXhwb3J0czp7fX0pLmV4cG9ydHMsZSksZS5leHBvcnRzKSxRdD0odCxlKT0+e2Zvcih2YXIgciBpbiBlKWRzKHQscix7Z2V0OmVbcl0sZW51bWVyYWJsZTohMH0pO30sUWc9KHQsZSxyLGkpPT57aWYoZSYmdHlwZW9mIGU9PVwib2JqZWN0XCJ8fHR5cGVvZiBlPT1cImZ1bmN0aW9uXCIpZm9yKGxldCBuIG9mIEtnKGUpKSFHZy5jYWxsKHQsbikmJm4hPT1yJiZkcyh0LG4se2dldDooKT0+ZVtuXSxlbnVtZXJhYmxlOiEoaT16ZyhlLG4pKXx8aS5lbnVtZXJhYmxlfSk7cmV0dXJuIHR9O3ZhciBYPXQ9PlFnKGRzKHt9LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQpO3ZhciBCLF89d2UoKCk9PntCPXtkZXZpY2VNZW1vcnk6OCxoYXJkd2FyZUNvbmN1cnJlbmN5OjgsbGFuZ3VhZ2U6XCJlbi1VU1wifTt9KTt2YXIgUD17fTtRdChQLHtfZGVidWdFbmQ6KCk9Pnl1LF9kZWJ1Z1Byb2Nlc3M6KCk9Pmd1LF9ldmVudHM6KCk9Pmt1LF9ldmVudHNDb3VudDooKT0+eHUsX2V4aXRpbmc6KCk9PllsLF9mYXRhbEV4Y2VwdGlvbnM6KCk9PmN1LF9nZXRBY3RpdmVIYW5kbGVzOigpPT5ldSxfZ2V0QWN0aXZlUmVxdWVzdHM6KCk9PlpsLF9raWxsOigpPT5ydSxfbGlua2VkQmluZGluZzooKT0+R2wsX21heExpc3RlbmVyczooKT0+T3UsX3ByZWxvYWRfbW9kdWxlczooKT0+Q3UsX3Jhd0RlYnVnOigpPT56bCxfc3RhcnRQcm9maWxlcklkbGVOb3RpZmllcjooKT0+YnUsX3N0b3BQcm9maWxlcklkbGVOb3RpZmllcjooKT0+d3UsX3RpY2tDYWxsYmFjazooKT0+cHUsYWJvcnQ6KCk9PkV1LGFkZExpc3RlbmVyOigpPT5NdSxhbGxvd2VkTm9kZUVudmlyb25tZW50RmxhZ3M6KCk9Pmx1LGFyY2g6KCk9PnhsLGFyZ3Y6KCk9PlVsLGFyZ3YwOigpPT5SdSxhc3NlcnQ6KCk9PnV1LGJpbmRpbmc6KCk9PkZsLGNoZGlyOigpPT5IbCxjb25maWc6KCk9PkpsLGNwdVVzYWdlOigpPT5GaSxjd2Q6KCk9PiRsLGRlYnVnUG9ydDooKT0+VHUsZGVmYXVsdDooKT0+JHUsZGxvcGVuOigpPT5YbCxkb21haW46KCk9PlFsLGVtaXQ6KCk9PkR1LGVtaXRXYXJuaW5nOigpPT5qbCxlbnY6KCk9PkxsLGV4ZWNBcmd2OigpPT5ObCxleGVjUGF0aDooKT0+SXUsZXhpdDooKT0+b3UsZmVhdHVyZXM6KCk9PmZ1LGhhc1VuY2F1Z2h0RXhjZXB0aW9uQ2FwdHVyZUNhbGxiYWNrOigpPT5kdSxocnRpbWU6KCk9PmppLGtpbGw6KCk9PnN1LGxpc3RlbmVyczooKT0+V3UsbWVtb3J5VXNhZ2U6KCk9Pm51LG1vZHVsZUxvYWRMaXN0OigpPT5LbCxuZXh0VGljazooKT0+UGwsb2ZmOigpPT5VdSxvbjooKT0+YnQsb25jZTooKT0+THUsb3BlblN0ZGluOigpPT5hdSxwaWQ6KCk9PlN1LHBsYXRmb3JtOigpPT5NbCxwcGlkOigpPT5BdSxwcmVwZW5kTGlzdGVuZXI6KCk9Pmp1LHByZXBlbmRPbmNlTGlzdGVuZXI6KCk9PkZ1LHJlYWxseUV4aXQ6KCk9PnR1LHJlbGVhc2U6KCk9PlZsLHJlbW92ZUFsbExpc3RlbmVyczooKT0+cXUscmVtb3ZlTGlzdGVuZXI6KCk9Pk51LHJlc291cmNlVXNhZ2U6KCk9Pml1LHNldFNvdXJjZU1hcHNFbmFibGVkOigpPT5CdSxzZXRVbmNhdWdodEV4Y2VwdGlvbkNhcHR1cmVDYWxsYmFjazooKT0+aHUsc3RkZXJyOigpPT5tdSxzdGRpbjooKT0+dnUsc3Rkb3V0OigpPT5fdSx0aXRsZTooKT0+a2wsdW1hc2s6KCk9PldsLHVwdGltZTooKT0+UHUsdmVyc2lvbjooKT0+cWwsdmVyc2lvbnM6KCk9PkRsfSk7ZnVuY3Rpb24geXModCl7dGhyb3cgbmV3IEVycm9yKFwiTm9kZS5qcyBwcm9jZXNzIFwiK3QrXCIgaXMgbm90IHN1cHBvcnRlZCBieSBKU1BNIGNvcmUgb3V0c2lkZSBvZiBOb2RlLmpzXCIpfWZ1bmN0aW9uIFlnKCl7IXhyfHwhWXR8fCh4cj0hMSxZdC5sZW5ndGg/eXQ9WXQuY29uY2F0KHl0KTpEaT0tMSx5dC5sZW5ndGgmJkJsKCkpO31mdW5jdGlvbiBCbCgpe2lmKCF4cil7dmFyIHQ9c2V0VGltZW91dChZZywwKTt4cj0hMDtmb3IodmFyIGU9eXQubGVuZ3RoO2U7KXtmb3IoWXQ9eXQseXQ9W107KytEaTxlOylZdCYmWXRbRGldLnJ1bigpO0RpPS0xLGU9eXQubGVuZ3RoO31ZdD1udWxsLHhyPSExLGNsZWFyVGltZW91dCh0KTt9fWZ1bmN0aW9uIFBsKHQpe3ZhciBlPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKWVbci0xXT1hcmd1bWVudHNbcl07eXQucHVzaChuZXcgT2wodCxlKSkseXQubGVuZ3RoPT09MSYmIXhyJiZzZXRUaW1lb3V0KEJsLDApO31mdW5jdGlvbiBPbCh0LGUpe3RoaXMuZnVuPXQsdGhpcy5hcnJheT1lO31mdW5jdGlvbiB2ZSgpe31mdW5jdGlvbiBHbCh0KXt5cyhcIl9saW5rZWRCaW5kaW5nXCIpO31mdW5jdGlvbiBYbCh0KXt5cyhcImRsb3BlblwiKTt9ZnVuY3Rpb24gWmwoKXtyZXR1cm4gW119ZnVuY3Rpb24gZXUoKXtyZXR1cm4gW119ZnVuY3Rpb24gdXUodCxlKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoZXx8XCJhc3NlcnRpb24gZXJyb3JcIil9ZnVuY3Rpb24gZHUoKXtyZXR1cm4gITF9ZnVuY3Rpb24gUHUoKXtyZXR1cm4gTXQubm93KCkvMWUzfWZ1bmN0aW9uIGppKHQpe3ZhciBlPU1hdGguZmxvb3IoKERhdGUubm93KCktTXQubm93KCkpKi4wMDEpLHI9TXQubm93KCkqLjAwMSxpPU1hdGguZmxvb3IocikrZSxuPU1hdGguZmxvb3IociUxKjFlOSk7cmV0dXJuIHQmJihpPWktdFswXSxuPW4tdFsxXSxuPDAmJihpLS0sbis9Z3MpKSxbaSxuXX1mdW5jdGlvbiBidCgpe3JldHVybiAkdX1mdW5jdGlvbiBXdSh0KXtyZXR1cm4gW119dmFyIHl0LHhyLFl0LERpLGtsLHhsLE1sLExsLFVsLE5sLHFsLERsLGpsLEZsLFdsLCRsLEhsLFZsLHpsLEtsLFFsLFlsLEpsLHR1LHJ1LEZpLGl1LG51LHN1LG91LGF1LGx1LGZ1LGN1LGh1LHB1LGd1LHl1LGJ1LHd1LF91LG11LHZ1LEV1LFN1LEF1LEl1LFR1LFJ1LEN1LEJ1LE10LHBzLGdzLE91LGt1LHh1LE11LEx1LFV1LE51LHF1LER1LGp1LEZ1LCR1LEh1PXdlKCgpPT57digpO20oKTtfKCk7eXQ9W10seHI9ITEsRGk9LTE7T2wucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSk7fTtrbD1cImJyb3dzZXJcIix4bD1cIng2NFwiLE1sPVwiYnJvd3NlclwiLExsPXtQQVRIOlwiL3Vzci9iaW5cIixMQU5HOkIubGFuZ3VhZ2UrXCIuVVRGLThcIixQV0Q6XCIvXCIsSE9NRTpcIi9ob21lXCIsVE1QOlwiL3RtcFwifSxVbD1bXCIvdXNyL2Jpbi9ub2RlXCJdLE5sPVtdLHFsPVwidjE2LjguMFwiLERsPXt9LGpsPWZ1bmN0aW9uKHQsZSl7Y29uc29sZS53YXJuKChlP2UrXCI6IFwiOlwiXCIpK3QpO30sRmw9ZnVuY3Rpb24odCl7eXMoXCJiaW5kaW5nXCIpO30sV2w9ZnVuY3Rpb24odCl7cmV0dXJuIDB9LCRsPWZ1bmN0aW9uKCl7cmV0dXJuIFwiL1wifSxIbD1mdW5jdGlvbih0KXt9LFZsPXtuYW1lOlwibm9kZVwiLHNvdXJjZVVybDpcIlwiLGhlYWRlcnNVcmw6XCJcIixsaWJVcmw6XCJcIn07emw9dmUsS2w9W107UWw9e30sWWw9ITEsSmw9e307dHU9dmUscnU9dmUsRmk9ZnVuY3Rpb24oKXtyZXR1cm4ge319LGl1PUZpLG51PUZpLHN1PXZlLG91PXZlLGF1PXZlLGx1PXt9O2Z1PXtpbnNwZWN0b3I6ITEsZGVidWc6ITEsdXY6ITEsaXB2NjohMSx0bHNfYWxwbjohMSx0bHNfc25pOiExLHRsc19vY3NwOiExLHRsczohMSxjYWNoZWRfYnVpbHRpbnM6ITB9LGN1PXZlLGh1PXZlO3B1PXZlLGd1PXZlLHl1PXZlLGJ1PXZlLHd1PXZlLF91PXZvaWQgMCxtdT12b2lkIDAsdnU9dm9pZCAwLEV1PXZlLFN1PTIsQXU9MSxJdT1cIi9iaW4vdXNyL25vZGVcIixUdT05MjI5LFJ1PVwibm9kZVwiLEN1PVtdLEJ1PXZlLE10PXtub3c6dHlwZW9mIHBlcmZvcm1hbmNlPFwidVwiP3BlcmZvcm1hbmNlLm5vdy5iaW5kKHBlcmZvcm1hbmNlKTp2b2lkIDAsdGltaW5nOnR5cGVvZiBwZXJmb3JtYW5jZTxcInVcIj9wZXJmb3JtYW5jZS50aW1pbmc6dm9pZCAwfTtNdC5ub3c9PT12b2lkIDAmJihwcz1EYXRlLm5vdygpLE10LnRpbWluZyYmTXQudGltaW5nLm5hdmlnYXRpb25TdGFydCYmKHBzPU10LnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQpLE10Lm5vdz0oKT0+RGF0ZS5ub3coKS1wcyk7Z3M9MWU5O2ppLmJpZ2ludD1mdW5jdGlvbih0KXt2YXIgZT1qaSh0KTtyZXR1cm4gdHlwZW9mIEJpZ0ludD5cInVcIj9lWzBdKmdzK2VbMV06QmlnSW50KGVbMF0qZ3MpK0JpZ0ludChlWzFdKX07T3U9MTAsa3U9e30seHU9MDtNdT1idCxMdT1idCxVdT1idCxOdT1idCxxdT1idCxEdT12ZSxqdT1idCxGdT1idDskdT17dmVyc2lvbjpxbCx2ZXJzaW9uczpEbCxhcmNoOnhsLHBsYXRmb3JtOk1sLHJlbGVhc2U6VmwsX3Jhd0RlYnVnOnpsLG1vZHVsZUxvYWRMaXN0OktsLGJpbmRpbmc6RmwsX2xpbmtlZEJpbmRpbmc6R2wsX2V2ZW50czprdSxfZXZlbnRzQ291bnQ6eHUsX21heExpc3RlbmVyczpPdSxvbjpidCxhZGRMaXN0ZW5lcjpNdSxvbmNlOkx1LG9mZjpVdSxyZW1vdmVMaXN0ZW5lcjpOdSxyZW1vdmVBbGxMaXN0ZW5lcnM6cXUsZW1pdDpEdSxwcmVwZW5kTGlzdGVuZXI6anUscHJlcGVuZE9uY2VMaXN0ZW5lcjpGdSxsaXN0ZW5lcnM6V3UsZG9tYWluOlFsLF9leGl0aW5nOllsLGNvbmZpZzpKbCxkbG9wZW46WGwsdXB0aW1lOlB1LF9nZXRBY3RpdmVSZXF1ZXN0czpabCxfZ2V0QWN0aXZlSGFuZGxlczpldSxyZWFsbHlFeGl0OnR1LF9raWxsOnJ1LGNwdVVzYWdlOkZpLHJlc291cmNlVXNhZ2U6aXUsbWVtb3J5VXNhZ2U6bnUsa2lsbDpzdSxleGl0Om91LG9wZW5TdGRpbjphdSxhbGxvd2VkTm9kZUVudmlyb25tZW50RmxhZ3M6bHUsYXNzZXJ0OnV1LGZlYXR1cmVzOmZ1LF9mYXRhbEV4Y2VwdGlvbnM6Y3Usc2V0VW5jYXVnaHRFeGNlcHRpb25DYXB0dXJlQ2FsbGJhY2s6aHUsaGFzVW5jYXVnaHRFeGNlcHRpb25DYXB0dXJlQ2FsbGJhY2s6ZHUsZW1pdFdhcm5pbmc6amwsbmV4dFRpY2s6UGwsX3RpY2tDYWxsYmFjazpwdSxfZGVidWdQcm9jZXNzOmd1LF9kZWJ1Z0VuZDp5dSxfc3RhcnRQcm9maWxlcklkbGVOb3RpZmllcjpidSxfc3RvcFByb2ZpbGVySWRsZU5vdGlmaWVyOnd1LHN0ZG91dDpfdSxzdGRpbjp2dSxzdGRlcnI6bXUsYWJvcnQ6RXUsdW1hc2s6V2wsY2hkaXI6SGwsY3dkOiRsLGVudjpMbCx0aXRsZTprbCxhcmd2OlVsLGV4ZWNBcmd2Ok5sLHBpZDpTdSxwcGlkOkF1LGV4ZWNQYXRoOkl1LGRlYnVnUG9ydDpUdSxocnRpbWU6amksYXJndjA6UnUsX3ByZWxvYWRfbW9kdWxlczpDdSxzZXRTb3VyY2VNYXBzRW5hYmxlZDpCdX07fSk7dmFyIG09d2UoKCk9PntIdSgpO30pO3ZhciBfZT17fTtRdChfZSx7QnVmZmVyOigpPT54LElOU1BFQ1RfTUFYX0JZVEVTOigpPT5leSxkZWZhdWx0OigpPT5MdCxrTWF4TGVuZ3RoOigpPT50eX0pO2Z1bmN0aW9uIEpnKCl7aWYoVnUpcmV0dXJuIHVpO1Z1PSEwLHVpLmJ5dGVMZW5ndGg9YSx1aS50b0J5dGVBcnJheT1jLHVpLmZyb21CeXRlQXJyYXk9Zztmb3IodmFyIHQ9W10sZT1bXSxyPXR5cGVvZiBVaW50OEFycmF5PFwidVwiP1VpbnQ4QXJyYXk6QXJyYXksaT1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIixuPTAsbz1pLmxlbmd0aDtuPG87KytuKXRbbl09aVtuXSxlW2kuY2hhckNvZGVBdChuKV09bjtlW1wiLVwiLmNoYXJDb2RlQXQoMCldPTYyLGVbXCJfXCIuY2hhckNvZGVBdCgwKV09NjM7ZnVuY3Rpb24gcyh5KXt2YXIgdz15Lmxlbmd0aDtpZih3JTQ+MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0XCIpO3ZhciBFPXkuaW5kZXhPZihcIj1cIik7RT09PS0xJiYoRT13KTt2YXIgUz1FPT09dz8wOjQtRSU0O3JldHVybiBbRSxTXX1mdW5jdGlvbiBhKHkpe3ZhciB3PXMoeSksRT13WzBdLFM9d1sxXTtyZXR1cm4gKEUrUykqMy80LVN9ZnVuY3Rpb24gdSh5LHcsRSl7cmV0dXJuICh3K0UpKjMvNC1FfWZ1bmN0aW9uIGMoeSl7dmFyIHcsRT1zKHkpLFM9RVswXSxJPUVbMV0sQz1uZXcgcih1KHksUyxJKSksUj0wLFU9ST4wP1MtNDpTLE47Zm9yKE49MDtOPFU7Tis9NCl3PWVbeS5jaGFyQ29kZUF0KE4pXTw8MTh8ZVt5LmNoYXJDb2RlQXQoTisxKV08PDEyfGVbeS5jaGFyQ29kZUF0KE4rMildPDw2fGVbeS5jaGFyQ29kZUF0KE4rMyldLENbUisrXT13Pj4xNiYyNTUsQ1tSKytdPXc+PjgmMjU1LENbUisrXT13JjI1NTtyZXR1cm4gST09PTImJih3PWVbeS5jaGFyQ29kZUF0KE4pXTw8MnxlW3kuY2hhckNvZGVBdChOKzEpXT4+NCxDW1IrK109dyYyNTUpLEk9PT0xJiYodz1lW3kuY2hhckNvZGVBdChOKV08PDEwfGVbeS5jaGFyQ29kZUF0KE4rMSldPDw0fGVbeS5jaGFyQ29kZUF0KE4rMildPj4yLENbUisrXT13Pj44JjI1NSxDW1IrK109dyYyNTUpLEN9ZnVuY3Rpb24gaCh5KXtyZXR1cm4gdFt5Pj4xOCY2M10rdFt5Pj4xMiY2M10rdFt5Pj42JjYzXSt0W3kmNjNdfWZ1bmN0aW9uIGQoeSx3LEUpe2Zvcih2YXIgUyxJPVtdLEM9dztDPEU7Qys9MylTPSh5W0NdPDwxNiYxNjcxMTY4MCkrKHlbQysxXTw8OCY2NTI4MCkrKHlbQysyXSYyNTUpLEkucHVzaChoKFMpKTtyZXR1cm4gSS5qb2luKFwiXCIpfWZ1bmN0aW9uIGcoeSl7Zm9yKHZhciB3LEU9eS5sZW5ndGgsUz1FJTMsST1bXSxDPTE2MzgzLFI9MCxVPUUtUztSPFU7Uis9QylJLnB1c2goZCh5LFIsUitDPlU/VTpSK0MpKTtyZXR1cm4gUz09PTE/KHc9eVtFLTFdLEkucHVzaCh0W3c+PjJdK3Rbdzw8NCY2M10rXCI9PVwiKSk6Uz09PTImJih3PSh5W0UtMl08PDgpK3lbRS0xXSxJLnB1c2godFt3Pj4xMF0rdFt3Pj40JjYzXSt0W3c8PDImNjNdK1wiPVwiKSksSS5qb2luKFwiXCIpfXJldHVybiB1aX1mdW5jdGlvbiBYZygpe2lmKHp1KXJldHVybiBXaTt6dT0hMDtyZXR1cm4gV2kucmVhZD1mdW5jdGlvbih0LGUscixpLG4pe3ZhciBvLHMsYT1uKjgtaS0xLHU9KDE8PGEpLTEsYz11Pj4xLGg9LTcsZD1yP24tMTowLGc9cj8tMToxLHk9dFtlK2RdO2ZvcihkKz1nLG89eSYoMTw8LWgpLTEseT4+PS1oLGgrPWE7aD4wO289byoyNTYrdFtlK2RdLGQrPWcsaC09OCk7Zm9yKHM9byYoMTw8LWgpLTEsbz4+PS1oLGgrPWk7aD4wO3M9cyoyNTYrdFtlK2RdLGQrPWcsaC09OCk7aWYobz09PTApbz0xLWM7ZWxzZSB7aWYobz09PXUpcmV0dXJuIHM/TmFOOih5Py0xOjEpKigxLzApO3M9cytNYXRoLnBvdygyLGkpLG89by1jO31yZXR1cm4gKHk/LTE6MSkqcypNYXRoLnBvdygyLG8taSl9LFdpLndyaXRlPWZ1bmN0aW9uKHQsZSxyLGksbixvKXt2YXIgcyxhLHUsYz1vKjgtbi0xLGg9KDE8PGMpLTEsZD1oPj4xLGc9bj09PTIzP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCx5PWk/MDpvLTEsdz1pPzE6LTEsRT1lPDB8fGU9PT0wJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KGE9aXNOYU4oZSk/MTowLHM9aCk6KHM9TWF0aC5mbG9vcihNYXRoLmxvZyhlKS9NYXRoLkxOMiksZSoodT1NYXRoLnBvdygyLC1zKSk8MSYmKHMtLSx1Kj0yKSxzK2Q+PTE/ZSs9Zy91OmUrPWcqTWF0aC5wb3coMiwxLWQpLGUqdT49MiYmKHMrKyx1Lz0yKSxzK2Q+PWg/KGE9MCxzPWgpOnMrZD49MT8oYT0oZSp1LTEpKk1hdGgucG93KDIsbikscz1zK2QpOihhPWUqTWF0aC5wb3coMixkLTEpKk1hdGgucG93KDIsbikscz0wKSk7bj49ODt0W3IreV09YSYyNTUseSs9dyxhLz0yNTYsbi09OCk7Zm9yKHM9czw8bnxhLGMrPW47Yz4wO3Rbcit5XT1zJjI1NSx5Kz13LHMvPTI1NixjLT04KTt0W3IreS13XXw9RSoxMjg7fSxXaX1mdW5jdGlvbiBaZygpe2lmKEt1KXJldHVybiBKdDtLdT0hMDtsZXQgdD1KZygpLGU9WGcoKSxyPXR5cGVvZiBTeW1ib2w9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIFN5bWJvbC5mb3I9PVwiZnVuY3Rpb25cIj9TeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIik6bnVsbDtKdC5CdWZmZXI9cyxKdC5TbG93QnVmZmVyPUksSnQuSU5TUEVDVF9NQVhfQllURVM9NTA7bGV0IGk9MjE0NzQ4MzY0NztKdC5rTWF4TGVuZ3RoPWkscy5UWVBFRF9BUlJBWV9TVVBQT1JUPW4oKSwhcy5UWVBFRF9BUlJBWV9TVVBQT1JUJiZ0eXBlb2YgY29uc29sZTxcInVcIiYmdHlwZW9mIGNvbnNvbGUuZXJyb3I9PVwiZnVuY3Rpb25cIiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSBgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LlwiKTtmdW5jdGlvbiBuKCl7dHJ5e2xldCBwPW5ldyBVaW50OEFycmF5KDEpLGw9e2ZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19O3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YobCxVaW50OEFycmF5LnByb3RvdHlwZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKHAsbCkscC5mb28oKT09PTQyfWNhdGNoe3JldHVybiAhMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHMucHJvdG90eXBlLFwicGFyZW50XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYocy5pc0J1ZmZlcih0aGlzKSlyZXR1cm4gdGhpcy5idWZmZXJ9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHMucHJvdG90eXBlLFwib2Zmc2V0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYocy5pc0J1ZmZlcih0aGlzKSlyZXR1cm4gdGhpcy5ieXRlT2Zmc2V0fX0pO2Z1bmN0aW9uIG8ocCl7aWYocD5pKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK3ArJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpO2xldCBsPW5ldyBVaW50OEFycmF5KHApO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YobCxzLnByb3RvdHlwZSksbH1mdW5jdGlvbiBzKHAsbCxmKXtpZih0eXBlb2YgcD09XCJudW1iZXJcIil7aWYodHlwZW9mIGw9PVwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIHN0cmluZy4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtyZXR1cm4gaChwKX1yZXR1cm4gYShwLGwsZil9cy5wb29sU2l6ZT04MTkyO2Z1bmN0aW9uIGEocCxsLGYpe2lmKHR5cGVvZiBwPT1cInN0cmluZ1wiKXJldHVybiBkKHAsbCk7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHApKXJldHVybiB5KHApO2lmKHA9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiBwKTtpZihZZShwLEFycmF5QnVmZmVyKXx8cCYmWWUocC5idWZmZXIsQXJyYXlCdWZmZXIpfHx0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXI8XCJ1XCImJihZZShwLFNoYXJlZEFycmF5QnVmZmVyKXx8cCYmWWUocC5idWZmZXIsU2hhcmVkQXJyYXlCdWZmZXIpKSlyZXR1cm4gdyhwLGwsZik7aWYodHlwZW9mIHA9PVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInKTtsZXQgYj1wLnZhbHVlT2YmJnAudmFsdWVPZigpO2lmKGIhPW51bGwmJmIhPT1wKXJldHVybiBzLmZyb20oYixsLGYpO2xldCBBPUUocCk7aWYoQSlyZXR1cm4gQTtpZih0eXBlb2YgU3ltYm9sPFwidVwiJiZTeW1ib2wudG9QcmltaXRpdmUhPW51bGwmJnR5cGVvZiBwW1N5bWJvbC50b1ByaW1pdGl2ZV09PVwiZnVuY3Rpb25cIilyZXR1cm4gcy5mcm9tKHBbU3ltYm9sLnRvUHJpbWl0aXZlXShcInN0cmluZ1wiKSxsLGYpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSBcIit0eXBlb2YgcCl9cy5mcm9tPWZ1bmN0aW9uKHAsbCxmKXtyZXR1cm4gYShwLGwsZil9LE9iamVjdC5zZXRQcm90b3R5cGVPZihzLnByb3RvdHlwZSxVaW50OEFycmF5LnByb3RvdHlwZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKHMsVWludDhBcnJheSk7ZnVuY3Rpb24gdShwKXtpZih0eXBlb2YgcCE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJyk7aWYocDwwKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInK3ArJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpfWZ1bmN0aW9uIGMocCxsLGYpe3JldHVybiB1KHApLHA8PTA/byhwKTpsIT09dm9pZCAwP3R5cGVvZiBmPT1cInN0cmluZ1wiP28ocCkuZmlsbChsLGYpOm8ocCkuZmlsbChsKTpvKHApfXMuYWxsb2M9ZnVuY3Rpb24ocCxsLGYpe3JldHVybiBjKHAsbCxmKX07ZnVuY3Rpb24gaChwKXtyZXR1cm4gdShwKSxvKHA8MD8wOlMocCl8MCl9cy5hbGxvY1Vuc2FmZT1mdW5jdGlvbihwKXtyZXR1cm4gaChwKX0scy5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24ocCl7cmV0dXJuIGgocCl9O2Z1bmN0aW9uIGQocCxsKXtpZigodHlwZW9mIGwhPVwic3RyaW5nXCJ8fGw9PT1cIlwiKSYmKGw9XCJ1dGY4XCIpLCFzLmlzRW5jb2RpbmcobCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlVua25vd24gZW5jb2Rpbmc6IFwiK2wpO2xldCBmPUMocCxsKXwwLGI9byhmKSxBPWIud3JpdGUocCxsKTtyZXR1cm4gQSE9PWYmJihiPWIuc2xpY2UoMCxBKSksYn1mdW5jdGlvbiBnKHApe2xldCBsPXAubGVuZ3RoPDA/MDpTKHAubGVuZ3RoKXwwLGY9byhsKTtmb3IobGV0IGI9MDtiPGw7Yis9MSlmW2JdPXBbYl0mMjU1O3JldHVybiBmfWZ1bmN0aW9uIHkocCl7aWYoWWUocCxVaW50OEFycmF5KSl7bGV0IGw9bmV3IFVpbnQ4QXJyYXkocCk7cmV0dXJuIHcobC5idWZmZXIsbC5ieXRlT2Zmc2V0LGwuYnl0ZUxlbmd0aCl9cmV0dXJuIGcocCl9ZnVuY3Rpb24gdyhwLGwsZil7aWYobDwwfHxwLmJ5dGVMZW5ndGg8bCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTtpZihwLmJ5dGVMZW5ndGg8bCsoZnx8MCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7bGV0IGI7cmV0dXJuIGw9PT12b2lkIDAmJmY9PT12b2lkIDA/Yj1uZXcgVWludDhBcnJheShwKTpmPT09dm9pZCAwP2I9bmV3IFVpbnQ4QXJyYXkocCxsKTpiPW5ldyBVaW50OEFycmF5KHAsbCxmKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoYixzLnByb3RvdHlwZSksYn1mdW5jdGlvbiBFKHApe2lmKHMuaXNCdWZmZXIocCkpe2xldCBsPVMocC5sZW5ndGgpfDAsZj1vKGwpO3JldHVybiBmLmxlbmd0aD09PTB8fHAuY29weShmLDAsMCxsKSxmfWlmKHAubGVuZ3RoIT09dm9pZCAwKXJldHVybiB0eXBlb2YgcC5sZW5ndGghPVwibnVtYmVyXCJ8fGhzKHAubGVuZ3RoKT9vKDApOmcocCk7aWYocC50eXBlPT09XCJCdWZmZXJcIiYmQXJyYXkuaXNBcnJheShwLmRhdGEpKXJldHVybiBnKHAuZGF0YSl9ZnVuY3Rpb24gUyhwKXtpZihwPj1pKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSBzaXplOiAweFwiK2kudG9TdHJpbmcoMTYpK1wiIGJ5dGVzXCIpO3JldHVybiBwfDB9ZnVuY3Rpb24gSShwKXtyZXR1cm4gK3AhPXAmJihwPTApLHMuYWxsb2MoK3ApfXMuaXNCdWZmZXI9ZnVuY3Rpb24obCl7cmV0dXJuIGwhPW51bGwmJmwuX2lzQnVmZmVyPT09ITAmJmwhPT1zLnByb3RvdHlwZX0scy5jb21wYXJlPWZ1bmN0aW9uKGwsZil7aWYoWWUobCxVaW50OEFycmF5KSYmKGw9cy5mcm9tKGwsbC5vZmZzZXQsbC5ieXRlTGVuZ3RoKSksWWUoZixVaW50OEFycmF5KSYmKGY9cy5mcm9tKGYsZi5vZmZzZXQsZi5ieXRlTGVuZ3RoKSksIXMuaXNCdWZmZXIobCl8fCFzLmlzQnVmZmVyKGYpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImJ1ZjFcIiwgXCJidWYyXCIgYXJndW1lbnRzIG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXknKTtpZihsPT09ZilyZXR1cm4gMDtsZXQgYj1sLmxlbmd0aCxBPWYubGVuZ3RoO2ZvcihsZXQgVD0wLE89TWF0aC5taW4oYixBKTtUPE87KytUKWlmKGxbVF0hPT1mW1RdKXtiPWxbVF0sQT1mW1RdO2JyZWFrfXJldHVybiBiPEE/LTE6QTxiPzE6MH0scy5pc0VuY29kaW5nPWZ1bmN0aW9uKGwpe3N3aXRjaChTdHJpbmcobCkudG9Mb3dlckNhc2UoKSl7Y2FzZVwiaGV4XCI6Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpjYXNlXCJiYXNlNjRcIjpjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gITA7ZGVmYXVsdDpyZXR1cm4gITF9fSxzLmNvbmNhdD1mdW5jdGlvbihsLGYpe2lmKCFBcnJheS5pc0FycmF5KGwpKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpO2lmKGwubGVuZ3RoPT09MClyZXR1cm4gcy5hbGxvYygwKTtsZXQgYjtpZihmPT09dm9pZCAwKWZvcihmPTAsYj0wO2I8bC5sZW5ndGg7KytiKWYrPWxbYl0ubGVuZ3RoO2xldCBBPXMuYWxsb2NVbnNhZmUoZiksVD0wO2ZvcihiPTA7YjxsLmxlbmd0aDsrK2Ipe2xldCBPPWxbYl07aWYoWWUoTyxVaW50OEFycmF5KSlUK08ubGVuZ3RoPkEubGVuZ3RoPyhzLmlzQnVmZmVyKE8pfHwoTz1zLmZyb20oTykpLE8uY29weShBLFQpKTpVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChBLE8sVCk7ZWxzZSBpZihzLmlzQnVmZmVyKE8pKU8uY29weShBLFQpO2Vsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7VCs9Ty5sZW5ndGg7fXJldHVybiBBfTtmdW5jdGlvbiBDKHAsbCl7aWYocy5pc0J1ZmZlcihwKSlyZXR1cm4gcC5sZW5ndGg7aWYoQXJyYXlCdWZmZXIuaXNWaWV3KHApfHxZZShwLEFycmF5QnVmZmVyKSlyZXR1cm4gcC5ieXRlTGVuZ3RoO2lmKHR5cGVvZiBwIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInN0cmluZ1wiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIG9yIEFycmF5QnVmZmVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHApO2xldCBmPXAubGVuZ3RoLGI9YXJndW1lbnRzLmxlbmd0aD4yJiZhcmd1bWVudHNbMl09PT0hMDtpZighYiYmZj09PTApcmV0dXJuIDA7bGV0IEE9ITE7Zm9yKDs7KXN3aXRjaChsKXtjYXNlXCJhc2NpaVwiOmNhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBmO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBjcyhwKS5sZW5ndGg7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIGYqMjtjYXNlXCJoZXhcIjpyZXR1cm4gZj4+PjE7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIENsKHApLmxlbmd0aDtkZWZhdWx0OmlmKEEpcmV0dXJuIGI/LTE6Y3MocCkubGVuZ3RoO2w9KFwiXCIrbCkudG9Mb3dlckNhc2UoKSxBPSEwO319cy5ieXRlTGVuZ3RoPUM7ZnVuY3Rpb24gUihwLGwsZil7bGV0IGI9ITE7aWYoKGw9PT12b2lkIDB8fGw8MCkmJihsPTApLGw+dGhpcy5sZW5ndGh8fCgoZj09PXZvaWQgMHx8Zj50aGlzLmxlbmd0aCkmJihmPXRoaXMubGVuZ3RoKSxmPD0wKXx8KGY+Pj49MCxsPj4+PTAsZjw9bCkpcmV0dXJuIFwiXCI7Zm9yKHB8fChwPVwidXRmOFwiKTs7KXN3aXRjaChwKXtjYXNlXCJoZXhcIjpyZXR1cm4gTmcodGhpcyxsLGYpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBDcih0aGlzLGwsZik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gdXModGhpcyxsLGYpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBVZyh0aGlzLGwsZik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIHBlKHRoaXMsbCxmKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gcWcodGhpcyxsLGYpO2RlZmF1bHQ6aWYoYil0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrcCk7cD0ocCtcIlwiKS50b0xvd2VyQ2FzZSgpLGI9ITA7fX1zLnByb3RvdHlwZS5faXNCdWZmZXI9ITA7ZnVuY3Rpb24gVShwLGwsZil7bGV0IGI9cFtsXTtwW2xdPXBbZl0scFtmXT1iO31zLnByb3RvdHlwZS5zd2FwMTY9ZnVuY3Rpb24oKXtsZXQgbD10aGlzLmxlbmd0aDtpZihsJTIhPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHNcIik7Zm9yKGxldCBmPTA7ZjxsO2YrPTIpVSh0aGlzLGYsZisxKTtyZXR1cm4gdGhpc30scy5wcm90b3R5cGUuc3dhcDMyPWZ1bmN0aW9uKCl7bGV0IGw9dGhpcy5sZW5ndGg7aWYobCU0IT09MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzXCIpO2ZvcihsZXQgZj0wO2Y8bDtmKz00KVUodGhpcyxmLGYrMyksVSh0aGlzLGYrMSxmKzIpO3JldHVybiB0aGlzfSxzLnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXtsZXQgbD10aGlzLmxlbmd0aDtpZihsJTghPT0wKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHNcIik7Zm9yKGxldCBmPTA7ZjxsO2YrPTgpVSh0aGlzLGYsZis3KSxVKHRoaXMsZisxLGYrNiksVSh0aGlzLGYrMixmKzUpLFUodGhpcyxmKzMsZis0KTtyZXR1cm4gdGhpc30scy5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXtsZXQgbD10aGlzLmxlbmd0aDtyZXR1cm4gbD09PTA/XCJcIjphcmd1bWVudHMubGVuZ3RoPT09MD9Dcih0aGlzLDAsbCk6Ui5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHMucHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nPXMucHJvdG90eXBlLnRvU3RyaW5nLHMucHJvdG90eXBlLmVxdWFscz1mdW5jdGlvbihsKXtpZighcy5pc0J1ZmZlcihsKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlclwiKTtyZXR1cm4gdGhpcz09PWw/ITA6cy5jb21wYXJlKHRoaXMsbCk9PT0wfSxzLnByb3RvdHlwZS5pbnNwZWN0PWZ1bmN0aW9uKCl7bGV0IGw9XCJcIixmPUp0LklOU1BFQ1RfTUFYX0JZVEVTO3JldHVybiBsPXRoaXMudG9TdHJpbmcoXCJoZXhcIiwwLGYpLnJlcGxhY2UoLyguezJ9KS9nLFwiJDEgXCIpLnRyaW0oKSx0aGlzLmxlbmd0aD5mJiYobCs9XCIgLi4uIFwiKSxcIjxCdWZmZXIgXCIrbCtcIj5cIn0sciYmKHMucHJvdG90eXBlW3JdPXMucHJvdG90eXBlLmluc3BlY3QpLHMucHJvdG90eXBlLmNvbXBhcmU9ZnVuY3Rpb24obCxmLGIsQSxUKXtpZihZZShsLFVpbnQ4QXJyYXkpJiYobD1zLmZyb20obCxsLm9mZnNldCxsLmJ5dGVMZW5ndGgpKSwhcy5pc0J1ZmZlcihsKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ0YXJnZXRcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5LiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGwpO2lmKGY9PT12b2lkIDAmJihmPTApLGI9PT12b2lkIDAmJihiPWw/bC5sZW5ndGg6MCksQT09PXZvaWQgMCYmKEE9MCksVD09PXZvaWQgMCYmKFQ9dGhpcy5sZW5ndGgpLGY8MHx8Yj5sLmxlbmd0aHx8QTwwfHxUPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwib3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKEE+PVQmJmY+PWIpcmV0dXJuIDA7aWYoQT49VClyZXR1cm4gLTE7aWYoZj49YilyZXR1cm4gMTtpZihmPj4+PTAsYj4+Pj0wLEE+Pj49MCxUPj4+PTAsdGhpcz09PWwpcmV0dXJuIDA7bGV0IE89VC1BLCQ9Yi1mLHNlPU1hdGgubWluKE8sJCksdGU9dGhpcy5zbGljZShBLFQpLG9lPWwuc2xpY2UoZixiKTtmb3IobGV0IEo9MDtKPHNlOysrSilpZih0ZVtKXSE9PW9lW0pdKXtPPXRlW0pdLCQ9b2VbSl07YnJlYWt9cmV0dXJuIE88JD8tMTokPE8/MTowfTtmdW5jdGlvbiBOKHAsbCxmLGIsQSl7aWYocC5sZW5ndGg9PT0wKXJldHVybiAtMTtpZih0eXBlb2YgZj09XCJzdHJpbmdcIj8oYj1mLGY9MCk6Zj4yMTQ3NDgzNjQ3P2Y9MjE0NzQ4MzY0NzpmPC0yMTQ3NDgzNjQ4JiYoZj0tMjE0NzQ4MzY0OCksZj0rZixocyhmKSYmKGY9QT8wOnAubGVuZ3RoLTEpLGY8MCYmKGY9cC5sZW5ndGgrZiksZj49cC5sZW5ndGgpe2lmKEEpcmV0dXJuIC0xO2Y9cC5sZW5ndGgtMTt9ZWxzZSBpZihmPDApaWYoQSlmPTA7ZWxzZSByZXR1cm4gLTE7aWYodHlwZW9mIGw9PVwic3RyaW5nXCImJihsPXMuZnJvbShsLGIpKSxzLmlzQnVmZmVyKGwpKXJldHVybiBsLmxlbmd0aD09PTA/LTE6VyhwLGwsZixiLEEpO2lmKHR5cGVvZiBsPT1cIm51bWJlclwiKXJldHVybiBsPWwmMjU1LHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mPT1cImZ1bmN0aW9uXCI/QT9VaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwocCxsLGYpOlVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwocCxsLGYpOlcocCxbbF0sZixiLEEpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJ2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXJcIil9ZnVuY3Rpb24gVyhwLGwsZixiLEEpe2xldCBUPTEsTz1wLmxlbmd0aCwkPWwubGVuZ3RoO2lmKGIhPT12b2lkIDAmJihiPVN0cmluZyhiKS50b0xvd2VyQ2FzZSgpLGI9PT1cInVjczJcInx8Yj09PVwidWNzLTJcInx8Yj09PVwidXRmMTZsZVwifHxiPT09XCJ1dGYtMTZsZVwiKSl7aWYocC5sZW5ndGg8Mnx8bC5sZW5ndGg8MilyZXR1cm4gLTE7VD0yLE8vPTIsJC89MixmLz0yO31mdW5jdGlvbiBzZShvZSxKKXtyZXR1cm4gVD09PTE/b2VbSl06b2UucmVhZFVJbnQxNkJFKEoqVCl9bGV0IHRlO2lmKEEpe2xldCBvZT0tMTtmb3IodGU9Zjt0ZTxPO3RlKyspaWYoc2UocCx0ZSk9PT1zZShsLG9lPT09LTE/MDp0ZS1vZSkpe2lmKG9lPT09LTEmJihvZT10ZSksdGUtb2UrMT09PSQpcmV0dXJuIG9lKlR9ZWxzZSBvZSE9PS0xJiYodGUtPXRlLW9lKSxvZT0tMTt9ZWxzZSBmb3IoZiskPk8mJihmPU8tJCksdGU9Zjt0ZT49MDt0ZS0tKXtsZXQgb2U9ITA7Zm9yKGxldCBKPTA7SjwkO0orKylpZihzZShwLHRlK0opIT09c2UobCxKKSl7b2U9ITE7YnJlYWt9aWYob2UpcmV0dXJuIHRlfXJldHVybiAtMX1zLnByb3RvdHlwZS5pbmNsdWRlcz1mdW5jdGlvbihsLGYsYil7cmV0dXJuIHRoaXMuaW5kZXhPZihsLGYsYikhPT0tMX0scy5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihsLGYsYil7cmV0dXJuIE4odGhpcyxsLGYsYiwhMCl9LHMucHJvdG90eXBlLmxhc3RJbmRleE9mPWZ1bmN0aW9uKGwsZixiKXtyZXR1cm4gTih0aGlzLGwsZixiLCExKX07ZnVuY3Rpb24gSyhwLGwsZixiKXtmPU51bWJlcihmKXx8MDtsZXQgQT1wLmxlbmd0aC1mO2I/KGI9TnVtYmVyKGIpLGI+QSYmKGI9QSkpOmI9QTtsZXQgVD1sLmxlbmd0aDtiPlQvMiYmKGI9VC8yKTtsZXQgTztmb3IoTz0wO088YjsrK08pe2xldCAkPXBhcnNlSW50KGwuc3Vic3RyKE8qMiwyKSwxNik7aWYoaHMoJCkpcmV0dXJuIE87cFtmK09dPSQ7fXJldHVybiBPfWZ1bmN0aW9uIHoocCxsLGYsYil7cmV0dXJuIHFpKGNzKGwscC5sZW5ndGgtZikscCxmLGIpfWZ1bmN0aW9uIFEocCxsLGYsYil7cmV0dXJuIHFpKFdnKGwpLHAsZixiKX1mdW5jdGlvbiBkZShwLGwsZixiKXtyZXR1cm4gcWkoQ2wobCkscCxmLGIpfWZ1bmN0aW9uIEd0KHAsbCxmLGIpe3JldHVybiBxaSgkZyhsLHAubGVuZ3RoLWYpLHAsZixiKX1zLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbihsLGYsYixBKXtpZihmPT09dm9pZCAwKUE9XCJ1dGY4XCIsYj10aGlzLmxlbmd0aCxmPTA7ZWxzZSBpZihiPT09dm9pZCAwJiZ0eXBlb2YgZj09XCJzdHJpbmdcIilBPWYsYj10aGlzLmxlbmd0aCxmPTA7ZWxzZSBpZihpc0Zpbml0ZShmKSlmPWY+Pj4wLGlzRmluaXRlKGIpPyhiPWI+Pj4wLEE9PT12b2lkIDAmJihBPVwidXRmOFwiKSk6KEE9YixiPXZvaWQgMCk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTtsZXQgVD10aGlzLmxlbmd0aC1mO2lmKChiPT09dm9pZCAwfHxiPlQpJiYoYj1UKSxsLmxlbmd0aD4wJiYoYjwwfHxmPDApfHxmPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHNcIik7QXx8KEE9XCJ1dGY4XCIpO2xldCBPPSExO2Zvcig7Oylzd2l0Y2goQSl7Y2FzZVwiaGV4XCI6cmV0dXJuIEsodGhpcyxsLGYsYik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIHoodGhpcyxsLGYsYik7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gUSh0aGlzLGwsZixiKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gZGUodGhpcyxsLGYsYik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIEd0KHRoaXMsbCxmLGIpO2RlZmF1bHQ6aWYoTyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrQSk7QT0oXCJcIitBKS50b0xvd2VyQ2FzZSgpLE89ITA7fX0scy5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTtmdW5jdGlvbiBwZShwLGwsZil7cmV0dXJuIGw9PT0wJiZmPT09cC5sZW5ndGg/dC5mcm9tQnl0ZUFycmF5KHApOnQuZnJvbUJ5dGVBcnJheShwLnNsaWNlKGwsZikpfWZ1bmN0aW9uIENyKHAsbCxmKXtmPU1hdGgubWluKHAubGVuZ3RoLGYpO2xldCBiPVtdLEE9bDtmb3IoO0E8Zjspe2xldCBUPXBbQV0sTz1udWxsLCQ9VD4yMzk/NDpUPjIyMz8zOlQ+MTkxPzI6MTtpZihBKyQ8PWYpe2xldCBzZSx0ZSxvZSxKO3N3aXRjaCgkKXtjYXNlIDE6VDwxMjgmJihPPVQpO2JyZWFrO2Nhc2UgMjpzZT1wW0ErMV0sKHNlJjE5Mik9PT0xMjgmJihKPShUJjMxKTw8NnxzZSY2MyxKPjEyNyYmKE89SikpO2JyZWFrO2Nhc2UgMzpzZT1wW0ErMV0sdGU9cFtBKzJdLChzZSYxOTIpPT09MTI4JiYodGUmMTkyKT09PTEyOCYmKEo9KFQmMTUpPDwxMnwoc2UmNjMpPDw2fHRlJjYzLEo+MjA0NyYmKEo8NTUyOTZ8fEo+NTczNDMpJiYoTz1KKSk7YnJlYWs7Y2FzZSA0OnNlPXBbQSsxXSx0ZT1wW0ErMl0sb2U9cFtBKzNdLChzZSYxOTIpPT09MTI4JiYodGUmMTkyKT09PTEyOCYmKG9lJjE5Mik9PT0xMjgmJihKPShUJjE1KTw8MTh8KHNlJjYzKTw8MTJ8KHRlJjYzKTw8NnxvZSY2MyxKPjY1NTM1JiZKPDExMTQxMTImJihPPUopKTt9fU89PT1udWxsPyhPPTY1NTMzLCQ9MSk6Tz42NTUzNSYmKE8tPTY1NTM2LGIucHVzaChPPj4+MTAmMTAyM3w1NTI5NiksTz01NjMyMHxPJjEwMjMpLGIucHVzaChPKSxBKz0kO31yZXR1cm4gUHIoYil9bGV0IEJyPTQwOTY7ZnVuY3Rpb24gUHIocCl7bGV0IGw9cC5sZW5ndGg7aWYobDw9QnIpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLHApO2xldCBmPVwiXCIsYj0wO2Zvcig7YjxsOylmKz1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxwLnNsaWNlKGIsYis9QnIpKTtyZXR1cm4gZn1mdW5jdGlvbiB1cyhwLGwsZil7bGV0IGI9XCJcIjtmPU1hdGgubWluKHAubGVuZ3RoLGYpO2ZvcihsZXQgQT1sO0E8ZjsrK0EpYis9U3RyaW5nLmZyb21DaGFyQ29kZShwW0FdJjEyNyk7cmV0dXJuIGJ9ZnVuY3Rpb24gVWcocCxsLGYpe2xldCBiPVwiXCI7Zj1NYXRoLm1pbihwLmxlbmd0aCxmKTtmb3IobGV0IEE9bDtBPGY7KytBKWIrPVN0cmluZy5mcm9tQ2hhckNvZGUocFtBXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gTmcocCxsLGYpe2xldCBiPXAubGVuZ3RoOyghbHx8bDwwKSYmKGw9MCksKCFmfHxmPDB8fGY+YikmJihmPWIpO2xldCBBPVwiXCI7Zm9yKGxldCBUPWw7VDxmOysrVClBKz1IZ1twW1RdXTtyZXR1cm4gQX1mdW5jdGlvbiBxZyhwLGwsZil7bGV0IGI9cC5zbGljZShsLGYpLEE9XCJcIjtmb3IobGV0IFQ9MDtUPGIubGVuZ3RoLTE7VCs9MilBKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGJbVF0rYltUKzFdKjI1Nik7cmV0dXJuIEF9cy5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24obCxmKXtsZXQgYj10aGlzLmxlbmd0aDtsPX5+bCxmPWY9PT12b2lkIDA/Yjp+fmYsbDwwPyhsKz1iLGw8MCYmKGw9MCkpOmw+YiYmKGw9YiksZjwwPyhmKz1iLGY8MCYmKGY9MCkpOmY+YiYmKGY9YiksZjxsJiYoZj1sKTtsZXQgQT10aGlzLnN1YmFycmF5KGwsZik7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihBLHMucHJvdG90eXBlKSxBfTtmdW5jdGlvbiBnZShwLGwsZil7aWYocCUxIT09MHx8cDwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwib2Zmc2V0IGlzIG5vdCB1aW50XCIpO2lmKHArbD5mKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1zLnByb3RvdHlwZS5yZWFkVWludExFPXMucHJvdG90eXBlLnJlYWRVSW50TEU9ZnVuY3Rpb24obCxmLGIpe2w9bD4+PjAsZj1mPj4+MCxifHxnZShsLGYsdGhpcy5sZW5ndGgpO2xldCBBPXRoaXNbbF0sVD0xLE89MDtmb3IoOysrTzxmJiYoVCo9MjU2KTspQSs9dGhpc1tsK09dKlQ7cmV0dXJuIEF9LHMucHJvdG90eXBlLnJlYWRVaW50QkU9cy5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbihsLGYsYil7bD1sPj4+MCxmPWY+Pj4wLGJ8fGdlKGwsZix0aGlzLmxlbmd0aCk7bGV0IEE9dGhpc1tsKy0tZl0sVD0xO2Zvcig7Zj4wJiYoVCo9MjU2KTspQSs9dGhpc1tsKy0tZl0qVDtyZXR1cm4gQX0scy5wcm90b3R5cGUucmVhZFVpbnQ4PXMucHJvdG90eXBlLnJlYWRVSW50OD1mdW5jdGlvbihsLGYpe3JldHVybiBsPWw+Pj4wLGZ8fGdlKGwsMSx0aGlzLmxlbmd0aCksdGhpc1tsXX0scy5wcm90b3R5cGUucmVhZFVpbnQxNkxFPXMucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbihsLGYpe3JldHVybiBsPWw+Pj4wLGZ8fGdlKGwsMix0aGlzLmxlbmd0aCksdGhpc1tsXXx0aGlzW2wrMV08PDh9LHMucHJvdG90eXBlLnJlYWRVaW50MTZCRT1zLnByb3RvdHlwZS5yZWFkVUludDE2QkU9ZnVuY3Rpb24obCxmKXtyZXR1cm4gbD1sPj4+MCxmfHxnZShsLDIsdGhpcy5sZW5ndGgpLHRoaXNbbF08PDh8dGhpc1tsKzFdfSxzLnByb3RvdHlwZS5yZWFkVWludDMyTEU9cy5wcm90b3R5cGUucmVhZFVJbnQzMkxFPWZ1bmN0aW9uKGwsZil7cmV0dXJuIGw9bD4+PjAsZnx8Z2UobCw0LHRoaXMubGVuZ3RoKSwodGhpc1tsXXx0aGlzW2wrMV08PDh8dGhpc1tsKzJdPDwxNikrdGhpc1tsKzNdKjE2Nzc3MjE2fSxzLnByb3RvdHlwZS5yZWFkVWludDMyQkU9cy5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKGwsZil7cmV0dXJuIGw9bD4+PjAsZnx8Z2UobCw0LHRoaXMubGVuZ3RoKSx0aGlzW2xdKjE2Nzc3MjE2Kyh0aGlzW2wrMV08PDE2fHRoaXNbbCsyXTw8OHx0aGlzW2wrM10pfSxzLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEU9eHQoZnVuY3Rpb24obCl7bD1sPj4+MCxrcihsLFwib2Zmc2V0XCIpO2xldCBmPXRoaXNbbF0sYj10aGlzW2wrN107KGY9PT12b2lkIDB8fGI9PT12b2lkIDApJiZsaShsLHRoaXMubGVuZ3RoLTgpO2xldCBBPWYrdGhpc1srK2xdKjIqKjgrdGhpc1srK2xdKjIqKjE2K3RoaXNbKytsXSoyKioyNCxUPXRoaXNbKytsXSt0aGlzWysrbF0qMioqOCt0aGlzWysrbF0qMioqMTYrYioyKioyNDtyZXR1cm4gQmlnSW50KEEpKyhCaWdJbnQoVCk8PEJpZ0ludCgzMikpfSkscy5wcm90b3R5cGUucmVhZEJpZ1VJbnQ2NEJFPXh0KGZ1bmN0aW9uKGwpe2w9bD4+PjAsa3IobCxcIm9mZnNldFwiKTtsZXQgZj10aGlzW2xdLGI9dGhpc1tsKzddOyhmPT09dm9pZCAwfHxiPT09dm9pZCAwKSYmbGkobCx0aGlzLmxlbmd0aC04KTtsZXQgQT1mKjIqKjI0K3RoaXNbKytsXSoyKioxNit0aGlzWysrbF0qMioqOCt0aGlzWysrbF0sVD10aGlzWysrbF0qMioqMjQrdGhpc1srK2xdKjIqKjE2K3RoaXNbKytsXSoyKio4K2I7cmV0dXJuIChCaWdJbnQoQSk8PEJpZ0ludCgzMikpK0JpZ0ludChUKX0pLHMucHJvdG90eXBlLnJlYWRJbnRMRT1mdW5jdGlvbihsLGYsYil7bD1sPj4+MCxmPWY+Pj4wLGJ8fGdlKGwsZix0aGlzLmxlbmd0aCk7bGV0IEE9dGhpc1tsXSxUPTEsTz0wO2Zvcig7KytPPGYmJihUKj0yNTYpOylBKz10aGlzW2wrT10qVDtyZXR1cm4gVCo9MTI4LEE+PVQmJihBLT1NYXRoLnBvdygyLDgqZikpLEF9LHMucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbihsLGYsYil7bD1sPj4+MCxmPWY+Pj4wLGJ8fGdlKGwsZix0aGlzLmxlbmd0aCk7bGV0IEE9ZixUPTEsTz10aGlzW2wrLS1BXTtmb3IoO0E+MCYmKFQqPTI1Nik7KU8rPXRoaXNbbCstLUFdKlQ7cmV0dXJuIFQqPTEyOCxPPj1UJiYoTy09TWF0aC5wb3coMiw4KmYpKSxPfSxzLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbihsLGYpe3JldHVybiBsPWw+Pj4wLGZ8fGdlKGwsMSx0aGlzLmxlbmd0aCksdGhpc1tsXSYxMjg/KDI1NS10aGlzW2xdKzEpKi0xOnRoaXNbbF19LHMucHJvdG90eXBlLnJlYWRJbnQxNkxFPWZ1bmN0aW9uKGwsZil7bD1sPj4+MCxmfHxnZShsLDIsdGhpcy5sZW5ndGgpO2xldCBiPXRoaXNbbF18dGhpc1tsKzFdPDw4O3JldHVybiBiJjMyNzY4P2J8NDI5NDkwMTc2MDpifSxzLnByb3RvdHlwZS5yZWFkSW50MTZCRT1mdW5jdGlvbihsLGYpe2w9bD4+PjAsZnx8Z2UobCwyLHRoaXMubGVuZ3RoKTtsZXQgYj10aGlzW2wrMV18dGhpc1tsXTw8ODtyZXR1cm4gYiYzMjc2OD9ifDQyOTQ5MDE3NjA6Yn0scy5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24obCxmKXtyZXR1cm4gbD1sPj4+MCxmfHxnZShsLDQsdGhpcy5sZW5ndGgpLHRoaXNbbF18dGhpc1tsKzFdPDw4fHRoaXNbbCsyXTw8MTZ8dGhpc1tsKzNdPDwyNH0scy5wcm90b3R5cGUucmVhZEludDMyQkU9ZnVuY3Rpb24obCxmKXtyZXR1cm4gbD1sPj4+MCxmfHxnZShsLDQsdGhpcy5sZW5ndGgpLHRoaXNbbF08PDI0fHRoaXNbbCsxXTw8MTZ8dGhpc1tsKzJdPDw4fHRoaXNbbCszXX0scy5wcm90b3R5cGUucmVhZEJpZ0ludDY0TEU9eHQoZnVuY3Rpb24obCl7bD1sPj4+MCxrcihsLFwib2Zmc2V0XCIpO2xldCBmPXRoaXNbbF0sYj10aGlzW2wrN107KGY9PT12b2lkIDB8fGI9PT12b2lkIDApJiZsaShsLHRoaXMubGVuZ3RoLTgpO2xldCBBPXRoaXNbbCs0XSt0aGlzW2wrNV0qMioqOCt0aGlzW2wrNl0qMioqMTYrKGI8PDI0KTtyZXR1cm4gKEJpZ0ludChBKTw8QmlnSW50KDMyKSkrQmlnSW50KGYrdGhpc1srK2xdKjIqKjgrdGhpc1srK2xdKjIqKjE2K3RoaXNbKytsXSoyKioyNCl9KSxzLnByb3RvdHlwZS5yZWFkQmlnSW50NjRCRT14dChmdW5jdGlvbihsKXtsPWw+Pj4wLGtyKGwsXCJvZmZzZXRcIik7bGV0IGY9dGhpc1tsXSxiPXRoaXNbbCs3XTsoZj09PXZvaWQgMHx8Yj09PXZvaWQgMCkmJmxpKGwsdGhpcy5sZW5ndGgtOCk7bGV0IEE9KGY8PDI0KSt0aGlzWysrbF0qMioqMTYrdGhpc1srK2xdKjIqKjgrdGhpc1srK2xdO3JldHVybiAoQmlnSW50KEEpPDxCaWdJbnQoMzIpKStCaWdJbnQodGhpc1srK2xdKjIqKjI0K3RoaXNbKytsXSoyKioxNit0aGlzWysrbF0qMioqOCtiKX0pLHMucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uKGwsZil7cmV0dXJuIGw9bD4+PjAsZnx8Z2UobCw0LHRoaXMubGVuZ3RoKSxlLnJlYWQodGhpcyxsLCEwLDIzLDQpfSxzLnByb3RvdHlwZS5yZWFkRmxvYXRCRT1mdW5jdGlvbihsLGYpe3JldHVybiBsPWw+Pj4wLGZ8fGdlKGwsNCx0aGlzLmxlbmd0aCksZS5yZWFkKHRoaXMsbCwhMSwyMyw0KX0scy5wcm90b3R5cGUucmVhZERvdWJsZUxFPWZ1bmN0aW9uKGwsZil7cmV0dXJuIGw9bD4+PjAsZnx8Z2UobCw4LHRoaXMubGVuZ3RoKSxlLnJlYWQodGhpcyxsLCEwLDUyLDgpfSxzLnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24obCxmKXtyZXR1cm4gbD1sPj4+MCxmfHxnZShsLDgsdGhpcy5sZW5ndGgpLGUucmVhZCh0aGlzLGwsITEsNTIsOCl9O2Z1bmN0aW9uIENlKHAsbCxmLGIsQSxUKXtpZighcy5pc0J1ZmZlcihwKSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKTtpZihsPkF8fGw8VCl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKTtpZihmK2I+cC5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIil9cy5wcm90b3R5cGUud3JpdGVVaW50TEU9cy5wcm90b3R5cGUud3JpdGVVSW50TEU9ZnVuY3Rpb24obCxmLGIsQSl7aWYobD0rbCxmPWY+Pj4wLGI9Yj4+PjAsIUEpe2xldCAkPU1hdGgucG93KDIsOCpiKS0xO0NlKHRoaXMsbCxmLGIsJCwwKTt9bGV0IFQ9MSxPPTA7Zm9yKHRoaXNbZl09bCYyNTU7KytPPGImJihUKj0yNTYpOyl0aGlzW2YrT109bC9UJjI1NTtyZXR1cm4gZitifSxzLnByb3RvdHlwZS53cml0ZVVpbnRCRT1zLnByb3RvdHlwZS53cml0ZVVJbnRCRT1mdW5jdGlvbihsLGYsYixBKXtpZihsPStsLGY9Zj4+PjAsYj1iPj4+MCwhQSl7bGV0ICQ9TWF0aC5wb3coMiw4KmIpLTE7Q2UodGhpcyxsLGYsYiwkLDApO31sZXQgVD1iLTEsTz0xO2Zvcih0aGlzW2YrVF09bCYyNTU7LS1UPj0wJiYoTyo9MjU2KTspdGhpc1tmK1RdPWwvTyYyNTU7cmV0dXJuIGYrYn0scy5wcm90b3R5cGUud3JpdGVVaW50OD1zLnByb3RvdHlwZS53cml0ZVVJbnQ4PWZ1bmN0aW9uKGwsZixiKXtyZXR1cm4gbD0rbCxmPWY+Pj4wLGJ8fENlKHRoaXMsbCxmLDEsMjU1LDApLHRoaXNbZl09bCYyNTUsZisxfSxzLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFPXMucHJvdG90eXBlLndyaXRlVUludDE2TEU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBsPStsLGY9Zj4+PjAsYnx8Q2UodGhpcyxsLGYsMiw2NTUzNSwwKSx0aGlzW2ZdPWwmMjU1LHRoaXNbZisxXT1sPj4+OCxmKzJ9LHMucHJvdG90eXBlLndyaXRlVWludDE2QkU9cy5wcm90b3R5cGUud3JpdGVVSW50MTZCRT1mdW5jdGlvbihsLGYsYil7cmV0dXJuIGw9K2wsZj1mPj4+MCxifHxDZSh0aGlzLGwsZiwyLDY1NTM1LDApLHRoaXNbZl09bD4+PjgsdGhpc1tmKzFdPWwmMjU1LGYrMn0scy5wcm90b3R5cGUud3JpdGVVaW50MzJMRT1zLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFPWZ1bmN0aW9uKGwsZixiKXtyZXR1cm4gbD0rbCxmPWY+Pj4wLGJ8fENlKHRoaXMsbCxmLDQsNDI5NDk2NzI5NSwwKSx0aGlzW2YrM109bD4+PjI0LHRoaXNbZisyXT1sPj4+MTYsdGhpc1tmKzFdPWw+Pj44LHRoaXNbZl09bCYyNTUsZis0fSxzLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFPXMucHJvdG90eXBlLndyaXRlVUludDMyQkU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBsPStsLGY9Zj4+PjAsYnx8Q2UodGhpcyxsLGYsNCw0Mjk0OTY3Mjk1LDApLHRoaXNbZl09bD4+PjI0LHRoaXNbZisxXT1sPj4+MTYsdGhpc1tmKzJdPWw+Pj44LHRoaXNbZiszXT1sJjI1NSxmKzR9O2Z1bmN0aW9uIHZsKHAsbCxmLGIsQSl7UmwobCxiLEEscCxmLDcpO2xldCBUPU51bWJlcihsJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7cFtmKytdPVQsVD1UPj44LHBbZisrXT1ULFQ9VD4+OCxwW2YrK109VCxUPVQ+PjgscFtmKytdPVQ7bGV0IE89TnVtYmVyKGw+PkJpZ0ludCgzMikmQmlnSW50KDQyOTQ5NjcyOTUpKTtyZXR1cm4gcFtmKytdPU8sTz1PPj44LHBbZisrXT1PLE89Tz4+OCxwW2YrK109TyxPPU8+PjgscFtmKytdPU8sZn1mdW5jdGlvbiBFbChwLGwsZixiLEEpe1JsKGwsYixBLHAsZiw3KTtsZXQgVD1OdW1iZXIobCZCaWdJbnQoNDI5NDk2NzI5NSkpO3BbZis3XT1ULFQ9VD4+OCxwW2YrNl09VCxUPVQ+PjgscFtmKzVdPVQsVD1UPj44LHBbZis0XT1UO2xldCBPPU51bWJlcihsPj5CaWdJbnQoMzIpJkJpZ0ludCg0Mjk0OTY3Mjk1KSk7cmV0dXJuIHBbZiszXT1PLE89Tz4+OCxwW2YrMl09TyxPPU8+PjgscFtmKzFdPU8sTz1PPj44LHBbZl09TyxmKzh9cy5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRMRT14dChmdW5jdGlvbihsLGY9MCl7cmV0dXJuIHZsKHRoaXMsbCxmLEJpZ0ludCgwKSxCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZcIikpfSkscy5wcm90b3R5cGUud3JpdGVCaWdVSW50NjRCRT14dChmdW5jdGlvbihsLGY9MCl7cmV0dXJuIEVsKHRoaXMsbCxmLEJpZ0ludCgwKSxCaWdJbnQoXCIweGZmZmZmZmZmZmZmZmZmZmZcIikpfSkscy5wcm90b3R5cGUud3JpdGVJbnRMRT1mdW5jdGlvbihsLGYsYixBKXtpZihsPStsLGY9Zj4+PjAsIUEpe2xldCBzZT1NYXRoLnBvdygyLDgqYi0xKTtDZSh0aGlzLGwsZixiLHNlLTEsLXNlKTt9bGV0IFQ9MCxPPTEsJD0wO2Zvcih0aGlzW2ZdPWwmMjU1OysrVDxiJiYoTyo9MjU2KTspbDwwJiYkPT09MCYmdGhpc1tmK1QtMV0hPT0wJiYoJD0xKSx0aGlzW2YrVF09KGwvTz4+MCktJCYyNTU7cmV0dXJuIGYrYn0scy5wcm90b3R5cGUud3JpdGVJbnRCRT1mdW5jdGlvbihsLGYsYixBKXtpZihsPStsLGY9Zj4+PjAsIUEpe2xldCBzZT1NYXRoLnBvdygyLDgqYi0xKTtDZSh0aGlzLGwsZixiLHNlLTEsLXNlKTt9bGV0IFQ9Yi0xLE89MSwkPTA7Zm9yKHRoaXNbZitUXT1sJjI1NTstLVQ+PTAmJihPKj0yNTYpOylsPDAmJiQ9PT0wJiZ0aGlzW2YrVCsxXSE9PTAmJigkPTEpLHRoaXNbZitUXT0obC9PPj4wKS0kJjI1NTtyZXR1cm4gZitifSxzLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBsPStsLGY9Zj4+PjAsYnx8Q2UodGhpcyxsLGYsMSwxMjcsLTEyOCksbDwwJiYobD0yNTUrbCsxKSx0aGlzW2ZdPWwmMjU1LGYrMX0scy5wcm90b3R5cGUud3JpdGVJbnQxNkxFPWZ1bmN0aW9uKGwsZixiKXtyZXR1cm4gbD0rbCxmPWY+Pj4wLGJ8fENlKHRoaXMsbCxmLDIsMzI3NjcsLTMyNzY4KSx0aGlzW2ZdPWwmMjU1LHRoaXNbZisxXT1sPj4+OCxmKzJ9LHMucHJvdG90eXBlLndyaXRlSW50MTZCRT1mdW5jdGlvbihsLGYsYil7cmV0dXJuIGw9K2wsZj1mPj4+MCxifHxDZSh0aGlzLGwsZiwyLDMyNzY3LC0zMjc2OCksdGhpc1tmXT1sPj4+OCx0aGlzW2YrMV09bCYyNTUsZisyfSxzLnByb3RvdHlwZS53cml0ZUludDMyTEU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBsPStsLGY9Zj4+PjAsYnx8Q2UodGhpcyxsLGYsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSx0aGlzW2ZdPWwmMjU1LHRoaXNbZisxXT1sPj4+OCx0aGlzW2YrMl09bD4+PjE2LHRoaXNbZiszXT1sPj4+MjQsZis0fSxzLnByb3RvdHlwZS53cml0ZUludDMyQkU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBsPStsLGY9Zj4+PjAsYnx8Q2UodGhpcyxsLGYsNCwyMTQ3NDgzNjQ3LC0yMTQ3NDgzNjQ4KSxsPDAmJihsPTQyOTQ5NjcyOTUrbCsxKSx0aGlzW2ZdPWw+Pj4yNCx0aGlzW2YrMV09bD4+PjE2LHRoaXNbZisyXT1sPj4+OCx0aGlzW2YrM109bCYyNTUsZis0fSxzLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEU9eHQoZnVuY3Rpb24obCxmPTApe3JldHVybiB2bCh0aGlzLGwsZiwtQmlnSW50KFwiMHg4MDAwMDAwMDAwMDAwMDAwXCIpLEJpZ0ludChcIjB4N2ZmZmZmZmZmZmZmZmZmZlwiKSl9KSxzLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0QkU9eHQoZnVuY3Rpb24obCxmPTApe3JldHVybiBFbCh0aGlzLGwsZiwtQmlnSW50KFwiMHg4MDAwMDAwMDAwMDAwMDAwXCIpLEJpZ0ludChcIjB4N2ZmZmZmZmZmZmZmZmZmZlwiKSl9KTtmdW5jdGlvbiBTbChwLGwsZixiLEEsVCl7aWYoZitiPnAubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpO2lmKGY8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKX1mdW5jdGlvbiBBbChwLGwsZixiLEEpe3JldHVybiBsPStsLGY9Zj4+PjAsQXx8U2wocCxsLGYsNCksZS53cml0ZShwLGwsZixiLDIzLDQpLGYrNH1zLnByb3RvdHlwZS53cml0ZUZsb2F0TEU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBBbCh0aGlzLGwsZiwhMCxiKX0scy5wcm90b3R5cGUud3JpdGVGbG9hdEJFPWZ1bmN0aW9uKGwsZixiKXtyZXR1cm4gQWwodGhpcyxsLGYsITEsYil9O2Z1bmN0aW9uIElsKHAsbCxmLGIsQSl7cmV0dXJuIGw9K2wsZj1mPj4+MCxBfHxTbChwLGwsZiw4KSxlLndyaXRlKHAsbCxmLGIsNTIsOCksZis4fXMucHJvdG90eXBlLndyaXRlRG91YmxlTEU9ZnVuY3Rpb24obCxmLGIpe3JldHVybiBJbCh0aGlzLGwsZiwhMCxiKX0scy5wcm90b3R5cGUud3JpdGVEb3VibGVCRT1mdW5jdGlvbihsLGYsYil7cmV0dXJuIElsKHRoaXMsbCxmLCExLGIpfSxzLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGwsZixiLEEpe2lmKCFzLmlzQnVmZmVyKGwpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhcmd1bWVudCBzaG91bGQgYmUgYSBCdWZmZXJcIik7aWYoYnx8KGI9MCksIUEmJkEhPT0wJiYoQT10aGlzLmxlbmd0aCksZj49bC5sZW5ndGgmJihmPWwubGVuZ3RoKSxmfHwoZj0wKSxBPjAmJkE8YiYmKEE9YiksQT09PWJ8fGwubGVuZ3RoPT09MHx8dGhpcy5sZW5ndGg9PT0wKXJldHVybiAwO2lmKGY8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYoYjwwfHxiPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihBPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtBPnRoaXMubGVuZ3RoJiYoQT10aGlzLmxlbmd0aCksbC5sZW5ndGgtZjxBLWImJihBPWwubGVuZ3RoLWYrYik7bGV0IFQ9QS1iO3JldHVybiB0aGlzPT09bCYmdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW49PVwiZnVuY3Rpb25cIj90aGlzLmNvcHlXaXRoaW4oZixiLEEpOlVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKGwsdGhpcy5zdWJhcnJheShiLEEpLGYpLFR9LHMucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24obCxmLGIsQSl7aWYodHlwZW9mIGw9PVwic3RyaW5nXCIpe2lmKHR5cGVvZiBmPT1cInN0cmluZ1wiPyhBPWYsZj0wLGI9dGhpcy5sZW5ndGgpOnR5cGVvZiBiPT1cInN0cmluZ1wiJiYoQT1iLGI9dGhpcy5sZW5ndGgpLEEhPT12b2lkIDAmJnR5cGVvZiBBIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKHR5cGVvZiBBPT1cInN0cmluZ1wiJiYhcy5pc0VuY29kaW5nKEEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitBKTtpZihsLmxlbmd0aD09PTEpe2xldCBPPWwuY2hhckNvZGVBdCgwKTsoQT09PVwidXRmOFwiJiZPPDEyOHx8QT09PVwibGF0aW4xXCIpJiYobD1PKTt9fWVsc2UgdHlwZW9mIGw9PVwibnVtYmVyXCI/bD1sJjI1NTp0eXBlb2YgbD09XCJib29sZWFuXCImJihsPU51bWJlcihsKSk7aWYoZjwwfHx0aGlzLmxlbmd0aDxmfHx0aGlzLmxlbmd0aDxiKXRocm93IG5ldyBSYW5nZUVycm9yKFwiT3V0IG9mIHJhbmdlIGluZGV4XCIpO2lmKGI8PWYpcmV0dXJuIHRoaXM7Zj1mPj4+MCxiPWI9PT12b2lkIDA/dGhpcy5sZW5ndGg6Yj4+PjAsbHx8KGw9MCk7bGV0IFQ7aWYodHlwZW9mIGw9PVwibnVtYmVyXCIpZm9yKFQ9ZjtUPGI7KytUKXRoaXNbVF09bDtlbHNlIHtsZXQgTz1zLmlzQnVmZmVyKGwpP2w6cy5mcm9tKGwsQSksJD1PLmxlbmd0aDtpZigkPT09MCl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInK2wrJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpO2ZvcihUPTA7VDxiLWY7KytUKXRoaXNbVCtmXT1PW1QlJF07fXJldHVybiB0aGlzfTtsZXQgT3I9e307ZnVuY3Rpb24gZnMocCxsLGYpe09yW3BdPWNsYXNzIGV4dGVuZHMgZntjb25zdHJ1Y3Rvcigpe3N1cGVyKCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJtZXNzYWdlXCIse3ZhbHVlOmwuYXBwbHkodGhpcyxhcmd1bWVudHMpLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHRoaXMubmFtZT1gJHt0aGlzLm5hbWV9IFske3B9XWAsdGhpcy5zdGFjayxkZWxldGUgdGhpcy5uYW1lO31nZXQgY29kZSgpe3JldHVybiBwfXNldCBjb2RlKEEpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY29kZVwiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpBLHdyaXRhYmxlOiEwfSk7fXRvU3RyaW5nKCl7cmV0dXJuIGAke3RoaXMubmFtZX0gWyR7cH1dOiAke3RoaXMubWVzc2FnZX1gfX07fWZzKFwiRVJSX0JVRkZFUl9PVVRfT0ZfQk9VTkRTXCIsZnVuY3Rpb24ocCl7cmV0dXJuIHA/YCR7cH0gaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzYDpcIkF0dGVtcHQgdG8gYWNjZXNzIG1lbW9yeSBvdXRzaWRlIGJ1ZmZlciBib3VuZHNcIn0sUmFuZ2VFcnJvciksZnMoXCJFUlJfSU5WQUxJRF9BUkdfVFlQRVwiLGZ1bmN0aW9uKHAsbCl7cmV0dXJuIGBUaGUgXCIke3B9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBsfWB9LFR5cGVFcnJvciksZnMoXCJFUlJfT1VUX09GX1JBTkdFXCIsZnVuY3Rpb24ocCxsLGYpe2xldCBiPWBUaGUgdmFsdWUgb2YgXCIke3B9XCIgaXMgb3V0IG9mIHJhbmdlLmAsQT1mO3JldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGYpJiZNYXRoLmFicyhmKT4yKiozMj9BPVRsKFN0cmluZyhmKSk6dHlwZW9mIGY9PVwiYmlnaW50XCImJihBPVN0cmluZyhmKSwoZj5CaWdJbnQoMikqKkJpZ0ludCgzMil8fGY8LShCaWdJbnQoMikqKkJpZ0ludCgzMikpKSYmKEE9VGwoQSkpLEErPVwiblwiKSxiKz1gIEl0IG11c3QgYmUgJHtsfS4gUmVjZWl2ZWQgJHtBfWAsYn0sUmFuZ2VFcnJvcik7ZnVuY3Rpb24gVGwocCl7bGV0IGw9XCJcIixmPXAubGVuZ3RoLGI9cFswXT09PVwiLVwiPzE6MDtmb3IoO2Y+PWIrNDtmLT0zKWw9YF8ke3Auc2xpY2UoZi0zLGYpfSR7bH1gO3JldHVybiBgJHtwLnNsaWNlKDAsZil9JHtsfWB9ZnVuY3Rpb24gRGcocCxsLGYpe2tyKGwsXCJvZmZzZXRcIiksKHBbbF09PT12b2lkIDB8fHBbbCtmXT09PXZvaWQgMCkmJmxpKGwscC5sZW5ndGgtKGYrMSkpO31mdW5jdGlvbiBSbChwLGwsZixiLEEsVCl7aWYocD5mfHxwPGwpe2xldCBPPXR5cGVvZiBsPT1cImJpZ2ludFwiP1wiblwiOlwiXCIsJDt0aHJvdyBUPjM/bD09PTB8fGw9PT1CaWdJbnQoMCk/JD1gPj0gMCR7T30gYW5kIDwgMiR7T30gKiogJHsoVCsxKSo4fSR7T31gOiQ9YD49IC0oMiR7T30gKiogJHsoVCsxKSo4LTF9JHtPfSkgYW5kIDwgMiAqKiAkeyhUKzEpKjgtMX0ke099YDokPWA+PSAke2x9JHtPfSBhbmQgPD0gJHtmfSR7T31gLG5ldyBPci5FUlJfT1VUX09GX1JBTkdFKFwidmFsdWVcIiwkLHApfURnKGIsQSxUKTt9ZnVuY3Rpb24ga3IocCxsKXtpZih0eXBlb2YgcCE9XCJudW1iZXJcIil0aHJvdyBuZXcgT3IuRVJSX0lOVkFMSURfQVJHX1RZUEUobCxcIm51bWJlclwiLHApfWZ1bmN0aW9uIGxpKHAsbCxmKXt0aHJvdyBNYXRoLmZsb29yKHApIT09cD8oa3IocCxmKSxuZXcgT3IuRVJSX09VVF9PRl9SQU5HRShmfHxcIm9mZnNldFwiLFwiYW4gaW50ZWdlclwiLHApKTpsPDA/bmV3IE9yLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUzpuZXcgT3IuRVJSX09VVF9PRl9SQU5HRShmfHxcIm9mZnNldFwiLGA+PSAke2Y/MTowfSBhbmQgPD0gJHtsfWAscCl9bGV0IGpnPS9bXisvMC05QS1aYS16LV9dL2c7ZnVuY3Rpb24gRmcocCl7aWYocD1wLnNwbGl0KFwiPVwiKVswXSxwPXAudHJpbSgpLnJlcGxhY2UoamcsXCJcIikscC5sZW5ndGg8MilyZXR1cm4gXCJcIjtmb3IoO3AubGVuZ3RoJTQhPT0wOylwPXArXCI9XCI7cmV0dXJuIHB9ZnVuY3Rpb24gY3MocCxsKXtsPWx8fDEvMDtsZXQgZixiPXAubGVuZ3RoLEE9bnVsbCxUPVtdO2ZvcihsZXQgTz0wO088YjsrK08pe2lmKGY9cC5jaGFyQ29kZUF0KE8pLGY+NTUyOTUmJmY8NTczNDQpe2lmKCFBKXtpZihmPjU2MzE5KXsobC09Myk+LTEmJlQucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9ZWxzZSBpZihPKzE9PT1iKXsobC09Myk+LTEmJlQucHVzaCgyMzksMTkxLDE4OSk7Y29udGludWV9QT1mO2NvbnRpbnVlfWlmKGY8NTYzMjApeyhsLT0zKT4tMSYmVC5wdXNoKDIzOSwxOTEsMTg5KSxBPWY7Y29udGludWV9Zj0oQS01NTI5Njw8MTB8Zi01NjMyMCkrNjU1MzY7fWVsc2UgQSYmKGwtPTMpPi0xJiZULnB1c2goMjM5LDE5MSwxODkpO2lmKEE9bnVsbCxmPDEyOCl7aWYoKGwtPTEpPDApYnJlYWs7VC5wdXNoKGYpO31lbHNlIGlmKGY8MjA0OCl7aWYoKGwtPTIpPDApYnJlYWs7VC5wdXNoKGY+PjZ8MTkyLGYmNjN8MTI4KTt9ZWxzZSBpZihmPDY1NTM2KXtpZigobC09Myk8MClicmVhaztULnB1c2goZj4+MTJ8MjI0LGY+PjYmNjN8MTI4LGYmNjN8MTI4KTt9ZWxzZSBpZihmPDExMTQxMTIpe2lmKChsLT00KTwwKWJyZWFrO1QucHVzaChmPj4xOHwyNDAsZj4+MTImNjN8MTI4LGY+PjYmNjN8MTI4LGYmNjN8MTI4KTt9ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvZGUgcG9pbnRcIil9cmV0dXJuIFR9ZnVuY3Rpb24gV2cocCl7bGV0IGw9W107Zm9yKGxldCBmPTA7ZjxwLmxlbmd0aDsrK2YpbC5wdXNoKHAuY2hhckNvZGVBdChmKSYyNTUpO3JldHVybiBsfWZ1bmN0aW9uICRnKHAsbCl7bGV0IGYsYixBLFQ9W107Zm9yKGxldCBPPTA7TzxwLmxlbmd0aCYmISgobC09Mik8MCk7KytPKWY9cC5jaGFyQ29kZUF0KE8pLGI9Zj4+OCxBPWYlMjU2LFQucHVzaChBKSxULnB1c2goYik7cmV0dXJuIFR9ZnVuY3Rpb24gQ2wocCl7cmV0dXJuIHQudG9CeXRlQXJyYXkoRmcocCkpfWZ1bmN0aW9uIHFpKHAsbCxmLGIpe2xldCBBO2ZvcihBPTA7QTxiJiYhKEErZj49bC5sZW5ndGh8fEE+PXAubGVuZ3RoKTsrK0EpbFtBK2ZdPXBbQV07cmV0dXJuIEF9ZnVuY3Rpb24gWWUocCxsKXtyZXR1cm4gcCBpbnN0YW5jZW9mIGx8fHAhPW51bGwmJnAuY29uc3RydWN0b3IhPW51bGwmJnAuY29uc3RydWN0b3IubmFtZSE9bnVsbCYmcC5jb25zdHJ1Y3Rvci5uYW1lPT09bC5uYW1lfWZ1bmN0aW9uIGhzKHApe3JldHVybiBwIT09cH1sZXQgSGc9ZnVuY3Rpb24oKXtsZXQgcD1cIjAxMjM0NTY3ODlhYmNkZWZcIixsPW5ldyBBcnJheSgyNTYpO2ZvcihsZXQgZj0wO2Y8MTY7KytmKXtsZXQgYj1mKjE2O2ZvcihsZXQgQT0wO0E8MTY7KytBKWxbYitBXT1wW2ZdK3BbQV07fXJldHVybiBsfSgpO2Z1bmN0aW9uIHh0KHApe3JldHVybiB0eXBlb2YgQmlnSW50PlwidVwiP1ZnOnB9ZnVuY3Rpb24gVmcoKXt0aHJvdyBuZXcgRXJyb3IoXCJCaWdJbnQgbm90IHN1cHBvcnRlZFwiKX1yZXR1cm4gSnR9dmFyIHVpLFZ1LFdpLHp1LEp0LEt1LEx0LHgsZXksdHkseWU9d2UoKCk9Pnt2KCk7bSgpO18oKTt1aT17fSxWdT0hMTtXaT17fSx6dT0hMTtKdD17fSxLdT0hMTtMdD1aZygpO0x0LkJ1ZmZlcjtMdC5TbG93QnVmZmVyO0x0LklOU1BFQ1RfTUFYX0JZVEVTO0x0LmtNYXhMZW5ndGg7eD1MdC5CdWZmZXIsZXk9THQuSU5TUEVDVF9NQVhfQllURVMsdHk9THQua01heExlbmd0aDt9KTt2YXIgdj13ZSgoKT0+e3llKCk7fSk7dmFyIEd1PU0od3M9Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkod3MsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGJzPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuYWxpYXNUb1RvcGljPXt9LHRoaXMubWF4PWU7fXB1dChlLHIpe3JldHVybiByPT09MHx8cj50aGlzLm1heD8hMToodGhpcy5hbGlhc1RvVG9waWNbcl09ZSx0aGlzLmxlbmd0aD1PYmplY3Qua2V5cyh0aGlzLmFsaWFzVG9Ub3BpYykubGVuZ3RoLCEwKX1nZXRUb3BpY0J5QWxpYXMoZSl7cmV0dXJuIHRoaXMuYWxpYXNUb1RvcGljW2VdfWNsZWFyKCl7dGhpcy5hbGlhc1RvVG9waWM9e307fX07d3MuZGVmYXVsdD1iczt9KTt2YXIgY2U9TSgoUEEsUXUpPT57digpO20oKTtfKCk7UXUuZXhwb3J0cz17QXJyYXlJc0FycmF5KHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpfSxBcnJheVByb3RvdHlwZUluY2x1ZGVzKHQsZSl7cmV0dXJuIHQuaW5jbHVkZXMoZSl9LEFycmF5UHJvdG90eXBlSW5kZXhPZih0LGUpe3JldHVybiB0LmluZGV4T2YoZSl9LEFycmF5UHJvdG90eXBlSm9pbih0LGUpe3JldHVybiB0LmpvaW4oZSl9LEFycmF5UHJvdG90eXBlTWFwKHQsZSl7cmV0dXJuIHQubWFwKGUpfSxBcnJheVByb3RvdHlwZVBvcCh0LGUpe3JldHVybiB0LnBvcChlKX0sQXJyYXlQcm90b3R5cGVQdXNoKHQsZSl7cmV0dXJuIHQucHVzaChlKX0sQXJyYXlQcm90b3R5cGVTbGljZSh0LGUscil7cmV0dXJuIHQuc2xpY2UoZSxyKX0sRXJyb3IsRnVuY3Rpb25Qcm90b3R5cGVDYWxsKHQsZSwuLi5yKXtyZXR1cm4gdC5jYWxsKGUsLi4ucil9LEZ1bmN0aW9uUHJvdG90eXBlU3ltYm9sSGFzSW5zdGFuY2UodCxlKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0uY2FsbCh0LGUpfSxNYXRoRmxvb3I6TWF0aC5mbG9vcixOdW1iZXIsTnVtYmVySXNJbnRlZ2VyOk51bWJlci5pc0ludGVnZXIsTnVtYmVySXNOYU46TnVtYmVyLmlzTmFOLE51bWJlck1BWF9TQUZFX0lOVEVHRVI6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsTnVtYmVyTUlOX1NBRkVfSU5URUdFUjpOdW1iZXIuTUlOX1NBRkVfSU5URUdFUixOdW1iZXJQYXJzZUludDpOdW1iZXIucGFyc2VJbnQsT2JqZWN0RGVmaW5lUHJvcGVydGllcyh0LGUpe3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LGUpfSxPYmplY3REZWZpbmVQcm9wZXJ0eSh0LGUscil7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUscil9LE9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGUpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsZSl9LE9iamVjdEtleXModCl7cmV0dXJuIE9iamVjdC5rZXlzKHQpfSxPYmplY3RTZXRQcm90b3R5cGVPZih0LGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKX0sUHJvbWlzZSxQcm9taXNlUHJvdG90eXBlQ2F0Y2godCxlKXtyZXR1cm4gdC5jYXRjaChlKX0sUHJvbWlzZVByb3RvdHlwZVRoZW4odCxlLHIpe3JldHVybiB0LnRoZW4oZSxyKX0sUHJvbWlzZVJlamVjdCh0KXtyZXR1cm4gUHJvbWlzZS5yZWplY3QodCl9LFJlZmxlY3RBcHBseTpSZWZsZWN0LmFwcGx5LFJlZ0V4cFByb3RvdHlwZVRlc3QodCxlKXtyZXR1cm4gdC50ZXN0KGUpfSxTYWZlU2V0OlNldCxTdHJpbmcsU3RyaW5nUHJvdG90eXBlU2xpY2UodCxlLHIpe3JldHVybiB0LnNsaWNlKGUscil9LFN0cmluZ1Byb3RvdHlwZVRvTG93ZXJDYXNlKHQpe3JldHVybiB0LnRvTG93ZXJDYXNlKCl9LFN0cmluZ1Byb3RvdHlwZVRvVXBwZXJDYXNlKHQpe3JldHVybiB0LnRvVXBwZXJDYXNlKCl9LFN0cmluZ1Byb3RvdHlwZVRyaW0odCl7cmV0dXJuIHQudHJpbSgpfSxTeW1ib2wsU3ltYm9sRm9yOlN5bWJvbC5mb3IsU3ltYm9sQXN5bmNJdGVyYXRvcjpTeW1ib2wuYXN5bmNJdGVyYXRvcixTeW1ib2xIYXNJbnN0YW5jZTpTeW1ib2wuaGFzSW5zdGFuY2UsU3ltYm9sSXRlcmF0b3I6U3ltYm9sLml0ZXJhdG9yLFR5cGVkQXJyYXlQcm90b3R5cGVTZXQodCxlLHIpe3JldHVybiB0LnNldChlLHIpfSxVaW50OEFycmF5fTt9KTt2YXIgSmU9TSgoakEsbXMpPT57digpO20oKTtfKCk7dmFyIHJ5PSh5ZSgpLFgoX2UpKSxpeT1PYmplY3QuZ2V0UHJvdG90eXBlT2YoYXN5bmMgZnVuY3Rpb24oKXt9KS5jb25zdHJ1Y3RvcixZdT1nbG9iYWxUaGlzLkJsb2J8fHJ5LkJsb2Isbnk9dHlwZW9mIFl1PFwidVwiP2Z1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgWXV9OmZ1bmN0aW9uKGUpe3JldHVybiAhMX0sX3M9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlKXtpZighQXJyYXkuaXNBcnJheShlKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBpbnB1dCB0byBiZSBhbiBBcnJheSwgZ290ICR7dHlwZW9mIGV9YCk7bGV0IHI9XCJcIjtmb3IobGV0IGk9MDtpPGUubGVuZ3RoO2krKylyKz1gICAgICR7ZVtpXS5zdGFja31cbmA7c3VwZXIociksdGhpcy5uYW1lPVwiQWdncmVnYXRlRXJyb3JcIix0aGlzLmVycm9ycz1lO319O21zLmV4cG9ydHM9e0FnZ3JlZ2F0ZUVycm9yOl9zLGtFbXB0eU9iamVjdDpPYmplY3QuZnJlZXplKHt9KSxvbmNlKHQpe2xldCBlPSExO3JldHVybiBmdW5jdGlvbiguLi5yKXtlfHwoZT0hMCx0LmFwcGx5KHRoaXMscikpO319LGNyZWF0ZURlZmVycmVkUHJvbWlzZTpmdW5jdGlvbigpe2xldCB0LGU7cmV0dXJuIHtwcm9taXNlOm5ldyBQcm9taXNlKChpLG4pPT57dD1pLGU9bjt9KSxyZXNvbHZlOnQscmVqZWN0OmV9fSxwcm9taXNpZnkodCl7cmV0dXJuIG5ldyBQcm9taXNlKChlLHIpPT57dCgoaSwuLi5uKT0+aT9yKGkpOmUoLi4ubikpO30pfSxkZWJ1Z2xvZygpe3JldHVybiBmdW5jdGlvbigpe319LGZvcm1hdCh0LC4uLmUpe3JldHVybiB0LnJlcGxhY2UoLyUoW3NkaWZqXSkvZyxmdW5jdGlvbiguLi5bcixpXSl7bGV0IG49ZS5zaGlmdCgpO3JldHVybiBpPT09XCJmXCI/bi50b0ZpeGVkKDYpOmk9PT1cImpcIj9KU09OLnN0cmluZ2lmeShuKTppPT09XCJzXCImJnR5cGVvZiBuPT1cIm9iamVjdFwiP2Ake24uY29uc3RydWN0b3IhPT1PYmplY3Q/bi5jb25zdHJ1Y3Rvci5uYW1lOlwiXCJ9IHt9YC50cmltKCk6bi50b1N0cmluZygpfSl9LGluc3BlY3QodCl7c3dpdGNoKHR5cGVvZiB0KXtjYXNlXCJzdHJpbmdcIjppZih0LmluY2x1ZGVzKFwiJ1wiKSlpZih0LmluY2x1ZGVzKCdcIicpKXtpZighdC5pbmNsdWRlcyhcImBcIikmJiF0LmluY2x1ZGVzKFwiJHtcIikpcmV0dXJuIGBcXGAke3R9XFxgYH1lbHNlIHJldHVybiBgXCIke3R9XCJgO3JldHVybiBgJyR7dH0nYDtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNOYU4odCk/XCJOYU5cIjpPYmplY3QuaXModCwtMCk/U3RyaW5nKHQpOnQ7Y2FzZVwiYmlnaW50XCI6cmV0dXJuIGAke1N0cmluZyh0KX1uYDtjYXNlXCJib29sZWFuXCI6Y2FzZVwidW5kZWZpbmVkXCI6cmV0dXJuIFN0cmluZyh0KTtjYXNlXCJvYmplY3RcIjpyZXR1cm4gXCJ7fVwifX0sdHlwZXM6e2lzQXN5bmNGdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGl5fSxpc0FycmF5QnVmZmVyVmlldyh0KXtyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KHQpfX0saXNCbG9iOm55fTttcy5leHBvcnRzLnByb21pc2lmeS5jdXN0b209U3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLnByb21pc2lmeS5jdXN0b21cIik7fSk7dmFyIEhpPU0oKFlBLCRpKT0+e3YoKTttKCk7XygpO3ZhcntBYm9ydENvbnRyb2xsZXI6SnUsQWJvcnRTaWduYWw6c3l9PXR5cGVvZiBzZWxmPFwidVwiP3NlbGY6dHlwZW9mIHdpbmRvdzxcInVcIj93aW5kb3c6dm9pZCAwOyRpLmV4cG9ydHM9SnU7JGkuZXhwb3J0cy5BYm9ydFNpZ25hbD1zeTskaS5leHBvcnRzLmRlZmF1bHQ9SnU7fSk7dmFyIFNlPU0oKG9JLGVmKT0+e3YoKTttKCk7XygpO3Zhcntmb3JtYXQ6b3ksaW5zcGVjdDpWaSxBZ2dyZWdhdGVFcnJvcjpheX09SmUoKSxseT1nbG9iYWxUaGlzLkFnZ3JlZ2F0ZUVycm9yfHxheSx1eT1TeW1ib2woXCJrSXNOb2RlRXJyb3JcIiksZnk9W1wic3RyaW5nXCIsXCJmdW5jdGlvblwiLFwibnVtYmVyXCIsXCJvYmplY3RcIixcIkZ1bmN0aW9uXCIsXCJPYmplY3RcIixcImJvb2xlYW5cIixcImJpZ2ludFwiLFwic3ltYm9sXCJdLGN5PS9eKFtBLVpdW2EtejAtOV0qKSskLyxoeT1cIl9fbm9kZV9pbnRlcm5hbF9cIix6aT17fTtmdW5jdGlvbiBYdCh0LGUpe2lmKCF0KXRocm93IG5ldyB6aS5FUlJfSU5URVJOQUxfQVNTRVJUSU9OKGUpfWZ1bmN0aW9uIFh1KHQpe2xldCBlPVwiXCIscj10Lmxlbmd0aCxpPXRbMF09PT1cIi1cIj8xOjA7Zm9yKDtyPj1pKzQ7ci09MyllPWBfJHt0LnNsaWNlKHItMyxyKX0ke2V9YDtyZXR1cm4gYCR7dC5zbGljZSgwLHIpfSR7ZX1gfWZ1bmN0aW9uIGR5KHQsZSxyKXtpZih0eXBlb2YgZT09XCJmdW5jdGlvblwiKXJldHVybiBYdChlLmxlbmd0aDw9ci5sZW5ndGgsYENvZGU6ICR7dH07IFRoZSBwcm92aWRlZCBhcmd1bWVudHMgbGVuZ3RoICgke3IubGVuZ3RofSkgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVpcmVkIG9uZXMgKCR7ZS5sZW5ndGh9KS5gKSxlKC4uLnIpO2xldCBpPShlLm1hdGNoKC8lW2RmaWpvT3NdL2cpfHxbXSkubGVuZ3RoO3JldHVybiBYdChpPT09ci5sZW5ndGgsYENvZGU6ICR7dH07IFRoZSBwcm92aWRlZCBhcmd1bWVudHMgbGVuZ3RoICgke3IubGVuZ3RofSkgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVpcmVkIG9uZXMgKCR7aX0pLmApLHIubGVuZ3RoPT09MD9lOm95KGUsLi4ucil9ZnVuY3Rpb24gbWUodCxlLHIpe3J8fChyPUVycm9yKTtjbGFzcyBpIGV4dGVuZHMgcntjb25zdHJ1Y3RvciguLi5vKXtzdXBlcihkeSh0LGUsbykpO310b1N0cmluZygpe3JldHVybiBgJHt0aGlzLm5hbWV9IFske3R9XTogJHt0aGlzLm1lc3NhZ2V9YH19T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaS5wcm90b3R5cGUse25hbWU6e3ZhbHVlOnIubmFtZSx3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0sdG9TdHJpbmc6e3ZhbHVlKCl7cmV0dXJuIGAke3RoaXMubmFtZX0gWyR7dH1dOiAke3RoaXMubWVzc2FnZX1gfSx3cml0YWJsZTohMCxlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH19KSxpLnByb3RvdHlwZS5jb2RlPXQsaS5wcm90b3R5cGVbdXldPSEwLHppW3RdPWk7fWZ1bmN0aW9uIFp1KHQpe2xldCBlPWh5K3QubmFtZTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJuYW1lXCIse3ZhbHVlOmV9KSx0fWZ1bmN0aW9uIHB5KHQsZSl7aWYodCYmZSYmdCE9PWUpe2lmKEFycmF5LmlzQXJyYXkoZS5lcnJvcnMpKXJldHVybiBlLmVycm9ycy5wdXNoKHQpLGU7bGV0IHI9bmV3IGx5KFtlLHRdLGUubWVzc2FnZSk7cmV0dXJuIHIuY29kZT1lLmNvZGUscn1yZXR1cm4gdHx8ZX12YXIgdnM9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlPVwiVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZFwiLHI9dm9pZCAwKXtpZihyIT09dm9pZCAwJiZ0eXBlb2YgciE9XCJvYmplY3RcIil0aHJvdyBuZXcgemkuRVJSX0lOVkFMSURfQVJHX1RZUEUoXCJvcHRpb25zXCIsXCJPYmplY3RcIixyKTtzdXBlcihlLHIpLHRoaXMuY29kZT1cIkFCT1JUX0VSUlwiLHRoaXMubmFtZT1cIkFib3J0RXJyb3JcIjt9fTttZShcIkVSUl9BU1NFUlRJT05cIixcIiVzXCIsRXJyb3IpO21lKFwiRVJSX0lOVkFMSURfQVJHX1RZUEVcIiwodCxlLHIpPT57WHQodHlwZW9mIHQ9PVwic3RyaW5nXCIsXCInbmFtZScgbXVzdCBiZSBhIHN0cmluZ1wiKSxBcnJheS5pc0FycmF5KGUpfHwoZT1bZV0pO2xldCBpPVwiVGhlIFwiO3QuZW5kc1dpdGgoXCIgYXJndW1lbnRcIik/aSs9YCR7dH0gYDppKz1gXCIke3R9XCIgJHt0LmluY2x1ZGVzKFwiLlwiKT9cInByb3BlcnR5XCI6XCJhcmd1bWVudFwifSBgLGkrPVwibXVzdCBiZSBcIjtsZXQgbj1bXSxvPVtdLHM9W107Zm9yKGxldCB1IG9mIGUpWHQodHlwZW9mIHU9PVwic3RyaW5nXCIsXCJBbGwgZXhwZWN0ZWQgZW50cmllcyBoYXZlIHRvIGJlIG9mIHR5cGUgc3RyaW5nXCIpLGZ5LmluY2x1ZGVzKHUpP24ucHVzaCh1LnRvTG93ZXJDYXNlKCkpOmN5LnRlc3QodSk/by5wdXNoKHUpOihYdCh1IT09XCJvYmplY3RcIiwnVGhlIHZhbHVlIFwib2JqZWN0XCIgc2hvdWxkIGJlIHdyaXR0ZW4gYXMgXCJPYmplY3RcIicpLHMucHVzaCh1KSk7aWYoby5sZW5ndGg+MCl7bGV0IHU9bi5pbmRleE9mKFwib2JqZWN0XCIpO3UhPT0tMSYmKG4uc3BsaWNlKG4sdSwxKSxvLnB1c2goXCJPYmplY3RcIikpO31pZihuLmxlbmd0aD4wKXtzd2l0Y2gobi5sZW5ndGgpe2Nhc2UgMTppKz1gb2YgdHlwZSAke25bMF19YDticmVhaztjYXNlIDI6aSs9YG9uZSBvZiB0eXBlICR7blswXX0gb3IgJHtuWzFdfWA7YnJlYWs7ZGVmYXVsdDp7bGV0IHU9bi5wb3AoKTtpKz1gb25lIG9mIHR5cGUgJHtuLmpvaW4oXCIsIFwiKX0sIG9yICR7dX1gO319KG8ubGVuZ3RoPjB8fHMubGVuZ3RoPjApJiYoaSs9XCIgb3IgXCIpO31pZihvLmxlbmd0aD4wKXtzd2l0Y2goby5sZW5ndGgpe2Nhc2UgMTppKz1gYW4gaW5zdGFuY2Ugb2YgJHtvWzBdfWA7YnJlYWs7Y2FzZSAyOmkrPWBhbiBpbnN0YW5jZSBvZiAke29bMF19IG9yICR7b1sxXX1gO2JyZWFrO2RlZmF1bHQ6e2xldCB1PW8ucG9wKCk7aSs9YGFuIGluc3RhbmNlIG9mICR7by5qb2luKFwiLCBcIil9LCBvciAke3V9YDt9fXMubGVuZ3RoPjAmJihpKz1cIiBvciBcIik7fXN3aXRjaChzLmxlbmd0aCl7Y2FzZSAwOmJyZWFrO2Nhc2UgMTpzWzBdLnRvTG93ZXJDYXNlKCkhPT1zWzBdJiYoaSs9XCJhbiBcIiksaSs9YCR7c1swXX1gO2JyZWFrO2Nhc2UgMjppKz1gb25lIG9mICR7c1swXX0gb3IgJHtzWzFdfWA7YnJlYWs7ZGVmYXVsdDp7bGV0IHU9cy5wb3AoKTtpKz1gb25lIG9mICR7cy5qb2luKFwiLCBcIil9LCBvciAke3V9YDt9fWlmKHI9PW51bGwpaSs9YC4gUmVjZWl2ZWQgJHtyfWA7ZWxzZSBpZih0eXBlb2Ygcj09XCJmdW5jdGlvblwiJiZyLm5hbWUpaSs9YC4gUmVjZWl2ZWQgZnVuY3Rpb24gJHtyLm5hbWV9YDtlbHNlIGlmKHR5cGVvZiByPT1cIm9iamVjdFwiKXt2YXIgYTtpZigoYT1yLmNvbnN0cnVjdG9yKSE9PW51bGwmJmEhPT12b2lkIDAmJmEubmFtZSlpKz1gLiBSZWNlaXZlZCBhbiBpbnN0YW5jZSBvZiAke3IuY29uc3RydWN0b3IubmFtZX1gO2Vsc2Uge2xldCB1PVZpKHIse2RlcHRoOi0xfSk7aSs9YC4gUmVjZWl2ZWQgJHt1fWA7fX1lbHNlIHtsZXQgdT1WaShyLHtjb2xvcnM6ITF9KTt1Lmxlbmd0aD4yNSYmKHU9YCR7dS5zbGljZSgwLDI1KX0uLi5gKSxpKz1gLiBSZWNlaXZlZCB0eXBlICR7dHlwZW9mIHJ9ICgke3V9KWA7fXJldHVybiBpfSxUeXBlRXJyb3IpO21lKFwiRVJSX0lOVkFMSURfQVJHX1ZBTFVFXCIsKHQsZSxyPVwiaXMgaW52YWxpZFwiKT0+e2xldCBpPVZpKGUpO3JldHVybiBpLmxlbmd0aD4xMjgmJihpPWkuc2xpY2UoMCwxMjgpK1wiLi4uXCIpLGBUaGUgJHt0LmluY2x1ZGVzKFwiLlwiKT9cInByb3BlcnR5XCI6XCJhcmd1bWVudFwifSAnJHt0fScgJHtyfS4gUmVjZWl2ZWQgJHtpfWB9LFR5cGVFcnJvcik7bWUoXCJFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUVcIiwodCxlLHIpPT57dmFyIGk7bGV0IG49ciE9bnVsbCYmKGk9ci5jb25zdHJ1Y3RvcikhPT1udWxsJiZpIT09dm9pZCAwJiZpLm5hbWU/YGluc3RhbmNlIG9mICR7ci5jb25zdHJ1Y3Rvci5uYW1lfWA6YHR5cGUgJHt0eXBlb2Ygcn1gO3JldHVybiBgRXhwZWN0ZWQgJHt0fSB0byBiZSByZXR1cm5lZCBmcm9tIHRoZSBcIiR7ZX1cIiBmdW5jdGlvbiBidXQgZ290ICR7bn0uYH0sVHlwZUVycm9yKTttZShcIkVSUl9NSVNTSU5HX0FSR1NcIiwoLi4udCk9PntYdCh0Lmxlbmd0aD4wLFwiQXQgbGVhc3Qgb25lIGFyZyBuZWVkcyB0byBiZSBzcGVjaWZpZWRcIik7bGV0IGUscj10Lmxlbmd0aDtzd2l0Y2godD0oQXJyYXkuaXNBcnJheSh0KT90Olt0XSkubWFwKGk9PmBcIiR7aX1cImApLmpvaW4oXCIgb3IgXCIpLHIpe2Nhc2UgMTplKz1gVGhlICR7dFswXX0gYXJndW1lbnRgO2JyZWFrO2Nhc2UgMjplKz1gVGhlICR7dFswXX0gYW5kICR7dFsxXX0gYXJndW1lbnRzYDticmVhaztkZWZhdWx0OntsZXQgaT10LnBvcCgpO2UrPWBUaGUgJHt0LmpvaW4oXCIsIFwiKX0sIGFuZCAke2l9IGFyZ3VtZW50c2A7fWJyZWFrfXJldHVybiBgJHtlfSBtdXN0IGJlIHNwZWNpZmllZGB9LFR5cGVFcnJvcik7bWUoXCJFUlJfT1VUX09GX1JBTkdFXCIsKHQsZSxyKT0+e1h0KGUsJ01pc3NpbmcgXCJyYW5nZVwiIGFyZ3VtZW50Jyk7bGV0IGk7cmV0dXJuIE51bWJlci5pc0ludGVnZXIocikmJk1hdGguYWJzKHIpPjIqKjMyP2k9WHUoU3RyaW5nKHIpKTp0eXBlb2Ygcj09XCJiaWdpbnRcIj8oaT1TdHJpbmcociksKHI+Mm4qKjMybnx8cjwtKDJuKiozMm4pKSYmKGk9WHUoaSkpLGkrPVwiblwiKTppPVZpKHIpLGBUaGUgdmFsdWUgb2YgXCIke3R9XCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlICR7ZX0uIFJlY2VpdmVkICR7aX1gfSxSYW5nZUVycm9yKTttZShcIkVSUl9NVUxUSVBMRV9DQUxMQkFDS1wiLFwiQ2FsbGJhY2sgY2FsbGVkIG11bHRpcGxlIHRpbWVzXCIsRXJyb3IpO21lKFwiRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URURcIixcIlRoZSAlcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkXCIsRXJyb3IpO21lKFwiRVJSX1NUUkVBTV9BTFJFQURZX0ZJTklTSEVEXCIsXCJDYW5ub3QgY2FsbCAlcyBhZnRlciBhIHN0cmVhbSB3YXMgZmluaXNoZWRcIixFcnJvcik7bWUoXCJFUlJfU1RSRUFNX0NBTk5PVF9QSVBFXCIsXCJDYW5ub3QgcGlwZSwgbm90IHJlYWRhYmxlXCIsRXJyb3IpO21lKFwiRVJSX1NUUkVBTV9ERVNUUk9ZRURcIixcIkNhbm5vdCBjYWxsICVzIGFmdGVyIGEgc3RyZWFtIHdhcyBkZXN0cm95ZWRcIixFcnJvcik7bWUoXCJFUlJfU1RSRUFNX05VTExfVkFMVUVTXCIsXCJNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbVwiLFR5cGVFcnJvcik7bWUoXCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiLFwiUHJlbWF0dXJlIGNsb3NlXCIsRXJyb3IpO21lKFwiRVJSX1NUUkVBTV9QVVNIX0FGVEVSX0VPRlwiLFwic3RyZWFtLnB1c2goKSBhZnRlciBFT0ZcIixFcnJvcik7bWUoXCJFUlJfU1RSRUFNX1VOU0hJRlRfQUZURVJfRU5EX0VWRU5UXCIsXCJzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudFwiLEVycm9yKTttZShcIkVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EXCIsXCJ3cml0ZSBhZnRlciBlbmRcIixFcnJvcik7bWUoXCJFUlJfVU5LTk9XTl9FTkNPRElOR1wiLFwiVW5rbm93biBlbmNvZGluZzogJXNcIixUeXBlRXJyb3IpO2VmLmV4cG9ydHM9e0Fib3J0RXJyb3I6dnMsYWdncmVnYXRlVHdvRXJyb3JzOlp1KHB5KSxoaWRlU3RhY2tGcmFtZXM6WnUsY29kZXM6eml9O30pO3ZhciBmaT1NKCh5SSxmZik9Pnt2KCk7bSgpO18oKTt2YXJ7QXJyYXlJc0FycmF5OlNzLEFycmF5UHJvdG90eXBlSW5jbHVkZXM6c2YsQXJyYXlQcm90b3R5cGVKb2luOm9mLEFycmF5UHJvdG90eXBlTWFwOmd5LE51bWJlcklzSW50ZWdlcjpBcyxOdW1iZXJJc05hTjp5eSxOdW1iZXJNQVhfU0FGRV9JTlRFR0VSOmJ5LE51bWJlck1JTl9TQUZFX0lOVEVHRVI6d3ksTnVtYmVyUGFyc2VJbnQ6X3ksT2JqZWN0UHJvdG90eXBlSGFzT3duUHJvcGVydHk6bXksUmVnRXhwUHJvdG90eXBlRXhlYzphZixTdHJpbmc6dnksU3RyaW5nUHJvdG90eXBlVG9VcHBlckNhc2U6RXksU3RyaW5nUHJvdG90eXBlVHJpbTpTeX09Y2UoKSx7aGlkZVN0YWNrRnJhbWVzOlVlLGNvZGVzOntFUlJfU09DS0VUX0JBRF9QT1JUOkF5LEVSUl9JTlZBTElEX0FSR19UWVBFOkFlLEVSUl9JTlZBTElEX0FSR19WQUxVRTpNcixFUlJfT1VUX09GX1JBTkdFOlp0LEVSUl9VTktOT1dOX1NJR05BTDp0Zn19PVNlKCkse25vcm1hbGl6ZUVuY29kaW5nOkl5fT1KZSgpLHtpc0FzeW5jRnVuY3Rpb246VHksaXNBcnJheUJ1ZmZlclZpZXc6Unl9PUplKCkudHlwZXMscmY9e307ZnVuY3Rpb24gQ3kodCl7cmV0dXJuIHQ9PT0odHwwKX1mdW5jdGlvbiBCeSh0KXtyZXR1cm4gdD09PXQ+Pj4wfXZhciBQeT0vXlswLTddKyQvLE95PVwibXVzdCBiZSBhIDMyLWJpdCB1bnNpZ25lZCBpbnRlZ2VyIG9yIGFuIG9jdGFsIHN0cmluZ1wiO2Z1bmN0aW9uIGt5KHQsZSxyKXtpZih0eXBlb2YgdD5cInVcIiYmKHQ9ciksdHlwZW9mIHQ9PVwic3RyaW5nXCIpe2lmKGFmKFB5LHQpPT09bnVsbCl0aHJvdyBuZXcgTXIoZSx0LE95KTt0PV95KHQsOCk7fXJldHVybiBsZih0LGUpLHR9dmFyIHh5PVVlKCh0LGUscj13eSxpPWJ5KT0+e2lmKHR5cGVvZiB0IT1cIm51bWJlclwiKXRocm93IG5ldyBBZShlLFwibnVtYmVyXCIsdCk7aWYoIUFzKHQpKXRocm93IG5ldyBadChlLFwiYW4gaW50ZWdlclwiLHQpO2lmKHQ8cnx8dD5pKXRocm93IG5ldyBadChlLGA+PSAke3J9ICYmIDw9ICR7aX1gLHQpfSksTXk9VWUoKHQsZSxyPS0yMTQ3NDgzNjQ4LGk9MjE0NzQ4MzY0Nyk9PntpZih0eXBlb2YgdCE9XCJudW1iZXJcIil0aHJvdyBuZXcgQWUoZSxcIm51bWJlclwiLHQpO2lmKCFBcyh0KSl0aHJvdyBuZXcgWnQoZSxcImFuIGludGVnZXJcIix0KTtpZih0PHJ8fHQ+aSl0aHJvdyBuZXcgWnQoZSxgPj0gJHtyfSAmJiA8PSAke2l9YCx0KX0pLGxmPVVlKCh0LGUscj0hMSk9PntpZih0eXBlb2YgdCE9XCJudW1iZXJcIil0aHJvdyBuZXcgQWUoZSxcIm51bWJlclwiLHQpO2lmKCFBcyh0KSl0aHJvdyBuZXcgWnQoZSxcImFuIGludGVnZXJcIix0KTtsZXQgaT1yPzE6MCxuPTQyOTQ5NjcyOTU7aWYodDxpfHx0Pm4pdGhyb3cgbmV3IFp0KGUsYD49ICR7aX0gJiYgPD0gJHtufWAsdCl9KTtmdW5jdGlvbiBJcyh0LGUpe2lmKHR5cGVvZiB0IT1cInN0cmluZ1wiKXRocm93IG5ldyBBZShlLFwic3RyaW5nXCIsdCl9ZnVuY3Rpb24gTHkodCxlLHI9dm9pZCAwLGkpe2lmKHR5cGVvZiB0IT1cIm51bWJlclwiKXRocm93IG5ldyBBZShlLFwibnVtYmVyXCIsdCk7aWYociE9bnVsbCYmdDxyfHxpIT1udWxsJiZ0Pml8fChyIT1udWxsfHxpIT1udWxsKSYmeXkodCkpdGhyb3cgbmV3IFp0KGUsYCR7ciE9bnVsbD9gPj0gJHtyfWA6XCJcIn0ke3IhPW51bGwmJmkhPW51bGw/XCIgJiYgXCI6XCJcIn0ke2khPW51bGw/YDw9ICR7aX1gOlwiXCJ9YCx0KX12YXIgVXk9VWUoKHQsZSxyKT0+e2lmKCFzZihyLHQpKXtsZXQgbj1cIm11c3QgYmUgb25lIG9mOiBcIitvZihneShyLG89PnR5cGVvZiBvPT1cInN0cmluZ1wiP2AnJHtvfSdgOnZ5KG8pKSxcIiwgXCIpO3Rocm93IG5ldyBNcihlLHQsbil9fSk7ZnVuY3Rpb24gdWYodCxlKXtpZih0eXBlb2YgdCE9XCJib29sZWFuXCIpdGhyb3cgbmV3IEFlKGUsXCJib29sZWFuXCIsdCl9ZnVuY3Rpb24gRXModCxlLHIpe3JldHVybiB0PT1udWxsfHwhbXkodCxlKT9yOnRbZV19dmFyIE55PVVlKCh0LGUscj1udWxsKT0+e2xldCBpPUVzKHIsXCJhbGxvd0FycmF5XCIsITEpLG49RXMocixcImFsbG93RnVuY3Rpb25cIiwhMSk7aWYoIUVzKHIsXCJudWxsYWJsZVwiLCExKSYmdD09PW51bGx8fCFpJiZTcyh0KXx8dHlwZW9mIHQhPVwib2JqZWN0XCImJighbnx8dHlwZW9mIHQhPVwiZnVuY3Rpb25cIikpdGhyb3cgbmV3IEFlKGUsXCJPYmplY3RcIix0KX0pLHF5PVVlKCh0LGUpPT57aWYodCE9bnVsbCYmdHlwZW9mIHQhPVwib2JqZWN0XCImJnR5cGVvZiB0IT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IEFlKGUsXCJhIGRpY3Rpb25hcnlcIix0KX0pLFRzPVVlKCh0LGUscj0wKT0+e2lmKCFTcyh0KSl0aHJvdyBuZXcgQWUoZSxcIkFycmF5XCIsdCk7aWYodC5sZW5ndGg8cil7bGV0IGk9YG11c3QgYmUgbG9uZ2VyIHRoYW4gJHtyfWA7dGhyb3cgbmV3IE1yKGUsdCxpKX19KTtmdW5jdGlvbiBEeSh0LGUpe1RzKHQsZSk7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspSXModFtyXSxgJHtlfVske3J9XWApO31mdW5jdGlvbiBqeSh0LGUpe1RzKHQsZSk7Zm9yKGxldCByPTA7cjx0Lmxlbmd0aDtyKyspdWYodFtyXSxgJHtlfVske3J9XWApO31mdW5jdGlvbiBGeSh0LGU9XCJzaWduYWxcIil7aWYoSXModCxlKSxyZlt0XT09PXZvaWQgMCl0aHJvdyByZltFeSh0KV0hPT12b2lkIDA/bmV3IHRmKHQrXCIgKHNpZ25hbHMgbXVzdCB1c2UgYWxsIGNhcGl0YWwgbGV0dGVycylcIik6bmV3IHRmKHQpfXZhciBXeT1VZSgodCxlPVwiYnVmZmVyXCIpPT57aWYoIVJ5KHQpKXRocm93IG5ldyBBZShlLFtcIkJ1ZmZlclwiLFwiVHlwZWRBcnJheVwiLFwiRGF0YVZpZXdcIl0sdCl9KTtmdW5jdGlvbiAkeSh0LGUpe2xldCByPUl5KGUpLGk9dC5sZW5ndGg7aWYocj09PVwiaGV4XCImJmklMiE9PTApdGhyb3cgbmV3IE1yKFwiZW5jb2RpbmdcIixlLGBpcyBpbnZhbGlkIGZvciBkYXRhIG9mIGxlbmd0aCAke2l9YCl9ZnVuY3Rpb24gSHkodCxlPVwiUG9ydFwiLHI9ITApe2lmKHR5cGVvZiB0IT1cIm51bWJlclwiJiZ0eXBlb2YgdCE9XCJzdHJpbmdcInx8dHlwZW9mIHQ9PVwic3RyaW5nXCImJlN5KHQpLmxlbmd0aD09PTB8fCt0IT09K3Q+Pj4wfHx0PjY1NTM1fHx0PT09MCYmIXIpdGhyb3cgbmV3IEF5KGUsdCxyKTtyZXR1cm4gdHwwfXZhciBWeT1VZSgodCxlKT0+e2lmKHQhPT12b2lkIDAmJih0PT09bnVsbHx8dHlwZW9mIHQhPVwib2JqZWN0XCJ8fCEoXCJhYm9ydGVkXCJpbiB0KSkpdGhyb3cgbmV3IEFlKGUsXCJBYm9ydFNpZ25hbFwiLHQpfSksenk9VWUoKHQsZSk9PntpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBBZShlLFwiRnVuY3Rpb25cIix0KX0pLEt5PVVlKCh0LGUpPT57aWYodHlwZW9mIHQhPVwiZnVuY3Rpb25cInx8VHkodCkpdGhyb3cgbmV3IEFlKGUsXCJGdW5jdGlvblwiLHQpfSksR3k9VWUoKHQsZSk9PntpZih0IT09dm9pZCAwKXRocm93IG5ldyBBZShlLFwidW5kZWZpbmVkXCIsdCl9KTtmdW5jdGlvbiBReSh0LGUscil7aWYoIXNmKHIsdCkpdGhyb3cgbmV3IEFlKGUsYCgnJHtvZihyLFwifFwiKX0nKWAsdCl9dmFyIFl5PS9eKD86PFtePl0qPikoPzpcXHMqO1xccypbXjtcIlxcc10rKD86PShcIik/W147XCJcXHNdKlxcMSk/KSokLztmdW5jdGlvbiBuZih0LGUpe2lmKHR5cGVvZiB0PlwidVwifHwhYWYoWXksdCkpdGhyb3cgbmV3IE1yKGUsdCwnbXVzdCBiZSBhbiBhcnJheSBvciBzdHJpbmcgb2YgZm9ybWF0IFwiPC9zdHlsZXMuY3NzPjsgcmVsPXByZWxvYWQ7IGFzPXN0eWxlXCInKX1mdW5jdGlvbiBKeSh0KXtpZih0eXBlb2YgdD09XCJzdHJpbmdcIilyZXR1cm4gbmYodCxcImhpbnRzXCIpLHQ7aWYoU3ModCkpe2xldCBlPXQubGVuZ3RoLHI9XCJcIjtpZihlPT09MClyZXR1cm4gcjtmb3IobGV0IGk9MDtpPGU7aSsrKXtsZXQgbj10W2ldO25mKG4sXCJoaW50c1wiKSxyKz1uLGkhPT1lLTEmJihyKz1cIiwgXCIpO31yZXR1cm4gcn10aHJvdyBuZXcgTXIoXCJoaW50c1wiLHQsJ211c3QgYmUgYW4gYXJyYXkgb3Igc3RyaW5nIG9mIGZvcm1hdCBcIjwvc3R5bGVzLmNzcz47IHJlbD1wcmVsb2FkOyBhcz1zdHlsZVwiJyl9ZmYuZXhwb3J0cz17aXNJbnQzMjpDeSxpc1VpbnQzMjpCeSxwYXJzZUZpbGVNb2RlOmt5LHZhbGlkYXRlQXJyYXk6VHMsdmFsaWRhdGVTdHJpbmdBcnJheTpEeSx2YWxpZGF0ZUJvb2xlYW5BcnJheTpqeSx2YWxpZGF0ZUJvb2xlYW46dWYsdmFsaWRhdGVCdWZmZXI6V3ksdmFsaWRhdGVEaWN0aW9uYXJ5OnF5LHZhbGlkYXRlRW5jb2Rpbmc6JHksdmFsaWRhdGVGdW5jdGlvbjp6eSx2YWxpZGF0ZUludDMyOk15LHZhbGlkYXRlSW50ZWdlcjp4eSx2YWxpZGF0ZU51bWJlcjpMeSx2YWxpZGF0ZU9iamVjdDpOeSx2YWxpZGF0ZU9uZU9mOlV5LHZhbGlkYXRlUGxhaW5GdW5jdGlvbjpLeSx2YWxpZGF0ZVBvcnQ6SHksdmFsaWRhdGVTaWduYWxOYW1lOkZ5LHZhbGlkYXRlU3RyaW5nOklzLHZhbGlkYXRlVWludDMyOmxmLHZhbGlkYXRlVW5kZWZpbmVkOkd5LHZhbGlkYXRlVW5pb246UXksdmFsaWRhdGVBYm9ydFNpZ25hbDpWeSx2YWxpZGF0ZUxpbmtIZWFkZXJWYWx1ZTpKeX07fSk7dmFyIFV0PU0oKFRJLHBmKT0+e3YoKTttKCk7XygpO3ZhciBhZT1wZi5leHBvcnRzPXt9LFhlLFplO2Z1bmN0aW9uIFJzKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBDcygpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7dHlwZW9mIHNldFRpbWVvdXQ9PVwiZnVuY3Rpb25cIj9YZT1zZXRUaW1lb3V0OlhlPVJzO31jYXRjaHtYZT1Sczt9dHJ5e3R5cGVvZiBjbGVhclRpbWVvdXQ9PVwiZnVuY3Rpb25cIj9aZT1jbGVhclRpbWVvdXQ6WmU9Q3M7fWNhdGNoe1plPUNzO319KSgpO2Z1bmN0aW9uIGNmKHQpe2lmKFhlPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dCh0LDApO2lmKChYZT09PVJzfHwhWGUpJiZzZXRUaW1lb3V0KXJldHVybiBYZT1zZXRUaW1lb3V0LHNldFRpbWVvdXQodCwwKTt0cnl7cmV0dXJuIFhlKHQsMCl9Y2F0Y2h7dHJ5e3JldHVybiBYZS5jYWxsKG51bGwsdCwwKX1jYXRjaHtyZXR1cm4gWGUuY2FsbCh0aGlzLHQsMCl9fX1mdW5jdGlvbiBYeSh0KXtpZihaZT09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KHQpO2lmKChaZT09PUNzfHwhWmUpJiZjbGVhclRpbWVvdXQpcmV0dXJuIFplPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQodCk7dHJ5e3JldHVybiBaZSh0KX1jYXRjaHt0cnl7cmV0dXJuIFplLmNhbGwobnVsbCx0KX1jYXRjaHtyZXR1cm4gWmUuY2FsbCh0aGlzLHQpfX19dmFyIHd0PVtdLExyPSExLGVyLEtpPS0xO2Z1bmN0aW9uIFp5KCl7IUxyfHwhZXJ8fChMcj0hMSxlci5sZW5ndGg/d3Q9ZXIuY29uY2F0KHd0KTpLaT0tMSx3dC5sZW5ndGgmJmhmKCkpO31mdW5jdGlvbiBoZigpe2lmKCFMcil7dmFyIHQ9Y2YoWnkpO0xyPSEwO2Zvcih2YXIgZT13dC5sZW5ndGg7ZTspe2Zvcihlcj13dCx3dD1bXTsrK0tpPGU7KWVyJiZlcltLaV0ucnVuKCk7S2k9LTEsZT13dC5sZW5ndGg7fWVyPW51bGwsTHI9ITEsWHkodCk7fX1hZS5uZXh0VGljaz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyllW3ItMV09YXJndW1lbnRzW3JdO3d0LnB1c2gobmV3IGRmKHQsZSkpLHd0Lmxlbmd0aD09PTEmJiFMciYmY2YoaGYpO307ZnVuY3Rpb24gZGYodCxlKXt0aGlzLmZ1bj10LHRoaXMuYXJyYXk9ZTt9ZGYucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSk7fTthZS50aXRsZT1cImJyb3dzZXJcIjthZS5icm93c2VyPSEwO2FlLmVudj17fTthZS5hcmd2PVtdO2FlLnZlcnNpb249XCJcIjthZS52ZXJzaW9ucz17fTtmdW5jdGlvbiBfdCgpe31hZS5vbj1fdDthZS5hZGRMaXN0ZW5lcj1fdDthZS5vbmNlPV90O2FlLm9mZj1fdDthZS5yZW1vdmVMaXN0ZW5lcj1fdDthZS5yZW1vdmVBbGxMaXN0ZW5lcnM9X3Q7YWUuZW1pdD1fdDthZS5wcmVwZW5kTGlzdGVuZXI9X3Q7YWUucHJlcGVuZE9uY2VMaXN0ZW5lcj1fdDthZS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIFtdfTthZS5iaW5kaW5nPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTthZS5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm4gXCIvXCJ9O2FlLmNoZGlyPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07YWUudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH07fSk7dmFyIHR0PU0oKFVJLFBmKT0+e3YoKTttKCk7XygpO3ZhcntTeW1ib2w6R2ksU3ltYm9sQXN5bmNJdGVyYXRvcjpnZixTeW1ib2xJdGVyYXRvcjp5ZixTeW1ib2xGb3I6YmZ9PWNlKCksd2Y9R2koXCJrRGVzdHJveWVkXCIpLF9mPUdpKFwia0lzRXJyb3JlZFwiKSxCcz1HaShcImtJc1JlYWRhYmxlXCIpLG1mPUdpKFwia0lzRGlzdHVyYmVkXCIpLGViPWJmKFwibm9kZWpzLndlYnN0cmVhbS5pc0Nsb3NlZFByb21pc2VcIiksdGI9YmYoXCJub2RlanMud2Vic3RyZWFtLmNvbnRyb2xsZXJFcnJvckZ1bmN0aW9uXCIpO2Z1bmN0aW9uIFFpKHQsZT0hMSl7dmFyIHI7cmV0dXJuICEhKHQmJnR5cGVvZiB0LnBpcGU9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHQub249PVwiZnVuY3Rpb25cIiYmKCFlfHx0eXBlb2YgdC5wYXVzZT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgdC5yZXN1bWU9PVwiZnVuY3Rpb25cIikmJighdC5fd3JpdGFibGVTdGF0ZXx8KChyPXQuX3JlYWRhYmxlU3RhdGUpPT09bnVsbHx8cj09PXZvaWQgMD92b2lkIDA6ci5yZWFkYWJsZSkhPT0hMSkmJighdC5fd3JpdGFibGVTdGF0ZXx8dC5fcmVhZGFibGVTdGF0ZSkpfWZ1bmN0aW9uIFlpKHQpe3ZhciBlO3JldHVybiAhISh0JiZ0eXBlb2YgdC53cml0ZT09XCJmdW5jdGlvblwiJiZ0eXBlb2YgdC5vbj09XCJmdW5jdGlvblwiJiYoIXQuX3JlYWRhYmxlU3RhdGV8fCgoZT10Ll93cml0YWJsZVN0YXRlKT09PW51bGx8fGU9PT12b2lkIDA/dm9pZCAwOmUud3JpdGFibGUpIT09ITEpKX1mdW5jdGlvbiByYih0KXtyZXR1cm4gISEodCYmdHlwZW9mIHQucGlwZT09XCJmdW5jdGlvblwiJiZ0Ll9yZWFkYWJsZVN0YXRlJiZ0eXBlb2YgdC5vbj09XCJmdW5jdGlvblwiJiZ0eXBlb2YgdC53cml0ZT09XCJmdW5jdGlvblwiKX1mdW5jdGlvbiBldCh0KXtyZXR1cm4gdCYmKHQuX3JlYWRhYmxlU3RhdGV8fHQuX3dyaXRhYmxlU3RhdGV8fHR5cGVvZiB0LndyaXRlPT1cImZ1bmN0aW9uXCImJnR5cGVvZiB0Lm9uPT1cImZ1bmN0aW9uXCJ8fHR5cGVvZiB0LnBpcGU9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHQub249PVwiZnVuY3Rpb25cIil9ZnVuY3Rpb24gdmYodCl7cmV0dXJuICEhKHQmJiFldCh0KSYmdHlwZW9mIHQucGlwZVRocm91Z2g9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHQuZ2V0UmVhZGVyPT1cImZ1bmN0aW9uXCImJnR5cGVvZiB0LmNhbmNlbD09XCJmdW5jdGlvblwiKX1mdW5jdGlvbiBFZih0KXtyZXR1cm4gISEodCYmIWV0KHQpJiZ0eXBlb2YgdC5nZXRXcml0ZXI9PVwiZnVuY3Rpb25cIiYmdHlwZW9mIHQuYWJvcnQ9PVwiZnVuY3Rpb25cIil9ZnVuY3Rpb24gU2YodCl7cmV0dXJuICEhKHQmJiFldCh0KSYmdHlwZW9mIHQucmVhZGFibGU9PVwib2JqZWN0XCImJnR5cGVvZiB0LndyaXRhYmxlPT1cIm9iamVjdFwiKX1mdW5jdGlvbiBpYih0KXtyZXR1cm4gdmYodCl8fEVmKHQpfHxTZih0KX1mdW5jdGlvbiBuYih0LGUpe3JldHVybiB0PT1udWxsPyExOmU9PT0hMD90eXBlb2YgdFtnZl09PVwiZnVuY3Rpb25cIjplPT09ITE/dHlwZW9mIHRbeWZdPT1cImZ1bmN0aW9uXCI6dHlwZW9mIHRbZ2ZdPT1cImZ1bmN0aW9uXCJ8fHR5cGVvZiB0W3lmXT09XCJmdW5jdGlvblwifWZ1bmN0aW9uIEppKHQpe2lmKCFldCh0KSlyZXR1cm4gbnVsbDtsZXQgZT10Ll93cml0YWJsZVN0YXRlLHI9dC5fcmVhZGFibGVTdGF0ZSxpPWV8fHI7cmV0dXJuICEhKHQuZGVzdHJveWVkfHx0W3dmXXx8aSE9bnVsbCYmaS5kZXN0cm95ZWQpfWZ1bmN0aW9uIEFmKHQpe2lmKCFZaSh0KSlyZXR1cm4gbnVsbDtpZih0LndyaXRhYmxlRW5kZWQ9PT0hMClyZXR1cm4gITA7bGV0IGU9dC5fd3JpdGFibGVTdGF0ZTtyZXR1cm4gZSE9bnVsbCYmZS5lcnJvcmVkPyExOnR5cGVvZiBlPy5lbmRlZCE9XCJib29sZWFuXCI/bnVsbDplLmVuZGVkfWZ1bmN0aW9uIHNiKHQsZSl7aWYoIVlpKHQpKXJldHVybiBudWxsO2lmKHQud3JpdGFibGVGaW5pc2hlZD09PSEwKXJldHVybiAhMDtsZXQgcj10Ll93cml0YWJsZVN0YXRlO3JldHVybiByIT1udWxsJiZyLmVycm9yZWQ/ITE6dHlwZW9mIHI/LmZpbmlzaGVkIT1cImJvb2xlYW5cIj9udWxsOiEhKHIuZmluaXNoZWR8fGU9PT0hMSYmci5lbmRlZD09PSEwJiZyLmxlbmd0aD09PTApfWZ1bmN0aW9uIG9iKHQpe2lmKCFRaSh0KSlyZXR1cm4gbnVsbDtpZih0LnJlYWRhYmxlRW5kZWQ9PT0hMClyZXR1cm4gITA7bGV0IGU9dC5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gIWV8fGUuZXJyb3JlZD8hMTp0eXBlb2YgZT8uZW5kZWQhPVwiYm9vbGVhblwiP251bGw6ZS5lbmRlZH1mdW5jdGlvbiBJZih0LGUpe2lmKCFRaSh0KSlyZXR1cm4gbnVsbDtsZXQgcj10Ll9yZWFkYWJsZVN0YXRlO3JldHVybiByIT1udWxsJiZyLmVycm9yZWQ/ITE6dHlwZW9mIHI/LmVuZEVtaXR0ZWQhPVwiYm9vbGVhblwiP251bGw6ISEoci5lbmRFbWl0dGVkfHxlPT09ITEmJnIuZW5kZWQ9PT0hMCYmci5sZW5ndGg9PT0wKX1mdW5jdGlvbiBUZih0KXtyZXR1cm4gdCYmdFtCc10hPW51bGw/dFtCc106dHlwZW9mIHQ/LnJlYWRhYmxlIT1cImJvb2xlYW5cIj9udWxsOkppKHQpPyExOlFpKHQpJiZ0LnJlYWRhYmxlJiYhSWYodCl9ZnVuY3Rpb24gUmYodCl7cmV0dXJuIHR5cGVvZiB0Py53cml0YWJsZSE9XCJib29sZWFuXCI/bnVsbDpKaSh0KT8hMTpZaSh0KSYmdC53cml0YWJsZSYmIUFmKHQpfWZ1bmN0aW9uIGFiKHQsZSl7cmV0dXJuIGV0KHQpP0ppKHQpPyEwOiEoZT8ucmVhZGFibGUhPT0hMSYmVGYodCl8fGU/LndyaXRhYmxlIT09ITEmJlJmKHQpKTpudWxsfWZ1bmN0aW9uIGxiKHQpe3ZhciBlLHI7cmV0dXJuIGV0KHQpP3Qud3JpdGFibGVFcnJvcmVkP3Qud3JpdGFibGVFcnJvcmVkOihlPShyPXQuX3dyaXRhYmxlU3RhdGUpPT09bnVsbHx8cj09PXZvaWQgMD92b2lkIDA6ci5lcnJvcmVkKSE9PW51bGwmJmUhPT12b2lkIDA/ZTpudWxsOm51bGx9ZnVuY3Rpb24gdWIodCl7dmFyIGUscjtyZXR1cm4gZXQodCk/dC5yZWFkYWJsZUVycm9yZWQ/dC5yZWFkYWJsZUVycm9yZWQ6KGU9KHI9dC5fcmVhZGFibGVTdGF0ZSk9PT1udWxsfHxyPT09dm9pZCAwP3ZvaWQgMDpyLmVycm9yZWQpIT09bnVsbCYmZSE9PXZvaWQgMD9lOm51bGw6bnVsbH1mdW5jdGlvbiBmYih0KXtpZighZXQodCkpcmV0dXJuIG51bGw7aWYodHlwZW9mIHQuY2xvc2VkPT1cImJvb2xlYW5cIilyZXR1cm4gdC5jbG9zZWQ7bGV0IGU9dC5fd3JpdGFibGVTdGF0ZSxyPXQuX3JlYWRhYmxlU3RhdGU7cmV0dXJuIHR5cGVvZiBlPy5jbG9zZWQ9PVwiYm9vbGVhblwifHx0eXBlb2Ygcj8uY2xvc2VkPT1cImJvb2xlYW5cIj9lPy5jbG9zZWR8fHI/LmNsb3NlZDp0eXBlb2YgdC5fY2xvc2VkPT1cImJvb2xlYW5cIiYmQ2YodCk/dC5fY2xvc2VkOm51bGx9ZnVuY3Rpb24gQ2YodCl7cmV0dXJuIHR5cGVvZiB0Ll9jbG9zZWQ9PVwiYm9vbGVhblwiJiZ0eXBlb2YgdC5fZGVmYXVsdEtlZXBBbGl2ZT09XCJib29sZWFuXCImJnR5cGVvZiB0Ll9yZW1vdmVkQ29ubmVjdGlvbj09XCJib29sZWFuXCImJnR5cGVvZiB0Ll9yZW1vdmVkQ29udExlbj09XCJib29sZWFuXCJ9ZnVuY3Rpb24gQmYodCl7cmV0dXJuIHR5cGVvZiB0Ll9zZW50MTAwPT1cImJvb2xlYW5cIiYmQ2YodCl9ZnVuY3Rpb24gY2IodCl7dmFyIGU7cmV0dXJuIHR5cGVvZiB0Ll9jb25zdW1pbmc9PVwiYm9vbGVhblwiJiZ0eXBlb2YgdC5fZHVtcGVkPT1cImJvb2xlYW5cIiYmKChlPXQucmVxKT09PW51bGx8fGU9PT12b2lkIDA/dm9pZCAwOmUudXBncmFkZU9yQ29ubmVjdCk9PT12b2lkIDB9ZnVuY3Rpb24gaGIodCl7aWYoIWV0KHQpKXJldHVybiBudWxsO2xldCBlPXQuX3dyaXRhYmxlU3RhdGUscj10Ll9yZWFkYWJsZVN0YXRlLGk9ZXx8cjtyZXR1cm4gIWkmJkJmKHQpfHwhIShpJiZpLmF1dG9EZXN0cm95JiZpLmVtaXRDbG9zZSYmaS5jbG9zZWQ9PT0hMSl9ZnVuY3Rpb24gZGIodCl7dmFyIGU7cmV0dXJuICEhKHQmJigoZT10W21mXSkhPT1udWxsJiZlIT09dm9pZCAwP2U6dC5yZWFkYWJsZURpZFJlYWR8fHQucmVhZGFibGVBYm9ydGVkKSl9ZnVuY3Rpb24gcGIodCl7dmFyIGUscixpLG4sbyxzLGEsdSxjLGg7cmV0dXJuICEhKHQmJigoZT0ocj0oaT0obj0obz0ocz10W19mXSkhPT1udWxsJiZzIT09dm9pZCAwP3M6dC5yZWFkYWJsZUVycm9yZWQpIT09bnVsbCYmbyE9PXZvaWQgMD9vOnQud3JpdGFibGVFcnJvcmVkKSE9PW51bGwmJm4hPT12b2lkIDA/bjooYT10Ll9yZWFkYWJsZVN0YXRlKT09PW51bGx8fGE9PT12b2lkIDA/dm9pZCAwOmEuZXJyb3JFbWl0dGVkKSE9PW51bGwmJmkhPT12b2lkIDA/aToodT10Ll93cml0YWJsZVN0YXRlKT09PW51bGx8fHU9PT12b2lkIDA/dm9pZCAwOnUuZXJyb3JFbWl0dGVkKSE9PW51bGwmJnIhPT12b2lkIDA/cjooYz10Ll9yZWFkYWJsZVN0YXRlKT09PW51bGx8fGM9PT12b2lkIDA/dm9pZCAwOmMuZXJyb3JlZCkhPT1udWxsJiZlIT09dm9pZCAwP2U6ISgoaD10Ll93cml0YWJsZVN0YXRlKT09PW51bGx8fGg9PT12b2lkIDApJiZoLmVycm9yZWQpKX1QZi5leHBvcnRzPXtrRGVzdHJveWVkOndmLGlzRGlzdHVyYmVkOmRiLGtJc0Rpc3R1cmJlZDptZixpc0Vycm9yZWQ6cGIsa0lzRXJyb3JlZDpfZixpc1JlYWRhYmxlOlRmLGtJc1JlYWRhYmxlOkJzLGtJc0Nsb3NlZFByb21pc2U6ZWIsa0NvbnRyb2xsZXJFcnJvckZ1bmN0aW9uOnRiLGlzQ2xvc2VkOmZiLGlzRGVzdHJveWVkOkppLGlzRHVwbGV4Tm9kZVN0cmVhbTpyYixpc0ZpbmlzaGVkOmFiLGlzSXRlcmFibGU6bmIsaXNSZWFkYWJsZU5vZGVTdHJlYW06UWksaXNSZWFkYWJsZVN0cmVhbTp2Zixpc1JlYWRhYmxlRW5kZWQ6b2IsaXNSZWFkYWJsZUZpbmlzaGVkOklmLGlzUmVhZGFibGVFcnJvcmVkOnViLGlzTm9kZVN0cmVhbTpldCxpc1dlYlN0cmVhbTppYixpc1dyaXRhYmxlOlJmLGlzV3JpdGFibGVOb2RlU3RyZWFtOllpLGlzV3JpdGFibGVTdHJlYW06RWYsaXNXcml0YWJsZUVuZGVkOkFmLGlzV3JpdGFibGVGaW5pc2hlZDpzYixpc1dyaXRhYmxlRXJyb3JlZDpsYixpc1NlcnZlclJlcXVlc3Q6Y2IsaXNTZXJ2ZXJSZXNwb25zZTpCZix3aWxsRW1pdENsb3NlOmhiLGlzVHJhbnNmb3JtU3RyZWFtOlNmfTt9KTt2YXIgbXQ9TSgoekksTXMpPT57digpO20oKTtfKCk7dmFyIE50PVV0KCkse0Fib3J0RXJyb3I6RGYsY29kZXM6Z2J9PVNlKCkse0VSUl9JTlZBTElEX0FSR19UWVBFOnliLEVSUl9TVFJFQU1fUFJFTUFUVVJFX0NMT1NFOk9mfT1nYix7a0VtcHR5T2JqZWN0Ok9zLG9uY2U6a3N9PUplKCkse3ZhbGlkYXRlQWJvcnRTaWduYWw6YmIsdmFsaWRhdGVGdW5jdGlvbjp3Yix2YWxpZGF0ZU9iamVjdDpfYix2YWxpZGF0ZUJvb2xlYW46bWJ9PWZpKCkse1Byb21pc2U6dmIsUHJvbWlzZVByb3RvdHlwZVRoZW46RWJ9PWNlKCkse2lzQ2xvc2VkOlNiLGlzUmVhZGFibGU6a2YsaXNSZWFkYWJsZU5vZGVTdHJlYW06UHMsaXNSZWFkYWJsZVN0cmVhbTpBYixpc1JlYWRhYmxlRmluaXNoZWQ6eGYsaXNSZWFkYWJsZUVycm9yZWQ6TWYsaXNXcml0YWJsZTpMZixpc1dyaXRhYmxlTm9kZVN0cmVhbTpVZixpc1dyaXRhYmxlU3RyZWFtOkliLGlzV3JpdGFibGVGaW5pc2hlZDpOZixpc1dyaXRhYmxlRXJyb3JlZDpxZixpc05vZGVTdHJlYW06VGIsd2lsbEVtaXRDbG9zZTpSYixrSXNDbG9zZWRQcm9taXNlOkNifT10dCgpO2Z1bmN0aW9uIEJiKHQpe3JldHVybiB0LnNldEhlYWRlciYmdHlwZW9mIHQuYWJvcnQ9PVwiZnVuY3Rpb25cIn12YXIgeHM9KCk9Pnt9O2Z1bmN0aW9uIGpmKHQsZSxyKXt2YXIgaSxuO2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0yPyhyPWUsZT1Pcyk6ZT09bnVsbD9lPU9zOl9iKGUsXCJvcHRpb25zXCIpLHdiKHIsXCJjYWxsYmFja1wiKSxiYihlLnNpZ25hbCxcIm9wdGlvbnMuc2lnbmFsXCIpLHI9a3MociksQWIodCl8fEliKHQpKXJldHVybiBQYih0LGUscik7aWYoIVRiKHQpKXRocm93IG5ldyB5YihcInN0cmVhbVwiLFtcIlJlYWRhYmxlU3RyZWFtXCIsXCJXcml0YWJsZVN0cmVhbVwiLFwiU3RyZWFtXCJdLHQpO2xldCBvPShpPWUucmVhZGFibGUpIT09bnVsbCYmaSE9PXZvaWQgMD9pOlBzKHQpLHM9KG49ZS53cml0YWJsZSkhPT1udWxsJiZuIT09dm9pZCAwP246VWYodCksYT10Ll93cml0YWJsZVN0YXRlLHU9dC5fcmVhZGFibGVTdGF0ZSxjPSgpPT57dC53cml0YWJsZXx8ZygpO30saD1SYih0KSYmUHModCk9PT1vJiZVZih0KT09PXMsZD1OZih0LCExKSxnPSgpPT57ZD0hMCx0LmRlc3Ryb3llZCYmKGg9ITEpLCEoaCYmKCF0LnJlYWRhYmxlfHxvKSkmJighb3x8eSkmJnIuY2FsbCh0KTt9LHk9eGYodCwhMSksdz0oKT0+e3k9ITAsdC5kZXN0cm95ZWQmJihoPSExKSwhKGgmJighdC53cml0YWJsZXx8cykpJiYoIXN8fGQpJiZyLmNhbGwodCk7fSxFPU49PntyLmNhbGwodCxOKTt9LFM9U2IodCksST0oKT0+e1M9ITA7bGV0IE49cWYodCl8fE1mKHQpO2lmKE4mJnR5cGVvZiBOIT1cImJvb2xlYW5cIilyZXR1cm4gci5jYWxsKHQsTik7aWYobyYmIXkmJlBzKHQsITApJiYheGYodCwhMSkpcmV0dXJuIHIuY2FsbCh0LG5ldyBPZik7aWYocyYmIWQmJiFOZih0LCExKSlyZXR1cm4gci5jYWxsKHQsbmV3IE9mKTtyLmNhbGwodCk7fSxDPSgpPT57Uz0hMDtsZXQgTj1xZih0KXx8TWYodCk7aWYoTiYmdHlwZW9mIE4hPVwiYm9vbGVhblwiKXJldHVybiByLmNhbGwodCxOKTtyLmNhbGwodCk7fSxSPSgpPT57dC5yZXEub24oXCJmaW5pc2hcIixnKTt9O0JiKHQpPyh0Lm9uKFwiY29tcGxldGVcIixnKSxofHx0Lm9uKFwiYWJvcnRcIixJKSx0LnJlcT9SKCk6dC5vbihcInJlcXVlc3RcIixSKSk6cyYmIWEmJih0Lm9uKFwiZW5kXCIsYyksdC5vbihcImNsb3NlXCIsYykpLCFoJiZ0eXBlb2YgdC5hYm9ydGVkPT1cImJvb2xlYW5cIiYmdC5vbihcImFib3J0ZWRcIixJKSx0Lm9uKFwiZW5kXCIsdyksdC5vbihcImZpbmlzaFwiLGcpLGUuZXJyb3IhPT0hMSYmdC5vbihcImVycm9yXCIsRSksdC5vbihcImNsb3NlXCIsSSksUz9OdC5uZXh0VGljayhJKTphIT1udWxsJiZhLmVycm9yRW1pdHRlZHx8dSE9bnVsbCYmdS5lcnJvckVtaXR0ZWQ/aHx8TnQubmV4dFRpY2soQyk6KCFvJiYoIWh8fGtmKHQpKSYmKGR8fExmKHQpPT09ITEpfHwhcyYmKCFofHxMZih0KSkmJih5fHxrZih0KT09PSExKXx8dSYmdC5yZXEmJnQuYWJvcnRlZCkmJk50Lm5leHRUaWNrKEMpO2xldCBVPSgpPT57cj14cyx0LnJlbW92ZUxpc3RlbmVyKFwiYWJvcnRlZFwiLEkpLHQucmVtb3ZlTGlzdGVuZXIoXCJjb21wbGV0ZVwiLGcpLHQucmVtb3ZlTGlzdGVuZXIoXCJhYm9ydFwiLEkpLHQucmVtb3ZlTGlzdGVuZXIoXCJyZXF1ZXN0XCIsUiksdC5yZXEmJnQucmVxLnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsZyksdC5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGMpLHQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGMpLHQucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixnKSx0LnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIsdyksdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsRSksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsSSk7fTtpZihlLnNpZ25hbCYmIVMpe2xldCBOPSgpPT57bGV0IFc9cjtVKCksVy5jYWxsKHQsbmV3IERmKHZvaWQgMCx7Y2F1c2U6ZS5zaWduYWwucmVhc29ufSkpO307aWYoZS5zaWduYWwuYWJvcnRlZClOdC5uZXh0VGljayhOKTtlbHNlIHtsZXQgVz1yO3I9a3MoKC4uLkspPT57ZS5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsTiksVy5hcHBseSh0LEspO30pLGUuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLE4pO319cmV0dXJuIFV9ZnVuY3Rpb24gUGIodCxlLHIpe2xldCBpPSExLG49eHM7aWYoZS5zaWduYWwpaWYobj0oKT0+e2k9ITAsci5jYWxsKHQsbmV3IERmKHZvaWQgMCx7Y2F1c2U6ZS5zaWduYWwucmVhc29ufSkpO30sZS5zaWduYWwuYWJvcnRlZClOdC5uZXh0VGljayhuKTtlbHNlIHtsZXQgcz1yO3I9a3MoKC4uLmEpPT57ZS5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsbikscy5hcHBseSh0LGEpO30pLGUuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLG4pO31sZXQgbz0oLi4ucyk9PntpfHxOdC5uZXh0VGljaygoKT0+ci5hcHBseSh0LHMpKTt9O3JldHVybiBFYih0W0NiXS5wcm9taXNlLG8sbykseHN9ZnVuY3Rpb24gT2IodCxlKXt2YXIgcjtsZXQgaT0hMTtyZXR1cm4gZT09PW51bGwmJihlPU9zKSwocj1lKSE9PW51bGwmJnIhPT12b2lkIDAmJnIuY2xlYW51cCYmKG1iKGUuY2xlYW51cCxcImNsZWFudXBcIiksaT1lLmNsZWFudXApLG5ldyB2YigobixvKT0+e2xldCBzPWpmKHQsZSxhPT57aSYmcygpLGE/byhhKTpuKCk7fSk7fSl9TXMuZXhwb3J0cz1qZjtNcy5leHBvcnRzLmZpbmlzaGVkPU9iO30pO3ZhciB0cj1NKChyVCxHZik9Pnt2KCk7bSgpO18oKTt2YXIgcnQ9VXQoKSx7YWdncmVnYXRlVHdvRXJyb3JzOmtiLGNvZGVzOntFUlJfTVVMVElQTEVfQ0FMTEJBQ0s6eGJ9LEFib3J0RXJyb3I6TWJ9PVNlKCkse1N5bWJvbDokZn09Y2UoKSx7a0Rlc3Ryb3llZDpMYixpc0Rlc3Ryb3llZDpVYixpc0ZpbmlzaGVkOk5iLGlzU2VydmVyUmVxdWVzdDpxYn09dHQoKSxIZj0kZihcImtEZXN0cm95XCIpLExzPSRmKFwia0NvbnN0cnVjdFwiKTtmdW5jdGlvbiBWZih0LGUscil7dCYmKHQuc3RhY2ssZSYmIWUuZXJyb3JlZCYmKGUuZXJyb3JlZD10KSxyJiYhci5lcnJvcmVkJiYoci5lcnJvcmVkPXQpKTt9ZnVuY3Rpb24gRGIodCxlKXtsZXQgcj10aGlzLl9yZWFkYWJsZVN0YXRlLGk9dGhpcy5fd3JpdGFibGVTdGF0ZSxuPWl8fHI7cmV0dXJuIGkhPW51bGwmJmkuZGVzdHJveWVkfHxyIT1udWxsJiZyLmRlc3Ryb3llZD8odHlwZW9mIGU9PVwiZnVuY3Rpb25cIiYmZSgpLHRoaXMpOihWZih0LGksciksaSYmKGkuZGVzdHJveWVkPSEwKSxyJiYoci5kZXN0cm95ZWQ9ITApLG4uY29uc3RydWN0ZWQ/RmYodGhpcyx0LGUpOnRoaXMub25jZShIZixmdW5jdGlvbihvKXtGZih0aGlzLGtiKG8sdCksZSk7fSksdGhpcyl9ZnVuY3Rpb24gRmYodCxlLHIpe2xldCBpPSExO2Z1bmN0aW9uIG4obyl7aWYoaSlyZXR1cm47aT0hMDtsZXQgcz10Ll9yZWFkYWJsZVN0YXRlLGE9dC5fd3JpdGFibGVTdGF0ZTtWZihvLGEscyksYSYmKGEuY2xvc2VkPSEwKSxzJiYocy5jbG9zZWQ9ITApLHR5cGVvZiByPT1cImZ1bmN0aW9uXCImJnIobyksbz9ydC5uZXh0VGljayhqYix0LG8pOnJ0Lm5leHRUaWNrKHpmLHQpO310cnl7dC5fZGVzdHJveShlfHxudWxsLG4pO31jYXRjaChvKXtuKG8pO319ZnVuY3Rpb24gamIodCxlKXtVcyh0LGUpLHpmKHQpO31mdW5jdGlvbiB6Zih0KXtsZXQgZT10Ll9yZWFkYWJsZVN0YXRlLHI9dC5fd3JpdGFibGVTdGF0ZTtyJiYoci5jbG9zZUVtaXR0ZWQ9ITApLGUmJihlLmNsb3NlRW1pdHRlZD0hMCksKHIhPW51bGwmJnIuZW1pdENsb3NlfHxlIT1udWxsJiZlLmVtaXRDbG9zZSkmJnQuZW1pdChcImNsb3NlXCIpO31mdW5jdGlvbiBVcyh0LGUpe2xldCByPXQuX3JlYWRhYmxlU3RhdGUsaT10Ll93cml0YWJsZVN0YXRlO2khPW51bGwmJmkuZXJyb3JFbWl0dGVkfHxyIT1udWxsJiZyLmVycm9yRW1pdHRlZHx8KGkmJihpLmVycm9yRW1pdHRlZD0hMCksciYmKHIuZXJyb3JFbWl0dGVkPSEwKSx0LmVtaXQoXCJlcnJvclwiLGUpKTt9ZnVuY3Rpb24gRmIoKXtsZXQgdD10aGlzLl9yZWFkYWJsZVN0YXRlLGU9dGhpcy5fd3JpdGFibGVTdGF0ZTt0JiYodC5jb25zdHJ1Y3RlZD0hMCx0LmNsb3NlZD0hMSx0LmNsb3NlRW1pdHRlZD0hMSx0LmRlc3Ryb3llZD0hMSx0LmVycm9yZWQ9bnVsbCx0LmVycm9yRW1pdHRlZD0hMSx0LnJlYWRpbmc9ITEsdC5lbmRlZD10LnJlYWRhYmxlPT09ITEsdC5lbmRFbWl0dGVkPXQucmVhZGFibGU9PT0hMSksZSYmKGUuY29uc3RydWN0ZWQ9ITAsZS5kZXN0cm95ZWQ9ITEsZS5jbG9zZWQ9ITEsZS5jbG9zZUVtaXR0ZWQ9ITEsZS5lcnJvcmVkPW51bGwsZS5lcnJvckVtaXR0ZWQ9ITEsZS5maW5hbENhbGxlZD0hMSxlLnByZWZpbmlzaGVkPSExLGUuZW5kZWQ9ZS53cml0YWJsZT09PSExLGUuZW5kaW5nPWUud3JpdGFibGU9PT0hMSxlLmZpbmlzaGVkPWUud3JpdGFibGU9PT0hMSk7fWZ1bmN0aW9uIE5zKHQsZSxyKXtsZXQgaT10Ll9yZWFkYWJsZVN0YXRlLG49dC5fd3JpdGFibGVTdGF0ZTtpZihuIT1udWxsJiZuLmRlc3Ryb3llZHx8aSE9bnVsbCYmaS5kZXN0cm95ZWQpcmV0dXJuIHRoaXM7aSE9bnVsbCYmaS5hdXRvRGVzdHJveXx8biE9bnVsbCYmbi5hdXRvRGVzdHJveT90LmRlc3Ryb3koZSk6ZSYmKGUuc3RhY2ssbiYmIW4uZXJyb3JlZCYmKG4uZXJyb3JlZD1lKSxpJiYhaS5lcnJvcmVkJiYoaS5lcnJvcmVkPWUpLHI/cnQubmV4dFRpY2soVXMsdCxlKTpVcyh0LGUpKTt9ZnVuY3Rpb24gV2IodCxlKXtpZih0eXBlb2YgdC5fY29uc3RydWN0IT1cImZ1bmN0aW9uXCIpcmV0dXJuO2xldCByPXQuX3JlYWRhYmxlU3RhdGUsaT10Ll93cml0YWJsZVN0YXRlO3ImJihyLmNvbnN0cnVjdGVkPSExKSxpJiYoaS5jb25zdHJ1Y3RlZD0hMSksdC5vbmNlKExzLGUpLCEodC5saXN0ZW5lckNvdW50KExzKT4xKSYmcnQubmV4dFRpY2soJGIsdCk7fWZ1bmN0aW9uICRiKHQpe2xldCBlPSExO2Z1bmN0aW9uIHIoaSl7aWYoZSl7TnModCxpPz9uZXcgeGIpO3JldHVybn1lPSEwO2xldCBuPXQuX3JlYWRhYmxlU3RhdGUsbz10Ll93cml0YWJsZVN0YXRlLHM9b3x8bjtuJiYobi5jb25zdHJ1Y3RlZD0hMCksbyYmKG8uY29uc3RydWN0ZWQ9ITApLHMuZGVzdHJveWVkP3QuZW1pdChIZixpKTppP05zKHQsaSwhMCk6cnQubmV4dFRpY2soSGIsdCk7fXRyeXt0Ll9jb25zdHJ1Y3QoaT0+e3J0Lm5leHRUaWNrKHIsaSk7fSk7fWNhdGNoKGkpe3J0Lm5leHRUaWNrKHIsaSk7fX1mdW5jdGlvbiBIYih0KXt0LmVtaXQoTHMpO31mdW5jdGlvbiBXZih0KXtyZXR1cm4gdD8uc2V0SGVhZGVyJiZ0eXBlb2YgdC5hYm9ydD09XCJmdW5jdGlvblwifWZ1bmN0aW9uIEtmKHQpe3QuZW1pdChcImNsb3NlXCIpO31mdW5jdGlvbiBWYih0LGUpe3QuZW1pdChcImVycm9yXCIsZSkscnQubmV4dFRpY2soS2YsdCk7fWZ1bmN0aW9uIHpiKHQsZSl7IXR8fFViKHQpfHwoIWUmJiFOYih0KSYmKGU9bmV3IE1iKSxxYih0KT8odC5zb2NrZXQ9bnVsbCx0LmRlc3Ryb3koZSkpOldmKHQpP3QuYWJvcnQoKTpXZih0LnJlcSk/dC5yZXEuYWJvcnQoKTp0eXBlb2YgdC5kZXN0cm95PT1cImZ1bmN0aW9uXCI/dC5kZXN0cm95KGUpOnR5cGVvZiB0LmNsb3NlPT1cImZ1bmN0aW9uXCI/dC5jbG9zZSgpOmU/cnQubmV4dFRpY2soVmIsdCxlKTpydC5uZXh0VGljayhLZix0KSx0LmRlc3Ryb3llZHx8KHRbTGJdPSEwKSk7fUdmLmV4cG9ydHM9e2NvbnN0cnVjdDpXYixkZXN0cm95ZXI6emIsZGVzdHJveTpEYix1bmRlc3Ryb3k6RmIsZXJyb3JPckRlc3Ryb3k6TnN9O30pO2Z1bmN0aW9uIFkoKXtZLmluaXQuY2FsbCh0aGlzKTt9ZnVuY3Rpb24gWGkodCl7aWYodHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KX1mdW5jdGlvbiBuYyh0KXtyZXR1cm4gdC5fbWF4TGlzdGVuZXJzPT09dm9pZCAwP1kuZGVmYXVsdE1heExpc3RlbmVyczp0Ll9tYXhMaXN0ZW5lcnN9ZnVuY3Rpb24gWGYodCxlLHIsaSl7dmFyIG4sbyxzLGE7aWYoWGkociksKG89dC5fZXZlbnRzKT09PXZvaWQgMD8obz10Ll9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0Ll9ldmVudHNDb3VudD0wKTooby5uZXdMaXN0ZW5lciE9PXZvaWQgMCYmKHQuZW1pdChcIm5ld0xpc3RlbmVyXCIsZSxyLmxpc3RlbmVyP3IubGlzdGVuZXI6ciksbz10Ll9ldmVudHMpLHM9b1tlXSkscz09PXZvaWQgMClzPW9bZV09ciwrK3QuX2V2ZW50c0NvdW50O2Vsc2UgaWYodHlwZW9mIHM9PVwiZnVuY3Rpb25cIj9zPW9bZV09aT9bcixzXTpbcyxyXTppP3MudW5zaGlmdChyKTpzLnB1c2gociksKG49bmModCkpPjAmJnMubGVuZ3RoPm4mJiFzLndhcm5lZCl7cy53YXJuZWQ9ITA7dmFyIHU9bmV3IEVycm9yKFwiUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiBcIitzLmxlbmd0aCtcIiBcIitTdHJpbmcoZSkrXCIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdFwiKTt1Lm5hbWU9XCJNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmdcIix1LmVtaXR0ZXI9dCx1LnR5cGU9ZSx1LmNvdW50PXMubGVuZ3RoLGE9dSxjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihhKTt9cmV0dXJuIHR9ZnVuY3Rpb24gS2IoKXtpZighdGhpcy5maXJlZClyZXR1cm4gdGhpcy50YXJnZXQucmVtb3ZlTGlzdGVuZXIodGhpcy50eXBlLHRoaXMud3JhcEZuKSx0aGlzLmZpcmVkPSEwLGFyZ3VtZW50cy5sZW5ndGg9PT0wP3RoaXMubGlzdGVuZXIuY2FsbCh0aGlzLnRhcmdldCk6dGhpcy5saXN0ZW5lci5hcHBseSh0aGlzLnRhcmdldCxhcmd1bWVudHMpfWZ1bmN0aW9uIFpmKHQsZSxyKXt2YXIgaT17ZmlyZWQ6ITEsd3JhcEZuOnZvaWQgMCx0YXJnZXQ6dCx0eXBlOmUsbGlzdGVuZXI6cn0sbj1LYi5iaW5kKGkpO3JldHVybiBuLmxpc3RlbmVyPXIsaS53cmFwRm49bixufWZ1bmN0aW9uIGVjKHQsZSxyKXt2YXIgaT10Ll9ldmVudHM7aWYoaT09PXZvaWQgMClyZXR1cm4gW107dmFyIG49aVtlXTtyZXR1cm4gbj09PXZvaWQgMD9bXTp0eXBlb2Ygbj09XCJmdW5jdGlvblwiP3I/W24ubGlzdGVuZXJ8fG5dOltuXTpyP2Z1bmN0aW9uKG8pe2Zvcih2YXIgcz1uZXcgQXJyYXkoby5sZW5ndGgpLGE9MDthPHMubGVuZ3RoOysrYSlzW2FdPW9bYV0ubGlzdGVuZXJ8fG9bYV07cmV0dXJuIHN9KG4pOnNjKG4sbi5sZW5ndGgpfWZ1bmN0aW9uIHRjKHQpe3ZhciBlPXRoaXMuX2V2ZW50cztpZihlIT09dm9pZCAwKXt2YXIgcj1lW3RdO2lmKHR5cGVvZiByPT1cImZ1bmN0aW9uXCIpcmV0dXJuIDE7aWYociE9PXZvaWQgMClyZXR1cm4gci5sZW5ndGh9cmV0dXJuIDB9ZnVuY3Rpb24gc2ModCxlKXtmb3IodmFyIHI9bmV3IEFycmF5KGUpLGk9MDtpPGU7KytpKXJbaV09dFtpXTtyZXR1cm4gcn12YXIgcmMsaWMsVXIsUWYsWWYsSmYsQmUscXM9d2UoKCk9Pnt2KCk7bSgpO18oKTtVcj10eXBlb2YgUmVmbGVjdD09XCJvYmplY3RcIj9SZWZsZWN0Om51bGwsUWY9VXImJnR5cGVvZiBVci5hcHBseT09XCJmdW5jdGlvblwiP1VyLmFwcGx5OmZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwodCxlLHIpfTtpYz1VciYmdHlwZW9mIFVyLm93bktleXM9PVwiZnVuY3Rpb25cIj9Vci5vd25LZXlzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpKX06ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpfTtZZj1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKHQpe3JldHVybiB0IT10fTtyYz1ZLFkuRXZlbnRFbWl0dGVyPVksWS5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsWS5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsWS5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7SmY9MTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KFksXCJkZWZhdWx0TWF4TGlzdGVuZXJzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEpmfSxzZXQ6ZnVuY3Rpb24odCl7aWYodHlwZW9mIHQhPVwibnVtYmVyXCJ8fHQ8MHx8WWYodCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO0pmPXQ7fX0pLFkuaW5pdD1mdW5jdGlvbigpe3RoaXMuX2V2ZW50cyE9PXZvaWQgMCYmdGhpcy5fZXZlbnRzIT09T2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHN8fCh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKSx0aGlzLl9tYXhMaXN0ZW5lcnM9dGhpcy5fbWF4TGlzdGVuZXJzfHx2b2lkIDA7fSxZLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24odCl7aWYodHlwZW9mIHQhPVwibnVtYmVyXCJ8fHQ8MHx8WWYodCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK3QrXCIuXCIpO3JldHVybiB0aGlzLl9tYXhMaXN0ZW5lcnM9dCx0aGlzfSxZLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oKXtyZXR1cm4gbmModGhpcyl9LFkucHJvdG90eXBlLmVtaXQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKWUucHVzaChhcmd1bWVudHNbcl0pO3ZhciBpPXQ9PT1cImVycm9yXCIsbj10aGlzLl9ldmVudHM7aWYobiE9PXZvaWQgMClpPWkmJm4uZXJyb3I9PT12b2lkIDA7ZWxzZSBpZighaSlyZXR1cm4gITE7aWYoaSl7dmFyIG87aWYoZS5sZW5ndGg+MCYmKG89ZVswXSksbyBpbnN0YW5jZW9mIEVycm9yKXRocm93IG87dmFyIHM9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhvP1wiIChcIitvLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IHMuY29udGV4dD1vLHN9dmFyIGE9blt0XTtpZihhPT09dm9pZCAwKXJldHVybiAhMTtpZih0eXBlb2YgYT09XCJmdW5jdGlvblwiKVFmKGEsdGhpcyxlKTtlbHNlIHt2YXIgdT1hLmxlbmd0aCxjPXNjKGEsdSk7Zm9yKHI9MDtyPHU7KytyKVFmKGNbcl0sdGhpcyxlKTt9cmV0dXJuICEwfSxZLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiBYZih0aGlzLHQsZSwhMSl9LFkucHJvdG90eXBlLm9uPVkucHJvdG90eXBlLmFkZExpc3RlbmVyLFkucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiBYZih0aGlzLHQsZSwhMCl9LFkucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gWGkoZSksdGhpcy5vbih0LFpmKHRoaXMsdCxlKSksdGhpc30sWS5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe3JldHVybiBYaShlKSx0aGlzLnByZXBlbmRMaXN0ZW5lcih0LFpmKHRoaXMsdCxlKSksdGhpc30sWS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4sbyxzO2lmKFhpKGUpLChpPXRoaXMuX2V2ZW50cyk9PT12b2lkIDApcmV0dXJuIHRoaXM7aWYoKHI9aVt0XSk9PT12b2lkIDApcmV0dXJuIHRoaXM7aWYocj09PWV8fHIubGlzdGVuZXI9PT1lKS0tdGhpcy5fZXZlbnRzQ291bnQ9PTA/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6KGRlbGV0ZSBpW3RdLGkucmVtb3ZlTGlzdGVuZXImJnRoaXMuZW1pdChcInJlbW92ZUxpc3RlbmVyXCIsdCxyLmxpc3RlbmVyfHxlKSk7ZWxzZSBpZih0eXBlb2YgciE9XCJmdW5jdGlvblwiKXtmb3Iobj0tMSxvPXIubGVuZ3RoLTE7bz49MDtvLS0paWYocltvXT09PWV8fHJbb10ubGlzdGVuZXI9PT1lKXtzPXJbb10ubGlzdGVuZXIsbj1vO2JyZWFrfWlmKG48MClyZXR1cm4gdGhpcztuPT09MD9yLnNoaWZ0KCk6ZnVuY3Rpb24oYSx1KXtmb3IoO3UrMTxhLmxlbmd0aDt1KyspYVt1XT1hW3UrMV07YS5wb3AoKTt9KHIsbiksci5sZW5ndGg9PT0xJiYoaVt0XT1yWzBdKSxpLnJlbW92ZUxpc3RlbmVyIT09dm9pZCAwJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLHQsc3x8ZSk7fXJldHVybiB0aGlzfSxZLnByb3RvdHlwZS5vZmY9WS5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIsWS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3ZhciBlLHIsaTtpZigocj10aGlzLl9ldmVudHMpPT09dm9pZCAwKXJldHVybiB0aGlzO2lmKHIucmVtb3ZlTGlzdGVuZXI9PT12b2lkIDApcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg9PT0wPyh0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wKTpyW3RdIT09dm9pZCAwJiYoLS10aGlzLl9ldmVudHNDb3VudD09MD90aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKTpkZWxldGUgclt0XSksdGhpcztpZihhcmd1bWVudHMubGVuZ3RoPT09MCl7dmFyIG4sbz1PYmplY3Qua2V5cyhyKTtmb3IoaT0wO2k8by5sZW5ndGg7KytpKShuPW9baV0pIT09XCJyZW1vdmVMaXN0ZW5lclwiJiZ0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhuKTtyZXR1cm4gdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJyZW1vdmVMaXN0ZW5lclwiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYodHlwZW9mKGU9clt0XSk9PVwiZnVuY3Rpb25cIil0aGlzLnJlbW92ZUxpc3RlbmVyKHQsZSk7ZWxzZSBpZihlIT09dm9pZCAwKWZvcihpPWUubGVuZ3RoLTE7aT49MDtpLS0pdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGVbaV0pO3JldHVybiB0aGlzfSxZLnByb3RvdHlwZS5saXN0ZW5lcnM9ZnVuY3Rpb24odCl7cmV0dXJuIGVjKHRoaXMsdCwhMCl9LFkucHJvdG90eXBlLnJhd0xpc3RlbmVycz1mdW5jdGlvbih0KXtyZXR1cm4gZWModGhpcyx0LCExKX0sWS5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR5cGVvZiB0Lmxpc3RlbmVyQ291bnQ9PVwiZnVuY3Rpb25cIj90Lmxpc3RlbmVyQ291bnQoZSk6dGMuY2FsbCh0LGUpfSxZLnByb3RvdHlwZS5saXN0ZW5lckNvdW50PXRjLFkucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9pYyh0aGlzLl9ldmVudHMpOltdfTtCZT1yYztCZS5FdmVudEVtaXR0ZXI7QmUuZGVmYXVsdE1heExpc3RlbmVycztCZS5pbml0O0JlLmxpc3RlbmVyQ291bnQ7QmUuRXZlbnRFbWl0dGVyO0JlLmRlZmF1bHRNYXhMaXN0ZW5lcnM7QmUuaW5pdDtCZS5saXN0ZW5lckNvdW50O30pO3ZhciBycj17fTtRdChycix7RXZlbnRFbWl0dGVyOigpPT5HYixkZWZhdWx0OigpPT5CZSxkZWZhdWx0TWF4TGlzdGVuZXJzOigpPT5RYixpbml0OigpPT5ZYixsaXN0ZW5lckNvdW50OigpPT5KYixvbjooKT0+WGIsb25jZTooKT0+WmJ9KTt2YXIgR2IsUWIsWWIsSmIsWGIsWmIsaXI9d2UoKCk9Pnt2KCk7bSgpO18oKTtxcygpO3FzKCk7QmUub25jZT1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgUHJvbWlzZSgocixpKT0+e2Z1bmN0aW9uIG4oLi4ucyl7byE9PXZvaWQgMCYmdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsbykscihzKTt9bGV0IG87ZSE9PVwiZXJyb3JcIiYmKG89cz0+e3QucmVtb3ZlTGlzdGVuZXIobmFtZSxuKSxpKHMpO30sdC5vbmNlKFwiZXJyb3JcIixvKSksdC5vbmNlKGUsbik7fSl9O0JlLm9uPWZ1bmN0aW9uKHQsZSl7bGV0IHI9W10saT1bXSxuPW51bGwsbz0hMSxzPXthc3luYyBuZXh0KCl7bGV0IGM9ci5zaGlmdCgpO2lmKGMpcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHQoYywhMSk7aWYobil7bGV0IGg9UHJvbWlzZS5yZWplY3Qobik7cmV0dXJuIG49bnVsbCxofXJldHVybiBvP2NyZWF0ZUl0ZXJSZXN1bHQodm9pZCAwLCEwKTpuZXcgUHJvbWlzZSgoaCxkKT0+aS5wdXNoKHtyZXNvbHZlOmgscmVqZWN0OmR9KSl9LGFzeW5jIHJldHVybigpe3QucmVtb3ZlTGlzdGVuZXIoZSxhKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix1KSxvPSEwO2ZvcihsZXQgYyBvZiBpKWMucmVzb2x2ZShjcmVhdGVJdGVyUmVzdWx0KHZvaWQgMCwhMCkpO3JldHVybiBjcmVhdGVJdGVyUmVzdWx0KHZvaWQgMCwhMCl9LHRocm93KGMpe249Yyx0LnJlbW92ZUxpc3RlbmVyKGUsYSksdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdSk7fSxbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCl7cmV0dXJuIHRoaXN9fTtyZXR1cm4gdC5vbihlLGEpLHQub24oXCJlcnJvclwiLHUpLHM7ZnVuY3Rpb24gYSguLi5jKXtsZXQgaD1pLnNoaWZ0KCk7aD9oLnJlc29sdmUoY3JlYXRlSXRlclJlc3VsdChjLCExKSk6ci5wdXNoKGMpO31mdW5jdGlvbiB1KGMpe289ITA7bGV0IGg9aS5zaGlmdCgpO2g/aC5yZWplY3QoYyk6bj1jLHMucmV0dXJuKCk7fX07KHtFdmVudEVtaXR0ZXI6R2IsZGVmYXVsdE1heExpc3RlbmVyczpRYixpbml0OlliLGxpc3RlbmVyQ291bnQ6SmIsb246WGIsb25jZTpaYn09QmUpO30pO3ZhciB0bj1NKCh4VCxhYyk9Pnt2KCk7bSgpO18oKTt2YXJ7QXJyYXlJc0FycmF5OmV3LE9iamVjdFNldFByb3RvdHlwZU9mOm9jfT1jZSgpLHtFdmVudEVtaXR0ZXI6Wml9PShpcigpLFgocnIpKTtmdW5jdGlvbiBlbih0KXtaaS5jYWxsKHRoaXMsdCk7fW9jKGVuLnByb3RvdHlwZSxaaS5wcm90b3R5cGUpO29jKGVuLFppKTtlbi5wcm90b3R5cGUucGlwZT1mdW5jdGlvbih0LGUpe2xldCByPXRoaXM7ZnVuY3Rpb24gaShoKXt0LndyaXRhYmxlJiZ0LndyaXRlKGgpPT09ITEmJnIucGF1c2UmJnIucGF1c2UoKTt9ci5vbihcImRhdGFcIixpKTtmdW5jdGlvbiBuKCl7ci5yZWFkYWJsZSYmci5yZXN1bWUmJnIucmVzdW1lKCk7fXQub24oXCJkcmFpblwiLG4pLCF0Ll9pc1N0ZGlvJiYoIWV8fGUuZW5kIT09ITEpJiYoci5vbihcImVuZFwiLHMpLHIub24oXCJjbG9zZVwiLGEpKTtsZXQgbz0hMTtmdW5jdGlvbiBzKCl7b3x8KG89ITAsdC5lbmQoKSk7fWZ1bmN0aW9uIGEoKXtvfHwobz0hMCx0eXBlb2YgdC5kZXN0cm95PT1cImZ1bmN0aW9uXCImJnQuZGVzdHJveSgpKTt9ZnVuY3Rpb24gdShoKXtjKCksWmkubGlzdGVuZXJDb3VudCh0aGlzLFwiZXJyb3JcIik9PT0wJiZ0aGlzLmVtaXQoXCJlcnJvclwiLGgpO31EcyhyLFwiZXJyb3JcIix1KSxEcyh0LFwiZXJyb3JcIix1KTtmdW5jdGlvbiBjKCl7ci5yZW1vdmVMaXN0ZW5lcihcImRhdGFcIixpKSx0LnJlbW92ZUxpc3RlbmVyKFwiZHJhaW5cIixuKSxyLnJlbW92ZUxpc3RlbmVyKFwiZW5kXCIscyksci5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsYSksci5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdSksdC5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsdSksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGMpLHIucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGMpLHQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLGMpO31yZXR1cm4gci5vbihcImVuZFwiLGMpLHIub24oXCJjbG9zZVwiLGMpLHQub24oXCJjbG9zZVwiLGMpLHQuZW1pdChcInBpcGVcIixyKSx0fTtmdW5jdGlvbiBEcyh0LGUscil7aWYodHlwZW9mIHQucHJlcGVuZExpc3RlbmVyPT1cImZ1bmN0aW9uXCIpcmV0dXJuIHQucHJlcGVuZExpc3RlbmVyKGUscik7IXQuX2V2ZW50c3x8IXQuX2V2ZW50c1tlXT90Lm9uKGUscik6ZXcodC5fZXZlbnRzW2VdKT90Ll9ldmVudHNbZV0udW5zaGlmdChyKTp0Ll9ldmVudHNbZV09W3IsdC5fZXZlbnRzW2VdXTt9YWMuZXhwb3J0cz17U3RyZWFtOmVuLHByZXBlbmRMaXN0ZW5lcjpEc307fSk7dmFyIGNpPU0oKCRULHJuKT0+e3YoKTttKCk7XygpO3ZhcntBYm9ydEVycm9yOmxjLGNvZGVzOnR3fT1TZSgpLHtpc05vZGVTdHJlYW06dWMsaXNXZWJTdHJlYW06cncsa0NvbnRyb2xsZXJFcnJvckZ1bmN0aW9uOml3fT10dCgpLG53PW10KCkse0VSUl9JTlZBTElEX0FSR19UWVBFOmZjfT10dyxzdz0odCxlKT0+e2lmKHR5cGVvZiB0IT1cIm9iamVjdFwifHwhKFwiYWJvcnRlZFwiaW4gdCkpdGhyb3cgbmV3IGZjKGUsXCJBYm9ydFNpZ25hbFwiLHQpfTtybi5leHBvcnRzLmFkZEFib3J0U2lnbmFsPWZ1bmN0aW9uKGUscil7aWYoc3coZSxcInNpZ25hbFwiKSwhdWMocikmJiFydyhyKSl0aHJvdyBuZXcgZmMoXCJzdHJlYW1cIixbXCJSZWFkYWJsZVN0cmVhbVwiLFwiV3JpdGFibGVTdHJlYW1cIixcIlN0cmVhbVwiXSxyKTtyZXR1cm4gcm4uZXhwb3J0cy5hZGRBYm9ydFNpZ25hbE5vVmFsaWRhdGUoZSxyKX07cm4uZXhwb3J0cy5hZGRBYm9ydFNpZ25hbE5vVmFsaWRhdGU9ZnVuY3Rpb24odCxlKXtpZih0eXBlb2YgdCE9XCJvYmplY3RcInx8IShcImFib3J0ZWRcImluIHQpKXJldHVybiBlO2xldCByPXVjKGUpPygpPT57ZS5kZXN0cm95KG5ldyBsYyh2b2lkIDAse2NhdXNlOnQucmVhc29ufSkpO306KCk9PntlW2l3XShuZXcgbGModm9pZCAwLHtjYXVzZTp0LnJlYXNvbn0pKTt9O3JldHVybiB0LmFib3J0ZWQ/cigpOih0LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLHIpLG53KGUsKCk9PnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIscikpKSxlfTt9KTt2YXIgZGM9TSgoZTIsaGMpPT57digpO20oKTtfKCk7dmFye1N0cmluZ1Byb3RvdHlwZVNsaWNlOmNjLFN5bWJvbEl0ZXJhdG9yOm93LFR5cGVkQXJyYXlQcm90b3R5cGVTZXQ6bm4sVWludDhBcnJheTphd309Y2UoKSx7QnVmZmVyOmpzfT0oeWUoKSxYKF9lKSkse2luc3BlY3Q6bHd9PUplKCk7aGMuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMuaGVhZD1udWxsLHRoaXMudGFpbD1udWxsLHRoaXMubGVuZ3RoPTA7fXB1c2goZSl7bGV0IHI9e2RhdGE6ZSxuZXh0Om51bGx9O3RoaXMubGVuZ3RoPjA/dGhpcy50YWlsLm5leHQ9cjp0aGlzLmhlYWQ9cix0aGlzLnRhaWw9ciwrK3RoaXMubGVuZ3RoO311bnNoaWZ0KGUpe2xldCByPXtkYXRhOmUsbmV4dDp0aGlzLmhlYWR9O3RoaXMubGVuZ3RoPT09MCYmKHRoaXMudGFpbD1yKSx0aGlzLmhlYWQ9ciwrK3RoaXMubGVuZ3RoO31zaGlmdCgpe2lmKHRoaXMubGVuZ3RoPT09MClyZXR1cm47bGV0IGU9dGhpcy5oZWFkLmRhdGE7cmV0dXJuIHRoaXMubGVuZ3RoPT09MT90aGlzLmhlYWQ9dGhpcy50YWlsPW51bGw6dGhpcy5oZWFkPXRoaXMuaGVhZC5uZXh0LC0tdGhpcy5sZW5ndGgsZX1jbGVhcigpe3RoaXMuaGVhZD10aGlzLnRhaWw9bnVsbCx0aGlzLmxlbmd0aD0wO31qb2luKGUpe2lmKHRoaXMubGVuZ3RoPT09MClyZXR1cm4gXCJcIjtsZXQgcj10aGlzLmhlYWQsaT1cIlwiK3IuZGF0YTtmb3IoOyhyPXIubmV4dCkhPT1udWxsOylpKz1lK3IuZGF0YTtyZXR1cm4gaX1jb25jYXQoZSl7aWYodGhpcy5sZW5ndGg9PT0wKXJldHVybiBqcy5hbGxvYygwKTtsZXQgcj1qcy5hbGxvY1Vuc2FmZShlPj4+MCksaT10aGlzLmhlYWQsbj0wO2Zvcig7aTspbm4ocixpLmRhdGEsbiksbis9aS5kYXRhLmxlbmd0aCxpPWkubmV4dDtyZXR1cm4gcn1jb25zdW1lKGUscil7bGV0IGk9dGhpcy5oZWFkLmRhdGE7aWYoZTxpLmxlbmd0aCl7bGV0IG49aS5zbGljZSgwLGUpO3JldHVybiB0aGlzLmhlYWQuZGF0YT1pLnNsaWNlKGUpLG59cmV0dXJuIGU9PT1pLmxlbmd0aD90aGlzLnNoaWZ0KCk6cj90aGlzLl9nZXRTdHJpbmcoZSk6dGhpcy5fZ2V0QnVmZmVyKGUpfWZpcnN0KCl7cmV0dXJuIHRoaXMuaGVhZC5kYXRhfSpbb3ddKCl7Zm9yKGxldCBlPXRoaXMuaGVhZDtlO2U9ZS5uZXh0KXlpZWxkIGUuZGF0YTt9X2dldFN0cmluZyhlKXtsZXQgcj1cIlwiLGk9dGhpcy5oZWFkLG49MDtkb3tsZXQgbz1pLmRhdGE7aWYoZT5vLmxlbmd0aClyKz1vLGUtPW8ubGVuZ3RoO2Vsc2Uge2U9PT1vLmxlbmd0aD8ocis9bywrK24saS5uZXh0P3RoaXMuaGVhZD1pLm5leHQ6dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsKToocis9Y2MobywwLGUpLHRoaXMuaGVhZD1pLGkuZGF0YT1jYyhvLGUpKTticmVha30rK247fXdoaWxlKChpPWkubmV4dCkhPT1udWxsKTtyZXR1cm4gdGhpcy5sZW5ndGgtPW4scn1fZ2V0QnVmZmVyKGUpe2xldCByPWpzLmFsbG9jVW5zYWZlKGUpLGk9ZSxuPXRoaXMuaGVhZCxvPTA7ZG97bGV0IHM9bi5kYXRhO2lmKGU+cy5sZW5ndGgpbm4ocixzLGktZSksZS09cy5sZW5ndGg7ZWxzZSB7ZT09PXMubGVuZ3RoPyhubihyLHMsaS1lKSwrK28sbi5uZXh0P3RoaXMuaGVhZD1uLm5leHQ6dGhpcy5oZWFkPXRoaXMudGFpbD1udWxsKToobm4ocixuZXcgYXcocy5idWZmZXIscy5ieXRlT2Zmc2V0LGUpLGktZSksdGhpcy5oZWFkPW4sbi5kYXRhPXMuc2xpY2UoZSkpO2JyZWFrfSsrbzt9d2hpbGUoKG49bi5uZXh0KSE9PW51bGwpO3JldHVybiB0aGlzLmxlbmd0aC09byxyfVtTeW1ib2wuZm9yKFwibm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b21cIildKGUscil7cmV0dXJuIGx3KHRoaXMsey4uLnIsZGVwdGg6MCxjdXN0b21JbnNwZWN0OiExfSl9fTt9KTt2YXIgc249TSgoZjIsZ2MpPT57digpO20oKTtfKCk7dmFye01hdGhGbG9vcjp1dyxOdW1iZXJJc0ludGVnZXI6Znd9PWNlKCkse0VSUl9JTlZBTElEX0FSR19WQUxVRTpjd309U2UoKS5jb2RlcztmdW5jdGlvbiBodyh0LGUscil7cmV0dXJuIHQuaGlnaFdhdGVyTWFyayE9bnVsbD90LmhpZ2hXYXRlck1hcms6ZT90W3JdOm51bGx9ZnVuY3Rpb24gcGModCl7cmV0dXJuIHQ/MTY6MTYqMTAyNH1mdW5jdGlvbiBkdyh0LGUscixpKXtsZXQgbj1odyhlLGkscik7aWYobiE9bnVsbCl7aWYoIWZ3KG4pfHxuPDApe2xldCBvPWk/YG9wdGlvbnMuJHtyfWA6XCJvcHRpb25zLmhpZ2hXYXRlck1hcmtcIjt0aHJvdyBuZXcgY3cobyxuKX1yZXR1cm4gdXcobil9cmV0dXJuIHBjKHQub2JqZWN0TW9kZSl9Z2MuZXhwb3J0cz17Z2V0SGlnaFdhdGVyTWFyazpkdyxnZXREZWZhdWx0SGlnaFdhdGVyTWFyazpwY307fSk7ZnVuY3Rpb24gd2ModCl7dmFyIGU9dC5sZW5ndGg7aWYoZSU0PjApdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNFwiKTt2YXIgcj10LmluZGV4T2YoXCI9XCIpO3JldHVybiByPT09LTEmJihyPWUpLFtyLHI9PT1lPzA6NC1yJTRdfWZ1bmN0aW9uIHB3KHQsZSxyKXtmb3IodmFyIGksbixvPVtdLHM9ZTtzPHI7cys9MylpPSh0W3NdPDwxNiYxNjcxMTY4MCkrKHRbcysxXTw8OCY2NTI4MCkrKDI1NSZ0W3MrMl0pLG8ucHVzaCgkZVsobj1pKT4+MTgmNjNdKyRlW24+PjEyJjYzXSskZVtuPj42JjYzXSskZVs2MyZuXSk7cmV0dXJuIG8uam9pbihcIlwiKX1mdW5jdGlvbiB2dCh0KXtpZih0PjIxNDc0ODM2NDcpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrdCsnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyk7dmFyIGU9bmV3IFVpbnQ4QXJyYXkodCk7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihlLGsucHJvdG90eXBlKSxlfWZ1bmN0aW9uIGsodCxlLHIpe2lmKHR5cGVvZiB0PT1cIm51bWJlclwiKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcicpO3JldHVybiBIcyh0KX1yZXR1cm4gQ2ModCxlLHIpfWZ1bmN0aW9uIENjKHQsZSxyKXtpZih0eXBlb2YgdD09XCJzdHJpbmdcIilyZXR1cm4gZnVuY3Rpb24obyxzKXtpZih0eXBlb2Ygcz09XCJzdHJpbmdcIiYmcyE9PVwiXCJ8fChzPVwidXRmOFwiKSwhay5pc0VuY29kaW5nKHMpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitzKTt2YXIgYT0wfFBjKG8scyksdT12dChhKSxjPXUud3JpdGUobyxzKTtyZXR1cm4gYyE9PWEmJih1PXUuc2xpY2UoMCxjKSksdX0odCxlKTtpZihBcnJheUJ1ZmZlci5pc1ZpZXcodCkpcmV0dXJuIEZzKHQpO2lmKHQ9PW51bGwpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIEFycmF5LWxpa2UgT2JqZWN0LiBSZWNlaXZlZCB0eXBlIFwiK3R5cGVvZiB0KTtpZihFdCh0LEFycmF5QnVmZmVyKXx8dCYmRXQodC5idWZmZXIsQXJyYXlCdWZmZXIpfHx0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXI8XCJ1XCImJihFdCh0LFNoYXJlZEFycmF5QnVmZmVyKXx8dCYmRXQodC5idWZmZXIsU2hhcmVkQXJyYXlCdWZmZXIpKSlyZXR1cm4gbWModCxlLHIpO2lmKHR5cGVvZiB0PT1cIm51bWJlclwiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgbnVtYmVyJyk7dmFyIGk9dC52YWx1ZU9mJiZ0LnZhbHVlT2YoKTtpZihpIT1udWxsJiZpIT09dClyZXR1cm4gay5mcm9tKGksZSxyKTt2YXIgbj1mdW5jdGlvbihvKXtpZihrLmlzQnVmZmVyKG8pKXt2YXIgcz0wfEtzKG8ubGVuZ3RoKSxhPXZ0KHMpO3JldHVybiBhLmxlbmd0aD09PTB8fG8uY29weShhLDAsMCxzKSxhfWlmKG8ubGVuZ3RoIT09dm9pZCAwKXJldHVybiB0eXBlb2Ygby5sZW5ndGghPVwibnVtYmVyXCJ8fEdzKG8ubGVuZ3RoKT92dCgwKTpGcyhvKTtpZihvLnR5cGU9PT1cIkJ1ZmZlclwiJiZBcnJheS5pc0FycmF5KG8uZGF0YSkpcmV0dXJuIEZzKG8uZGF0YSl9KHQpO2lmKG4pcmV0dXJuIG47aWYodHlwZW9mIFN5bWJvbDxcInVcIiYmU3ltYm9sLnRvUHJpbWl0aXZlIT1udWxsJiZ0eXBlb2YgdFtTeW1ib2wudG9QcmltaXRpdmVdPT1cImZ1bmN0aW9uXCIpcmV0dXJuIGsuZnJvbSh0W1N5bWJvbC50b1ByaW1pdGl2ZV0oXCJzdHJpbmdcIiksZSxyKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgXCIrdHlwZW9mIHQpfWZ1bmN0aW9uIEJjKHQpe2lmKHR5cGVvZiB0IT1cIm51bWJlclwiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBudW1iZXInKTtpZih0PDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicrdCsnXCIgaXMgaW52YWxpZCBmb3Igb3B0aW9uIFwic2l6ZVwiJyl9ZnVuY3Rpb24gSHModCl7cmV0dXJuIEJjKHQpLHZ0KHQ8MD8wOjB8S3ModCkpfWZ1bmN0aW9uIEZzKHQpe2Zvcih2YXIgZT10Lmxlbmd0aDwwPzA6MHxLcyh0Lmxlbmd0aCkscj12dChlKSxpPTA7aTxlO2krPTEpcltpXT0yNTUmdFtpXTtyZXR1cm4gcn1mdW5jdGlvbiBtYyh0LGUscil7aWYoZTwwfHx0LmJ5dGVMZW5ndGg8ZSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKTtpZih0LmJ5dGVMZW5ndGg8ZSsocnx8MCkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wibGVuZ3RoXCIgaXMgb3V0c2lkZSBvZiBidWZmZXIgYm91bmRzJyk7dmFyIGk7cmV0dXJuIGk9ZT09PXZvaWQgMCYmcj09PXZvaWQgMD9uZXcgVWludDhBcnJheSh0KTpyPT09dm9pZCAwP25ldyBVaW50OEFycmF5KHQsZSk6bmV3IFVpbnQ4QXJyYXkodCxlLHIpLE9iamVjdC5zZXRQcm90b3R5cGVPZihpLGsucHJvdG90eXBlKSxpfWZ1bmN0aW9uIEtzKHQpe2lmKHQ+PTIxNDc0ODM2NDcpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtIHNpemU6IDB4XCIrMjE0NzQ4MzY0NyAudG9TdHJpbmcoMTYpK1wiIGJ5dGVzXCIpO3JldHVybiAwfHR9ZnVuY3Rpb24gUGModCxlKXtpZihrLmlzQnVmZmVyKHQpKXJldHVybiB0Lmxlbmd0aDtpZihBcnJheUJ1ZmZlci5pc1ZpZXcodCl8fEV0KHQsQXJyYXlCdWZmZXIpKXJldHVybiB0LmJ5dGVMZW5ndGg7aWYodHlwZW9mIHQhPVwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwic3RyaW5nXCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgb3IgQXJyYXlCdWZmZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgdCk7dmFyIHI9dC5sZW5ndGgsaT1hcmd1bWVudHMubGVuZ3RoPjImJmFyZ3VtZW50c1syXT09PSEwO2lmKCFpJiZyPT09MClyZXR1cm4gMDtmb3IodmFyIG49ITE7Oylzd2l0Y2goZSl7Y2FzZVwiYXNjaWlcIjpjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gcjtjYXNlXCJ1dGY4XCI6Y2FzZVwidXRmLThcIjpyZXR1cm4gVnModCkubGVuZ3RoO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiAyKnI7Y2FzZVwiaGV4XCI6cmV0dXJuIHI+Pj4xO2Nhc2VcImJhc2U2NFwiOnJldHVybiBNYyh0KS5sZW5ndGg7ZGVmYXVsdDppZihuKXJldHVybiBpPy0xOlZzKHQpLmxlbmd0aDtlPShcIlwiK2UpLnRvTG93ZXJDYXNlKCksbj0hMDt9fWZ1bmN0aW9uIHl3KHQsZSxyKXt2YXIgaT0hMTtpZigoZT09PXZvaWQgMHx8ZTwwKSYmKGU9MCksZT50aGlzLmxlbmd0aHx8KChyPT09dm9pZCAwfHxyPnRoaXMubGVuZ3RoKSYmKHI9dGhpcy5sZW5ndGgpLHI8PTApfHwocj4+Pj0wKTw9KGU+Pj49MCkpcmV0dXJuIFwiXCI7Zm9yKHR8fCh0PVwidXRmOFwiKTs7KXN3aXRjaCh0KXtjYXNlXCJoZXhcIjpyZXR1cm4gSXcodGhpcyxlLHIpO2Nhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOnJldHVybiBrYyh0aGlzLGUscik7Y2FzZVwiYXNjaWlcIjpyZXR1cm4gU3codGhpcyxlLHIpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBBdyh0aGlzLGUscik7Y2FzZVwiYmFzZTY0XCI6cmV0dXJuIEV3KHRoaXMsZSxyKTtjYXNlXCJ1Y3MyXCI6Y2FzZVwidWNzLTJcIjpjYXNlXCJ1dGYxNmxlXCI6Y2FzZVwidXRmLTE2bGVcIjpyZXR1cm4gVHcodGhpcyxlLHIpO2RlZmF1bHQ6aWYoaSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrdCk7dD0odCtcIlwiKS50b0xvd2VyQ2FzZSgpLGk9ITA7fX1mdW5jdGlvbiBzcih0LGUscil7dmFyIGk9dFtlXTt0W2VdPXRbcl0sdFtyXT1pO31mdW5jdGlvbiB2Yyh0LGUscixpLG4pe2lmKHQubGVuZ3RoPT09MClyZXR1cm4gLTE7aWYodHlwZW9mIHI9PVwic3RyaW5nXCI/KGk9cixyPTApOnI+MjE0NzQ4MzY0Nz9yPTIxNDc0ODM2NDc6cjwtMjE0NzQ4MzY0OCYmKHI9LTIxNDc0ODM2NDgpLEdzKHI9K3IpJiYocj1uPzA6dC5sZW5ndGgtMSkscjwwJiYocj10Lmxlbmd0aCtyKSxyPj10Lmxlbmd0aCl7aWYobilyZXR1cm4gLTE7cj10Lmxlbmd0aC0xO31lbHNlIGlmKHI8MCl7aWYoIW4pcmV0dXJuIC0xO3I9MDt9aWYodHlwZW9mIGU9PVwic3RyaW5nXCImJihlPWsuZnJvbShlLGkpKSxrLmlzQnVmZmVyKGUpKXJldHVybiBlLmxlbmd0aD09PTA/LTE6RWModCxlLHIsaSxuKTtpZih0eXBlb2YgZT09XCJudW1iZXJcIilyZXR1cm4gZSY9MjU1LHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mPT1cImZ1bmN0aW9uXCI/bj9VaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwodCxlLHIpOlVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwodCxlLHIpOkVjKHQsW2VdLHIsaSxuKTt0aHJvdyBuZXcgVHlwZUVycm9yKFwidmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyXCIpfWZ1bmN0aW9uIEVjKHQsZSxyLGksbil7dmFyIG8scz0xLGE9dC5sZW5ndGgsdT1lLmxlbmd0aDtpZihpIT09dm9pZCAwJiYoKGk9U3RyaW5nKGkpLnRvTG93ZXJDYXNlKCkpPT09XCJ1Y3MyXCJ8fGk9PT1cInVjcy0yXCJ8fGk9PT1cInV0ZjE2bGVcInx8aT09PVwidXRmLTE2bGVcIikpe2lmKHQubGVuZ3RoPDJ8fGUubGVuZ3RoPDIpcmV0dXJuIC0xO3M9MixhLz0yLHUvPTIsci89Mjt9ZnVuY3Rpb24gYyh5LHcpe3JldHVybiBzPT09MT95W3ddOnkucmVhZFVJbnQxNkJFKHcqcyl9aWYobil7dmFyIGg9LTE7Zm9yKG89cjtvPGE7bysrKWlmKGModCxvKT09PWMoZSxoPT09LTE/MDpvLWgpKXtpZihoPT09LTEmJihoPW8pLG8taCsxPT09dSlyZXR1cm4gaCpzfWVsc2UgaCE9PS0xJiYoby09by1oKSxoPS0xO31lbHNlIGZvcihyK3U+YSYmKHI9YS11KSxvPXI7bz49MDtvLS0pe2Zvcih2YXIgZD0hMCxnPTA7Zzx1O2crKylpZihjKHQsbytnKSE9PWMoZSxnKSl7ZD0hMTticmVha31pZihkKXJldHVybiBvfXJldHVybiAtMX1mdW5jdGlvbiBidyh0LGUscixpKXtyPU51bWJlcihyKXx8MDt2YXIgbj10Lmxlbmd0aC1yO2k/KGk9TnVtYmVyKGkpKT5uJiYoaT1uKTppPW47dmFyIG89ZS5sZW5ndGg7aT5vLzImJihpPW8vMik7Zm9yKHZhciBzPTA7czxpOysrcyl7dmFyIGE9cGFyc2VJbnQoZS5zdWJzdHIoMipzLDIpLDE2KTtpZihHcyhhKSlyZXR1cm4gczt0W3Irc109YTt9cmV0dXJuIHN9ZnVuY3Rpb24gd3codCxlLHIsaSl7cmV0dXJuIHVuKFZzKGUsdC5sZW5ndGgtciksdCxyLGkpfWZ1bmN0aW9uIE9jKHQsZSxyLGkpe3JldHVybiB1bihmdW5jdGlvbihuKXtmb3IodmFyIG89W10scz0wO3M8bi5sZW5ndGg7KytzKW8ucHVzaCgyNTUmbi5jaGFyQ29kZUF0KHMpKTtyZXR1cm4gb30oZSksdCxyLGkpfWZ1bmN0aW9uIF93KHQsZSxyLGkpe3JldHVybiBPYyh0LGUscixpKX1mdW5jdGlvbiBtdyh0LGUscixpKXtyZXR1cm4gdW4oTWMoZSksdCxyLGkpfWZ1bmN0aW9uIHZ3KHQsZSxyLGkpe3JldHVybiB1bihmdW5jdGlvbihuLG8pe2Zvcih2YXIgcyxhLHUsYz1bXSxoPTA7aDxuLmxlbmd0aCYmISgoby09Mik8MCk7KytoKXM9bi5jaGFyQ29kZUF0KGgpLGE9cz4+OCx1PXMlMjU2LGMucHVzaCh1KSxjLnB1c2goYSk7cmV0dXJuIGN9KGUsdC5sZW5ndGgtciksdCxyLGkpfWZ1bmN0aW9uIEV3KHQsZSxyKXtyZXR1cm4gZT09PTAmJnI9PT10Lmxlbmd0aD8kcy5mcm9tQnl0ZUFycmF5KHQpOiRzLmZyb21CeXRlQXJyYXkodC5zbGljZShlLHIpKX1mdW5jdGlvbiBrYyh0LGUscil7cj1NYXRoLm1pbih0Lmxlbmd0aCxyKTtmb3IodmFyIGk9W10sbj1lO248cjspe3ZhciBvLHMsYSx1LGM9dFtuXSxoPW51bGwsZD1jPjIzOT80OmM+MjIzPzM6Yz4xOTE/MjoxO2lmKG4rZDw9cilzd2l0Y2goZCl7Y2FzZSAxOmM8MTI4JiYoaD1jKTticmVhaztjYXNlIDI6KDE5MiYobz10W24rMV0pKT09MTI4JiYodT0oMzEmYyk8PDZ8NjMmbyk+MTI3JiYoaD11KTticmVhaztjYXNlIDM6bz10W24rMV0scz10W24rMl0sKDE5MiZvKT09MTI4JiYoMTkyJnMpPT0xMjgmJih1PSgxNSZjKTw8MTJ8KDYzJm8pPDw2fDYzJnMpPjIwNDcmJih1PDU1Mjk2fHx1PjU3MzQzKSYmKGg9dSk7YnJlYWs7Y2FzZSA0Om89dFtuKzFdLHM9dFtuKzJdLGE9dFtuKzNdLCgxOTImbyk9PTEyOCYmKDE5MiZzKT09MTI4JiYoMTkyJmEpPT0xMjgmJih1PSgxNSZjKTw8MTh8KDYzJm8pPDwxMnwoNjMmcyk8PDZ8NjMmYSk+NjU1MzUmJnU8MTExNDExMiYmKGg9dSk7fWg9PT1udWxsPyhoPTY1NTMzLGQ9MSk6aD42NTUzNSYmKGgtPTY1NTM2LGkucHVzaChoPj4+MTAmMTAyM3w1NTI5NiksaD01NjMyMHwxMDIzJmgpLGkucHVzaChoKSxuKz1kO31yZXR1cm4gZnVuY3Rpb24oZyl7dmFyIHk9Zy5sZW5ndGg7aWYoeTw9NDA5NilyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZyk7Zm9yKHZhciB3PVwiXCIsRT0wO0U8eTspdys9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZy5zbGljZShFLEUrPTQwOTYpKTtyZXR1cm4gd30oaSl9ZnVuY3Rpb24gU3codCxlLHIpe3ZhciBpPVwiXCI7cj1NYXRoLm1pbih0Lmxlbmd0aCxyKTtmb3IodmFyIG49ZTtuPHI7KytuKWkrPVN0cmluZy5mcm9tQ2hhckNvZGUoMTI3JnRbbl0pO3JldHVybiBpfWZ1bmN0aW9uIEF3KHQsZSxyKXt2YXIgaT1cIlwiO3I9TWF0aC5taW4odC5sZW5ndGgscik7Zm9yKHZhciBuPWU7bjxyOysrbilpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbbl0pO3JldHVybiBpfWZ1bmN0aW9uIEl3KHQsZSxyKXt2YXIgaT10Lmxlbmd0aDsoIWV8fGU8MCkmJihlPTApLCghcnx8cjwwfHxyPmkpJiYocj1pKTtmb3IodmFyIG49XCJcIixvPWU7bzxyOysrbyluKz1Dd1t0W29dXTtyZXR1cm4gbn1mdW5jdGlvbiBUdyh0LGUscil7Zm9yKHZhciBpPXQuc2xpY2UoZSxyKSxuPVwiXCIsbz0wO288aS5sZW5ndGg7bys9MiluKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGlbb10rMjU2KmlbbysxXSk7cmV0dXJuIG59ZnVuY3Rpb24gYmUodCxlLHIpe2lmKHQlMSE9MHx8dDwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwib2Zmc2V0IGlzIG5vdCB1aW50XCIpO2lmKHQrZT5yKXRocm93IG5ldyBSYW5nZUVycm9yKFwiVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aFwiKX1mdW5jdGlvbiBQZSh0LGUscixpLG4sbyl7aWYoIWsuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJyk7aWYoZT5ufHxlPG8pdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJyk7aWYocitpPnQubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIHhjKHQsZSxyLGksbixvKXtpZihyK2k+dC5sZW5ndGgpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbmRleCBvdXQgb2YgcmFuZ2VcIik7aWYocjwwKXRocm93IG5ldyBSYW5nZUVycm9yKFwiSW5kZXggb3V0IG9mIHJhbmdlXCIpfWZ1bmN0aW9uIFNjKHQsZSxyLGksbil7cmV0dXJuIGU9K2Uscj4+Pj0wLG58fHhjKHQsMCxyLDQpLE5yLndyaXRlKHQsZSxyLGksMjMsNCkscis0fWZ1bmN0aW9uIEFjKHQsZSxyLGksbil7cmV0dXJuIGU9K2Uscj4+Pj0wLG58fHhjKHQsMCxyLDgpLE5yLndyaXRlKHQsZSxyLGksNTIsOCkscis4fWZ1bmN0aW9uIFZzKHQsZSl7dmFyIHI7ZT1lfHwxLzA7Zm9yKHZhciBpPXQubGVuZ3RoLG49bnVsbCxvPVtdLHM9MDtzPGk7KytzKXtpZigocj10LmNoYXJDb2RlQXQocykpPjU1Mjk1JiZyPDU3MzQ0KXtpZighbil7aWYocj41NjMxOSl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpO2NvbnRpbnVlfWlmKHMrMT09PWkpeyhlLT0zKT4tMSYmby5wdXNoKDIzOSwxOTEsMTg5KTtjb250aW51ZX1uPXI7Y29udGludWV9aWYocjw1NjMyMCl7KGUtPTMpPi0xJiZvLnB1c2goMjM5LDE5MSwxODkpLG49cjtjb250aW51ZX1yPTY1NTM2KyhuLTU1Mjk2PDwxMHxyLTU2MzIwKTt9ZWxzZSBuJiYoZS09Myk+LTEmJm8ucHVzaCgyMzksMTkxLDE4OSk7aWYobj1udWxsLHI8MTI4KXtpZigoZS09MSk8MClicmVhaztvLnB1c2gocik7fWVsc2UgaWYocjwyMDQ4KXtpZigoZS09Mik8MClicmVhaztvLnB1c2gocj4+NnwxOTIsNjMmcnwxMjgpO31lbHNlIGlmKHI8NjU1MzYpe2lmKChlLT0zKTwwKWJyZWFrO28ucHVzaChyPj4xMnwyMjQscj4+NiY2M3wxMjgsNjMmcnwxMjgpO31lbHNlIHtpZighKHI8MTExNDExMikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjb2RlIHBvaW50XCIpO2lmKChlLT00KTwwKWJyZWFrO28ucHVzaChyPj4xOHwyNDAscj4+MTImNjN8MTI4LHI+PjYmNjN8MTI4LDYzJnJ8MTI4KTt9fXJldHVybiBvfWZ1bmN0aW9uIE1jKHQpe3JldHVybiAkcy50b0J5dGVBcnJheShmdW5jdGlvbihlKXtpZigoZT0oZT1lLnNwbGl0KFwiPVwiKVswXSkudHJpbSgpLnJlcGxhY2UoUncsXCJcIikpLmxlbmd0aDwyKXJldHVybiBcIlwiO2Zvcig7ZS5sZW5ndGglNCE9MDspZSs9XCI9XCI7cmV0dXJuIGV9KHQpKX1mdW5jdGlvbiB1bih0LGUscixpKXtmb3IodmFyIG49MDtuPGkmJiEobityPj1lLmxlbmd0aHx8bj49dC5sZW5ndGgpOysrbillW24rcl09dFtuXTtyZXR1cm4gbn1mdW5jdGlvbiBFdCh0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgZXx8dCE9bnVsbCYmdC5jb25zdHJ1Y3RvciE9bnVsbCYmdC5jb25zdHJ1Y3Rvci5uYW1lIT1udWxsJiZ0LmNvbnN0cnVjdG9yLm5hbWU9PT1lLm5hbWV9ZnVuY3Rpb24gR3ModCl7cmV0dXJuIHQhPXR9ZnVuY3Rpb24gSWModCxlKXtmb3IodmFyIHIgaW4gdCllW3JdPXRbcl07fWZ1bmN0aW9uIG9yKHQsZSxyKXtyZXR1cm4gaXQodCxlLHIpfWZ1bmN0aW9uIGhpKHQpe3ZhciBlO3N3aXRjaCh0aGlzLmVuY29kaW5nPWZ1bmN0aW9uKHIpe3ZhciBpPWZ1bmN0aW9uKG4pe2lmKCFuKXJldHVybiBcInV0ZjhcIjtmb3IodmFyIG87Oylzd2l0Y2gobil7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIFwidXRmOFwiO2Nhc2VcInVjczJcIjpjYXNlXCJ1Y3MtMlwiOmNhc2VcInV0ZjE2bGVcIjpjYXNlXCJ1dGYtMTZsZVwiOnJldHVybiBcInV0ZjE2bGVcIjtjYXNlXCJsYXRpbjFcIjpjYXNlXCJiaW5hcnlcIjpyZXR1cm4gXCJsYXRpbjFcIjtjYXNlXCJiYXNlNjRcIjpjYXNlXCJhc2NpaVwiOmNhc2VcImhleFwiOnJldHVybiBuO2RlZmF1bHQ6aWYobylyZXR1cm47bj0oXCJcIituKS50b0xvd2VyQ2FzZSgpLG89ITA7fX0ocik7aWYodHlwZW9mIGkhPVwic3RyaW5nXCImJih6cy5pc0VuY29kaW5nPT09VGN8fCFUYyhyKSkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIrcik7cmV0dXJuIGl8fHJ9KHQpLHRoaXMuZW5jb2Rpbmcpe2Nhc2VcInV0ZjE2bGVcIjp0aGlzLnRleHQ9T3csdGhpcy5lbmQ9a3csZT00O2JyZWFrO2Nhc2VcInV0ZjhcIjp0aGlzLmZpbGxMYXN0PVB3LGU9NDticmVhaztjYXNlXCJiYXNlNjRcIjp0aGlzLnRleHQ9eHcsdGhpcy5lbmQ9TXcsZT0zO2JyZWFrO2RlZmF1bHQ6cmV0dXJuIHRoaXMud3JpdGU9THcsdGhpcy5lbmQ9VXcsdm9pZCAwfXRoaXMubGFzdE5lZWQ9MCx0aGlzLmxhc3RUb3RhbD0wLHRoaXMubGFzdENoYXI9enMuYWxsb2NVbnNhZmUoZSk7fWZ1bmN0aW9uIFdzKHQpe3JldHVybiB0PD0xMjc/MDp0Pj41PT02PzI6dD4+ND09MTQ/Mzp0Pj4zPT0zMD80OnQ+PjY9PTI/LTE6LTJ9ZnVuY3Rpb24gUHcodCl7dmFyIGU9dGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCxyPWZ1bmN0aW9uKGksbixvKXtpZigoMTkyJm5bMF0pIT0xMjgpcmV0dXJuIGkubGFzdE5lZWQ9MCxcIlxcdUZGRkRcIjtpZihpLmxhc3ROZWVkPjEmJm4ubGVuZ3RoPjEpe2lmKCgxOTImblsxXSkhPTEyOClyZXR1cm4gaS5sYXN0TmVlZD0xLFwiXFx1RkZGRFwiO2lmKGkubGFzdE5lZWQ+MiYmbi5sZW5ndGg+MiYmKDE5MiZuWzJdKSE9MTI4KXJldHVybiBpLmxhc3ROZWVkPTIsXCJcXHVGRkZEXCJ9fSh0aGlzLHQpO3JldHVybiByIT09dm9pZCAwP3I6dGhpcy5sYXN0TmVlZDw9dC5sZW5ndGg/KHQuY29weSh0aGlzLmxhc3RDaGFyLGUsMCx0aGlzLmxhc3ROZWVkKSx0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsMCx0aGlzLmxhc3RUb3RhbCkpOih0LmNvcHkodGhpcy5sYXN0Q2hhcixlLDAsdC5sZW5ndGgpLHRoaXMubGFzdE5lZWQtPXQubGVuZ3RoLHZvaWQgMCl9ZnVuY3Rpb24gT3codCxlKXtpZigodC5sZW5ndGgtZSklMj09MCl7dmFyIHI9dC50b1N0cmluZyhcInV0ZjE2bGVcIixlKTtpZihyKXt2YXIgaT1yLmNoYXJDb2RlQXQoci5sZW5ndGgtMSk7aWYoaT49NTUyOTYmJmk8PTU2MzE5KXJldHVybiB0aGlzLmxhc3ROZWVkPTIsdGhpcy5sYXN0VG90YWw9NCx0aGlzLmxhc3RDaGFyWzBdPXRbdC5sZW5ndGgtMl0sdGhpcy5sYXN0Q2hhclsxXT10W3QubGVuZ3RoLTFdLHIuc2xpY2UoMCwtMSl9cmV0dXJuIHJ9cmV0dXJuIHRoaXMubGFzdE5lZWQ9MSx0aGlzLmxhc3RUb3RhbD0yLHRoaXMubGFzdENoYXJbMF09dFt0Lmxlbmd0aC0xXSx0LnRvU3RyaW5nKFwidXRmMTZsZVwiLGUsdC5sZW5ndGgtMSl9ZnVuY3Rpb24ga3codCl7dmFyIGU9dCYmdC5sZW5ndGg/dGhpcy53cml0ZSh0KTpcIlwiO2lmKHRoaXMubGFzdE5lZWQpe3ZhciByPXRoaXMubGFzdFRvdGFsLXRoaXMubGFzdE5lZWQ7cmV0dXJuIGUrdGhpcy5sYXN0Q2hhci50b1N0cmluZyhcInV0ZjE2bGVcIiwwLHIpfXJldHVybiBlfWZ1bmN0aW9uIHh3KHQsZSl7dmFyIHI9KHQubGVuZ3RoLWUpJTM7cmV0dXJuIHI9PT0wP3QudG9TdHJpbmcoXCJiYXNlNjRcIixlKToodGhpcy5sYXN0TmVlZD0zLXIsdGhpcy5sYXN0VG90YWw9MyxyPT09MT90aGlzLmxhc3RDaGFyWzBdPXRbdC5sZW5ndGgtMV06KHRoaXMubGFzdENoYXJbMF09dFt0Lmxlbmd0aC0yXSx0aGlzLmxhc3RDaGFyWzFdPXRbdC5sZW5ndGgtMV0pLHQudG9TdHJpbmcoXCJiYXNlNjRcIixlLHQubGVuZ3RoLXIpKX1mdW5jdGlvbiBNdyh0KXt2YXIgZT10JiZ0Lmxlbmd0aD90aGlzLndyaXRlKHQpOlwiXCI7cmV0dXJuIHRoaXMubGFzdE5lZWQ/ZSt0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKFwiYmFzZTY0XCIsMCwzLXRoaXMubGFzdE5lZWQpOmV9ZnVuY3Rpb24gTHcodCl7cmV0dXJuIHQudG9TdHJpbmcodGhpcy5lbmNvZGluZyl9ZnVuY3Rpb24gVXcodCl7cmV0dXJuIHQmJnQubGVuZ3RoP3RoaXMud3JpdGUodCk6XCJcIn12YXIgUmMsJGUsa2UseWMsb24sbnIsYmMsZ3csU3QsJHMsTnIsX2MsUncsQ3csYW4sbG4saXQsQncsYXIsenMsVGMsUXM9d2UoKCk9Pnt2KCk7bSgpO18oKTtmb3IoUmM9e2J5dGVMZW5ndGg6ZnVuY3Rpb24odCl7dmFyIGU9d2ModCkscj1lWzBdLGk9ZVsxXTtyZXR1cm4gMyoocitpKS80LWl9LHRvQnl0ZUFycmF5OmZ1bmN0aW9uKHQpe3ZhciBlLHIsaT13Yyh0KSxuPWlbMF0sbz1pWzFdLHM9bmV3IHljKGZ1bmN0aW9uKGMsaCxkKXtyZXR1cm4gMyooaCtkKS80LWR9KDAsbixvKSksYT0wLHU9bz4wP24tNDpuO2ZvcihyPTA7cjx1O3IrPTQpZT1rZVt0LmNoYXJDb2RlQXQocildPDwxOHxrZVt0LmNoYXJDb2RlQXQocisxKV08PDEyfGtlW3QuY2hhckNvZGVBdChyKzIpXTw8NnxrZVt0LmNoYXJDb2RlQXQociszKV0sc1thKytdPWU+PjE2JjI1NSxzW2ErK109ZT4+OCYyNTUsc1thKytdPTI1NSZlO3JldHVybiBvPT09MiYmKGU9a2VbdC5jaGFyQ29kZUF0KHIpXTw8MnxrZVt0LmNoYXJDb2RlQXQocisxKV0+PjQsc1thKytdPTI1NSZlKSxvPT09MSYmKGU9a2VbdC5jaGFyQ29kZUF0KHIpXTw8MTB8a2VbdC5jaGFyQ29kZUF0KHIrMSldPDw0fGtlW3QuY2hhckNvZGVBdChyKzIpXT4+MixzW2ErK109ZT4+OCYyNTUsc1thKytdPTI1NSZlKSxzfSxmcm9tQnl0ZUFycmF5OmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxyPXQubGVuZ3RoLGk9ciUzLG49W10sbz0wLHM9ci1pO288cztvKz0xNjM4MyluLnB1c2gocHcodCxvLG8rMTYzODM+cz9zOm8rMTYzODMpKTtyZXR1cm4gaT09PTE/KGU9dFtyLTFdLG4ucHVzaCgkZVtlPj4yXSskZVtlPDw0JjYzXStcIj09XCIpKTppPT09MiYmKGU9KHRbci0yXTw8OCkrdFtyLTFdLG4ucHVzaCgkZVtlPj4xMF0rJGVbZT4+NCY2M10rJGVbZTw8MiY2M10rXCI9XCIpKSxuLmpvaW4oXCJcIil9fSwkZT1bXSxrZT1bXSx5Yz10eXBlb2YgVWludDhBcnJheTxcInVcIj9VaW50OEFycmF5OkFycmF5LG9uPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLG5yPTAsYmM9b24ubGVuZ3RoO25yPGJjOysrbnIpJGVbbnJdPW9uW25yXSxrZVtvbi5jaGFyQ29kZUF0KG5yKV09bnI7a2VbXCItXCIuY2hhckNvZGVBdCgwKV09NjIsa2VbXCJfXCIuY2hhckNvZGVBdCgwKV09NjM7Z3c9e3JlYWQ6ZnVuY3Rpb24odCxlLHIsaSxuKXt2YXIgbyxzLGE9OCpuLWktMSx1PSgxPDxhKS0xLGM9dT4+MSxoPS03LGQ9cj9uLTE6MCxnPXI/LTE6MSx5PXRbZStkXTtmb3IoZCs9ZyxvPXkmKDE8PC1oKS0xLHk+Pj0taCxoKz1hO2g+MDtvPTI1NipvK3RbZStkXSxkKz1nLGgtPTgpO2ZvcihzPW8mKDE8PC1oKS0xLG8+Pj0taCxoKz1pO2g+MDtzPTI1NipzK3RbZStkXSxkKz1nLGgtPTgpO2lmKG89PT0wKW89MS1jO2Vsc2Uge2lmKG89PT11KXJldHVybiBzP05hTjoxLzAqKHk/LTE6MSk7cys9TWF0aC5wb3coMixpKSxvLT1jO31yZXR1cm4gKHk/LTE6MSkqcypNYXRoLnBvdygyLG8taSl9LHdyaXRlOmZ1bmN0aW9uKHQsZSxyLGksbixvKXt2YXIgcyxhLHUsYz04Km8tbi0xLGg9KDE8PGMpLTEsZD1oPj4xLGc9bj09PTIzP01hdGgucG93KDIsLTI0KS1NYXRoLnBvdygyLC03Nyk6MCx5PWk/MDpvLTEsdz1pPzE6LTEsRT1lPDB8fGU9PT0wJiYxL2U8MD8xOjA7Zm9yKGU9TWF0aC5hYnMoZSksaXNOYU4oZSl8fGU9PT0xLzA/KGE9aXNOYU4oZSk/MTowLHM9aCk6KHM9TWF0aC5mbG9vcihNYXRoLmxvZyhlKS9NYXRoLkxOMiksZSoodT1NYXRoLnBvdygyLC1zKSk8MSYmKHMtLSx1Kj0yKSwoZSs9cytkPj0xP2cvdTpnKk1hdGgucG93KDIsMS1kKSkqdT49MiYmKHMrKyx1Lz0yKSxzK2Q+PWg/KGE9MCxzPWgpOnMrZD49MT8oYT0oZSp1LTEpKk1hdGgucG93KDIsbikscys9ZCk6KGE9ZSpNYXRoLnBvdygyLGQtMSkqTWF0aC5wb3coMixuKSxzPTApKTtuPj04O3Rbcit5XT0yNTUmYSx5Kz13LGEvPTI1NixuLT04KTtmb3Iocz1zPDxufGEsYys9bjtjPjA7dFtyK3ldPTI1NSZzLHkrPXcscy89MjU2LGMtPTgpO3Rbcit5LXddfD0xMjgqRTt9fSxTdD17fSwkcz1SYyxOcj1ndyxfYz10eXBlb2YgU3ltYm9sPT1cImZ1bmN0aW9uXCImJnR5cGVvZiBTeW1ib2wuZm9yPT1cImZ1bmN0aW9uXCI/U3ltYm9sLmZvcihcIm5vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tXCIpOm51bGw7U3QuQnVmZmVyPWssU3QuU2xvd0J1ZmZlcj1mdW5jdGlvbih0KXtyZXR1cm4gK3QhPXQmJih0PTApLGsuYWxsb2MoK3QpfSxTdC5JTlNQRUNUX01BWF9CWVRFUz01MDtTdC5rTWF4TGVuZ3RoPTIxNDc0ODM2NDcsay5UWVBFRF9BUlJBWV9TVVBQT1JUPWZ1bmN0aW9uKCl7dHJ5e3ZhciB0PW5ldyBVaW50OEFycmF5KDEpLGU9e2ZvbzpmdW5jdGlvbigpe3JldHVybiA0Mn19O3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxVaW50OEFycmF5LnByb3RvdHlwZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKHQsZSksdC5mb28oKT09PTQyfWNhdGNoe3JldHVybiAhMX19KCksay5UWVBFRF9BUlJBWV9TVVBQT1JUfHx0eXBlb2YgY29uc29sZT5cInVcInx8dHlwZW9mIGNvbnNvbGUuZXJyb3IhPVwiZnVuY3Rpb25cInx8Y29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBsYWNrcyB0eXBlZCBhcnJheSAoVWludDhBcnJheSkgc3VwcG9ydCB3aGljaCBpcyByZXF1aXJlZCBieSBgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LlwiKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoay5wcm90b3R5cGUsXCJwYXJlbnRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihrLmlzQnVmZmVyKHRoaXMpKXJldHVybiB0aGlzLmJ1ZmZlcn19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoay5wcm90b3R5cGUsXCJvZmZzZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtpZihrLmlzQnVmZmVyKHRoaXMpKXJldHVybiB0aGlzLmJ5dGVPZmZzZXR9fSksay5wb29sU2l6ZT04MTkyLGsuZnJvbT1mdW5jdGlvbih0LGUscil7cmV0dXJuIENjKHQsZSxyKX0sT2JqZWN0LnNldFByb3RvdHlwZU9mKGsucHJvdG90eXBlLFVpbnQ4QXJyYXkucHJvdG90eXBlKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoayxVaW50OEFycmF5KSxrLmFsbG9jPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gZnVuY3Rpb24oaSxuLG8pe3JldHVybiBCYyhpKSxpPD0wP3Z0KGkpOm4hPT12b2lkIDA/dHlwZW9mIG89PVwic3RyaW5nXCI/dnQoaSkuZmlsbChuLG8pOnZ0KGkpLmZpbGwobik6dnQoaSl9KHQsZSxyKX0say5hbGxvY1Vuc2FmZT1mdW5jdGlvbih0KXtyZXR1cm4gSHModCl9LGsuYWxsb2NVbnNhZmVTbG93PWZ1bmN0aW9uKHQpe3JldHVybiBIcyh0KX0say5pc0J1ZmZlcj1mdW5jdGlvbih0KXtyZXR1cm4gdCE9bnVsbCYmdC5faXNCdWZmZXI9PT0hMCYmdCE9PWsucHJvdG90eXBlfSxrLmNvbXBhcmU9ZnVuY3Rpb24odCxlKXtpZihFdCh0LFVpbnQ4QXJyYXkpJiYodD1rLmZyb20odCx0Lm9mZnNldCx0LmJ5dGVMZW5ndGgpKSxFdChlLFVpbnQ4QXJyYXkpJiYoZT1rLmZyb20oZSxlLm9mZnNldCxlLmJ5dGVMZW5ndGgpKSwhay5pc0J1ZmZlcih0KXx8IWsuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiYnVmMVwiLCBcImJ1ZjJcIiBhcmd1bWVudHMgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheScpO2lmKHQ9PT1lKXJldHVybiAwO2Zvcih2YXIgcj10Lmxlbmd0aCxpPWUubGVuZ3RoLG49MCxvPU1hdGgubWluKHIsaSk7bjxvOysrbilpZih0W25dIT09ZVtuXSl7cj10W25dLGk9ZVtuXTticmVha31yZXR1cm4gcjxpPy0xOmk8cj8xOjB9LGsuaXNFbmNvZGluZz1mdW5jdGlvbih0KXtzd2l0Y2goU3RyaW5nKHQpLnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwibGF0aW4xXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuICEwO2RlZmF1bHQ6cmV0dXJuICExfX0say5jb25jYXQ9ZnVuY3Rpb24odCxlKXtpZighQXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKTtpZih0Lmxlbmd0aD09PTApcmV0dXJuIGsuYWxsb2MoMCk7dmFyIHI7aWYoZT09PXZvaWQgMClmb3IoZT0wLHI9MDtyPHQubGVuZ3RoOysrcillKz10W3JdLmxlbmd0aDt2YXIgaT1rLmFsbG9jVW5zYWZlKGUpLG49MDtmb3Iocj0wO3I8dC5sZW5ndGg7KytyKXt2YXIgbz10W3JdO2lmKEV0KG8sVWludDhBcnJheSkmJihvPWsuZnJvbShvKSksIWsuaXNCdWZmZXIobykpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJyk7by5jb3B5KGksbiksbis9by5sZW5ndGg7fXJldHVybiBpfSxrLmJ5dGVMZW5ndGg9UGMsay5wcm90b3R5cGUuX2lzQnVmZmVyPSEwLGsucHJvdG90eXBlLnN3YXAxNj1mdW5jdGlvbigpe3ZhciB0PXRoaXMubGVuZ3RoO2lmKHQlMiE9MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkJ1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzXCIpO2Zvcih2YXIgZT0wO2U8dDtlKz0yKXNyKHRoaXMsZSxlKzEpO3JldHVybiB0aGlzfSxrLnByb3RvdHlwZS5zd2FwMzI9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxlbmd0aDtpZih0JTQhPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0c1wiKTtmb3IodmFyIGU9MDtlPHQ7ZSs9NClzcih0aGlzLGUsZSszKSxzcih0aGlzLGUrMSxlKzIpO3JldHVybiB0aGlzfSxrLnByb3RvdHlwZS5zd2FwNjQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxlbmd0aDtpZih0JTghPTApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0c1wiKTtmb3IodmFyIGU9MDtlPHQ7ZSs9OClzcih0aGlzLGUsZSs3KSxzcih0aGlzLGUrMSxlKzYpLHNyKHRoaXMsZSsyLGUrNSksc3IodGhpcyxlKzMsZSs0KTtyZXR1cm4gdGhpc30say5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxlbmd0aDtyZXR1cm4gdD09PTA/XCJcIjphcmd1bWVudHMubGVuZ3RoPT09MD9rYyh0aGlzLDAsdCk6eXcuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxrLnByb3RvdHlwZS50b0xvY2FsZVN0cmluZz1rLnByb3RvdHlwZS50b1N0cmluZyxrLnByb3RvdHlwZS5lcXVhbHM9ZnVuY3Rpb24odCl7aWYoIWsuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXJcIik7cmV0dXJuIHRoaXM9PT10fHxrLmNvbXBhcmUodGhpcyx0KT09PTB9LGsucHJvdG90eXBlLmluc3BlY3Q9ZnVuY3Rpb24oKXt2YXIgdD1cIlwiLGU9U3QuSU5TUEVDVF9NQVhfQllURVM7cmV0dXJuIHQ9dGhpcy50b1N0cmluZyhcImhleFwiLDAsZSkucmVwbGFjZSgvKC57Mn0pL2csXCIkMSBcIikudHJpbSgpLHRoaXMubGVuZ3RoPmUmJih0Kz1cIiAuLi4gXCIpLFwiPEJ1ZmZlciBcIit0K1wiPlwifSxfYyYmKGsucHJvdG90eXBlW19jXT1rLnByb3RvdHlwZS5pbnNwZWN0KSxrLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKHQsZSxyLGksbil7aWYoRXQodCxVaW50OEFycmF5KSYmKHQ9ay5mcm9tKHQsdC5vZmZzZXQsdC5ieXRlTGVuZ3RoKSksIWsuaXNCdWZmZXIodCkpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwidGFyZ2V0XCIgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBCdWZmZXIgb3IgVWludDhBcnJheS4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiB0KTtpZihlPT09dm9pZCAwJiYoZT0wKSxyPT09dm9pZCAwJiYocj10P3QubGVuZ3RoOjApLGk9PT12b2lkIDAmJihpPTApLG49PT12b2lkIDAmJihuPXRoaXMubGVuZ3RoKSxlPDB8fHI+dC5sZW5ndGh8fGk8MHx8bj50aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIm91dCBvZiByYW5nZSBpbmRleFwiKTtpZihpPj1uJiZlPj1yKXJldHVybiAwO2lmKGk+PW4pcmV0dXJuIC0xO2lmKGU+PXIpcmV0dXJuIDE7aWYodGhpcz09PXQpcmV0dXJuIDA7Zm9yKHZhciBvPShuPj4+PTApLShpPj4+PTApLHM9KHI+Pj49MCktKGU+Pj49MCksYT1NYXRoLm1pbihvLHMpLHU9dGhpcy5zbGljZShpLG4pLGM9dC5zbGljZShlLHIpLGg9MDtoPGE7KytoKWlmKHVbaF0hPT1jW2hdKXtvPXVbaF0scz1jW2hdO2JyZWFrfXJldHVybiBvPHM/LTE6czxvPzE6MH0say5wcm90b3R5cGUuaW5jbHVkZXM9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0aGlzLmluZGV4T2YodCxlLHIpIT09LTF9LGsucHJvdG90eXBlLmluZGV4T2Y9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB2Yyh0aGlzLHQsZSxyLCEwKX0say5wcm90b3R5cGUubGFzdEluZGV4T2Y9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB2Yyh0aGlzLHQsZSxyLCExKX0say5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24odCxlLHIsaSl7aWYoZT09PXZvaWQgMClpPVwidXRmOFwiLHI9dGhpcy5sZW5ndGgsZT0wO2Vsc2UgaWYocj09PXZvaWQgMCYmdHlwZW9mIGU9PVwic3RyaW5nXCIpaT1lLHI9dGhpcy5sZW5ndGgsZT0wO2Vsc2Uge2lmKCFpc0Zpbml0ZShlKSl0aHJvdyBuZXcgRXJyb3IoXCJCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZFwiKTtlPj4+PTAsaXNGaW5pdGUocik/KHI+Pj49MCxpPT09dm9pZCAwJiYoaT1cInV0ZjhcIikpOihpPXIscj12b2lkIDApO312YXIgbj10aGlzLmxlbmd0aC1lO2lmKChyPT09dm9pZCAwfHxyPm4pJiYocj1uKSx0Lmxlbmd0aD4wJiYocjwwfHxlPDApfHxlPnRoaXMubGVuZ3RoKXRocm93IG5ldyBSYW5nZUVycm9yKFwiQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHNcIik7aXx8KGk9XCJ1dGY4XCIpO2Zvcih2YXIgbz0hMTs7KXN3aXRjaChpKXtjYXNlXCJoZXhcIjpyZXR1cm4gYncodGhpcyx0LGUscik7Y2FzZVwidXRmOFwiOmNhc2VcInV0Zi04XCI6cmV0dXJuIHd3KHRoaXMsdCxlLHIpO2Nhc2VcImFzY2lpXCI6cmV0dXJuIE9jKHRoaXMsdCxlLHIpO2Nhc2VcImxhdGluMVwiOmNhc2VcImJpbmFyeVwiOnJldHVybiBfdyh0aGlzLHQsZSxyKTtjYXNlXCJiYXNlNjRcIjpyZXR1cm4gbXcodGhpcyx0LGUscik7Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6cmV0dXJuIHZ3KHRoaXMsdCxlLHIpO2RlZmF1bHQ6aWYobyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBlbmNvZGluZzogXCIraSk7aT0oXCJcIitpKS50b0xvd2VyQ2FzZSgpLG89ITA7fX0say5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJuIHt0eXBlOlwiQnVmZmVyXCIsZGF0YTpBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnJ8fHRoaXMsMCl9fTtrLnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXMubGVuZ3RoOyh0PX5+dCk8MD8odCs9cik8MCYmKHQ9MCk6dD5yJiYodD1yKSwoZT1lPT09dm9pZCAwP3I6fn5lKTwwPyhlKz1yKTwwJiYoZT0wKTplPnImJihlPXIpLGU8dCYmKGU9dCk7dmFyIGk9dGhpcy5zdWJhcnJheSh0LGUpO3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YoaSxrLnByb3RvdHlwZSksaX0say5wcm90b3R5cGUucmVhZFVJbnRMRT1mdW5jdGlvbih0LGUscil7dD4+Pj0wLGU+Pj49MCxyfHxiZSh0LGUsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW3RdLG49MSxvPTA7KytvPGUmJihuKj0yNTYpOylpKz10aGlzW3Qrb10qbjtyZXR1cm4gaX0say5wcm90b3R5cGUucmVhZFVJbnRCRT1mdW5jdGlvbih0LGUscil7dD4+Pj0wLGU+Pj49MCxyfHxiZSh0LGUsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW3QrLS1lXSxuPTE7ZT4wJiYobio9MjU2KTspaSs9dGhpc1t0Ky0tZV0qbjtyZXR1cm4gaX0say5wcm90b3R5cGUucmVhZFVJbnQ4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+Pj49MCxlfHxiZSh0LDEsdGhpcy5sZW5ndGgpLHRoaXNbdF19LGsucHJvdG90eXBlLnJlYWRVSW50MTZMRT1mdW5jdGlvbih0LGUpe3JldHVybiB0Pj4+PTAsZXx8YmUodCwyLHRoaXMubGVuZ3RoKSx0aGlzW3RdfHRoaXNbdCsxXTw8OH0say5wcm90b3R5cGUucmVhZFVJbnQxNkJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+Pj49MCxlfHxiZSh0LDIsdGhpcy5sZW5ndGgpLHRoaXNbdF08PDh8dGhpc1t0KzFdfSxrLnByb3RvdHlwZS5yZWFkVUludDMyTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD4+Pj0wLGV8fGJlKHQsNCx0aGlzLmxlbmd0aCksKHRoaXNbdF18dGhpc1t0KzFdPDw4fHRoaXNbdCsyXTw8MTYpKzE2Nzc3MjE2KnRoaXNbdCszXX0say5wcm90b3R5cGUucmVhZFVJbnQzMkJFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+Pj49MCxlfHxiZSh0LDQsdGhpcy5sZW5ndGgpLDE2Nzc3MjE2KnRoaXNbdF0rKHRoaXNbdCsxXTw8MTZ8dGhpc1t0KzJdPDw4fHRoaXNbdCszXSl9LGsucHJvdG90eXBlLnJlYWRJbnRMRT1mdW5jdGlvbih0LGUscil7dD4+Pj0wLGU+Pj49MCxyfHxiZSh0LGUsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT10aGlzW3RdLG49MSxvPTA7KytvPGUmJihuKj0yNTYpOylpKz10aGlzW3Qrb10qbjtyZXR1cm4gaT49KG4qPTEyOCkmJihpLT1NYXRoLnBvdygyLDgqZSkpLGl9LGsucHJvdG90eXBlLnJlYWRJbnRCRT1mdW5jdGlvbih0LGUscil7dD4+Pj0wLGU+Pj49MCxyfHxiZSh0LGUsdGhpcy5sZW5ndGgpO2Zvcih2YXIgaT1lLG49MSxvPXRoaXNbdCstLWldO2k+MCYmKG4qPTI1Nik7KW8rPXRoaXNbdCstLWldKm47cmV0dXJuIG8+PShuKj0xMjgpJiYoby09TWF0aC5wb3coMiw4KmUpKSxvfSxrLnByb3RvdHlwZS5yZWFkSW50OD1mdW5jdGlvbih0LGUpe3JldHVybiB0Pj4+PTAsZXx8YmUodCwxLHRoaXMubGVuZ3RoKSwxMjgmdGhpc1t0XT8tMSooMjU1LXRoaXNbdF0rMSk6dGhpc1t0XX0say5wcm90b3R5cGUucmVhZEludDE2TEU9ZnVuY3Rpb24odCxlKXt0Pj4+PTAsZXx8YmUodCwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW3RdfHRoaXNbdCsxXTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0say5wcm90b3R5cGUucmVhZEludDE2QkU9ZnVuY3Rpb24odCxlKXt0Pj4+PTAsZXx8YmUodCwyLHRoaXMubGVuZ3RoKTt2YXIgcj10aGlzW3QrMV18dGhpc1t0XTw8ODtyZXR1cm4gMzI3Njgmcj80Mjk0OTAxNzYwfHI6cn0say5wcm90b3R5cGUucmVhZEludDMyTEU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD4+Pj0wLGV8fGJlKHQsNCx0aGlzLmxlbmd0aCksdGhpc1t0XXx0aGlzW3QrMV08PDh8dGhpc1t0KzJdPDwxNnx0aGlzW3QrM108PDI0fSxrLnByb3RvdHlwZS5yZWFkSW50MzJCRT1mdW5jdGlvbih0LGUpe3JldHVybiB0Pj4+PTAsZXx8YmUodCw0LHRoaXMubGVuZ3RoKSx0aGlzW3RdPDwyNHx0aGlzW3QrMV08PDE2fHRoaXNbdCsyXTw8OHx0aGlzW3QrM119LGsucHJvdG90eXBlLnJlYWRGbG9hdExFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+Pj49MCxlfHxiZSh0LDQsdGhpcy5sZW5ndGgpLE5yLnJlYWQodGhpcyx0LCEwLDIzLDQpfSxrLnByb3RvdHlwZS5yZWFkRmxvYXRCRT1mdW5jdGlvbih0LGUpe3JldHVybiB0Pj4+PTAsZXx8YmUodCw0LHRoaXMubGVuZ3RoKSxOci5yZWFkKHRoaXMsdCwhMSwyMyw0KX0say5wcm90b3R5cGUucmVhZERvdWJsZUxFPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+Pj49MCxlfHxiZSh0LDgsdGhpcy5sZW5ndGgpLE5yLnJlYWQodGhpcyx0LCEwLDUyLDgpfSxrLnByb3RvdHlwZS5yZWFkRG91YmxlQkU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD4+Pj0wLGV8fGJlKHQsOCx0aGlzLmxlbmd0aCksTnIucmVhZCh0aGlzLHQsITEsNTIsOCl9LGsucHJvdG90eXBlLndyaXRlVUludExFPWZ1bmN0aW9uKHQsZSxyLGkpe3Q9K3QsZT4+Pj0wLHI+Pj49MCxpfHxQZSh0aGlzLHQsZSxyLE1hdGgucG93KDIsOCpyKS0xLDApO3ZhciBuPTEsbz0wO2Zvcih0aGlzW2VdPTI1NSZ0OysrbzxyJiYobio9MjU2KTspdGhpc1tlK29dPXQvbiYyNTU7cmV0dXJuIGUrcn0say5wcm90b3R5cGUud3JpdGVVSW50QkU9ZnVuY3Rpb24odCxlLHIsaSl7dD0rdCxlPj4+PTAscj4+Pj0wLGl8fFBlKHRoaXMsdCxlLHIsTWF0aC5wb3coMiw4KnIpLTEsMCk7dmFyIG49ci0xLG89MTtmb3IodGhpc1tlK25dPTI1NSZ0Oy0tbj49MCYmKG8qPTI1Nik7KXRoaXNbZStuXT10L28mMjU1O3JldHVybiBlK3J9LGsucHJvdG90eXBlLndyaXRlVUludDg9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSwxLDI1NSwwKSx0aGlzW2VdPTI1NSZ0LGUrMX0say5wcm90b3R5cGUud3JpdGVVSW50MTZMRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZT4+Pj0wLHJ8fFBlKHRoaXMsdCxlLDIsNjU1MzUsMCksdGhpc1tlXT0yNTUmdCx0aGlzW2UrMV09dD4+PjgsZSsyfSxrLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdD0rdCxlPj4+PTAscnx8UGUodGhpcyx0LGUsMiw2NTUzNSwwKSx0aGlzW2VdPXQ+Pj44LHRoaXNbZSsxXT0yNTUmdCxlKzJ9LGsucHJvdG90eXBlLndyaXRlVUludDMyTEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSw0LDQyOTQ5NjcyOTUsMCksdGhpc1tlKzNdPXQ+Pj4yNCx0aGlzW2UrMl09dD4+PjE2LHRoaXNbZSsxXT10Pj4+OCx0aGlzW2VdPTI1NSZ0LGUrNH0say5wcm90b3R5cGUud3JpdGVVSW50MzJCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZT4+Pj0wLHJ8fFBlKHRoaXMsdCxlLDQsNDI5NDk2NzI5NSwwKSx0aGlzW2VdPXQ+Pj4yNCx0aGlzW2UrMV09dD4+PjE2LHRoaXNbZSsyXT10Pj4+OCx0aGlzW2UrM109MjU1JnQsZSs0fSxrLnByb3RvdHlwZS53cml0ZUludExFPWZ1bmN0aW9uKHQsZSxyLGkpe2lmKHQ9K3QsZT4+Pj0wLCFpKXt2YXIgbj1NYXRoLnBvdygyLDgqci0xKTtQZSh0aGlzLHQsZSxyLG4tMSwtbik7fXZhciBvPTAscz0xLGE9MDtmb3IodGhpc1tlXT0yNTUmdDsrK288ciYmKHMqPTI1Nik7KXQ8MCYmYT09PTAmJnRoaXNbZStvLTFdIT09MCYmKGE9MSksdGhpc1tlK29dPSh0L3M+PjApLWEmMjU1O3JldHVybiBlK3J9LGsucHJvdG90eXBlLndyaXRlSW50QkU9ZnVuY3Rpb24odCxlLHIsaSl7aWYodD0rdCxlPj4+PTAsIWkpe3ZhciBuPU1hdGgucG93KDIsOCpyLTEpO1BlKHRoaXMsdCxlLHIsbi0xLC1uKTt9dmFyIG89ci0xLHM9MSxhPTA7Zm9yKHRoaXNbZStvXT0yNTUmdDstLW8+PTAmJihzKj0yNTYpOyl0PDAmJmE9PT0wJiZ0aGlzW2UrbysxXSE9PTAmJihhPTEpLHRoaXNbZStvXT0odC9zPj4wKS1hJjI1NTtyZXR1cm4gZStyfSxrLnByb3RvdHlwZS53cml0ZUludDg9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSwxLDEyNywtMTI4KSx0PDAmJih0PTI1NSt0KzEpLHRoaXNbZV09MjU1JnQsZSsxfSxrLnByb3RvdHlwZS53cml0ZUludDE2TEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSwyLDMyNzY3LC0zMjc2OCksdGhpc1tlXT0yNTUmdCx0aGlzW2UrMV09dD4+PjgsZSsyfSxrLnByb3RvdHlwZS53cml0ZUludDE2QkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSwyLDMyNzY3LC0zMjc2OCksdGhpc1tlXT10Pj4+OCx0aGlzW2UrMV09MjU1JnQsZSsyfSxrLnByb3RvdHlwZS53cml0ZUludDMyTEU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0PSt0LGU+Pj49MCxyfHxQZSh0aGlzLHQsZSw0LDIxNDc0ODM2NDcsLTIxNDc0ODM2NDgpLHRoaXNbZV09MjU1JnQsdGhpc1tlKzFdPXQ+Pj44LHRoaXNbZSsyXT10Pj4+MTYsdGhpc1tlKzNdPXQ+Pj4yNCxlKzR9LGsucHJvdG90eXBlLndyaXRlSW50MzJCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHQ9K3QsZT4+Pj0wLHJ8fFBlKHRoaXMsdCxlLDQsMjE0NzQ4MzY0NywtMjE0NzQ4MzY0OCksdDwwJiYodD00Mjk0OTY3Mjk1K3QrMSksdGhpc1tlXT10Pj4+MjQsdGhpc1tlKzFdPXQ+Pj4xNix0aGlzW2UrMl09dD4+PjgsdGhpc1tlKzNdPTI1NSZ0LGUrNH0say5wcm90b3R5cGUud3JpdGVGbG9hdExFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gU2ModGhpcyx0LGUsITAscil9LGsucHJvdG90eXBlLndyaXRlRmxvYXRCRT1mdW5jdGlvbih0LGUscil7cmV0dXJuIFNjKHRoaXMsdCxlLCExLHIpfSxrLnByb3RvdHlwZS53cml0ZURvdWJsZUxFPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gQWModGhpcyx0LGUsITAscil9LGsucHJvdG90eXBlLndyaXRlRG91YmxlQkU9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBBYyh0aGlzLHQsZSwhMSxyKX0say5wcm90b3R5cGUuY29weT1mdW5jdGlvbih0LGUscixpKXtpZighay5pc0J1ZmZlcih0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXJndW1lbnQgc2hvdWxkIGJlIGEgQnVmZmVyXCIpO2lmKHJ8fChyPTApLGl8fGk9PT0wfHwoaT10aGlzLmxlbmd0aCksZT49dC5sZW5ndGgmJihlPXQubGVuZ3RoKSxlfHwoZT0wKSxpPjAmJmk8ciYmKGk9ciksaT09PXJ8fHQubGVuZ3RoPT09MHx8dGhpcy5sZW5ndGg9PT0wKXJldHVybiAwO2lmKGU8MCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInRhcmdldFN0YXJ0IG91dCBvZiBib3VuZHNcIik7aWYocjwwfHxyPj10aGlzLmxlbmd0aCl0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IG91dCBvZiByYW5nZVwiKTtpZihpPDApdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJzb3VyY2VFbmQgb3V0IG9mIGJvdW5kc1wiKTtpPnRoaXMubGVuZ3RoJiYoaT10aGlzLmxlbmd0aCksdC5sZW5ndGgtZTxpLXImJihpPXQubGVuZ3RoLWUrcik7dmFyIG49aS1yO2lmKHRoaXM9PT10JiZ0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbj09XCJmdW5jdGlvblwiKXRoaXMuY29weVdpdGhpbihlLHIsaSk7ZWxzZSBpZih0aGlzPT09dCYmcjxlJiZlPGkpZm9yKHZhciBvPW4tMTtvPj0wOy0tbyl0W28rZV09dGhpc1tvK3JdO2Vsc2UgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwodCx0aGlzLnN1YmFycmF5KHIsaSksZSk7cmV0dXJuIG59LGsucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24odCxlLHIsaSl7aWYodHlwZW9mIHQ9PVwic3RyaW5nXCIpe2lmKHR5cGVvZiBlPT1cInN0cmluZ1wiPyhpPWUsZT0wLHI9dGhpcy5sZW5ndGgpOnR5cGVvZiByPT1cInN0cmluZ1wiJiYoaT1yLHI9dGhpcy5sZW5ndGgpLGkhPT12b2lkIDAmJnR5cGVvZiBpIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKHR5cGVvZiBpPT1cInN0cmluZ1wiJiYhay5pc0VuY29kaW5nKGkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGVuY29kaW5nOiBcIitpKTtpZih0Lmxlbmd0aD09PTEpe3ZhciBuPXQuY2hhckNvZGVBdCgwKTsoaT09PVwidXRmOFwiJiZuPDEyOHx8aT09PVwibGF0aW4xXCIpJiYodD1uKTt9fWVsc2UgdHlwZW9mIHQ9PVwibnVtYmVyXCI/dCY9MjU1OnR5cGVvZiB0PT1cImJvb2xlYW5cIiYmKHQ9TnVtYmVyKHQpKTtpZihlPDB8fHRoaXMubGVuZ3RoPGV8fHRoaXMubGVuZ3RoPHIpdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJPdXQgb2YgcmFuZ2UgaW5kZXhcIik7aWYocjw9ZSlyZXR1cm4gdGhpczt2YXIgbztpZihlPj4+PTAscj1yPT09dm9pZCAwP3RoaXMubGVuZ3RoOnI+Pj4wLHR8fCh0PTApLHR5cGVvZiB0PT1cIm51bWJlclwiKWZvcihvPWU7bzxyOysrbyl0aGlzW29dPXQ7ZWxzZSB7dmFyIHM9ay5pc0J1ZmZlcih0KT90OmsuZnJvbSh0LGkpLGE9cy5sZW5ndGg7aWYoYT09PTApdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHZhbHVlIFwiJyt0KydcIiBpcyBpbnZhbGlkIGZvciBhcmd1bWVudCBcInZhbHVlXCInKTtmb3Iobz0wO288ci1lOysrbyl0aGlzW28rZV09c1tvJWFdO31yZXR1cm4gdGhpc307Unc9L1teKy8wLTlBLVphLXotX10vZztDdz1mdW5jdGlvbigpe2Zvcih2YXIgdD1uZXcgQXJyYXkoMjU2KSxlPTA7ZTwxNjsrK2UpZm9yKHZhciByPTE2KmUsaT0wO2k8MTY7KytpKXRbcitpXT1cIjAxMjM0NTY3ODlhYmNkZWZcIltlXStcIjAxMjM0NTY3ODlhYmNkZWZcIltpXTtyZXR1cm4gdH0oKTtTdC5CdWZmZXI7U3QuSU5TUEVDVF9NQVhfQllURVM7U3Qua01heExlbmd0aDthbj17fSxsbj1TdCxpdD1sbi5CdWZmZXI7aXQuZnJvbSYmaXQuYWxsb2MmJml0LmFsbG9jVW5zYWZlJiZpdC5hbGxvY1Vuc2FmZVNsb3c/YW49bG46KEljKGxuLGFuKSxhbi5CdWZmZXI9b3IpLG9yLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGl0LnByb3RvdHlwZSksSWMoaXQsb3IpLG9yLmZyb209ZnVuY3Rpb24odCxlLHIpe2lmKHR5cGVvZiB0PT1cIm51bWJlclwiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlclwiKTtyZXR1cm4gaXQodCxlLHIpfSxvci5hbGxvYz1mdW5jdGlvbih0LGUscil7aWYodHlwZW9mIHQhPVwibnVtYmVyXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXJcIik7dmFyIGk9aXQodCk7cmV0dXJuIGUhPT12b2lkIDA/dHlwZW9mIHI9PVwic3RyaW5nXCI/aS5maWxsKGUscik6aS5maWxsKGUpOmkuZmlsbCgwKSxpfSxvci5hbGxvY1Vuc2FmZT1mdW5jdGlvbih0KXtpZih0eXBlb2YgdCE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtyZXR1cm4gaXQodCl9LG9yLmFsbG9jVW5zYWZlU2xvdz1mdW5jdGlvbih0KXtpZih0eXBlb2YgdCE9XCJudW1iZXJcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlclwiKTtyZXR1cm4gbG4uU2xvd0J1ZmZlcih0KX07Qnc9YW4sYXI9e30senM9QncuQnVmZmVyLFRjPXpzLmlzRW5jb2Rpbmd8fGZ1bmN0aW9uKHQpe3N3aXRjaCgodD1cIlwiK3QpJiZ0LnRvTG93ZXJDYXNlKCkpe2Nhc2VcImhleFwiOmNhc2VcInV0ZjhcIjpjYXNlXCJ1dGYtOFwiOmNhc2VcImFzY2lpXCI6Y2FzZVwiYmluYXJ5XCI6Y2FzZVwiYmFzZTY0XCI6Y2FzZVwidWNzMlwiOmNhc2VcInVjcy0yXCI6Y2FzZVwidXRmMTZsZVwiOmNhc2VcInV0Zi0xNmxlXCI6Y2FzZVwicmF3XCI6cmV0dXJuICEwO2RlZmF1bHQ6cmV0dXJuICExfX07YXIuU3RyaW5nRGVjb2Rlcj1oaSxoaS5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24odCl7aWYodC5sZW5ndGg9PT0wKXJldHVybiBcIlwiO3ZhciBlLHI7aWYodGhpcy5sYXN0TmVlZCl7aWYoKGU9dGhpcy5maWxsTGFzdCh0KSk9PT12b2lkIDApcmV0dXJuIFwiXCI7cj10aGlzLmxhc3ROZWVkLHRoaXMubGFzdE5lZWQ9MDt9ZWxzZSByPTA7cmV0dXJuIHI8dC5sZW5ndGg/ZT9lK3RoaXMudGV4dCh0LHIpOnRoaXMudGV4dCh0LHIpOmV8fFwiXCJ9LGhpLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24odCl7dmFyIGU9dCYmdC5sZW5ndGg/dGhpcy53cml0ZSh0KTpcIlwiO3JldHVybiB0aGlzLmxhc3ROZWVkP2UrXCJcXHVGRkZEXCI6ZX0saGkucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24odCxlKXt2YXIgcj1mdW5jdGlvbihuLG8scyl7dmFyIGE9by5sZW5ndGgtMTtpZihhPHMpcmV0dXJuIDA7dmFyIHU9V3Mob1thXSk7cmV0dXJuIHU+PTA/KHU+MCYmKG4ubGFzdE5lZWQ9dS0xKSx1KTotLWE8c3x8dT09PS0yPzA6KHU9V3Mob1thXSkpPj0wPyh1PjAmJihuLmxhc3ROZWVkPXUtMiksdSk6LS1hPHN8fHU9PT0tMj8wOih1PVdzKG9bYV0pKT49MD8odT4wJiYodT09PTI/dT0wOm4ubGFzdE5lZWQ9dS0zKSx1KTowfSh0aGlzLHQsZSk7aWYoIXRoaXMubGFzdE5lZWQpcmV0dXJuIHQudG9TdHJpbmcoXCJ1dGY4XCIsZSk7dGhpcy5sYXN0VG90YWw9cjt2YXIgaT10Lmxlbmd0aC0oci10aGlzLmxhc3ROZWVkKTtyZXR1cm4gdC5jb3B5KHRoaXMubGFzdENoYXIsMCxpKSx0LnRvU3RyaW5nKFwidXRmOFwiLGUsaSl9LGhpLnByb3RvdHlwZS5maWxsTGFzdD1mdW5jdGlvbih0KXtpZih0aGlzLmxhc3ROZWVkPD10Lmxlbmd0aClyZXR1cm4gdC5jb3B5KHRoaXMubGFzdENoYXIsdGhpcy5sYXN0VG90YWwtdGhpcy5sYXN0TmVlZCwwLHRoaXMubGFzdE5lZWQpLHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywwLHRoaXMubGFzdFRvdGFsKTt0LmNvcHkodGhpcy5sYXN0Q2hhcix0aGlzLmxhc3RUb3RhbC10aGlzLmxhc3ROZWVkLDAsdC5sZW5ndGgpLHRoaXMubGFzdE5lZWQtPXQubGVuZ3RoO307YXIuU3RyaW5nRGVjb2Rlcjthci5TdHJpbmdEZWNvZGVyO30pO3ZhciBMYz17fTtRdChMYyx7U3RyaW5nRGVjb2RlcjooKT0+TncsZGVmYXVsdDooKT0+YXJ9KTt2YXIgTncsVWM9d2UoKCk9Pnt2KCk7bSgpO18oKTtRcygpO1FzKCk7Tnc9YXIuU3RyaW5nRGVjb2Rlcjt9KTt2YXIgWXM9TSgoRjIsamMpPT57digpO20oKTtfKCk7dmFyIE5jPVV0KCkse1Byb21pc2VQcm90b3R5cGVUaGVuOnF3LFN5bWJvbEFzeW5jSXRlcmF0b3I6cWMsU3ltYm9sSXRlcmF0b3I6RGN9PWNlKCkse0J1ZmZlcjpEd309KHllKCksWChfZSkpLHtFUlJfSU5WQUxJRF9BUkdfVFlQRTpqdyxFUlJfU1RSRUFNX05VTExfVkFMVUVTOkZ3fT1TZSgpLmNvZGVzO2Z1bmN0aW9uIFd3KHQsZSxyKXtsZXQgaTtpZih0eXBlb2YgZT09XCJzdHJpbmdcInx8ZSBpbnN0YW5jZW9mIER3KXJldHVybiBuZXcgdCh7b2JqZWN0TW9kZTohMCwuLi5yLHJlYWQoKXt0aGlzLnB1c2goZSksdGhpcy5wdXNoKG51bGwpO319KTtsZXQgbjtpZihlJiZlW3FjXSluPSEwLGk9ZVtxY10oKTtlbHNlIGlmKGUmJmVbRGNdKW49ITEsaT1lW0RjXSgpO2Vsc2UgdGhyb3cgbmV3IGp3KFwiaXRlcmFibGVcIixbXCJJdGVyYWJsZVwiXSxlKTtsZXQgbz1uZXcgdCh7b2JqZWN0TW9kZTohMCxoaWdoV2F0ZXJNYXJrOjEsLi4ucn0pLHM9ITE7by5fcmVhZD1mdW5jdGlvbigpe3N8fChzPSEwLHUoKSk7fSxvLl9kZXN0cm95PWZ1bmN0aW9uKGMsaCl7cXcoYShjKSwoKT0+TmMubmV4dFRpY2soaCxjKSxkPT5OYy5uZXh0VGljayhoLGR8fGMpKTt9O2FzeW5jIGZ1bmN0aW9uIGEoYyl7bGV0IGg9YyE9bnVsbCxkPXR5cGVvZiBpLnRocm93PT1cImZ1bmN0aW9uXCI7aWYoaCYmZCl7bGV0e3ZhbHVlOmcsZG9uZTp5fT1hd2FpdCBpLnRocm93KGMpO2lmKGF3YWl0IGcseSlyZXR1cm59aWYodHlwZW9mIGkucmV0dXJuPT1cImZ1bmN0aW9uXCIpe2xldHt2YWx1ZTpnfT1hd2FpdCBpLnJldHVybigpO2F3YWl0IGc7fX1hc3luYyBmdW5jdGlvbiB1KCl7Zm9yKDs7KXt0cnl7bGV0e3ZhbHVlOmMsZG9uZTpofT1uP2F3YWl0IGkubmV4dCgpOmkubmV4dCgpO2lmKGgpby5wdXNoKG51bGwpO2Vsc2Uge2xldCBkPWMmJnR5cGVvZiBjLnRoZW49PVwiZnVuY3Rpb25cIj9hd2FpdCBjOmM7aWYoZD09PW51bGwpdGhyb3cgcz0hMSxuZXcgRnc7aWYoby5wdXNoKGQpKWNvbnRpbnVlO3M9ITE7fX1jYXRjaChjKXtvLmRlc3Ryb3koYyk7fWJyZWFrfX1yZXR1cm4gb31qYy5leHBvcnRzPVd3O30pO3ZhciBkaT1NKChKMixaYyk9Pnt2KCk7bSgpO18oKTt2YXIgSGU9VXQoKSx7QXJyYXlQcm90b3R5cGVJbmRleE9mOiR3LE51bWJlcklzSW50ZWdlcjpIdyxOdW1iZXJJc05hTjpWdyxOdW1iZXJQYXJzZUludDp6dyxPYmplY3REZWZpbmVQcm9wZXJ0aWVzOiRjLE9iamVjdEtleXM6S3csT2JqZWN0U2V0UHJvdG90eXBlT2Y6SGMsUHJvbWlzZTpHdyxTYWZlU2V0OlF3LFN5bWJvbEFzeW5jSXRlcmF0b3I6WXcsU3ltYm9sOkp3fT1jZSgpO1pjLmV4cG9ydHM9RjtGLlJlYWRhYmxlU3RhdGU9cm87dmFye0V2ZW50RW1pdHRlcjpYd309KGlyKCksWChycikpLHtTdHJlYW06cXQscHJlcGVuZExpc3RlbmVyOlp3fT10bigpLHtCdWZmZXI6SnN9PSh5ZSgpLFgoX2UpKSx7YWRkQWJvcnRTaWduYWw6ZV99PWNpKCksdF89bXQoKSxIPUplKCkuZGVidWdsb2coXCJzdHJlYW1cIix0PT57SD10O30pLHJfPWRjKCksRHI9dHIoKSx7Z2V0SGlnaFdhdGVyTWFyazppXyxnZXREZWZhdWx0SGlnaFdhdGVyTWFyazpuX309c24oKSx7YWdncmVnYXRlVHdvRXJyb3JzOkZjLGNvZGVzOntFUlJfSU5WQUxJRF9BUkdfVFlQRTpzXyxFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRDpvXyxFUlJfT1VUX09GX1JBTkdFOmFfLEVSUl9TVFJFQU1fUFVTSF9BRlRFUl9FT0Y6bF8sRVJSX1NUUkVBTV9VTlNISUZUX0FGVEVSX0VORF9FVkVOVDp1X319PVNlKCkse3ZhbGlkYXRlT2JqZWN0OmZffT1maSgpLGxyPUp3KFwia1BhdXNlZFwiKSx7U3RyaW5nRGVjb2RlcjpWY309KFVjKCksWChMYykpLGNfPVlzKCk7SGMoRi5wcm90b3R5cGUscXQucHJvdG90eXBlKTtIYyhGLHF0KTt2YXIgWHM9KCk9Pnt9LHtlcnJvck9yRGVzdHJveTpxcn09RHI7ZnVuY3Rpb24gcm8odCxlLHIpe3R5cGVvZiByIT1cImJvb2xlYW5cIiYmKHI9ZSBpbnN0YW5jZW9mIG50KCkpLHRoaXMub2JqZWN0TW9kZT0hISh0JiZ0Lm9iamVjdE1vZGUpLHImJih0aGlzLm9iamVjdE1vZGU9dGhpcy5vYmplY3RNb2RlfHwhISh0JiZ0LnJlYWRhYmxlT2JqZWN0TW9kZSkpLHRoaXMuaGlnaFdhdGVyTWFyaz10P2lfKHRoaXMsdCxcInJlYWRhYmxlSGlnaFdhdGVyTWFya1wiLHIpOm5fKCExKSx0aGlzLmJ1ZmZlcj1uZXcgcl8sdGhpcy5sZW5ndGg9MCx0aGlzLnBpcGVzPVtdLHRoaXMuZmxvd2luZz1udWxsLHRoaXMuZW5kZWQ9ITEsdGhpcy5lbmRFbWl0dGVkPSExLHRoaXMucmVhZGluZz0hMSx0aGlzLmNvbnN0cnVjdGVkPSEwLHRoaXMuc3luYz0hMCx0aGlzLm5lZWRSZWFkYWJsZT0hMSx0aGlzLmVtaXR0ZWRSZWFkYWJsZT0hMSx0aGlzLnJlYWRhYmxlTGlzdGVuaW5nPSExLHRoaXMucmVzdW1lU2NoZWR1bGVkPSExLHRoaXNbbHJdPW51bGwsdGhpcy5lcnJvckVtaXR0ZWQ9ITEsdGhpcy5lbWl0Q2xvc2U9IXR8fHQuZW1pdENsb3NlIT09ITEsdGhpcy5hdXRvRGVzdHJveT0hdHx8dC5hdXRvRGVzdHJveSE9PSExLHRoaXMuZGVzdHJveWVkPSExLHRoaXMuZXJyb3JlZD1udWxsLHRoaXMuY2xvc2VkPSExLHRoaXMuY2xvc2VFbWl0dGVkPSExLHRoaXMuZGVmYXVsdEVuY29kaW5nPXQmJnQuZGVmYXVsdEVuY29kaW5nfHxcInV0ZjhcIix0aGlzLmF3YWl0RHJhaW5Xcml0ZXJzPW51bGwsdGhpcy5tdWx0aUF3YWl0RHJhaW49ITEsdGhpcy5yZWFkaW5nTW9yZT0hMSx0aGlzLmRhdGFFbWl0dGVkPSExLHRoaXMuZGVjb2Rlcj1udWxsLHRoaXMuZW5jb2Rpbmc9bnVsbCx0JiZ0LmVuY29kaW5nJiYodGhpcy5kZWNvZGVyPW5ldyBWYyh0LmVuY29kaW5nKSx0aGlzLmVuY29kaW5nPXQuZW5jb2RpbmcpO31mdW5jdGlvbiBGKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEYpKXJldHVybiBuZXcgRih0KTtsZXQgZT10aGlzIGluc3RhbmNlb2YgbnQoKTt0aGlzLl9yZWFkYWJsZVN0YXRlPW5ldyBybyh0LHRoaXMsZSksdCYmKHR5cGVvZiB0LnJlYWQ9PVwiZnVuY3Rpb25cIiYmKHRoaXMuX3JlYWQ9dC5yZWFkKSx0eXBlb2YgdC5kZXN0cm95PT1cImZ1bmN0aW9uXCImJih0aGlzLl9kZXN0cm95PXQuZGVzdHJveSksdHlwZW9mIHQuY29uc3RydWN0PT1cImZ1bmN0aW9uXCImJih0aGlzLl9jb25zdHJ1Y3Q9dC5jb25zdHJ1Y3QpLHQuc2lnbmFsJiYhZSYmZV8odC5zaWduYWwsdGhpcykpLHF0LmNhbGwodGhpcyx0KSxEci5jb25zdHJ1Y3QodGhpcywoKT0+e3RoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlJiZmbih0aGlzLHRoaXMuX3JlYWRhYmxlU3RhdGUpO30pO31GLnByb3RvdHlwZS5kZXN0cm95PURyLmRlc3Ryb3k7Ri5wcm90b3R5cGUuX3VuZGVzdHJveT1Eci51bmRlc3Ryb3k7Ri5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24odCxlKXtlKHQpO307Ri5wcm90b3R5cGVbWHcuY2FwdHVyZVJlamVjdGlvblN5bWJvbF09ZnVuY3Rpb24odCl7dGhpcy5kZXN0cm95KHQpO307Ri5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0LGUpe3JldHVybiB6Yyh0aGlzLHQsZSwhMSl9O0YucHJvdG90eXBlLnVuc2hpZnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gemModGhpcyx0LGUsITApfTtmdW5jdGlvbiB6Yyh0LGUscixpKXtIKFwicmVhZGFibGVBZGRDaHVua1wiLGUpO2xldCBuPXQuX3JlYWRhYmxlU3RhdGUsbztpZihuLm9iamVjdE1vZGV8fCh0eXBlb2YgZT09XCJzdHJpbmdcIj8ocj1yfHxuLmRlZmF1bHRFbmNvZGluZyxuLmVuY29kaW5nIT09ciYmKGkmJm4uZW5jb2Rpbmc/ZT1Kcy5mcm9tKGUscikudG9TdHJpbmcobi5lbmNvZGluZyk6KGU9SnMuZnJvbShlLHIpLHI9XCJcIikpKTplIGluc3RhbmNlb2YgSnM/cj1cIlwiOnF0Ll9pc1VpbnQ4QXJyYXkoZSk/KGU9cXQuX3VpbnQ4QXJyYXlUb0J1ZmZlcihlKSxyPVwiXCIpOmUhPW51bGwmJihvPW5ldyBzXyhcImNodW5rXCIsW1wic3RyaW5nXCIsXCJCdWZmZXJcIixcIlVpbnQ4QXJyYXlcIl0sZSkpKSxvKXFyKHQsbyk7ZWxzZSBpZihlPT09bnVsbCluLnJlYWRpbmc9ITEscF8odCxuKTtlbHNlIGlmKG4ub2JqZWN0TW9kZXx8ZSYmZS5sZW5ndGg+MClpZihpKWlmKG4uZW5kRW1pdHRlZClxcih0LG5ldyB1Xyk7ZWxzZSB7aWYobi5kZXN0cm95ZWR8fG4uZXJyb3JlZClyZXR1cm4gITE7WnModCxuLGUsITApO31lbHNlIGlmKG4uZW5kZWQpcXIodCxuZXcgbF8pO2Vsc2Uge2lmKG4uZGVzdHJveWVkfHxuLmVycm9yZWQpcmV0dXJuICExO24ucmVhZGluZz0hMSxuLmRlY29kZXImJiFyPyhlPW4uZGVjb2Rlci53cml0ZShlKSxuLm9iamVjdE1vZGV8fGUubGVuZ3RoIT09MD9acyh0LG4sZSwhMSk6Zm4odCxuKSk6WnModCxuLGUsITEpO31lbHNlIGl8fChuLnJlYWRpbmc9ITEsZm4odCxuKSk7cmV0dXJuICFuLmVuZGVkJiYobi5sZW5ndGg8bi5oaWdoV2F0ZXJNYXJrfHxuLmxlbmd0aD09PTApfWZ1bmN0aW9uIFpzKHQsZSxyLGkpe2UuZmxvd2luZyYmZS5sZW5ndGg9PT0wJiYhZS5zeW5jJiZ0Lmxpc3RlbmVyQ291bnQoXCJkYXRhXCIpPjA/KGUubXVsdGlBd2FpdERyYWluP2UuYXdhaXREcmFpbldyaXRlcnMuY2xlYXIoKTplLmF3YWl0RHJhaW5Xcml0ZXJzPW51bGwsZS5kYXRhRW1pdHRlZD0hMCx0LmVtaXQoXCJkYXRhXCIscikpOihlLmxlbmd0aCs9ZS5vYmplY3RNb2RlPzE6ci5sZW5ndGgsaT9lLmJ1ZmZlci51bnNoaWZ0KHIpOmUuYnVmZmVyLnB1c2gociksZS5uZWVkUmVhZGFibGUmJmNuKHQpKSxmbih0LGUpO31GLnByb3RvdHlwZS5pc1BhdXNlZD1mdW5jdGlvbigpe2xldCB0PXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuIHRbbHJdPT09ITB8fHQuZmxvd2luZz09PSExfTtGLnByb3RvdHlwZS5zZXRFbmNvZGluZz1mdW5jdGlvbih0KXtsZXQgZT1uZXcgVmModCk7dGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyPWUsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZz10aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIuZW5jb2Rpbmc7bGV0IHI9dGhpcy5fcmVhZGFibGVTdGF0ZS5idWZmZXIsaT1cIlwiO2ZvcihsZXQgbiBvZiByKWkrPWUud3JpdGUobik7cmV0dXJuIHIuY2xlYXIoKSxpIT09XCJcIiYmci5wdXNoKGkpLHRoaXMuX3JlYWRhYmxlU3RhdGUubGVuZ3RoPWkubGVuZ3RoLHRoaXN9O3ZhciBoXz0xMDczNzQxODI0O2Z1bmN0aW9uIGRfKHQpe2lmKHQ+aF8pdGhyb3cgbmV3IGFfKFwic2l6ZVwiLFwiPD0gMUdpQlwiLHQpO3JldHVybiB0LS0sdHw9dD4+PjEsdHw9dD4+PjIsdHw9dD4+PjQsdHw9dD4+PjgsdHw9dD4+PjE2LHQrKyx0fWZ1bmN0aW9uIFdjKHQsZSl7cmV0dXJuIHQ8PTB8fGUubGVuZ3RoPT09MCYmZS5lbmRlZD8wOmUub2JqZWN0TW9kZT8xOlZ3KHQpP2UuZmxvd2luZyYmZS5sZW5ndGg/ZS5idWZmZXIuZmlyc3QoKS5sZW5ndGg6ZS5sZW5ndGg6dDw9ZS5sZW5ndGg/dDplLmVuZGVkP2UubGVuZ3RoOjB9Ri5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtIKFwicmVhZFwiLHQpLHQ9PT12b2lkIDA/dD1OYU46SHcodCl8fCh0PXp3KHQsMTApKTtsZXQgZT10aGlzLl9yZWFkYWJsZVN0YXRlLHI9dDtpZih0PmUuaGlnaFdhdGVyTWFyayYmKGUuaGlnaFdhdGVyTWFyaz1kXyh0KSksdCE9PTAmJihlLmVtaXR0ZWRSZWFkYWJsZT0hMSksdD09PTAmJmUubmVlZFJlYWRhYmxlJiYoKGUuaGlnaFdhdGVyTWFyayE9PTA/ZS5sZW5ndGg+PWUuaGlnaFdhdGVyTWFyazplLmxlbmd0aD4wKXx8ZS5lbmRlZCkpcmV0dXJuIEgoXCJyZWFkOiBlbWl0UmVhZGFibGVcIixlLmxlbmd0aCxlLmVuZGVkKSxlLmxlbmd0aD09PTAmJmUuZW5kZWQ/ZW8odGhpcyk6Y24odGhpcyksbnVsbDtpZih0PVdjKHQsZSksdD09PTAmJmUuZW5kZWQpcmV0dXJuIGUubGVuZ3RoPT09MCYmZW8odGhpcyksbnVsbDtsZXQgaT1lLm5lZWRSZWFkYWJsZTtpZihIKFwibmVlZCByZWFkYWJsZVwiLGkpLChlLmxlbmd0aD09PTB8fGUubGVuZ3RoLXQ8ZS5oaWdoV2F0ZXJNYXJrKSYmKGk9ITAsSChcImxlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrXCIsaSkpLGUuZW5kZWR8fGUucmVhZGluZ3x8ZS5kZXN0cm95ZWR8fGUuZXJyb3JlZHx8IWUuY29uc3RydWN0ZWQpaT0hMSxIKFwicmVhZGluZywgZW5kZWQgb3IgY29uc3RydWN0aW5nXCIsaSk7ZWxzZSBpZihpKXtIKFwiZG8gcmVhZFwiKSxlLnJlYWRpbmc9ITAsZS5zeW5jPSEwLGUubGVuZ3RoPT09MCYmKGUubmVlZFJlYWRhYmxlPSEwKTt0cnl7dGhpcy5fcmVhZChlLmhpZ2hXYXRlck1hcmspO31jYXRjaChvKXtxcih0aGlzLG8pO31lLnN5bmM9ITEsZS5yZWFkaW5nfHwodD1XYyhyLGUpKTt9bGV0IG47cmV0dXJuIHQ+MD9uPUpjKHQsZSk6bj1udWxsLG49PT1udWxsPyhlLm5lZWRSZWFkYWJsZT1lLmxlbmd0aDw9ZS5oaWdoV2F0ZXJNYXJrLHQ9MCk6KGUubGVuZ3RoLT10LGUubXVsdGlBd2FpdERyYWluP2UuYXdhaXREcmFpbldyaXRlcnMuY2xlYXIoKTplLmF3YWl0RHJhaW5Xcml0ZXJzPW51bGwpLGUubGVuZ3RoPT09MCYmKGUuZW5kZWR8fChlLm5lZWRSZWFkYWJsZT0hMCksciE9PXQmJmUuZW5kZWQmJmVvKHRoaXMpKSxuIT09bnVsbCYmIWUuZXJyb3JFbWl0dGVkJiYhZS5jbG9zZUVtaXR0ZWQmJihlLmRhdGFFbWl0dGVkPSEwLHRoaXMuZW1pdChcImRhdGFcIixuKSksbn07ZnVuY3Rpb24gcF8odCxlKXtpZihIKFwib25Fb2ZDaHVua1wiKSwhZS5lbmRlZCl7aWYoZS5kZWNvZGVyKXtsZXQgcj1lLmRlY29kZXIuZW5kKCk7ciYmci5sZW5ndGgmJihlLmJ1ZmZlci5wdXNoKHIpLGUubGVuZ3RoKz1lLm9iamVjdE1vZGU/MTpyLmxlbmd0aCk7fWUuZW5kZWQ9ITAsZS5zeW5jP2NuKHQpOihlLm5lZWRSZWFkYWJsZT0hMSxlLmVtaXR0ZWRSZWFkYWJsZT0hMCxLYyh0KSk7fX1mdW5jdGlvbiBjbih0KXtsZXQgZT10Ll9yZWFkYWJsZVN0YXRlO0goXCJlbWl0UmVhZGFibGVcIixlLm5lZWRSZWFkYWJsZSxlLmVtaXR0ZWRSZWFkYWJsZSksZS5uZWVkUmVhZGFibGU9ITEsZS5lbWl0dGVkUmVhZGFibGV8fChIKFwiZW1pdFJlYWRhYmxlXCIsZS5mbG93aW5nKSxlLmVtaXR0ZWRSZWFkYWJsZT0hMCxIZS5uZXh0VGljayhLYyx0KSk7fWZ1bmN0aW9uIEtjKHQpe2xldCBlPXQuX3JlYWRhYmxlU3RhdGU7SChcImVtaXRSZWFkYWJsZV9cIixlLmRlc3Ryb3llZCxlLmxlbmd0aCxlLmVuZGVkKSwhZS5kZXN0cm95ZWQmJiFlLmVycm9yZWQmJihlLmxlbmd0aHx8ZS5lbmRlZCkmJih0LmVtaXQoXCJyZWFkYWJsZVwiKSxlLmVtaXR0ZWRSZWFkYWJsZT0hMSksZS5uZWVkUmVhZGFibGU9IWUuZmxvd2luZyYmIWUuZW5kZWQmJmUubGVuZ3RoPD1lLmhpZ2hXYXRlck1hcmssUWModCk7fWZ1bmN0aW9uIGZuKHQsZSl7IWUucmVhZGluZ01vcmUmJmUuY29uc3RydWN0ZWQmJihlLnJlYWRpbmdNb3JlPSEwLEhlLm5leHRUaWNrKGdfLHQsZSkpO31mdW5jdGlvbiBnXyh0LGUpe2Zvcig7IWUucmVhZGluZyYmIWUuZW5kZWQmJihlLmxlbmd0aDxlLmhpZ2hXYXRlck1hcmt8fGUuZmxvd2luZyYmZS5sZW5ndGg9PT0wKTspe2xldCByPWUubGVuZ3RoO2lmKEgoXCJtYXliZVJlYWRNb3JlIHJlYWQgMFwiKSx0LnJlYWQoMCkscj09PWUubGVuZ3RoKWJyZWFrfWUucmVhZGluZ01vcmU9ITE7fUYucHJvdG90eXBlLl9yZWFkPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBvXyhcIl9yZWFkKClcIil9O0YucHJvdG90eXBlLnBpcGU9ZnVuY3Rpb24odCxlKXtsZXQgcj10aGlzLGk9dGhpcy5fcmVhZGFibGVTdGF0ZTtpLnBpcGVzLmxlbmd0aD09PTEmJihpLm11bHRpQXdhaXREcmFpbnx8KGkubXVsdGlBd2FpdERyYWluPSEwLGkuYXdhaXREcmFpbldyaXRlcnM9bmV3IFF3KGkuYXdhaXREcmFpbldyaXRlcnM/W2kuYXdhaXREcmFpbldyaXRlcnNdOltdKSkpLGkucGlwZXMucHVzaCh0KSxIKFwicGlwZSBjb3VudD0lZCBvcHRzPSVqXCIsaS5waXBlcy5sZW5ndGgsZSk7bGV0IG89KCFlfHxlLmVuZCE9PSExKSYmdCE9PUhlLnN0ZG91dCYmdCE9PUhlLnN0ZGVycj9hOlM7aS5lbmRFbWl0dGVkP0hlLm5leHRUaWNrKG8pOnIub25jZShcImVuZFwiLG8pLHQub24oXCJ1bnBpcGVcIixzKTtmdW5jdGlvbiBzKEksQyl7SChcIm9udW5waXBlXCIpLEk9PT1yJiZDJiZDLmhhc1VucGlwZWQ9PT0hMSYmKEMuaGFzVW5waXBlZD0hMCxoKCkpO31mdW5jdGlvbiBhKCl7SChcIm9uZW5kXCIpLHQuZW5kKCk7fWxldCB1LGM9ITE7ZnVuY3Rpb24gaCgpe0goXCJjbGVhbnVwXCIpLHQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLHcpLHQucmVtb3ZlTGlzdGVuZXIoXCJmaW5pc2hcIixFKSx1JiZ0LnJlbW92ZUxpc3RlbmVyKFwiZHJhaW5cIix1KSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix5KSx0LnJlbW92ZUxpc3RlbmVyKFwidW5waXBlXCIscyksci5yZW1vdmVMaXN0ZW5lcihcImVuZFwiLGEpLHIucmVtb3ZlTGlzdGVuZXIoXCJlbmRcIixTKSxyLnJlbW92ZUxpc3RlbmVyKFwiZGF0YVwiLGcpLGM9ITAsdSYmaS5hd2FpdERyYWluV3JpdGVycyYmKCF0Ll93cml0YWJsZVN0YXRlfHx0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikmJnUoKTt9ZnVuY3Rpb24gZCgpe2N8fChpLnBpcGVzLmxlbmd0aD09PTEmJmkucGlwZXNbMF09PT10PyhIKFwiZmFsc2Ugd3JpdGUgcmVzcG9uc2UsIHBhdXNlXCIsMCksaS5hd2FpdERyYWluV3JpdGVycz10LGkubXVsdGlBd2FpdERyYWluPSExKTppLnBpcGVzLmxlbmd0aD4xJiZpLnBpcGVzLmluY2x1ZGVzKHQpJiYoSChcImZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZVwiLGkuYXdhaXREcmFpbldyaXRlcnMuc2l6ZSksaS5hd2FpdERyYWluV3JpdGVycy5hZGQodCkpLHIucGF1c2UoKSksdXx8KHU9eV8ocix0KSx0Lm9uKFwiZHJhaW5cIix1KSk7fXIub24oXCJkYXRhXCIsZyk7ZnVuY3Rpb24gZyhJKXtIKFwib25kYXRhXCIpO2xldCBDPXQud3JpdGUoSSk7SChcImRlc3Qud3JpdGVcIixDKSxDPT09ITEmJmQoKTt9ZnVuY3Rpb24geShJKXtpZihIKFwib25lcnJvclwiLEkpLFMoKSx0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIix5KSx0Lmxpc3RlbmVyQ291bnQoXCJlcnJvclwiKT09PTApe2xldCBDPXQuX3dyaXRhYmxlU3RhdGV8fHQuX3JlYWRhYmxlU3RhdGU7QyYmIUMuZXJyb3JFbWl0dGVkP3FyKHQsSSk6dC5lbWl0KFwiZXJyb3JcIixJKTt9fVp3KHQsXCJlcnJvclwiLHkpO2Z1bmN0aW9uIHcoKXt0LnJlbW92ZUxpc3RlbmVyKFwiZmluaXNoXCIsRSksUygpO310Lm9uY2UoXCJjbG9zZVwiLHcpO2Z1bmN0aW9uIEUoKXtIKFwib25maW5pc2hcIiksdC5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsdyksUygpO310Lm9uY2UoXCJmaW5pc2hcIixFKTtmdW5jdGlvbiBTKCl7SChcInVucGlwZVwiKSxyLnVucGlwZSh0KTt9cmV0dXJuIHQuZW1pdChcInBpcGVcIixyKSx0LndyaXRhYmxlTmVlZERyYWluPT09ITA/aS5mbG93aW5nJiZkKCk6aS5mbG93aW5nfHwoSChcInBpcGUgcmVzdW1lXCIpLHIucmVzdW1lKCkpLHR9O2Z1bmN0aW9uIHlfKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7bGV0IGk9dC5fcmVhZGFibGVTdGF0ZTtpLmF3YWl0RHJhaW5Xcml0ZXJzPT09ZT8oSChcInBpcGVPbkRyYWluXCIsMSksaS5hd2FpdERyYWluV3JpdGVycz1udWxsKTppLm11bHRpQXdhaXREcmFpbiYmKEgoXCJwaXBlT25EcmFpblwiLGkuYXdhaXREcmFpbldyaXRlcnMuc2l6ZSksaS5hd2FpdERyYWluV3JpdGVycy5kZWxldGUoZSkpLCghaS5hd2FpdERyYWluV3JpdGVyc3x8aS5hd2FpdERyYWluV3JpdGVycy5zaXplPT09MCkmJnQubGlzdGVuZXJDb3VudChcImRhdGFcIikmJnQucmVzdW1lKCk7fX1GLnByb3RvdHlwZS51bnBpcGU9ZnVuY3Rpb24odCl7bGV0IGU9dGhpcy5fcmVhZGFibGVTdGF0ZSxyPXtoYXNVbnBpcGVkOiExfTtpZihlLnBpcGVzLmxlbmd0aD09PTApcmV0dXJuIHRoaXM7aWYoIXQpe2xldCBuPWUucGlwZXM7ZS5waXBlcz1bXSx0aGlzLnBhdXNlKCk7Zm9yKGxldCBvPTA7bzxuLmxlbmd0aDtvKyspbltvXS5lbWl0KFwidW5waXBlXCIsdGhpcyx7aGFzVW5waXBlZDohMX0pO3JldHVybiB0aGlzfWxldCBpPSR3KGUucGlwZXMsdCk7cmV0dXJuIGk9PT0tMT90aGlzOihlLnBpcGVzLnNwbGljZShpLDEpLGUucGlwZXMubGVuZ3RoPT09MCYmdGhpcy5wYXVzZSgpLHQuZW1pdChcInVucGlwZVwiLHRoaXMsciksdGhpcyl9O0YucHJvdG90eXBlLm9uPWZ1bmN0aW9uKHQsZSl7bGV0IHI9cXQucHJvdG90eXBlLm9uLmNhbGwodGhpcyx0LGUpLGk9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gdD09PVwiZGF0YVwiPyhpLnJlYWRhYmxlTGlzdGVuaW5nPXRoaXMubGlzdGVuZXJDb3VudChcInJlYWRhYmxlXCIpPjAsaS5mbG93aW5nIT09ITEmJnRoaXMucmVzdW1lKCkpOnQ9PT1cInJlYWRhYmxlXCImJiFpLmVuZEVtaXR0ZWQmJiFpLnJlYWRhYmxlTGlzdGVuaW5nJiYoaS5yZWFkYWJsZUxpc3RlbmluZz1pLm5lZWRSZWFkYWJsZT0hMCxpLmZsb3dpbmc9ITEsaS5lbWl0dGVkUmVhZGFibGU9ITEsSChcIm9uIHJlYWRhYmxlXCIsaS5sZW5ndGgsaS5yZWFkaW5nKSxpLmxlbmd0aD9jbih0aGlzKTppLnJlYWRpbmd8fEhlLm5leHRUaWNrKGJfLHRoaXMpKSxyfTtGLnByb3RvdHlwZS5hZGRMaXN0ZW5lcj1GLnByb3RvdHlwZS5vbjtGLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbih0LGUpe2xldCByPXF0LnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lci5jYWxsKHRoaXMsdCxlKTtyZXR1cm4gdD09PVwicmVhZGFibGVcIiYmSGUubmV4dFRpY2soR2MsdGhpcykscn07Ri5wcm90b3R5cGUub2ZmPUYucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyO0YucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbih0KXtsZXQgZT1xdC5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gKHQ9PT1cInJlYWRhYmxlXCJ8fHQ9PT12b2lkIDApJiZIZS5uZXh0VGljayhHYyx0aGlzKSxlfTtmdW5jdGlvbiBHYyh0KXtsZXQgZT10Ll9yZWFkYWJsZVN0YXRlO2UucmVhZGFibGVMaXN0ZW5pbmc9dC5saXN0ZW5lckNvdW50KFwicmVhZGFibGVcIik+MCxlLnJlc3VtZVNjaGVkdWxlZCYmZVtscl09PT0hMT9lLmZsb3dpbmc9ITA6dC5saXN0ZW5lckNvdW50KFwiZGF0YVwiKT4wP3QucmVzdW1lKCk6ZS5yZWFkYWJsZUxpc3RlbmluZ3x8KGUuZmxvd2luZz1udWxsKTt9ZnVuY3Rpb24gYl8odCl7SChcInJlYWRhYmxlIG5leHR0aWNrIHJlYWQgMFwiKSx0LnJlYWQoMCk7fUYucHJvdG90eXBlLnJlc3VtZT1mdW5jdGlvbigpe2xldCB0PXRoaXMuX3JlYWRhYmxlU3RhdGU7cmV0dXJuIHQuZmxvd2luZ3x8KEgoXCJyZXN1bWVcIiksdC5mbG93aW5nPSF0LnJlYWRhYmxlTGlzdGVuaW5nLHdfKHRoaXMsdCkpLHRbbHJdPSExLHRoaXN9O2Z1bmN0aW9uIHdfKHQsZSl7ZS5yZXN1bWVTY2hlZHVsZWR8fChlLnJlc3VtZVNjaGVkdWxlZD0hMCxIZS5uZXh0VGljayhfXyx0LGUpKTt9ZnVuY3Rpb24gX18odCxlKXtIKFwicmVzdW1lXCIsZS5yZWFkaW5nKSxlLnJlYWRpbmd8fHQucmVhZCgwKSxlLnJlc3VtZVNjaGVkdWxlZD0hMSx0LmVtaXQoXCJyZXN1bWVcIiksUWModCksZS5mbG93aW5nJiYhZS5yZWFkaW5nJiZ0LnJlYWQoMCk7fUYucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuIEgoXCJjYWxsIHBhdXNlIGZsb3dpbmc9JWpcIix0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyE9PSExJiYoSChcInBhdXNlXCIpLHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZz0hMSx0aGlzLmVtaXQoXCJwYXVzZVwiKSksdGhpcy5fcmVhZGFibGVTdGF0ZVtscl09ITAsdGhpc307ZnVuY3Rpb24gUWModCl7bGV0IGU9dC5fcmVhZGFibGVTdGF0ZTtmb3IoSChcImZsb3dcIixlLmZsb3dpbmcpO2UuZmxvd2luZyYmdC5yZWFkKCkhPT1udWxsOyk7fUYucHJvdG90eXBlLndyYXA9ZnVuY3Rpb24odCl7bGV0IGU9ITE7dC5vbihcImRhdGFcIixpPT57IXRoaXMucHVzaChpKSYmdC5wYXVzZSYmKGU9ITAsdC5wYXVzZSgpKTt9KSx0Lm9uKFwiZW5kXCIsKCk9Pnt0aGlzLnB1c2gobnVsbCk7fSksdC5vbihcImVycm9yXCIsaT0+e3FyKHRoaXMsaSk7fSksdC5vbihcImNsb3NlXCIsKCk9Pnt0aGlzLmRlc3Ryb3koKTt9KSx0Lm9uKFwiZGVzdHJveVwiLCgpPT57dGhpcy5kZXN0cm95KCk7fSksdGhpcy5fcmVhZD0oKT0+e2UmJnQucmVzdW1lJiYoZT0hMSx0LnJlc3VtZSgpKTt9O2xldCByPUt3KHQpO2ZvcihsZXQgaT0xO2k8ci5sZW5ndGg7aSsrKXtsZXQgbj1yW2ldO3RoaXNbbl09PT12b2lkIDAmJnR5cGVvZiB0W25dPT1cImZ1bmN0aW9uXCImJih0aGlzW25dPXRbbl0uYmluZCh0KSk7fXJldHVybiB0aGlzfTtGLnByb3RvdHlwZVtZd109ZnVuY3Rpb24oKXtyZXR1cm4gWWModGhpcyl9O0YucHJvdG90eXBlLml0ZXJhdG9yPWZ1bmN0aW9uKHQpe3JldHVybiB0IT09dm9pZCAwJiZmXyh0LFwib3B0aW9uc1wiKSxZYyh0aGlzLHQpfTtmdW5jdGlvbiBZYyh0LGUpe3R5cGVvZiB0LnJlYWQhPVwiZnVuY3Rpb25cIiYmKHQ9Ri53cmFwKHQse29iamVjdE1vZGU6ITB9KSk7bGV0IHI9bV8odCxlKTtyZXR1cm4gci5zdHJlYW09dCxyfWFzeW5jIGZ1bmN0aW9uKm1fKHQsZSl7bGV0IHI9WHM7ZnVuY3Rpb24gaShzKXt0aGlzPT09dD8ocigpLHI9WHMpOnI9czt9dC5vbihcInJlYWRhYmxlXCIsaSk7bGV0IG4sbz10Xyh0LHt3cml0YWJsZTohMX0scz0+e249cz9GYyhuLHMpOm51bGwscigpLHI9WHM7fSk7dHJ5e2Zvcig7Oyl7bGV0IHM9dC5kZXN0cm95ZWQ/bnVsbDp0LnJlYWQoKTtpZihzIT09bnVsbCl5aWVsZCBzO2Vsc2Uge2lmKG4pdGhyb3cgbjtpZihuPT09bnVsbClyZXR1cm47YXdhaXQgbmV3IEd3KGkpO319fWNhdGNoKHMpe3Rocm93IG49RmMobixzKSxufWZpbmFsbHl7KG58fGU/LmRlc3Ryb3lPblJldHVybiE9PSExKSYmKG49PT12b2lkIDB8fHQuX3JlYWRhYmxlU3RhdGUuYXV0b0Rlc3Ryb3kpP0RyLmRlc3Ryb3llcih0LG51bGwpOih0Lm9mZihcInJlYWRhYmxlXCIsaSksbygpKTt9fSRjKEYucHJvdG90eXBlLHtyZWFkYWJsZTp7X19wcm90b19fOm51bGwsZ2V0KCl7bGV0IHQ9dGhpcy5fcmVhZGFibGVTdGF0ZTtyZXR1cm4gISF0JiZ0LnJlYWRhYmxlIT09ITEmJiF0LmRlc3Ryb3llZCYmIXQuZXJyb3JFbWl0dGVkJiYhdC5lbmRFbWl0dGVkfSxzZXQodCl7dGhpcy5fcmVhZGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGFibGU9ISF0KTt9fSxyZWFkYWJsZURpZFJlYWQ6e19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGF0YUVtaXR0ZWR9fSxyZWFkYWJsZUFib3J0ZWQ6e19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuICEhKHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGFibGUhPT0hMSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkfHx0aGlzLl9yZWFkYWJsZVN0YXRlLmVycm9yZWQpJiYhdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkKX19LHJlYWRhYmxlSGlnaFdhdGVyTWFyazp7X19wcm90b19fOm51bGwsZW51bWVyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5oaWdoV2F0ZXJNYXJrfX0scmVhZGFibGVCdWZmZXI6e19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3JlYWRhYmxlU3RhdGUuYnVmZmVyfX0scmVhZGFibGVGbG93aW5nOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmd9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9yZWFkYWJsZVN0YXRlJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nPXQpO319LHJlYWRhYmxlTGVuZ3RoOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmxlbmd0aH19LHJlYWRhYmxlT2JqZWN0TW9kZTp7X19wcm90b19fOm51bGwsZW51bWVyYWJsZTohMSxnZXQoKXtyZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZT90aGlzLl9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGU6ITF9fSxyZWFkYWJsZUVuY29kaW5nOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlP3RoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2Rpbmc6bnVsbH19LGVycm9yZWQ6e19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITEsZ2V0KCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGU/dGhpcy5fcmVhZGFibGVTdGF0ZS5lcnJvcmVkOm51bGx9fSxjbG9zZWQ6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlP3RoaXMuX3JlYWRhYmxlU3RhdGUuY2xvc2VkOiExfX0sZGVzdHJveWVkOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlP3RoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkOiExfSxzZXQodCl7dGhpcy5fcmVhZGFibGVTdGF0ZSYmKHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkPXQpO319LHJlYWRhYmxlRW5kZWQ6e19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITEsZ2V0KCl7cmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGU/dGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkOiExfX19KTskYyhyby5wcm90b3R5cGUse3BpcGVzQ291bnQ6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLnBpcGVzLmxlbmd0aH19LHBhdXNlZDp7X19wcm90b19fOm51bGwsZ2V0KCl7cmV0dXJuIHRoaXNbbHJdIT09ITF9LHNldCh0KXt0aGlzW2xyXT0hIXQ7fX19KTtGLl9mcm9tTGlzdD1KYztmdW5jdGlvbiBKYyh0LGUpe2lmKGUubGVuZ3RoPT09MClyZXR1cm4gbnVsbDtsZXQgcjtyZXR1cm4gZS5vYmplY3RNb2RlP3I9ZS5idWZmZXIuc2hpZnQoKTohdHx8dD49ZS5sZW5ndGg/KGUuZGVjb2Rlcj9yPWUuYnVmZmVyLmpvaW4oXCJcIik6ZS5idWZmZXIubGVuZ3RoPT09MT9yPWUuYnVmZmVyLmZpcnN0KCk6cj1lLmJ1ZmZlci5jb25jYXQoZS5sZW5ndGgpLGUuYnVmZmVyLmNsZWFyKCkpOnI9ZS5idWZmZXIuY29uc3VtZSh0LGUuZGVjb2Rlcikscn1mdW5jdGlvbiBlbyh0KXtsZXQgZT10Ll9yZWFkYWJsZVN0YXRlO0goXCJlbmRSZWFkYWJsZVwiLGUuZW5kRW1pdHRlZCksZS5lbmRFbWl0dGVkfHwoZS5lbmRlZD0hMCxIZS5uZXh0VGljayh2XyxlLHQpKTt9ZnVuY3Rpb24gdl8odCxlKXtpZihIKFwiZW5kUmVhZGFibGVOVFwiLHQuZW5kRW1pdHRlZCx0Lmxlbmd0aCksIXQuZXJyb3JlZCYmIXQuY2xvc2VFbWl0dGVkJiYhdC5lbmRFbWl0dGVkJiZ0Lmxlbmd0aD09PTApe2lmKHQuZW5kRW1pdHRlZD0hMCxlLmVtaXQoXCJlbmRcIiksZS53cml0YWJsZSYmZS5hbGxvd0hhbGZPcGVuPT09ITEpSGUubmV4dFRpY2soRV8sZSk7ZWxzZSBpZih0LmF1dG9EZXN0cm95KXtsZXQgcj1lLl93cml0YWJsZVN0YXRlOyghcnx8ci5hdXRvRGVzdHJveSYmKHIuZmluaXNoZWR8fHIud3JpdGFibGU9PT0hMSkpJiZlLmRlc3Ryb3koKTt9fX1mdW5jdGlvbiBFXyh0KXt0LndyaXRhYmxlJiYhdC53cml0YWJsZUVuZGVkJiYhdC5kZXN0cm95ZWQmJnQuZW5kKCk7fUYuZnJvbT1mdW5jdGlvbih0LGUpe3JldHVybiBjXyhGLHQsZSl9O3ZhciB0bztmdW5jdGlvbiBYYygpe3JldHVybiB0bz09PXZvaWQgMCYmKHRvPXt9KSx0b31GLmZyb21XZWI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gWGMoKS5uZXdTdHJlYW1SZWFkYWJsZUZyb21SZWFkYWJsZVN0cmVhbSh0LGUpfTtGLnRvV2ViPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFhjKCkubmV3UmVhZGFibGVTdHJlYW1Gcm9tU3RyZWFtUmVhZGFibGUodCxlKX07Ri53cmFwPWZ1bmN0aW9uKHQsZSl7dmFyIHIsaTtyZXR1cm4gbmV3IEYoe29iamVjdE1vZGU6KHI9KGk9dC5yZWFkYWJsZU9iamVjdE1vZGUpIT09bnVsbCYmaSE9PXZvaWQgMD9pOnQub2JqZWN0TW9kZSkhPT1udWxsJiZyIT09dm9pZCAwP3I6ITAsLi4uZSxkZXN0cm95KG4sbyl7RHIuZGVzdHJveWVyKHQsbiksbyhuKTt9fSkud3JhcCh0KX07fSk7dmFyIHVvPU0oKGFSLGNoKT0+e3YoKTttKCk7XygpO3ZhciB1cj1VdCgpLHtBcnJheVByb3RvdHlwZVNsaWNlOnJoLEVycm9yOlNfLEZ1bmN0aW9uUHJvdG90eXBlU3ltYm9sSGFzSW5zdGFuY2U6aWgsT2JqZWN0RGVmaW5lUHJvcGVydHk6bmgsT2JqZWN0RGVmaW5lUHJvcGVydGllczpBXyxPYmplY3RTZXRQcm90b3R5cGVPZjpzaCxTdHJpbmdQcm90b3R5cGVUb0xvd2VyQ2FzZTpJXyxTeW1ib2w6VF8sU3ltYm9sSGFzSW5zdGFuY2U6Ul99PWNlKCk7Y2guZXhwb3J0cz1pZTtpZS5Xcml0YWJsZVN0YXRlPXlpO3ZhcntFdmVudEVtaXR0ZXI6Q199PShpcigpLFgocnIpKSxwaT10bigpLlN0cmVhbSx7QnVmZmVyOmhufT0oeWUoKSxYKF9lKSksZ249dHIoKSx7YWRkQWJvcnRTaWduYWw6Ql99PWNpKCkse2dldEhpZ2hXYXRlck1hcms6UF8sZ2V0RGVmYXVsdEhpZ2hXYXRlck1hcms6T199PXNuKCkse0VSUl9JTlZBTElEX0FSR19UWVBFOmtfLEVSUl9NRVRIT0RfTk9UX0lNUExFTUVOVEVEOnhfLEVSUl9NVUxUSVBMRV9DQUxMQkFDSzpvaCxFUlJfU1RSRUFNX0NBTk5PVF9QSVBFOk1fLEVSUl9TVFJFQU1fREVTVFJPWUVEOmdpLEVSUl9TVFJFQU1fQUxSRUFEWV9GSU5JU0hFRDpMXyxFUlJfU1RSRUFNX05VTExfVkFMVUVTOlVfLEVSUl9TVFJFQU1fV1JJVEVfQUZURVJfRU5EOk5fLEVSUl9VTktOT1dOX0VOQ09ESU5HOmFofT1TZSgpLmNvZGVzLHtlcnJvck9yRGVzdHJveTpqcn09Z247c2goaWUucHJvdG90eXBlLHBpLnByb3RvdHlwZSk7c2goaWUscGkpO2Z1bmN0aW9uIHNvKCl7fXZhciBGcj1UXyhcImtPbkZpbmlzaGVkXCIpO2Z1bmN0aW9uIHlpKHQsZSxyKXt0eXBlb2YgciE9XCJib29sZWFuXCImJihyPWUgaW5zdGFuY2VvZiBudCgpKSx0aGlzLm9iamVjdE1vZGU9ISEodCYmdC5vYmplY3RNb2RlKSxyJiYodGhpcy5vYmplY3RNb2RlPXRoaXMub2JqZWN0TW9kZXx8ISEodCYmdC53cml0YWJsZU9iamVjdE1vZGUpKSx0aGlzLmhpZ2hXYXRlck1hcms9dD9QXyh0aGlzLHQsXCJ3cml0YWJsZUhpZ2hXYXRlck1hcmtcIixyKTpPXyghMSksdGhpcy5maW5hbENhbGxlZD0hMSx0aGlzLm5lZWREcmFpbj0hMSx0aGlzLmVuZGluZz0hMSx0aGlzLmVuZGVkPSExLHRoaXMuZmluaXNoZWQ9ITEsdGhpcy5kZXN0cm95ZWQ9ITE7bGV0IGk9ISEodCYmdC5kZWNvZGVTdHJpbmdzPT09ITEpO3RoaXMuZGVjb2RlU3RyaW5ncz0haSx0aGlzLmRlZmF1bHRFbmNvZGluZz10JiZ0LmRlZmF1bHRFbmNvZGluZ3x8XCJ1dGY4XCIsdGhpcy5sZW5ndGg9MCx0aGlzLndyaXRpbmc9ITEsdGhpcy5jb3JrZWQ9MCx0aGlzLnN5bmM9ITAsdGhpcy5idWZmZXJQcm9jZXNzaW5nPSExLHRoaXMub253cml0ZT1EXy5iaW5kKHZvaWQgMCxlKSx0aGlzLndyaXRlY2I9bnVsbCx0aGlzLndyaXRlbGVuPTAsdGhpcy5hZnRlcldyaXRlVGlja0luZm89bnVsbCxwbih0aGlzKSx0aGlzLnBlbmRpbmdjYj0wLHRoaXMuY29uc3RydWN0ZWQ9ITAsdGhpcy5wcmVmaW5pc2hlZD0hMSx0aGlzLmVycm9yRW1pdHRlZD0hMSx0aGlzLmVtaXRDbG9zZT0hdHx8dC5lbWl0Q2xvc2UhPT0hMSx0aGlzLmF1dG9EZXN0cm95PSF0fHx0LmF1dG9EZXN0cm95IT09ITEsdGhpcy5lcnJvcmVkPW51bGwsdGhpcy5jbG9zZWQ9ITEsdGhpcy5jbG9zZUVtaXR0ZWQ9ITEsdGhpc1tGcl09W107fWZ1bmN0aW9uIHBuKHQpe3QuYnVmZmVyZWQ9W10sdC5idWZmZXJlZEluZGV4PTAsdC5hbGxCdWZmZXJzPSEwLHQuYWxsTm9vcD0hMDt9eWkucHJvdG90eXBlLmdldEJ1ZmZlcj1mdW5jdGlvbigpe3JldHVybiByaCh0aGlzLmJ1ZmZlcmVkLHRoaXMuYnVmZmVyZWRJbmRleCl9O25oKHlpLnByb3RvdHlwZSxcImJ1ZmZlcmVkUmVxdWVzdENvdW50XCIse19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLmJ1ZmZlcmVkLmxlbmd0aC10aGlzLmJ1ZmZlcmVkSW5kZXh9fSk7ZnVuY3Rpb24gaWUodCl7bGV0IGU9dGhpcyBpbnN0YW5jZW9mIG50KCk7aWYoIWUmJiFpaChpZSx0aGlzKSlyZXR1cm4gbmV3IGllKHQpO3RoaXMuX3dyaXRhYmxlU3RhdGU9bmV3IHlpKHQsdGhpcyxlKSx0JiYodHlwZW9mIHQud3JpdGU9PVwiZnVuY3Rpb25cIiYmKHRoaXMuX3dyaXRlPXQud3JpdGUpLHR5cGVvZiB0LndyaXRldj09XCJmdW5jdGlvblwiJiYodGhpcy5fd3JpdGV2PXQud3JpdGV2KSx0eXBlb2YgdC5kZXN0cm95PT1cImZ1bmN0aW9uXCImJih0aGlzLl9kZXN0cm95PXQuZGVzdHJveSksdHlwZW9mIHQuZmluYWw9PVwiZnVuY3Rpb25cIiYmKHRoaXMuX2ZpbmFsPXQuZmluYWwpLHR5cGVvZiB0LmNvbnN0cnVjdD09XCJmdW5jdGlvblwiJiYodGhpcy5fY29uc3RydWN0PXQuY29uc3RydWN0KSx0LnNpZ25hbCYmQl8odC5zaWduYWwsdGhpcykpLHBpLmNhbGwodGhpcyx0KSxnbi5jb25zdHJ1Y3QodGhpcywoKT0+e2xldCByPXRoaXMuX3dyaXRhYmxlU3RhdGU7ci53cml0aW5nfHxhbyh0aGlzLHIpLGxvKHRoaXMscik7fSk7fW5oKGllLFJfLHtfX3Byb3RvX186bnVsbCx2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gaWgodGhpcyx0KT8hMDp0aGlzIT09aWU/ITE6dCYmdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIHlpfX0pO2llLnByb3RvdHlwZS5waXBlPWZ1bmN0aW9uKCl7anIodGhpcyxuZXcgTV8pO307ZnVuY3Rpb24gbGgodCxlLHIsaSl7bGV0IG49dC5fd3JpdGFibGVTdGF0ZTtpZih0eXBlb2Ygcj09XCJmdW5jdGlvblwiKWk9cixyPW4uZGVmYXVsdEVuY29kaW5nO2Vsc2Uge2lmKCFyKXI9bi5kZWZhdWx0RW5jb2Rpbmc7ZWxzZSBpZihyIT09XCJidWZmZXJcIiYmIWhuLmlzRW5jb2RpbmcocikpdGhyb3cgbmV3IGFoKHIpO3R5cGVvZiBpIT1cImZ1bmN0aW9uXCImJihpPXNvKTt9aWYoZT09PW51bGwpdGhyb3cgbmV3IFVfO2lmKCFuLm9iamVjdE1vZGUpaWYodHlwZW9mIGU9PVwic3RyaW5nXCIpbi5kZWNvZGVTdHJpbmdzIT09ITEmJihlPWhuLmZyb20oZSxyKSxyPVwiYnVmZmVyXCIpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIGhuKXI9XCJidWZmZXJcIjtlbHNlIGlmKHBpLl9pc1VpbnQ4QXJyYXkoZSkpZT1waS5fdWludDhBcnJheVRvQnVmZmVyKGUpLHI9XCJidWZmZXJcIjtlbHNlIHRocm93IG5ldyBrXyhcImNodW5rXCIsW1wic3RyaW5nXCIsXCJCdWZmZXJcIixcIlVpbnQ4QXJyYXlcIl0sZSk7bGV0IG87cmV0dXJuIG4uZW5kaW5nP289bmV3IE5fOm4uZGVzdHJveWVkJiYobz1uZXcgZ2koXCJ3cml0ZVwiKSksbz8odXIubmV4dFRpY2soaSxvKSxqcih0LG8sITApLG8pOihuLnBlbmRpbmdjYisrLHFfKHQsbixlLHIsaSkpfWllLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUscil7cmV0dXJuIGxoKHRoaXMsdCxlLHIpPT09ITB9O2llLnByb3RvdHlwZS5jb3JrPWZ1bmN0aW9uKCl7dGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQrKzt9O2llLnByb3RvdHlwZS51bmNvcms9ZnVuY3Rpb24oKXtsZXQgdD10aGlzLl93cml0YWJsZVN0YXRlO3QuY29ya2VkJiYodC5jb3JrZWQtLSx0LndyaXRpbmd8fGFvKHRoaXMsdCkpO307aWUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZz1mdW5jdGlvbihlKXtpZih0eXBlb2YgZT09XCJzdHJpbmdcIiYmKGU9SV8oZSkpLCFobi5pc0VuY29kaW5nKGUpKXRocm93IG5ldyBhaChlKTtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2Rpbmc9ZSx0aGlzfTtmdW5jdGlvbiBxXyh0LGUscixpLG4pe2xldCBvPWUub2JqZWN0TW9kZT8xOnIubGVuZ3RoO2UubGVuZ3RoKz1vO2xldCBzPWUubGVuZ3RoPGUuaGlnaFdhdGVyTWFyaztyZXR1cm4gc3x8KGUubmVlZERyYWluPSEwKSxlLndyaXRpbmd8fGUuY29ya2VkfHxlLmVycm9yZWR8fCFlLmNvbnN0cnVjdGVkPyhlLmJ1ZmZlcmVkLnB1c2goe2NodW5rOnIsZW5jb2Rpbmc6aSxjYWxsYmFjazpufSksZS5hbGxCdWZmZXJzJiZpIT09XCJidWZmZXJcIiYmKGUuYWxsQnVmZmVycz0hMSksZS5hbGxOb29wJiZuIT09c28mJihlLmFsbE5vb3A9ITEpKTooZS53cml0ZWxlbj1vLGUud3JpdGVjYj1uLGUud3JpdGluZz0hMCxlLnN5bmM9ITAsdC5fd3JpdGUocixpLGUub253cml0ZSksZS5zeW5jPSExKSxzJiYhZS5lcnJvcmVkJiYhZS5kZXN0cm95ZWR9ZnVuY3Rpb24gZWgodCxlLHIsaSxuLG8scyl7ZS53cml0ZWxlbj1pLGUud3JpdGVjYj1zLGUud3JpdGluZz0hMCxlLnN5bmM9ITAsZS5kZXN0cm95ZWQ/ZS5vbndyaXRlKG5ldyBnaShcIndyaXRlXCIpKTpyP3QuX3dyaXRldihuLGUub253cml0ZSk6dC5fd3JpdGUobixvLGUub253cml0ZSksZS5zeW5jPSExO31mdW5jdGlvbiB0aCh0LGUscixpKXstLWUucGVuZGluZ2NiLGkociksb28oZSksanIodCxyKTt9ZnVuY3Rpb24gRF8odCxlKXtsZXQgcj10Ll93cml0YWJsZVN0YXRlLGk9ci5zeW5jLG49ci53cml0ZWNiO2lmKHR5cGVvZiBuIT1cImZ1bmN0aW9uXCIpe2pyKHQsbmV3IG9oKTtyZXR1cm59ci53cml0aW5nPSExLHIud3JpdGVjYj1udWxsLHIubGVuZ3RoLT1yLndyaXRlbGVuLHIud3JpdGVsZW49MCxlPyhlLnN0YWNrLHIuZXJyb3JlZHx8KHIuZXJyb3JlZD1lKSx0Ll9yZWFkYWJsZVN0YXRlJiYhdC5fcmVhZGFibGVTdGF0ZS5lcnJvcmVkJiYodC5fcmVhZGFibGVTdGF0ZS5lcnJvcmVkPWUpLGk/dXIubmV4dFRpY2sodGgsdCxyLGUsbik6dGgodCxyLGUsbikpOihyLmJ1ZmZlcmVkLmxlbmd0aD5yLmJ1ZmZlcmVkSW5kZXgmJmFvKHQsciksaT9yLmFmdGVyV3JpdGVUaWNrSW5mbyE9PW51bGwmJnIuYWZ0ZXJXcml0ZVRpY2tJbmZvLmNiPT09bj9yLmFmdGVyV3JpdGVUaWNrSW5mby5jb3VudCsrOihyLmFmdGVyV3JpdGVUaWNrSW5mbz17Y291bnQ6MSxjYjpuLHN0cmVhbTp0LHN0YXRlOnJ9LHVyLm5leHRUaWNrKGpfLHIuYWZ0ZXJXcml0ZVRpY2tJbmZvKSk6dWgodCxyLDEsbikpO31mdW5jdGlvbiBqXyh7c3RyZWFtOnQsc3RhdGU6ZSxjb3VudDpyLGNiOml9KXtyZXR1cm4gZS5hZnRlcldyaXRlVGlja0luZm89bnVsbCx1aCh0LGUscixpKX1mdW5jdGlvbiB1aCh0LGUscixpKXtmb3IoIWUuZW5kaW5nJiYhdC5kZXN0cm95ZWQmJmUubGVuZ3RoPT09MCYmZS5uZWVkRHJhaW4mJihlLm5lZWREcmFpbj0hMSx0LmVtaXQoXCJkcmFpblwiKSk7ci0tID4wOyllLnBlbmRpbmdjYi0tLGkoKTtlLmRlc3Ryb3llZCYmb28oZSksbG8odCxlKTt9ZnVuY3Rpb24gb28odCl7aWYodC53cml0aW5nKXJldHVybjtmb3IobGV0IG49dC5idWZmZXJlZEluZGV4O248dC5idWZmZXJlZC5sZW5ndGg7KytuKXt2YXIgZTtsZXR7Y2h1bms6byxjYWxsYmFjazpzfT10LmJ1ZmZlcmVkW25dLGE9dC5vYmplY3RNb2RlPzE6by5sZW5ndGg7dC5sZW5ndGgtPWEscygoZT10LmVycm9yZWQpIT09bnVsbCYmZSE9PXZvaWQgMD9lOm5ldyBnaShcIndyaXRlXCIpKTt9bGV0IHI9dFtGcl0uc3BsaWNlKDApO2ZvcihsZXQgbj0wO248ci5sZW5ndGg7bisrKXt2YXIgaTtyW25dKChpPXQuZXJyb3JlZCkhPT1udWxsJiZpIT09dm9pZCAwP2k6bmV3IGdpKFwiZW5kXCIpKTt9cG4odCk7fWZ1bmN0aW9uIGFvKHQsZSl7aWYoZS5jb3JrZWR8fGUuYnVmZmVyUHJvY2Vzc2luZ3x8ZS5kZXN0cm95ZWR8fCFlLmNvbnN0cnVjdGVkKXJldHVybjtsZXR7YnVmZmVyZWQ6cixidWZmZXJlZEluZGV4Omksb2JqZWN0TW9kZTpufT1lLG89ci5sZW5ndGgtaTtpZighbylyZXR1cm47bGV0IHM9aTtpZihlLmJ1ZmZlclByb2Nlc3Npbmc9ITAsbz4xJiZ0Ll93cml0ZXYpe2UucGVuZGluZ2NiLT1vLTE7bGV0IGE9ZS5hbGxOb29wP3NvOmM9Pntmb3IobGV0IGg9cztoPHIubGVuZ3RoOysraClyW2hdLmNhbGxiYWNrKGMpO30sdT1lLmFsbE5vb3AmJnM9PT0wP3I6cmgocixzKTt1LmFsbEJ1ZmZlcnM9ZS5hbGxCdWZmZXJzLGVoKHQsZSwhMCxlLmxlbmd0aCx1LFwiXCIsYSkscG4oZSk7fWVsc2Uge2Rve2xldHtjaHVuazphLGVuY29kaW5nOnUsY2FsbGJhY2s6Y309cltzXTtyW3MrK109bnVsbDtsZXQgaD1uPzE6YS5sZW5ndGg7ZWgodCxlLCExLGgsYSx1LGMpO313aGlsZShzPHIubGVuZ3RoJiYhZS53cml0aW5nKTtzPT09ci5sZW5ndGg/cG4oZSk6cz4yNTY/KHIuc3BsaWNlKDAscyksZS5idWZmZXJlZEluZGV4PTApOmUuYnVmZmVyZWRJbmRleD1zO31lLmJ1ZmZlclByb2Nlc3Npbmc9ITE7fWllLnByb3RvdHlwZS5fd3JpdGU9ZnVuY3Rpb24odCxlLHIpe2lmKHRoaXMuX3dyaXRldil0aGlzLl93cml0ZXYoW3tjaHVuazp0LGVuY29kaW5nOmV9XSxyKTtlbHNlIHRocm93IG5ldyB4XyhcIl93cml0ZSgpXCIpfTtpZS5wcm90b3R5cGUuX3dyaXRldj1udWxsO2llLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24odCxlLHIpe2xldCBpPXRoaXMuX3dyaXRhYmxlU3RhdGU7dHlwZW9mIHQ9PVwiZnVuY3Rpb25cIj8ocj10LHQ9bnVsbCxlPW51bGwpOnR5cGVvZiBlPT1cImZ1bmN0aW9uXCImJihyPWUsZT1udWxsKTtsZXQgbjtpZih0IT1udWxsKXtsZXQgbz1saCh0aGlzLHQsZSk7byBpbnN0YW5jZW9mIFNfJiYobj1vKTt9cmV0dXJuIGkuY29ya2VkJiYoaS5jb3JrZWQ9MSx0aGlzLnVuY29yaygpKSxufHwoIWkuZXJyb3JlZCYmIWkuZW5kaW5nPyhpLmVuZGluZz0hMCxsbyh0aGlzLGksITApLGkuZW5kZWQ9ITApOmkuZmluaXNoZWQ/bj1uZXcgTF8oXCJlbmRcIik6aS5kZXN0cm95ZWQmJihuPW5ldyBnaShcImVuZFwiKSkpLHR5cGVvZiByPT1cImZ1bmN0aW9uXCImJihufHxpLmZpbmlzaGVkP3VyLm5leHRUaWNrKHIsbik6aVtGcl0ucHVzaChyKSksdGhpc307ZnVuY3Rpb24gZG4odCl7cmV0dXJuIHQuZW5kaW5nJiYhdC5kZXN0cm95ZWQmJnQuY29uc3RydWN0ZWQmJnQubGVuZ3RoPT09MCYmIXQuZXJyb3JlZCYmdC5idWZmZXJlZC5sZW5ndGg9PT0wJiYhdC5maW5pc2hlZCYmIXQud3JpdGluZyYmIXQuZXJyb3JFbWl0dGVkJiYhdC5jbG9zZUVtaXR0ZWR9ZnVuY3Rpb24gRl8odCxlKXtsZXQgcj0hMTtmdW5jdGlvbiBpKG4pe2lmKHIpe2pyKHQsbj8/b2goKSk7cmV0dXJufWlmKHI9ITAsZS5wZW5kaW5nY2ItLSxuKXtsZXQgbz1lW0ZyXS5zcGxpY2UoMCk7Zm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspb1tzXShuKTtqcih0LG4sZS5zeW5jKTt9ZWxzZSBkbihlKSYmKGUucHJlZmluaXNoZWQ9ITAsdC5lbWl0KFwicHJlZmluaXNoXCIpLGUucGVuZGluZ2NiKyssdXIubmV4dFRpY2sobm8sdCxlKSk7fWUuc3luYz0hMCxlLnBlbmRpbmdjYisrO3RyeXt0Ll9maW5hbChpKTt9Y2F0Y2gobil7aShuKTt9ZS5zeW5jPSExO31mdW5jdGlvbiBXXyh0LGUpeyFlLnByZWZpbmlzaGVkJiYhZS5maW5hbENhbGxlZCYmKHR5cGVvZiB0Ll9maW5hbD09XCJmdW5jdGlvblwiJiYhZS5kZXN0cm95ZWQ/KGUuZmluYWxDYWxsZWQ9ITAsRl8odCxlKSk6KGUucHJlZmluaXNoZWQ9ITAsdC5lbWl0KFwicHJlZmluaXNoXCIpKSk7fWZ1bmN0aW9uIGxvKHQsZSxyKXtkbihlKSYmKFdfKHQsZSksZS5wZW5kaW5nY2I9PT0wJiYocj8oZS5wZW5kaW5nY2IrKyx1ci5uZXh0VGljaygoaSxuKT0+e2RuKG4pP25vKGksbik6bi5wZW5kaW5nY2ItLTt9LHQsZSkpOmRuKGUpJiYoZS5wZW5kaW5nY2IrKyxubyh0LGUpKSkpO31mdW5jdGlvbiBubyh0LGUpe2UucGVuZGluZ2NiLS0sZS5maW5pc2hlZD0hMDtsZXQgcj1lW0ZyXS5zcGxpY2UoMCk7Zm9yKGxldCBpPTA7aTxyLmxlbmd0aDtpKyspcltpXSgpO2lmKHQuZW1pdChcImZpbmlzaFwiKSxlLmF1dG9EZXN0cm95KXtsZXQgaT10Ll9yZWFkYWJsZVN0YXRlOyghaXx8aS5hdXRvRGVzdHJveSYmKGkuZW5kRW1pdHRlZHx8aS5yZWFkYWJsZT09PSExKSkmJnQuZGVzdHJveSgpO319QV8oaWUucHJvdG90eXBlLHtjbG9zZWQ6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlP3RoaXMuX3dyaXRhYmxlU3RhdGUuY2xvc2VkOiExfX0sZGVzdHJveWVkOntfX3Byb3RvX186bnVsbCxnZXQoKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZT90aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDohMX0sc2V0KHQpe3RoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZD10KTt9fSx3cml0YWJsZTp7X19wcm90b19fOm51bGwsZ2V0KCl7bGV0IHQ9dGhpcy5fd3JpdGFibGVTdGF0ZTtyZXR1cm4gISF0JiZ0LndyaXRhYmxlIT09ITEmJiF0LmRlc3Ryb3llZCYmIXQuZXJyb3JlZCYmIXQuZW5kaW5nJiYhdC5lbmRlZH0sc2V0KHQpe3RoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl93cml0YWJsZVN0YXRlLndyaXRhYmxlPSEhdCk7fX0sd3JpdGFibGVGaW5pc2hlZDp7X19wcm90b19fOm51bGwsZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZDohMX19LHdyaXRhYmxlT2JqZWN0TW9kZTp7X19wcm90b19fOm51bGwsZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5vYmplY3RNb2RlOiExfX0sd3JpdGFibGVCdWZmZXI6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmdldEJ1ZmZlcigpfX0sd3JpdGFibGVFbmRlZDp7X19wcm90b19fOm51bGwsZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmc6ITF9fSx3cml0YWJsZU5lZWREcmFpbjp7X19wcm90b19fOm51bGwsZ2V0KCl7bGV0IHQ9dGhpcy5fd3JpdGFibGVTdGF0ZTtyZXR1cm4gdD8hdC5kZXN0cm95ZWQmJiF0LmVuZGluZyYmdC5uZWVkRHJhaW46ITF9fSx3cml0YWJsZUhpZ2hXYXRlck1hcms6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlJiZ0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcmt9fSx3cml0YWJsZUNvcmtlZDp7X19wcm90b19fOm51bGwsZ2V0KCl7cmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGU/dGhpcy5fd3JpdGFibGVTdGF0ZS5jb3JrZWQ6MH19LHdyaXRhYmxlTGVuZ3RoOntfX3Byb3RvX186bnVsbCxnZXQoKXtyZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZSYmdGhpcy5fd3JpdGFibGVTdGF0ZS5sZW5ndGh9fSxlcnJvcmVkOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldCgpe3JldHVybiB0aGlzLl93cml0YWJsZVN0YXRlP3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JlZDpudWxsfX0sd3JpdGFibGVBYm9ydGVkOntfX3Byb3RvX186bnVsbCxlbnVtZXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiAhISh0aGlzLl93cml0YWJsZVN0YXRlLndyaXRhYmxlIT09ITEmJih0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZHx8dGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvcmVkKSYmIXRoaXMuX3dyaXRhYmxlU3RhdGUuZmluaXNoZWQpfX19KTt2YXIgJF89Z24uZGVzdHJveTtpZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbih0LGUpe2xldCByPXRoaXMuX3dyaXRhYmxlU3RhdGU7cmV0dXJuICFyLmRlc3Ryb3llZCYmKHIuYnVmZmVyZWRJbmRleDxyLmJ1ZmZlcmVkLmxlbmd0aHx8cltGcl0ubGVuZ3RoKSYmdXIubmV4dFRpY2sob28sciksJF8uY2FsbCh0aGlzLHQsZSksdGhpc307aWUucHJvdG90eXBlLl91bmRlc3Ryb3k9Z24udW5kZXN0cm95O2llLnByb3RvdHlwZS5fZGVzdHJveT1mdW5jdGlvbih0LGUpe2UodCk7fTtpZS5wcm90b3R5cGVbQ18uY2FwdHVyZVJlamVjdGlvblN5bWJvbF09ZnVuY3Rpb24odCl7dGhpcy5kZXN0cm95KHQpO307dmFyIGlvO2Z1bmN0aW9uIGZoKCl7cmV0dXJuIGlvPT09dm9pZCAwJiYoaW89e30pLGlvfWllLmZyb21XZWI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZmgoKS5uZXdTdHJlYW1Xcml0YWJsZUZyb21Xcml0YWJsZVN0cmVhbSh0LGUpfTtpZS50b1dlYj1mdW5jdGlvbih0KXtyZXR1cm4gZmgoKS5uZXdXcml0YWJsZVN0cmVhbUZyb21TdHJlYW1Xcml0YWJsZSh0KX07fSk7dmFyIFNoPU0oKGJSLEVoKT0+e3YoKTttKCk7XygpO3ZhciBmbz1VdCgpLEhfPSh5ZSgpLFgoX2UpKSx7aXNSZWFkYWJsZTpWXyxpc1dyaXRhYmxlOnpfLGlzSXRlcmFibGU6aGgsaXNOb2RlU3RyZWFtOktfLGlzUmVhZGFibGVOb2RlU3RyZWFtOmRoLGlzV3JpdGFibGVOb2RlU3RyZWFtOnBoLGlzRHVwbGV4Tm9kZVN0cmVhbTpHX309dHQoKSxnaD1tdCgpLHtBYm9ydEVycm9yOnZoLGNvZGVzOntFUlJfSU5WQUxJRF9BUkdfVFlQRTpRXyxFUlJfSU5WQUxJRF9SRVRVUk5fVkFMVUU6eWh9fT1TZSgpLHtkZXN0cm95ZXI6V3J9PXRyKCksWV89bnQoKSxKXz1kaSgpLHtjcmVhdGVEZWZlcnJlZFByb21pc2U6Ymh9PUplKCksd2g9WXMoKSxfaD1nbG9iYWxUaGlzLkJsb2J8fEhfLkJsb2IsWF89dHlwZW9mIF9oPFwidVwiP2Z1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgX2h9OmZ1bmN0aW9uKGUpe3JldHVybiAhMX0sWl89Z2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXJ8fEhpKCkuQWJvcnRDb250cm9sbGVyLHtGdW5jdGlvblByb3RvdHlwZUNhbGw6bWh9PWNlKCksZnI9Y2xhc3MgZXh0ZW5kcyBZX3tjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSxlPy5yZWFkYWJsZT09PSExJiYodGhpcy5fcmVhZGFibGVTdGF0ZS5yZWFkYWJsZT0hMSx0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkPSEwLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kRW1pdHRlZD0hMCksZT8ud3JpdGFibGU9PT0hMSYmKHRoaXMuX3dyaXRhYmxlU3RhdGUud3JpdGFibGU9ITEsdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmc9ITAsdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZD0hMCx0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkPSEwKTt9fTtFaC5leHBvcnRzPWZ1bmN0aW9uIHQoZSxyKXtpZihHXyhlKSlyZXR1cm4gZTtpZihkaChlKSlyZXR1cm4geW4oe3JlYWRhYmxlOmV9KTtpZihwaChlKSlyZXR1cm4geW4oe3dyaXRhYmxlOmV9KTtpZihLXyhlKSlyZXR1cm4geW4oe3dyaXRhYmxlOiExLHJlYWRhYmxlOiExfSk7aWYodHlwZW9mIGU9PVwiZnVuY3Rpb25cIil7bGV0e3ZhbHVlOm4sd3JpdGU6byxmaW5hbDpzLGRlc3Ryb3k6YX09ZTAoZSk7aWYoaGgobikpcmV0dXJuIHdoKGZyLG4se29iamVjdE1vZGU6ITAsd3JpdGU6byxmaW5hbDpzLGRlc3Ryb3k6YX0pO2xldCB1PW4/LnRoZW47aWYodHlwZW9mIHU9PVwiZnVuY3Rpb25cIil7bGV0IGMsaD1taCh1LG4sZD0+e2lmKGQhPW51bGwpdGhyb3cgbmV3IHloKFwibnVsbHlcIixcImJvZHlcIixkKX0sZD0+e1dyKGMsZCk7fSk7cmV0dXJuIGM9bmV3IGZyKHtvYmplY3RNb2RlOiEwLHJlYWRhYmxlOiExLHdyaXRlOm8sZmluYWwoZCl7cyhhc3luYygpPT57dHJ5e2F3YWl0IGgsZm8ubmV4dFRpY2soZCxudWxsKTt9Y2F0Y2goZyl7Zm8ubmV4dFRpY2soZCxnKTt9fSk7fSxkZXN0cm95OmF9KX10aHJvdyBuZXcgeWgoXCJJdGVyYWJsZSwgQXN5bmNJdGVyYWJsZSBvciBBc3luY0Z1bmN0aW9uXCIscixuKX1pZihYXyhlKSlyZXR1cm4gdChlLmFycmF5QnVmZmVyKCkpO2lmKGhoKGUpKXJldHVybiB3aChmcixlLHtvYmplY3RNb2RlOiEwLHdyaXRhYmxlOiExfSk7aWYodHlwZW9mIGU/LndyaXRhYmxlPT1cIm9iamVjdFwifHx0eXBlb2YgZT8ucmVhZGFibGU9PVwib2JqZWN0XCIpe2xldCBuPWUhPW51bGwmJmUucmVhZGFibGU/ZGgoZT8ucmVhZGFibGUpP2U/LnJlYWRhYmxlOnQoZS5yZWFkYWJsZSk6dm9pZCAwLG89ZSE9bnVsbCYmZS53cml0YWJsZT9waChlPy53cml0YWJsZSk/ZT8ud3JpdGFibGU6dChlLndyaXRhYmxlKTp2b2lkIDA7cmV0dXJuIHluKHtyZWFkYWJsZTpuLHdyaXRhYmxlOm99KX1sZXQgaT1lPy50aGVuO2lmKHR5cGVvZiBpPT1cImZ1bmN0aW9uXCIpe2xldCBuO3JldHVybiBtaChpLGUsbz0+e28hPW51bGwmJm4ucHVzaChvKSxuLnB1c2gobnVsbCk7fSxvPT57V3IobixvKTt9KSxuPW5ldyBmcih7b2JqZWN0TW9kZTohMCx3cml0YWJsZTohMSxyZWFkKCl7fX0pfXRocm93IG5ldyBRXyhyLFtcIkJsb2JcIixcIlJlYWRhYmxlU3RyZWFtXCIsXCJXcml0YWJsZVN0cmVhbVwiLFwiU3RyZWFtXCIsXCJJdGVyYWJsZVwiLFwiQXN5bmNJdGVyYWJsZVwiLFwiRnVuY3Rpb25cIixcInsgcmVhZGFibGUsIHdyaXRhYmxlIH0gcGFpclwiLFwiUHJvbWlzZVwiXSxlKX07ZnVuY3Rpb24gZTAodCl7bGV0e3Byb21pc2U6ZSxyZXNvbHZlOnJ9PWJoKCksaT1uZXcgWl8sbj1pLnNpZ25hbDtyZXR1cm4ge3ZhbHVlOnQoYXN5bmMgZnVuY3Rpb24qKCl7Zm9yKDs7KXtsZXQgcz1lO2U9bnVsbDtsZXR7Y2h1bms6YSxkb25lOnUsY2I6Y309YXdhaXQgcztpZihmby5uZXh0VGljayhjKSx1KXJldHVybjtpZihuLmFib3J0ZWQpdGhyb3cgbmV3IHZoKHZvaWQgMCx7Y2F1c2U6bi5yZWFzb259KTsoKHtwcm9taXNlOmUscmVzb2x2ZTpyfT1iaCgpKSkseWllbGQgYTt9fSgpLHtzaWduYWw6bn0pLHdyaXRlKHMsYSx1KXtsZXQgYz1yO3I9bnVsbCxjKHtjaHVuazpzLGRvbmU6ITEsY2I6dX0pO30sZmluYWwocyl7bGV0IGE9cjtyPW51bGwsYSh7ZG9uZTohMCxjYjpzfSk7fSxkZXN0cm95KHMsYSl7aS5hYm9ydCgpLGEocyk7fX19ZnVuY3Rpb24geW4odCl7bGV0IGU9dC5yZWFkYWJsZSYmdHlwZW9mIHQucmVhZGFibGUucmVhZCE9XCJmdW5jdGlvblwiP0pfLndyYXAodC5yZWFkYWJsZSk6dC5yZWFkYWJsZSxyPXQud3JpdGFibGUsaT0hIVZfKGUpLG49ISF6XyhyKSxvLHMsYSx1LGM7ZnVuY3Rpb24gaChkKXtsZXQgZz11O3U9bnVsbCxnP2coZCk6ZCYmYy5kZXN0cm95KGQpO31yZXR1cm4gYz1uZXcgZnIoe3JlYWRhYmxlT2JqZWN0TW9kZTohIShlIT1udWxsJiZlLnJlYWRhYmxlT2JqZWN0TW9kZSksd3JpdGFibGVPYmplY3RNb2RlOiEhKHIhPW51bGwmJnIud3JpdGFibGVPYmplY3RNb2RlKSxyZWFkYWJsZTppLHdyaXRhYmxlOm59KSxuJiYoZ2gocixkPT57bj0hMSxkJiZXcihlLGQpLGgoZCk7fSksYy5fd3JpdGU9ZnVuY3Rpb24oZCxnLHkpe3Iud3JpdGUoZCxnKT95KCk6bz15O30sYy5fZmluYWw9ZnVuY3Rpb24oZCl7ci5lbmQoKSxzPWQ7fSxyLm9uKFwiZHJhaW5cIixmdW5jdGlvbigpe2lmKG8pe2xldCBkPW87bz1udWxsLGQoKTt9fSksci5vbihcImZpbmlzaFwiLGZ1bmN0aW9uKCl7aWYocyl7bGV0IGQ9cztzPW51bGwsZCgpO319KSksaSYmKGdoKGUsZD0+e2k9ITEsZCYmV3IoZSxkKSxoKGQpO30pLGUub24oXCJyZWFkYWJsZVwiLGZ1bmN0aW9uKCl7aWYoYSl7bGV0IGQ9YTthPW51bGwsZCgpO319KSxlLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtjLnB1c2gobnVsbCk7fSksYy5fcmVhZD1mdW5jdGlvbigpe2Zvcig7Oyl7bGV0IGQ9ZS5yZWFkKCk7aWYoZD09PW51bGwpe2E9Yy5fcmVhZDtyZXR1cm59aWYoIWMucHVzaChkKSlyZXR1cm59fSksYy5fZGVzdHJveT1mdW5jdGlvbihkLGcpeyFkJiZ1IT09bnVsbCYmKGQ9bmV3IHZoKSxhPW51bGwsbz1udWxsLHM9bnVsbCx1PT09bnVsbD9nKGQpOih1PWcsV3IocixkKSxXcihlLGQpKTt9LGN9fSk7dmFyIG50PU0oKFJSLFRoKT0+e3YoKTttKCk7XygpO3ZhcntPYmplY3REZWZpbmVQcm9wZXJ0aWVzOnQwLE9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvcjpBdCxPYmplY3RLZXlzOnIwLE9iamVjdFNldFByb3RvdHlwZU9mOkFofT1jZSgpO1RoLmV4cG9ydHM9VmU7dmFyIHBvPWRpKCksTmU9dW8oKTtBaChWZS5wcm90b3R5cGUscG8ucHJvdG90eXBlKTtBaChWZSxwbyk7e2xldCB0PXIwKE5lLnByb3RvdHlwZSk7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspe2xldCByPXRbZV07VmUucHJvdG90eXBlW3JdfHwoVmUucHJvdG90eXBlW3JdPU5lLnByb3RvdHlwZVtyXSk7fX1mdW5jdGlvbiBWZSh0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBWZSkpcmV0dXJuIG5ldyBWZSh0KTtwby5jYWxsKHRoaXMsdCksTmUuY2FsbCh0aGlzLHQpLHQ/KHRoaXMuYWxsb3dIYWxmT3Blbj10LmFsbG93SGFsZk9wZW4hPT0hMSx0LnJlYWRhYmxlPT09ITEmJih0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRhYmxlPSExLHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQ9ITAsdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkPSEwKSx0LndyaXRhYmxlPT09ITEmJih0aGlzLl93cml0YWJsZVN0YXRlLndyaXRhYmxlPSExLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nPSEwLHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQ9ITAsdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZD0hMCkpOnRoaXMuYWxsb3dIYWxmT3Blbj0hMDt9dDAoVmUucHJvdG90eXBlLHt3cml0YWJsZTp7X19wcm90b19fOm51bGwsLi4uQXQoTmUucHJvdG90eXBlLFwid3JpdGFibGVcIil9LHdyaXRhYmxlSGlnaFdhdGVyTWFyazp7X19wcm90b19fOm51bGwsLi4uQXQoTmUucHJvdG90eXBlLFwid3JpdGFibGVIaWdoV2F0ZXJNYXJrXCIpfSx3cml0YWJsZU9iamVjdE1vZGU6e19fcHJvdG9fXzpudWxsLC4uLkF0KE5lLnByb3RvdHlwZSxcIndyaXRhYmxlT2JqZWN0TW9kZVwiKX0sd3JpdGFibGVCdWZmZXI6e19fcHJvdG9fXzpudWxsLC4uLkF0KE5lLnByb3RvdHlwZSxcIndyaXRhYmxlQnVmZmVyXCIpfSx3cml0YWJsZUxlbmd0aDp7X19wcm90b19fOm51bGwsLi4uQXQoTmUucHJvdG90eXBlLFwid3JpdGFibGVMZW5ndGhcIil9LHdyaXRhYmxlRmluaXNoZWQ6e19fcHJvdG9fXzpudWxsLC4uLkF0KE5lLnByb3RvdHlwZSxcIndyaXRhYmxlRmluaXNoZWRcIil9LHdyaXRhYmxlQ29ya2VkOntfX3Byb3RvX186bnVsbCwuLi5BdChOZS5wcm90b3R5cGUsXCJ3cml0YWJsZUNvcmtlZFwiKX0sd3JpdGFibGVFbmRlZDp7X19wcm90b19fOm51bGwsLi4uQXQoTmUucHJvdG90eXBlLFwid3JpdGFibGVFbmRlZFwiKX0sd3JpdGFibGVOZWVkRHJhaW46e19fcHJvdG9fXzpudWxsLC4uLkF0KE5lLnByb3RvdHlwZSxcIndyaXRhYmxlTmVlZERyYWluXCIpfSxkZXN0cm95ZWQ6e19fcHJvdG9fXzpudWxsLGdldCgpe3JldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlPT09dm9pZCAwfHx0aGlzLl93cml0YWJsZVN0YXRlPT09dm9pZCAwPyExOnRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkJiZ0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZH0sc2V0KHQpe3RoaXMuX3JlYWRhYmxlU3RhdGUmJnRoaXMuX3dyaXRhYmxlU3RhdGUmJih0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZD10LHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkPXQpO319fSk7dmFyIGNvO2Z1bmN0aW9uIEloKCl7cmV0dXJuIGNvPT09dm9pZCAwJiYoY289e30pLGNvfVZlLmZyb21XZWI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSWgoKS5uZXdTdHJlYW1EdXBsZXhGcm9tUmVhZGFibGVXcml0YWJsZVBhaXIodCxlKX07VmUudG9XZWI9ZnVuY3Rpb24odCl7cmV0dXJuIEloKCkubmV3UmVhZGFibGVXcml0YWJsZVBhaXJGcm9tRHVwbGV4KHQpfTt2YXIgaG87VmUuZnJvbT1mdW5jdGlvbih0KXtyZXR1cm4gaG98fChobz1TaCgpKSxobyh0LFwiYm9keVwiKX07fSk7dmFyIGJvPU0oKE5SLENoKT0+e3YoKTttKCk7XygpO3ZhcntPYmplY3RTZXRQcm90b3R5cGVPZjpSaCxTeW1ib2w6aTB9PWNlKCk7Q2guZXhwb3J0cz1JdDt2YXJ7RVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQ6bjB9PVNlKCkuY29kZXMseW89bnQoKSx7Z2V0SGlnaFdhdGVyTWFyazpzMH09c24oKTtSaChJdC5wcm90b3R5cGUseW8ucHJvdG90eXBlKTtSaChJdCx5byk7dmFyIGJpPWkwKFwia0NhbGxiYWNrXCIpO2Z1bmN0aW9uIEl0KHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEl0KSlyZXR1cm4gbmV3IEl0KHQpO2xldCBlPXQ/czAodGhpcyx0LFwicmVhZGFibGVIaWdoV2F0ZXJNYXJrXCIsITApOm51bGw7ZT09PTAmJih0PXsuLi50LGhpZ2hXYXRlck1hcms6bnVsbCxyZWFkYWJsZUhpZ2hXYXRlck1hcms6ZSx3cml0YWJsZUhpZ2hXYXRlck1hcms6dC53cml0YWJsZUhpZ2hXYXRlck1hcmt8fDB9KSx5by5jYWxsKHRoaXMsdCksdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jPSExLHRoaXNbYmldPW51bGwsdCYmKHR5cGVvZiB0LnRyYW5zZm9ybT09XCJmdW5jdGlvblwiJiYodGhpcy5fdHJhbnNmb3JtPXQudHJhbnNmb3JtKSx0eXBlb2YgdC5mbHVzaD09XCJmdW5jdGlvblwiJiYodGhpcy5fZmx1c2g9dC5mbHVzaCkpLHRoaXMub24oXCJwcmVmaW5pc2hcIixvMCk7fWZ1bmN0aW9uIGdvKHQpe3R5cGVvZiB0aGlzLl9mbHVzaD09XCJmdW5jdGlvblwiJiYhdGhpcy5kZXN0cm95ZWQ/dGhpcy5fZmx1c2goKGUscik9PntpZihlKXt0P3QoZSk6dGhpcy5kZXN0cm95KGUpO3JldHVybn1yIT1udWxsJiZ0aGlzLnB1c2gociksdGhpcy5wdXNoKG51bGwpLHQmJnQoKTt9KToodGhpcy5wdXNoKG51bGwpLHQmJnQoKSk7fWZ1bmN0aW9uIG8wKCl7dGhpcy5fZmluYWwhPT1nbyYmZ28uY2FsbCh0aGlzKTt9SXQucHJvdG90eXBlLl9maW5hbD1nbztJdC5wcm90b3R5cGUuX3RyYW5zZm9ybT1mdW5jdGlvbih0LGUscil7dGhyb3cgbmV3IG4wKFwiX3RyYW5zZm9ybSgpXCIpfTtJdC5wcm90b3R5cGUuX3dyaXRlPWZ1bmN0aW9uKHQsZSxyKXtsZXQgaT10aGlzLl9yZWFkYWJsZVN0YXRlLG49dGhpcy5fd3JpdGFibGVTdGF0ZSxvPWkubGVuZ3RoO3RoaXMuX3RyYW5zZm9ybSh0LGUsKHMsYSk9PntpZihzKXtyKHMpO3JldHVybn1hIT1udWxsJiZ0aGlzLnB1c2goYSksbi5lbmRlZHx8bz09PWkubGVuZ3RofHxpLmxlbmd0aDxpLmhpZ2hXYXRlck1hcms/cigpOnRoaXNbYmldPXI7fSk7fTtJdC5wcm90b3R5cGUuX3JlYWQ9ZnVuY3Rpb24oKXtpZih0aGlzW2JpXSl7bGV0IHQ9dGhpc1tiaV07dGhpc1tiaV09bnVsbCx0KCk7fX07fSk7dmFyIF9vPU0oKEtSLFBoKT0+e3YoKTttKCk7XygpO3ZhcntPYmplY3RTZXRQcm90b3R5cGVPZjpCaH09Y2UoKTtQaC5leHBvcnRzPSRyO3ZhciB3bz1ibygpO0JoKCRyLnByb3RvdHlwZSx3by5wcm90b3R5cGUpO0JoKCRyLHdvKTtmdW5jdGlvbiAkcih0KXtpZighKHRoaXMgaW5zdGFuY2VvZiAkcikpcmV0dXJuIG5ldyAkcih0KTt3by5jYWxsKHRoaXMsdCk7fSRyLnByb3RvdHlwZS5fdHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxyKXtyKG51bGwsdCk7fTt9KTt2YXIgbW49TSgoaUMsTGgpPT57digpO20oKTtfKCk7dmFyIHdpPVV0KCkse0FycmF5SXNBcnJheTphMCxQcm9taXNlOmwwLFN5bWJvbEFzeW5jSXRlcmF0b3I6dTB9PWNlKCksX249bXQoKSx7b25jZTpmMH09SmUoKSxjMD10cigpLE9oPW50KCkse2FnZ3JlZ2F0ZVR3b0Vycm9yczpoMCxjb2Rlczp7RVJSX0lOVkFMSURfQVJHX1RZUEU6Um8sRVJSX0lOVkFMSURfUkVUVVJOX1ZBTFVFOm1vLEVSUl9NSVNTSU5HX0FSR1M6ZDAsRVJSX1NUUkVBTV9ERVNUUk9ZRUQ6cDAsRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0U6ZzB9LEFib3J0RXJyb3I6eTB9PVNlKCkse3ZhbGlkYXRlRnVuY3Rpb246YjAsdmFsaWRhdGVBYm9ydFNpZ25hbDp3MH09ZmkoKSx7aXNJdGVyYWJsZTpjcixpc1JlYWRhYmxlOnZvLGlzUmVhZGFibGVOb2RlU3RyZWFtOnduLGlzTm9kZVN0cmVhbTpraCxpc1RyYW5zZm9ybVN0cmVhbTpIcixpc1dlYlN0cmVhbTpfMCxpc1JlYWRhYmxlU3RyZWFtOkVvLGlzUmVhZGFibGVFbmRlZDptMH09dHQoKSx2MD1nbG9iYWxUaGlzLkFib3J0Q29udHJvbGxlcnx8SGkoKS5BYm9ydENvbnRyb2xsZXIsU28sQW87ZnVuY3Rpb24geGgodCxlLHIpe2xldCBpPSExO3Qub24oXCJjbG9zZVwiLCgpPT57aT0hMDt9KTtsZXQgbj1fbih0LHtyZWFkYWJsZTplLHdyaXRhYmxlOnJ9LG89PntpPSFvO30pO3JldHVybiB7ZGVzdHJveTpvPT57aXx8KGk9ITAsYzAuZGVzdHJveWVyKHQsb3x8bmV3IHAwKFwicGlwZVwiKSkpO30sY2xlYW51cDpufX1mdW5jdGlvbiBFMCh0KXtyZXR1cm4gYjAodFt0Lmxlbmd0aC0xXSxcInN0cmVhbXNbc3RyZWFtLmxlbmd0aCAtIDFdXCIpLHQucG9wKCl9ZnVuY3Rpb24gSW8odCl7aWYoY3IodCkpcmV0dXJuIHQ7aWYod24odCkpcmV0dXJuIFMwKHQpO3Rocm93IG5ldyBSbyhcInZhbFwiLFtcIlJlYWRhYmxlXCIsXCJJdGVyYWJsZVwiLFwiQXN5bmNJdGVyYWJsZVwiXSx0KX1hc3luYyBmdW5jdGlvbipTMCh0KXtBb3x8KEFvPWRpKCkpLHlpZWxkKkFvLnByb3RvdHlwZVt1MF0uY2FsbCh0KTt9YXN5bmMgZnVuY3Rpb24gYm4odCxlLHIse2VuZDppfSl7bGV0IG4sbz1udWxsLHM9Yz0+e2lmKGMmJihuPWMpLG8pe2xldCBoPW87bz1udWxsLGgoKTt9fSxhPSgpPT5uZXcgbDAoKGMsaCk9PntuP2gobik6bz0oKT0+e24/aChuKTpjKCk7fTt9KTtlLm9uKFwiZHJhaW5cIixzKTtsZXQgdT1fbihlLHtyZWFkYWJsZTohMX0scyk7dHJ5e2Uud3JpdGFibGVOZWVkRHJhaW4mJmF3YWl0IGEoKTtmb3IgYXdhaXQobGV0IGMgb2YgdCllLndyaXRlKGMpfHxhd2FpdCBhKCk7aSYmZS5lbmQoKSxhd2FpdCBhKCkscigpO31jYXRjaChjKXtyKG4hPT1jP2gwKG4sYyk6Yyk7fWZpbmFsbHl7dSgpLGUub2ZmKFwiZHJhaW5cIixzKTt9fWFzeW5jIGZ1bmN0aW9uIFRvKHQsZSxyLHtlbmQ6aX0pe0hyKGUpJiYoZT1lLndyaXRhYmxlKTtsZXQgbj1lLmdldFdyaXRlcigpO3RyeXtmb3IgYXdhaXQobGV0IG8gb2YgdClhd2FpdCBuLnJlYWR5LG4ud3JpdGUobykuY2F0Y2goKCk9Pnt9KTthd2FpdCBuLnJlYWR5LGkmJmF3YWl0IG4uY2xvc2UoKSxyKCk7fWNhdGNoKG8pe3RyeXthd2FpdCBuLmFib3J0KG8pLHIobyk7fWNhdGNoKHMpe3Iocyk7fX19ZnVuY3Rpb24gQTAoLi4udCl7cmV0dXJuIE1oKHQsZjAoRTAodCkpKX1mdW5jdGlvbiBNaCh0LGUscil7aWYodC5sZW5ndGg9PT0xJiZhMCh0WzBdKSYmKHQ9dFswXSksdC5sZW5ndGg8Mil0aHJvdyBuZXcgZDAoXCJzdHJlYW1zXCIpO2xldCBpPW5ldyB2MCxuPWkuc2lnbmFsLG89cj8uc2lnbmFsLHM9W107dzAobyxcIm9wdGlvbnMuc2lnbmFsXCIpO2Z1bmN0aW9uIGEoKXt5KG5ldyB5MCk7fW8/LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLGEpO2xldCB1LGMsaD1bXSxkPTA7ZnVuY3Rpb24gZyhDKXt5KEMsLS1kPT09MCk7fWZ1bmN0aW9uIHkoQyxSKXtpZihDJiYoIXV8fHUuY29kZT09PVwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIikmJih1PUMpLCEoIXUmJiFSKSl7Zm9yKDtoLmxlbmd0aDspaC5zaGlmdCgpKHUpO28/LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLGEpLGkuYWJvcnQoKSxSJiYodXx8cy5mb3JFYWNoKFU9PlUoKSksd2kubmV4dFRpY2soZSx1LGMpKTt9fWxldCB3O2ZvcihsZXQgQz0wO0M8dC5sZW5ndGg7QysrKXtsZXQgUj10W0NdLFU9Qzx0Lmxlbmd0aC0xLE49Qz4wLFc9VXx8cj8uZW5kIT09ITEsSz1DPT09dC5sZW5ndGgtMTtpZihraChSKSl7bGV0IHo9ZnVuY3Rpb24oUSl7USYmUS5uYW1lIT09XCJBYm9ydEVycm9yXCImJlEuY29kZSE9PVwiRVJSX1NUUkVBTV9QUkVNQVRVUkVfQ0xPU0VcIiYmZyhRKTt9O2lmKFcpe2xldHtkZXN0cm95OlEsY2xlYW51cDpkZX09eGgoUixVLE4pO2gucHVzaChRKSx2byhSKSYmSyYmcy5wdXNoKGRlKTt9Ui5vbihcImVycm9yXCIseiksdm8oUikmJksmJnMucHVzaCgoKT0+e1IucmVtb3ZlTGlzdGVuZXIoXCJlcnJvclwiLHopO30pO31pZihDPT09MClpZih0eXBlb2YgUj09XCJmdW5jdGlvblwiKXtpZih3PVIoe3NpZ25hbDpufSksIWNyKHcpKXRocm93IG5ldyBtbyhcIkl0ZXJhYmxlLCBBc3luY0l0ZXJhYmxlIG9yIFN0cmVhbVwiLFwic291cmNlXCIsdyl9ZWxzZSBjcihSKXx8d24oUil8fEhyKFIpP3c9Ujp3PU9oLmZyb20oUik7ZWxzZSBpZih0eXBlb2YgUj09XCJmdW5jdGlvblwiKXtpZihIcih3KSl7dmFyIEU7dz1JbygoRT13KT09PW51bGx8fEU9PT12b2lkIDA/dm9pZCAwOkUucmVhZGFibGUpO31lbHNlIHc9SW8odyk7aWYodz1SKHcse3NpZ25hbDpufSksVSl7aWYoIWNyKHcsITApKXRocm93IG5ldyBtbyhcIkFzeW5jSXRlcmFibGVcIixgdHJhbnNmb3JtWyR7Qy0xfV1gLHcpfWVsc2Uge3ZhciBTO1NvfHwoU289X28oKSk7bGV0IHo9bmV3IFNvKHtvYmplY3RNb2RlOiEwfSksUT0oUz13KT09PW51bGx8fFM9PT12b2lkIDA/dm9pZCAwOlMudGhlbjtpZih0eXBlb2YgUT09XCJmdW5jdGlvblwiKWQrKyxRLmNhbGwodyxwZT0+e2M9cGUscGUhPW51bGwmJnoud3JpdGUocGUpLFcmJnouZW5kKCksd2kubmV4dFRpY2soZyk7fSxwZT0+e3ouZGVzdHJveShwZSksd2kubmV4dFRpY2soZyxwZSk7fSk7ZWxzZSBpZihjcih3LCEwKSlkKyssYm4odyx6LGcse2VuZDpXfSk7ZWxzZSBpZihFbyh3KXx8SHIodykpe2xldCBwZT13LnJlYWRhYmxlfHx3O2QrKyxibihwZSx6LGcse2VuZDpXfSk7fWVsc2UgdGhyb3cgbmV3IG1vKFwiQXN5bmNJdGVyYWJsZSBvciBQcm9taXNlXCIsXCJkZXN0aW5hdGlvblwiLHcpO3c9ejtsZXR7ZGVzdHJveTpkZSxjbGVhbnVwOkd0fT14aCh3LCExLCEwKTtoLnB1c2goZGUpLEsmJnMucHVzaChHdCk7fX1lbHNlIGlmKGtoKFIpKXtpZih3bih3KSl7ZCs9MjtsZXQgej1JMCh3LFIsZyx7ZW5kOld9KTt2byhSKSYmSyYmcy5wdXNoKHopO31lbHNlIGlmKEhyKHcpfHxFbyh3KSl7bGV0IHo9dy5yZWFkYWJsZXx8dztkKyssYm4oeixSLGcse2VuZDpXfSk7fWVsc2UgaWYoY3IodykpZCsrLGJuKHcsUixnLHtlbmQ6V30pO2Vsc2UgdGhyb3cgbmV3IFJvKFwidmFsXCIsW1wiUmVhZGFibGVcIixcIkl0ZXJhYmxlXCIsXCJBc3luY0l0ZXJhYmxlXCIsXCJSZWFkYWJsZVN0cmVhbVwiLFwiVHJhbnNmb3JtU3RyZWFtXCJdLHcpO3c9Ujt9ZWxzZSBpZihfMChSKSl7aWYod24odykpZCsrLFRvKElvKHcpLFIsZyx7ZW5kOld9KTtlbHNlIGlmKEVvKHcpfHxjcih3KSlkKyssVG8odyxSLGcse2VuZDpXfSk7ZWxzZSBpZihIcih3KSlkKyssVG8ody5yZWFkYWJsZSxSLGcse2VuZDpXfSk7ZWxzZSB0aHJvdyBuZXcgUm8oXCJ2YWxcIixbXCJSZWFkYWJsZVwiLFwiSXRlcmFibGVcIixcIkFzeW5jSXRlcmFibGVcIixcIlJlYWRhYmxlU3RyZWFtXCIsXCJUcmFuc2Zvcm1TdHJlYW1cIl0sdyk7dz1SO31lbHNlIHc9T2guZnJvbShSKTt9cmV0dXJuIChuIT1udWxsJiZuLmFib3J0ZWR8fG8hPW51bGwmJm8uYWJvcnRlZCkmJndpLm5leHRUaWNrKGEpLHd9ZnVuY3Rpb24gSTAodCxlLHIse2VuZDppfSl7bGV0IG49ITE7aWYoZS5vbihcImNsb3NlXCIsKCk9PntufHxyKG5ldyBnMCk7fSksdC5waXBlKGUse2VuZDohMX0pLGkpe2xldCBzPWZ1bmN0aW9uKCl7bj0hMCxlLmVuZCgpO307bTAodCk/d2kubmV4dFRpY2socyk6dC5vbmNlKFwiZW5kXCIscyk7fWVsc2UgcigpO3JldHVybiBfbih0LHtyZWFkYWJsZTohMCx3cml0YWJsZTohMX0scz0+e2xldCBhPXQuX3JlYWRhYmxlU3RhdGU7cyYmcy5jb2RlPT09XCJFUlJfU1RSRUFNX1BSRU1BVFVSRV9DTE9TRVwiJiZhJiZhLmVuZGVkJiYhYS5lcnJvcmVkJiYhYS5lcnJvckVtaXR0ZWQ/dC5vbmNlKFwiZW5kXCIscikub25jZShcImVycm9yXCIscik6cihzKTt9KSxfbihlLHtyZWFkYWJsZTohMSx3cml0YWJsZTohMH0scil9TGguZXhwb3J0cz17cGlwZWxpbmVJbXBsOk1oLHBpcGVsaW5lOkEwfTt9KTt2YXIgQm89TSgoZEMsRmgpPT57digpO20oKTtfKCk7dmFye3BpcGVsaW5lOlQwfT1tbigpLHZuPW50KCkse2Rlc3Ryb3llcjpSMH09dHIoKSx7aXNOb2RlU3RyZWFtOkVuLGlzUmVhZGFibGU6VWgsaXNXcml0YWJsZTpOaCxpc1dlYlN0cmVhbTpDbyxpc1RyYW5zZm9ybVN0cmVhbTpocixpc1dyaXRhYmxlU3RyZWFtOnFoLGlzUmVhZGFibGVTdHJlYW06RGh9PXR0KCkse0Fib3J0RXJyb3I6QzAsY29kZXM6e0VSUl9JTlZBTElEX0FSR19WQUxVRTpqaCxFUlJfTUlTU0lOR19BUkdTOkIwfX09U2UoKSxQMD1tdCgpO0ZoLmV4cG9ydHM9ZnVuY3Rpb24oLi4uZSl7aWYoZS5sZW5ndGg9PT0wKXRocm93IG5ldyBCMChcInN0cmVhbXNcIik7aWYoZS5sZW5ndGg9PT0xKXJldHVybiB2bi5mcm9tKGVbMF0pO2xldCByPVsuLi5lXTtpZih0eXBlb2YgZVswXT09XCJmdW5jdGlvblwiJiYoZVswXT12bi5mcm9tKGVbMF0pKSx0eXBlb2YgZVtlLmxlbmd0aC0xXT09XCJmdW5jdGlvblwiKXtsZXQgeT1lLmxlbmd0aC0xO2VbeV09dm4uZnJvbShlW3ldKTt9Zm9yKGxldCB5PTA7eTxlLmxlbmd0aDsrK3kpaWYoISghRW4oZVt5XSkmJiFDbyhlW3ldKSkpe2lmKHk8ZS5sZW5ndGgtMSYmIShVaChlW3ldKXx8RGgoZVt5XSl8fGhyKGVbeV0pKSl0aHJvdyBuZXcgamgoYHN0cmVhbXNbJHt5fV1gLHJbeV0sXCJtdXN0IGJlIHJlYWRhYmxlXCIpO2lmKHk+MCYmIShOaChlW3ldKXx8cWgoZVt5XSl8fGhyKGVbeV0pKSl0aHJvdyBuZXcgamgoYHN0cmVhbXNbJHt5fV1gLHJbeV0sXCJtdXN0IGJlIHdyaXRhYmxlXCIpfWxldCBpLG4sbyxzLGE7ZnVuY3Rpb24gdSh5KXtsZXQgdz1zO3M9bnVsbCx3P3coeSk6eT9hLmRlc3Ryb3koeSk6IWcmJiFkJiZhLmRlc3Ryb3koKTt9bGV0IGM9ZVswXSxoPVQwKGUsdSksZD0hIShOaChjKXx8cWgoYyl8fGhyKGMpKSxnPSEhKFVoKGgpfHxEaChoKXx8aHIoaCkpO2lmKGE9bmV3IHZuKHt3cml0YWJsZU9iamVjdE1vZGU6ISEoYyE9bnVsbCYmYy53cml0YWJsZU9iamVjdE1vZGUpLHJlYWRhYmxlT2JqZWN0TW9kZTohIShoIT1udWxsJiZoLndyaXRhYmxlT2JqZWN0TW9kZSksd3JpdGFibGU6ZCxyZWFkYWJsZTpnfSksZCl7aWYoRW4oYykpYS5fd3JpdGU9ZnVuY3Rpb24odyxFLFMpe2Mud3JpdGUodyxFKT9TKCk6aT1TO30sYS5fZmluYWw9ZnVuY3Rpb24odyl7Yy5lbmQoKSxuPXc7fSxjLm9uKFwiZHJhaW5cIixmdW5jdGlvbigpe2lmKGkpe2xldCB3PWk7aT1udWxsLHcoKTt9fSk7ZWxzZSBpZihDbyhjKSl7bGV0IEU9KGhyKGMpP2Mud3JpdGFibGU6YykuZ2V0V3JpdGVyKCk7YS5fd3JpdGU9YXN5bmMgZnVuY3Rpb24oUyxJLEMpe3RyeXthd2FpdCBFLnJlYWR5LEUud3JpdGUoUykuY2F0Y2goKCk9Pnt9KSxDKCk7fWNhdGNoKFIpe0MoUik7fX0sYS5fZmluYWw9YXN5bmMgZnVuY3Rpb24oUyl7dHJ5e2F3YWl0IEUucmVhZHksRS5jbG9zZSgpLmNhdGNoKCgpPT57fSksbj1TO31jYXRjaChJKXtTKEkpO319O31sZXQgeT1ocihoKT9oLnJlYWRhYmxlOmg7UDAoeSwoKT0+e2lmKG4pe2xldCB3PW47bj1udWxsLHcoKTt9fSk7fWlmKGcpe2lmKEVuKGgpKWgub24oXCJyZWFkYWJsZVwiLGZ1bmN0aW9uKCl7aWYobyl7bGV0IHk9bztvPW51bGwseSgpO319KSxoLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXthLnB1c2gobnVsbCk7fSksYS5fcmVhZD1mdW5jdGlvbigpe2Zvcig7Oyl7bGV0IHk9aC5yZWFkKCk7aWYoeT09PW51bGwpe289YS5fcmVhZDtyZXR1cm59aWYoIWEucHVzaCh5KSlyZXR1cm59fTtlbHNlIGlmKENvKGgpKXtsZXQgdz0oaHIoaCk/aC5yZWFkYWJsZTpoKS5nZXRSZWFkZXIoKTthLl9yZWFkPWFzeW5jIGZ1bmN0aW9uKCl7Zm9yKDs7KXRyeXtsZXR7dmFsdWU6RSxkb25lOlN9PWF3YWl0IHcucmVhZCgpO2lmKCFhLnB1c2goRSkpcmV0dXJuO2lmKFMpe2EucHVzaChudWxsKTtyZXR1cm59fWNhdGNoe3JldHVybn19O319cmV0dXJuIGEuX2Rlc3Ryb3k9ZnVuY3Rpb24oeSx3KXsheSYmcyE9PW51bGwmJih5PW5ldyBDMCksbz1udWxsLGk9bnVsbCxuPW51bGwscz09PW51bGw/dyh5KToocz13LEVuKGgpJiZSMChoLHkpKTt9LGF9O30pO3ZhciBRaD1NKChTQyxrbyk9Pnt2KCk7bSgpO18oKTt2YXIgVmg9Z2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXJ8fEhpKCkuQWJvcnRDb250cm9sbGVyLHtjb2Rlczp7RVJSX0lOVkFMSURfQVJHX1ZBTFVFOk8wLEVSUl9JTlZBTElEX0FSR19UWVBFOl9pLEVSUl9NSVNTSU5HX0FSR1M6azAsRVJSX09VVF9PRl9SQU5HRTp4MH0sQWJvcnRFcnJvcjpzdH09U2UoKSx7dmFsaWRhdGVBYm9ydFNpZ25hbDpkcix2YWxpZGF0ZUludGVnZXI6TTAsdmFsaWRhdGVPYmplY3Q6cHJ9PWZpKCksTDA9Y2UoKS5TeW1ib2woXCJrV2Vha1wiKSx7ZmluaXNoZWQ6VTB9PW10KCksTjA9Qm8oKSx7YWRkQWJvcnRTaWduYWxOb1ZhbGlkYXRlOnEwfT1jaSgpLHtpc1dyaXRhYmxlOkQwLGlzTm9kZVN0cmVhbTpqMH09dHQoKSx7QXJyYXlQcm90b3R5cGVQdXNoOkYwLE1hdGhGbG9vcjpXMCxOdW1iZXI6JDAsTnVtYmVySXNOYU46SDAsUHJvbWlzZTpXaCxQcm9taXNlUmVqZWN0OiRoLFByb21pc2VQcm90b3R5cGVUaGVuOlYwLFN5bWJvbDp6aH09Y2UoKSxTbj16aChcImtFbXB0eVwiKSxIaD16aChcImtFb2ZcIik7ZnVuY3Rpb24gejAodCxlKXtpZihlIT1udWxsJiZwcihlLFwib3B0aW9uc1wiKSxlPy5zaWduYWwhPW51bGwmJmRyKGUuc2lnbmFsLFwib3B0aW9ucy5zaWduYWxcIiksajAodCkmJiFEMCh0KSl0aHJvdyBuZXcgTzAoXCJzdHJlYW1cIix0LFwibXVzdCBiZSB3cml0YWJsZVwiKTtsZXQgcj1OMCh0aGlzLHQpO3JldHVybiBlIT1udWxsJiZlLnNpZ25hbCYmcTAoZS5zaWduYWwscikscn1mdW5jdGlvbiBBbih0LGUpe2lmKHR5cGVvZiB0IT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IF9pKFwiZm5cIixbXCJGdW5jdGlvblwiLFwiQXN5bmNGdW5jdGlvblwiXSx0KTtlIT1udWxsJiZwcihlLFwib3B0aW9uc1wiKSxlPy5zaWduYWwhPW51bGwmJmRyKGUuc2lnbmFsLFwib3B0aW9ucy5zaWduYWxcIik7bGV0IHI9MTtyZXR1cm4gZT8uY29uY3VycmVuY3khPW51bGwmJihyPVcwKGUuY29uY3VycmVuY3kpKSxNMChyLFwiY29uY3VycmVuY3lcIiwxKSxhc3luYyBmdW5jdGlvbiooKXt2YXIgbixvO2xldCBzPW5ldyBWaCxhPXRoaXMsdT1bXSxjPXMuc2lnbmFsLGg9e3NpZ25hbDpjfSxkPSgpPT5zLmFib3J0KCk7ZSE9bnVsbCYmKG49ZS5zaWduYWwpIT09bnVsbCYmbiE9PXZvaWQgMCYmbi5hYm9ydGVkJiZkKCksZT09bnVsbHx8KG89ZS5zaWduYWwpPT09bnVsbHx8bz09PXZvaWQgMHx8by5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIixkKTtsZXQgZyx5LHc9ITE7ZnVuY3Rpb24gRSgpe3c9ITA7fWFzeW5jIGZ1bmN0aW9uIFMoKXt0cnl7Zm9yIGF3YWl0KGxldCBSIG9mIGEpe3ZhciBJO2lmKHcpcmV0dXJuO2lmKGMuYWJvcnRlZCl0aHJvdyBuZXcgc3Q7dHJ5e1I9dChSLGgpO31jYXRjaChVKXtSPSRoKFUpO31SIT09U24mJih0eXBlb2YoKEk9Uik9PT1udWxsfHxJPT09dm9pZCAwP3ZvaWQgMDpJLmNhdGNoKT09XCJmdW5jdGlvblwiJiZSLmNhdGNoKEUpLHUucHVzaChSKSxnJiYoZygpLGc9bnVsbCksIXcmJnUubGVuZ3RoJiZ1Lmxlbmd0aD49ciYmYXdhaXQgbmV3IFdoKFU9Pnt5PVU7fSkpO311LnB1c2goSGgpO31jYXRjaChSKXtsZXQgVT0kaChSKTtWMChVLHZvaWQgMCxFKSx1LnB1c2goVSk7fWZpbmFsbHl7dmFyIEM7dz0hMCxnJiYoZygpLGc9bnVsbCksZT09bnVsbHx8KEM9ZS5zaWduYWwpPT09bnVsbHx8Qz09PXZvaWQgMHx8Qy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIixkKTt9fVMoKTt0cnl7Zm9yKDs7KXtmb3IoO3UubGVuZ3RoPjA7KXtsZXQgST1hd2FpdCB1WzBdO2lmKEk9PT1IaClyZXR1cm47aWYoYy5hYm9ydGVkKXRocm93IG5ldyBzdDtJIT09U24mJih5aWVsZCBJKSx1LnNoaWZ0KCkseSYmKHkoKSx5PW51bGwpO31hd2FpdCBuZXcgV2goST0+e2c9STt9KTt9fWZpbmFsbHl7cy5hYm9ydCgpLHc9ITAseSYmKHkoKSx5PW51bGwpO319LmNhbGwodGhpcyl9ZnVuY3Rpb24gSzAodD12b2lkIDApe3JldHVybiB0IT1udWxsJiZwcih0LFwib3B0aW9uc1wiKSx0Py5zaWduYWwhPW51bGwmJmRyKHQuc2lnbmFsLFwib3B0aW9ucy5zaWduYWxcIiksYXN5bmMgZnVuY3Rpb24qKCl7bGV0IHI9MDtmb3IgYXdhaXQobGV0IG4gb2YgdGhpcyl7dmFyIGk7aWYodCE9bnVsbCYmKGk9dC5zaWduYWwpIT09bnVsbCYmaSE9PXZvaWQgMCYmaS5hYm9ydGVkKXRocm93IG5ldyBzdCh7Y2F1c2U6dC5zaWduYWwucmVhc29ufSk7eWllbGQgW3IrKyxuXTt9fS5jYWxsKHRoaXMpfWFzeW5jIGZ1bmN0aW9uIEtoKHQsZT12b2lkIDApe2ZvciBhd2FpdChsZXQgciBvZiBPby5jYWxsKHRoaXMsdCxlKSlyZXR1cm4gITA7cmV0dXJuICExfWFzeW5jIGZ1bmN0aW9uIEcwKHQsZT12b2lkIDApe2lmKHR5cGVvZiB0IT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IF9pKFwiZm5cIixbXCJGdW5jdGlvblwiLFwiQXN5bmNGdW5jdGlvblwiXSx0KTtyZXR1cm4gIWF3YWl0IEtoLmNhbGwodGhpcyxhc3luYyguLi5yKT0+IWF3YWl0IHQoLi4uciksZSl9YXN5bmMgZnVuY3Rpb24gUTAodCxlKXtmb3IgYXdhaXQobGV0IHIgb2YgT28uY2FsbCh0aGlzLHQsZSkpcmV0dXJuIHJ9YXN5bmMgZnVuY3Rpb24gWTAodCxlKXtpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBfaShcImZuXCIsW1wiRnVuY3Rpb25cIixcIkFzeW5jRnVuY3Rpb25cIl0sdCk7YXN5bmMgZnVuY3Rpb24gcihpLG4pe3JldHVybiBhd2FpdCB0KGksbiksU259Zm9yIGF3YWl0KGxldCBpIG9mIEFuLmNhbGwodGhpcyxyLGUpKTt9ZnVuY3Rpb24gT28odCxlKXtpZih0eXBlb2YgdCE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBfaShcImZuXCIsW1wiRnVuY3Rpb25cIixcIkFzeW5jRnVuY3Rpb25cIl0sdCk7YXN5bmMgZnVuY3Rpb24gcihpLG4pe3JldHVybiBhd2FpdCB0KGksbik/aTpTbn1yZXR1cm4gQW4uY2FsbCh0aGlzLHIsZSl9dmFyIFBvPWNsYXNzIGV4dGVuZHMgazB7Y29uc3RydWN0b3IoKXtzdXBlcihcInJlZHVjZVwiKSx0aGlzLm1lc3NhZ2U9XCJSZWR1Y2Ugb2YgYW4gZW1wdHkgc3RyZWFtIHJlcXVpcmVzIGFuIGluaXRpYWwgdmFsdWVcIjt9fTthc3luYyBmdW5jdGlvbiBKMCh0LGUscil7dmFyIGk7aWYodHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgX2koXCJyZWR1Y2VyXCIsW1wiRnVuY3Rpb25cIixcIkFzeW5jRnVuY3Rpb25cIl0sdCk7ciE9bnVsbCYmcHIocixcIm9wdGlvbnNcIikscj8uc2lnbmFsIT1udWxsJiZkcihyLnNpZ25hbCxcIm9wdGlvbnMuc2lnbmFsXCIpO2xldCBuPWFyZ3VtZW50cy5sZW5ndGg+MTtpZihyIT1udWxsJiYoaT1yLnNpZ25hbCkhPT1udWxsJiZpIT09dm9pZCAwJiZpLmFib3J0ZWQpe2xldCBjPW5ldyBzdCh2b2lkIDAse2NhdXNlOnIuc2lnbmFsLnJlYXNvbn0pO3Rocm93IHRoaXMub25jZShcImVycm9yXCIsKCk9Pnt9KSxhd2FpdCBVMCh0aGlzLmRlc3Ryb3koYykpLGN9bGV0IG89bmV3IFZoLHM9by5zaWduYWw7aWYociE9bnVsbCYmci5zaWduYWwpe2xldCBjPXtvbmNlOiEwLFtMMF06dGhpc307ci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsKCk9Pm8uYWJvcnQoKSxjKTt9bGV0IGE9ITE7dHJ5e2ZvciBhd2FpdChsZXQgYyBvZiB0aGlzKXt2YXIgdTtpZihhPSEwLHIhPW51bGwmJih1PXIuc2lnbmFsKSE9PW51bGwmJnUhPT12b2lkIDAmJnUuYWJvcnRlZCl0aHJvdyBuZXcgc3Q7bj9lPWF3YWl0IHQoZSxjLHtzaWduYWw6c30pOihlPWMsbj0hMCk7fWlmKCFhJiYhbil0aHJvdyBuZXcgUG99ZmluYWxseXtvLmFib3J0KCk7fXJldHVybiBlfWFzeW5jIGZ1bmN0aW9uIFgwKHQpe3QhPW51bGwmJnByKHQsXCJvcHRpb25zXCIpLHQ/LnNpZ25hbCE9bnVsbCYmZHIodC5zaWduYWwsXCJvcHRpb25zLnNpZ25hbFwiKTtsZXQgZT1bXTtmb3IgYXdhaXQobGV0IGkgb2YgdGhpcyl7dmFyIHI7aWYodCE9bnVsbCYmKHI9dC5zaWduYWwpIT09bnVsbCYmciE9PXZvaWQgMCYmci5hYm9ydGVkKXRocm93IG5ldyBzdCh2b2lkIDAse2NhdXNlOnQuc2lnbmFsLnJlYXNvbn0pO0YwKGUsaSk7fXJldHVybiBlfWZ1bmN0aW9uIFowKHQsZSl7bGV0IHI9QW4uY2FsbCh0aGlzLHQsZSk7cmV0dXJuIGFzeW5jIGZ1bmN0aW9uKigpe2ZvciBhd2FpdChsZXQgbiBvZiByKXlpZWxkKm47fS5jYWxsKHRoaXMpfWZ1bmN0aW9uIEdoKHQpe2lmKHQ9JDAodCksSDAodCkpcmV0dXJuIDA7aWYodDwwKXRocm93IG5ldyB4MChcIm51bWJlclwiLFwiPj0gMFwiLHQpO3JldHVybiB0fWZ1bmN0aW9uIGVtKHQsZT12b2lkIDApe3JldHVybiBlIT1udWxsJiZwcihlLFwib3B0aW9uc1wiKSxlPy5zaWduYWwhPW51bGwmJmRyKGUuc2lnbmFsLFwib3B0aW9ucy5zaWduYWxcIiksdD1HaCh0KSxhc3luYyBmdW5jdGlvbiooKXt2YXIgaTtpZihlIT1udWxsJiYoaT1lLnNpZ25hbCkhPT1udWxsJiZpIT09dm9pZCAwJiZpLmFib3J0ZWQpdGhyb3cgbmV3IHN0O2ZvciBhd2FpdChsZXQgbyBvZiB0aGlzKXt2YXIgbjtpZihlIT1udWxsJiYobj1lLnNpZ25hbCkhPT1udWxsJiZuIT09dm9pZCAwJiZuLmFib3J0ZWQpdGhyb3cgbmV3IHN0O3QtLTw9MCYmKHlpZWxkIG8pO319LmNhbGwodGhpcyl9ZnVuY3Rpb24gdG0odCxlPXZvaWQgMCl7cmV0dXJuIGUhPW51bGwmJnByKGUsXCJvcHRpb25zXCIpLGU/LnNpZ25hbCE9bnVsbCYmZHIoZS5zaWduYWwsXCJvcHRpb25zLnNpZ25hbFwiKSx0PUdoKHQpLGFzeW5jIGZ1bmN0aW9uKigpe3ZhciBpO2lmKGUhPW51bGwmJihpPWUuc2lnbmFsKSE9PW51bGwmJmkhPT12b2lkIDAmJmkuYWJvcnRlZCl0aHJvdyBuZXcgc3Q7Zm9yIGF3YWl0KGxldCBvIG9mIHRoaXMpe3ZhciBuO2lmKGUhPW51bGwmJihuPWUuc2lnbmFsKSE9PW51bGwmJm4hPT12b2lkIDAmJm4uYWJvcnRlZCl0aHJvdyBuZXcgc3Q7aWYodC0tID4wKXlpZWxkIG87ZWxzZSByZXR1cm59fS5jYWxsKHRoaXMpfWtvLmV4cG9ydHMuc3RyZWFtUmV0dXJuaW5nT3BlcmF0b3JzPXthc0luZGV4ZWRQYWlyczpLMCxkcm9wOmVtLGZpbHRlcjpPbyxmbGF0TWFwOlowLG1hcDpBbix0YWtlOnRtLGNvbXBvc2U6ejB9O2tvLmV4cG9ydHMucHJvbWlzZVJldHVybmluZ09wZXJhdG9ycz17ZXZlcnk6RzAsZm9yRWFjaDpZMCxyZWR1Y2U6SjAsdG9BcnJheTpYMCxzb21lOktoLGZpbmQ6UTB9O30pO3ZhciB4bz1NKCh4QyxZaCk9Pnt2KCk7bSgpO18oKTt2YXJ7QXJyYXlQcm90b3R5cGVQb3A6cm0sUHJvbWlzZTppbX09Y2UoKSx7aXNJdGVyYWJsZTpubSxpc05vZGVTdHJlYW06c20saXNXZWJTdHJlYW06b219PXR0KCkse3BpcGVsaW5lSW1wbDphbX09bW4oKSx7ZmluaXNoZWQ6bG19PW10KCk7TW8oKTtmdW5jdGlvbiB1bSguLi50KXtyZXR1cm4gbmV3IGltKChlLHIpPT57bGV0IGksbixvPXRbdC5sZW5ndGgtMV07aWYobyYmdHlwZW9mIG89PVwib2JqZWN0XCImJiFzbShvKSYmIW5tKG8pJiYhb20obykpe2xldCBzPXJtKHQpO2k9cy5zaWduYWwsbj1zLmVuZDt9YW0odCwocyxhKT0+e3M/cihzKTplKGEpO30se3NpZ25hbDppLGVuZDpufSk7fSl9WWguZXhwb3J0cz17ZmluaXNoZWQ6bG0scGlwZWxpbmU6dW19O30pO3ZhciBNbz1NKCgkQyxzZCk9Pnt2KCk7bSgpO18oKTt2YXJ7QnVmZmVyOmZtfT0oeWUoKSxYKF9lKSkse09iamVjdERlZmluZVByb3BlcnR5OlR0LE9iamVjdEtleXM6WmgsUmVmbGVjdEFwcGx5OmVkfT1jZSgpLHtwcm9taXNpZnk6e2N1c3RvbTp0ZH19PUplKCkse3N0cmVhbVJldHVybmluZ09wZXJhdG9yczpKaCxwcm9taXNlUmV0dXJuaW5nT3BlcmF0b3JzOlhofT1RaCgpLHtjb2Rlczp7RVJSX0lMTEVHQUxfQ09OU1RSVUNUT1I6cmR9fT1TZSgpLGNtPUJvKCkse3BpcGVsaW5lOmlkfT1tbigpLHtkZXN0cm95ZXI6aG19PXRyKCksbmQ9bXQoKSxMbz14bygpLFVvPXR0KCksbGU9c2QuZXhwb3J0cz10bigpLlN0cmVhbTtsZS5pc0Rpc3R1cmJlZD1Vby5pc0Rpc3R1cmJlZDtsZS5pc0Vycm9yZWQ9VW8uaXNFcnJvcmVkO2xlLmlzUmVhZGFibGU9VW8uaXNSZWFkYWJsZTtsZS5SZWFkYWJsZT1kaSgpO2ZvcihsZXQgdCBvZiBaaChKaCkpe2xldCByPWZ1bmN0aW9uKC4uLmkpe2lmKG5ldy50YXJnZXQpdGhyb3cgcmQoKTtyZXR1cm4gbGUuUmVhZGFibGUuZnJvbShlZChlLHRoaXMsaSkpfTtsZXQgZT1KaFt0XTtUdChyLFwibmFtZVwiLHtfX3Byb3RvX186bnVsbCx2YWx1ZTplLm5hbWV9KSxUdChyLFwibGVuZ3RoXCIse19fcHJvdG9fXzpudWxsLHZhbHVlOmUubGVuZ3RofSksVHQobGUuUmVhZGFibGUucHJvdG90eXBlLHQse19fcHJvdG9fXzpudWxsLHZhbHVlOnIsZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTt9Zm9yKGxldCB0IG9mIFpoKFhoKSl7bGV0IHI9ZnVuY3Rpb24oLi4ubil7aWYobmV3LnRhcmdldCl0aHJvdyByZCgpO3JldHVybiBlZChlLHRoaXMsbil9O2xldCBlPVhoW3RdO1R0KHIsXCJuYW1lXCIse19fcHJvdG9fXzpudWxsLHZhbHVlOmUubmFtZX0pLFR0KHIsXCJsZW5ndGhcIix7X19wcm90b19fOm51bGwsdmFsdWU6ZS5sZW5ndGh9KSxUdChsZS5SZWFkYWJsZS5wcm90b3R5cGUsdCx7X19wcm90b19fOm51bGwsdmFsdWU6cixlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pO31sZS5Xcml0YWJsZT11bygpO2xlLkR1cGxleD1udCgpO2xlLlRyYW5zZm9ybT1ibygpO2xlLlBhc3NUaHJvdWdoPV9vKCk7bGUucGlwZWxpbmU9aWQ7dmFye2FkZEFib3J0U2lnbmFsOmRtfT1jaSgpO2xlLmFkZEFib3J0U2lnbmFsPWRtO2xlLmZpbmlzaGVkPW5kO2xlLmRlc3Ryb3k9aG07bGUuY29tcG9zZT1jbTtUdChsZSxcInByb21pc2VzXCIse19fcHJvdG9fXzpudWxsLGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldCgpe3JldHVybiBMb319KTtUdChpZCx0ZCx7X19wcm90b19fOm51bGwsZW51bWVyYWJsZTohMCxnZXQoKXtyZXR1cm4gTG8ucGlwZWxpbmV9fSk7VHQobmQsdGQse19fcHJvdG9fXzpudWxsLGVudW1lcmFibGU6ITAsZ2V0KCl7cmV0dXJuIExvLmZpbmlzaGVkfX0pO2xlLlN0cmVhbT1sZTtsZS5faXNVaW50OEFycmF5PWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgVWludDhBcnJheX07bGUuX3VpbnQ4QXJyYXlUb0J1ZmZlcj1mdW5jdGlvbihlKXtyZXR1cm4gZm0uZnJvbShlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoKX07fSk7dmFyIER0PU0oKFpDLHVlKT0+e3YoKTttKCk7XygpO3ZhciBoZT1NbygpLHBtPXhvKCksZ209aGUuUmVhZGFibGUuZGVzdHJveTt1ZS5leHBvcnRzPWhlLlJlYWRhYmxlO3VlLmV4cG9ydHMuX3VpbnQ4QXJyYXlUb0J1ZmZlcj1oZS5fdWludDhBcnJheVRvQnVmZmVyO3VlLmV4cG9ydHMuX2lzVWludDhBcnJheT1oZS5faXNVaW50OEFycmF5O3VlLmV4cG9ydHMuaXNEaXN0dXJiZWQ9aGUuaXNEaXN0dXJiZWQ7dWUuZXhwb3J0cy5pc0Vycm9yZWQ9aGUuaXNFcnJvcmVkO3VlLmV4cG9ydHMuaXNSZWFkYWJsZT1oZS5pc1JlYWRhYmxlO3VlLmV4cG9ydHMuUmVhZGFibGU9aGUuUmVhZGFibGU7dWUuZXhwb3J0cy5Xcml0YWJsZT1oZS5Xcml0YWJsZTt1ZS5leHBvcnRzLkR1cGxleD1oZS5EdXBsZXg7dWUuZXhwb3J0cy5UcmFuc2Zvcm09aGUuVHJhbnNmb3JtO3VlLmV4cG9ydHMuUGFzc1Rocm91Z2g9aGUuUGFzc1Rocm91Z2g7dWUuZXhwb3J0cy5hZGRBYm9ydFNpZ25hbD1oZS5hZGRBYm9ydFNpZ25hbDt1ZS5leHBvcnRzLmZpbmlzaGVkPWhlLmZpbmlzaGVkO3VlLmV4cG9ydHMuZGVzdHJveT1oZS5kZXN0cm95O3VlLmV4cG9ydHMuZGVzdHJveT1nbTt1ZS5leHBvcnRzLnBpcGVsaW5lPWhlLnBpcGVsaW5lO3VlLmV4cG9ydHMuY29tcG9zZT1oZS5jb21wb3NlO09iamVjdC5kZWZpbmVQcm9wZXJ0eShoZSxcInByb21pc2VzXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLGdldCgpe3JldHVybiBwbX19KTt1ZS5leHBvcnRzLlN0cmVhbT1oZS5TdHJlYW07dWUuZXhwb3J0cy5kZWZhdWx0PXVlLmV4cG9ydHM7fSk7dmFyIG9kPU0oKHVCLHFvKT0+e3YoKTttKCk7XygpO3R5cGVvZiBPYmplY3QuY3JlYXRlPT1cImZ1bmN0aW9uXCI/cW8uZXhwb3J0cz1mdW5jdGlvbihlLHIpe3ImJihlLnN1cGVyXz1yLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoci5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pKTt9OnFvLmV4cG9ydHM9ZnVuY3Rpb24oZSxyKXtpZihyKXtlLnN1cGVyXz1yO3ZhciBpPWZ1bmN0aW9uKCl7fTtpLnByb3RvdHlwZT1yLnByb3RvdHlwZSxlLnByb3RvdHlwZT1uZXcgaSxlLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lO319O30pO3ZhciB1ZD1NKChfQixsZCk9Pnt2KCk7bSgpO18oKTt2YXJ7QnVmZmVyOnplfT0oeWUoKSxYKF9lKSksYWQ9U3ltYm9sLmZvcihcIkJ1ZmZlckxpc3RcIik7ZnVuY3Rpb24gZWUodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgZWUpKXJldHVybiBuZXcgZWUodCk7ZWUuX2luaXQuY2FsbCh0aGlzLHQpO31lZS5faW5pdD1mdW5jdGlvbihlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxhZCx7dmFsdWU6ITB9KSx0aGlzLl9idWZzPVtdLHRoaXMubGVuZ3RoPTAsZSYmdGhpcy5hcHBlbmQoZSk7fTtlZS5wcm90b3R5cGUuX25ldz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IGVlKGUpfTtlZS5wcm90b3R5cGUuX29mZnNldD1mdW5jdGlvbihlKXtpZihlPT09MClyZXR1cm4gWzAsMF07bGV0IHI9MDtmb3IobGV0IGk9MDtpPHRoaXMuX2J1ZnMubGVuZ3RoO2krKyl7bGV0IG49cit0aGlzLl9idWZzW2ldLmxlbmd0aDtpZihlPG58fGk9PT10aGlzLl9idWZzLmxlbmd0aC0xKXJldHVybiBbaSxlLXJdO3I9bjt9fTtlZS5wcm90b3R5cGUuX3JldmVyc2VPZmZzZXQ9ZnVuY3Rpb24odCl7bGV0IGU9dFswXSxyPXRbMV07Zm9yKGxldCBpPTA7aTxlO2krKylyKz10aGlzLl9idWZzW2ldLmxlbmd0aDtyZXR1cm4gcn07ZWUucHJvdG90eXBlLmdldD1mdW5jdGlvbihlKXtpZihlPnRoaXMubGVuZ3RofHxlPDApcmV0dXJuO2xldCByPXRoaXMuX29mZnNldChlKTtyZXR1cm4gdGhpcy5fYnVmc1tyWzBdXVtyWzFdXX07ZWUucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKGUscil7cmV0dXJuIHR5cGVvZiBlPT1cIm51bWJlclwiJiZlPDAmJihlKz10aGlzLmxlbmd0aCksdHlwZW9mIHI9PVwibnVtYmVyXCImJnI8MCYmKHIrPXRoaXMubGVuZ3RoKSx0aGlzLmNvcHkobnVsbCwwLGUscil9O2VlLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGUscixpLG4pe2lmKCh0eXBlb2YgaSE9XCJudW1iZXJcInx8aTwwKSYmKGk9MCksKHR5cGVvZiBuIT1cIm51bWJlclwifHxuPnRoaXMubGVuZ3RoKSYmKG49dGhpcy5sZW5ndGgpLGk+PXRoaXMubGVuZ3RofHxuPD0wKXJldHVybiBlfHx6ZS5hbGxvYygwKTtsZXQgbz0hIWUscz10aGlzLl9vZmZzZXQoaSksYT1uLWksdT1hLGM9byYmcnx8MCxoPXNbMV07aWYoaT09PTAmJm49PT10aGlzLmxlbmd0aCl7aWYoIW8pcmV0dXJuIHRoaXMuX2J1ZnMubGVuZ3RoPT09MT90aGlzLl9idWZzWzBdOnplLmNvbmNhdCh0aGlzLl9idWZzLHRoaXMubGVuZ3RoKTtmb3IobGV0IGQ9MDtkPHRoaXMuX2J1ZnMubGVuZ3RoO2QrKyl0aGlzLl9idWZzW2RdLmNvcHkoZSxjKSxjKz10aGlzLl9idWZzW2RdLmxlbmd0aDtyZXR1cm4gZX1pZih1PD10aGlzLl9idWZzW3NbMF1dLmxlbmd0aC1oKXJldHVybiBvP3RoaXMuX2J1ZnNbc1swXV0uY29weShlLHIsaCxoK3UpOnRoaXMuX2J1ZnNbc1swXV0uc2xpY2UoaCxoK3UpO298fChlPXplLmFsbG9jVW5zYWZlKGEpKTtmb3IobGV0IGQ9c1swXTtkPHRoaXMuX2J1ZnMubGVuZ3RoO2QrKyl7bGV0IGc9dGhpcy5fYnVmc1tkXS5sZW5ndGgtaDtpZih1PmcpdGhpcy5fYnVmc1tkXS5jb3B5KGUsYyxoKSxjKz1nO2Vsc2Uge3RoaXMuX2J1ZnNbZF0uY29weShlLGMsaCxoK3UpLGMrPWc7YnJlYWt9dS09ZyxoJiYoaD0wKTt9cmV0dXJuIGUubGVuZ3RoPmM/ZS5zbGljZSgwLGMpOmV9O2VlLnByb3RvdHlwZS5zaGFsbG93U2xpY2U9ZnVuY3Rpb24oZSxyKXtpZihlPWV8fDAscj10eXBlb2YgciE9XCJudW1iZXJcIj90aGlzLmxlbmd0aDpyLGU8MCYmKGUrPXRoaXMubGVuZ3RoKSxyPDAmJihyKz10aGlzLmxlbmd0aCksZT09PXIpcmV0dXJuIHRoaXMuX25ldygpO2xldCBpPXRoaXMuX29mZnNldChlKSxuPXRoaXMuX29mZnNldChyKSxvPXRoaXMuX2J1ZnMuc2xpY2UoaVswXSxuWzBdKzEpO3JldHVybiBuWzFdPT09MD9vLnBvcCgpOm9bby5sZW5ndGgtMV09b1tvLmxlbmd0aC0xXS5zbGljZSgwLG5bMV0pLGlbMV0hPT0wJiYob1swXT1vWzBdLnNsaWNlKGlbMV0pKSx0aGlzLl9uZXcobyl9O2VlLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbihlLHIsaSl7cmV0dXJuIHRoaXMuc2xpY2UocixpKS50b1N0cmluZyhlKX07ZWUucHJvdG90eXBlLmNvbnN1bWU9ZnVuY3Rpb24oZSl7aWYoZT1NYXRoLnRydW5jKGUpLE51bWJlci5pc05hTihlKXx8ZTw9MClyZXR1cm4gdGhpcztmb3IoO3RoaXMuX2J1ZnMubGVuZ3RoOylpZihlPj10aGlzLl9idWZzWzBdLmxlbmd0aCllLT10aGlzLl9idWZzWzBdLmxlbmd0aCx0aGlzLmxlbmd0aC09dGhpcy5fYnVmc1swXS5sZW5ndGgsdGhpcy5fYnVmcy5zaGlmdCgpO2Vsc2Uge3RoaXMuX2J1ZnNbMF09dGhpcy5fYnVmc1swXS5zbGljZShlKSx0aGlzLmxlbmd0aC09ZTticmVha31yZXR1cm4gdGhpc307ZWUucHJvdG90eXBlLmR1cGxpY2F0ZT1mdW5jdGlvbigpe2xldCBlPXRoaXMuX25ldygpO2ZvcihsZXQgcj0wO3I8dGhpcy5fYnVmcy5sZW5ndGg7cisrKWUuYXBwZW5kKHRoaXMuX2J1ZnNbcl0pO3JldHVybiBlfTtlZS5wcm90b3R5cGUuYXBwZW5kPWZ1bmN0aW9uKGUpe2lmKGU9PW51bGwpcmV0dXJuIHRoaXM7aWYoZS5idWZmZXIpdGhpcy5fYXBwZW5kQnVmZmVyKHplLmZyb20oZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCkpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShlKSlmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl0aGlzLmFwcGVuZChlW3JdKTtlbHNlIGlmKHRoaXMuX2lzQnVmZmVyTGlzdChlKSlmb3IobGV0IHI9MDtyPGUuX2J1ZnMubGVuZ3RoO3IrKyl0aGlzLmFwcGVuZChlLl9idWZzW3JdKTtlbHNlIHR5cGVvZiBlPT1cIm51bWJlclwiJiYoZT1lLnRvU3RyaW5nKCkpLHRoaXMuX2FwcGVuZEJ1ZmZlcih6ZS5mcm9tKGUpKTtyZXR1cm4gdGhpc307ZWUucHJvdG90eXBlLl9hcHBlbmRCdWZmZXI9ZnVuY3Rpb24oZSl7dGhpcy5fYnVmcy5wdXNoKGUpLHRoaXMubGVuZ3RoKz1lLmxlbmd0aDt9O2VlLnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKHQsZSxyKXtpZihyPT09dm9pZCAwJiZ0eXBlb2YgZT09XCJzdHJpbmdcIiYmKHI9ZSxlPXZvaWQgMCksdHlwZW9mIHQ9PVwiZnVuY3Rpb25cInx8QXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEJ1ZmZlckxpc3QsIG9yIFVpbnQ4QXJyYXkuJyk7aWYodHlwZW9mIHQ9PVwibnVtYmVyXCI/dD16ZS5mcm9tKFt0XSk6dHlwZW9mIHQ9PVwic3RyaW5nXCI/dD16ZS5mcm9tKHQscik6dGhpcy5faXNCdWZmZXJMaXN0KHQpP3Q9dC5zbGljZSgpOkFycmF5LmlzQXJyYXkodC5idWZmZXIpP3Q9emUuZnJvbSh0LmJ1ZmZlcix0LmJ5dGVPZmZzZXQsdC5ieXRlTGVuZ3RoKTp6ZS5pc0J1ZmZlcih0KXx8KHQ9emUuZnJvbSh0KSksZT1OdW1iZXIoZXx8MCksaXNOYU4oZSkmJihlPTApLGU8MCYmKGU9dGhpcy5sZW5ndGgrZSksZTwwJiYoZT0wKSx0Lmxlbmd0aD09PTApcmV0dXJuIGU+dGhpcy5sZW5ndGg/dGhpcy5sZW5ndGg6ZTtsZXQgaT10aGlzLl9vZmZzZXQoZSksbj1pWzBdLG89aVsxXTtmb3IoO248dGhpcy5fYnVmcy5sZW5ndGg7bisrKXtsZXQgcz10aGlzLl9idWZzW25dO2Zvcig7bzxzLmxlbmd0aDspaWYocy5sZW5ndGgtbz49dC5sZW5ndGgpe2xldCB1PXMuaW5kZXhPZih0LG8pO2lmKHUhPT0tMSlyZXR1cm4gdGhpcy5fcmV2ZXJzZU9mZnNldChbbix1XSk7bz1zLmxlbmd0aC10Lmxlbmd0aCsxO31lbHNlIHtsZXQgdT10aGlzLl9yZXZlcnNlT2Zmc2V0KFtuLG9dKTtpZih0aGlzLl9tYXRjaCh1LHQpKXJldHVybiB1O28rKzt9bz0wO31yZXR1cm4gLTF9O2VlLnByb3RvdHlwZS5fbWF0Y2g9ZnVuY3Rpb24odCxlKXtpZih0aGlzLmxlbmd0aC10PGUubGVuZ3RoKXJldHVybiAhMTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKylpZih0aGlzLmdldCh0K3IpIT09ZVtyXSlyZXR1cm4gITE7cmV0dXJuICEwfTsoZnVuY3Rpb24oKXtsZXQgdD17cmVhZERvdWJsZUJFOjgscmVhZERvdWJsZUxFOjgscmVhZEZsb2F0QkU6NCxyZWFkRmxvYXRMRTo0LHJlYWRCaWdJbnQ2NEJFOjgscmVhZEJpZ0ludDY0TEU6OCxyZWFkQmlnVUludDY0QkU6OCxyZWFkQmlnVUludDY0TEU6OCxyZWFkSW50MzJCRTo0LHJlYWRJbnQzMkxFOjQscmVhZFVJbnQzMkJFOjQscmVhZFVJbnQzMkxFOjQscmVhZEludDE2QkU6MixyZWFkSW50MTZMRToyLHJlYWRVSW50MTZCRToyLHJlYWRVSW50MTZMRToyLHJlYWRJbnQ4OjEscmVhZFVJbnQ4OjEscmVhZEludEJFOm51bGwscmVhZEludExFOm51bGwscmVhZFVJbnRCRTpudWxsLHJlYWRVSW50TEU6bnVsbH07Zm9yKGxldCBlIGluIHQpKGZ1bmN0aW9uKHIpe3Rbcl09PT1udWxsP2VlLnByb3RvdHlwZVtyXT1mdW5jdGlvbihpLG4pe3JldHVybiB0aGlzLnNsaWNlKGksaStuKVtyXSgwLG4pfTplZS5wcm90b3R5cGVbcl09ZnVuY3Rpb24oaT0wKXtyZXR1cm4gdGhpcy5zbGljZShpLGkrdFtyXSlbcl0oMCl9O30pKGUpO30pKCk7ZWUucHJvdG90eXBlLl9pc0J1ZmZlckxpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBlZXx8ZWUuaXNCdWZmZXJMaXN0KGUpfTtlZS5pc0J1ZmZlckxpc3Q9ZnVuY3Rpb24oZSl7cmV0dXJuIGUhPW51bGwmJmVbYWRdfTtsZC5leHBvcnRzPWVlO30pO3ZhciBmZD1NKChCQixJbik9Pnt2KCk7bSgpO18oKTt2YXIgRG89RHQoKS5EdXBsZXgseW09b2QoKSxtaT11ZCgpO2Z1bmN0aW9uIEVlKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEVlKSlyZXR1cm4gbmV3IEVlKHQpO2lmKHR5cGVvZiB0PT1cImZ1bmN0aW9uXCIpe3RoaXMuX2NhbGxiYWNrPXQ7bGV0IGU9ZnVuY3Rpb24oaSl7dGhpcy5fY2FsbGJhY2smJih0aGlzLl9jYWxsYmFjayhpKSx0aGlzLl9jYWxsYmFjaz1udWxsKTt9LmJpbmQodGhpcyk7dGhpcy5vbihcInBpcGVcIixmdW5jdGlvbihpKXtpLm9uKFwiZXJyb3JcIixlKTt9KSx0aGlzLm9uKFwidW5waXBlXCIsZnVuY3Rpb24oaSl7aS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsZSk7fSksdD1udWxsO31taS5faW5pdC5jYWxsKHRoaXMsdCksRG8uY2FsbCh0aGlzKTt9eW0oRWUsRG8pO09iamVjdC5hc3NpZ24oRWUucHJvdG90eXBlLG1pLnByb3RvdHlwZSk7RWUucHJvdG90eXBlLl9uZXc9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBFZShlKX07RWUucHJvdG90eXBlLl93cml0ZT1mdW5jdGlvbihlLHIsaSl7dGhpcy5fYXBwZW5kQnVmZmVyKGUpLHR5cGVvZiBpPT1cImZ1bmN0aW9uXCImJmkoKTt9O0VlLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbihlKXtpZighdGhpcy5sZW5ndGgpcmV0dXJuIHRoaXMucHVzaChudWxsKTtlPU1hdGgubWluKGUsdGhpcy5sZW5ndGgpLHRoaXMucHVzaCh0aGlzLnNsaWNlKDAsZSkpLHRoaXMuY29uc3VtZShlKTt9O0VlLnByb3RvdHlwZS5lbmQ9ZnVuY3Rpb24oZSl7RG8ucHJvdG90eXBlLmVuZC5jYWxsKHRoaXMsZSksdGhpcy5fY2FsbGJhY2smJih0aGlzLl9jYWxsYmFjayhudWxsLHRoaXMuc2xpY2UoKSksdGhpcy5fY2FsbGJhY2s9bnVsbCk7fTtFZS5wcm90b3R5cGUuX2Rlc3Ryb3k9ZnVuY3Rpb24oZSxyKXt0aGlzLl9idWZzLmxlbmd0aD0wLHRoaXMubGVuZ3RoPTAscihlKTt9O0VlLnByb3RvdHlwZS5faXNCdWZmZXJMaXN0PWZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgRWV8fGUgaW5zdGFuY2VvZiBtaXx8RWUuaXNCdWZmZXJMaXN0KGUpfTtFZS5pc0J1ZmZlckxpc3Q9bWkuaXNCdWZmZXJMaXN0O0luLmV4cG9ydHM9RWU7SW4uZXhwb3J0cy5CdWZmZXJMaXN0U3RyZWFtPUVlO0luLmV4cG9ydHMuQnVmZmVyTGlzdD1taTt9KTt2YXIgaGQ9TSgoREIsY2QpPT57digpO20oKTtfKCk7dmFyIGpvPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5jbWQ9bnVsbCx0aGlzLnJldGFpbj0hMSx0aGlzLnFvcz0wLHRoaXMuZHVwPSExLHRoaXMubGVuZ3RoPS0xLHRoaXMudG9waWM9bnVsbCx0aGlzLnBheWxvYWQ9bnVsbDt9fTtjZC5leHBvcnRzPWpvO30pO3ZhciBGbz1NKChRQixkZCk9Pnt2KCk7bSgpO18oKTt2YXIgTD1kZC5leHBvcnRzLHtCdWZmZXI6T2V9PSh5ZSgpLFgoX2UpKTtMLnR5cGVzPXswOlwicmVzZXJ2ZWRcIiwxOlwiY29ubmVjdFwiLDI6XCJjb25uYWNrXCIsMzpcInB1Ymxpc2hcIiw0OlwicHViYWNrXCIsNTpcInB1YnJlY1wiLDY6XCJwdWJyZWxcIiw3OlwicHViY29tcFwiLDg6XCJzdWJzY3JpYmVcIiw5Olwic3ViYWNrXCIsMTA6XCJ1bnN1YnNjcmliZVwiLDExOlwidW5zdWJhY2tcIiwxMjpcInBpbmdyZXFcIiwxMzpcInBpbmdyZXNwXCIsMTQ6XCJkaXNjb25uZWN0XCIsMTU6XCJhdXRoXCJ9O0wucmVxdWlyZWRIZWFkZXJGbGFncz17MTowLDI6MCw0OjAsNTowLDY6Miw3OjAsODoyLDk6MCwxMDoyLDExOjAsMTI6MCwxMzowLDE0OjAsMTU6MH07TC5yZXF1aXJlZEhlYWRlckZsYWdzRXJyb3JzPXt9O2ZvcihsZXQgdCBpbiBMLnJlcXVpcmVkSGVhZGVyRmxhZ3Mpe2xldCBlPUwucmVxdWlyZWRIZWFkZXJGbGFnc1t0XTtMLnJlcXVpcmVkSGVhZGVyRmxhZ3NFcnJvcnNbdF09XCJJbnZhbGlkIGhlYWRlciBmbGFnIGJpdHMsIG11c3QgYmUgMHhcIitlLnRvU3RyaW5nKDE2KStcIiBmb3IgXCIrTC50eXBlc1t0XStcIiBwYWNrZXRcIjt9TC5jb2Rlcz17fTtmb3IobGV0IHQgaW4gTC50eXBlcyl7bGV0IGU9TC50eXBlc1t0XTtMLmNvZGVzW2VdPXQ7fUwuQ01EX1NISUZUPTQ7TC5DTURfTUFTSz0yNDA7TC5EVVBfTUFTSz04O0wuUU9TX01BU0s9MztMLlFPU19TSElGVD0xO0wuUkVUQUlOX01BU0s9MTtMLlZBUkJZVEVJTlRfTUFTSz0xMjc7TC5WQVJCWVRFSU5UX0ZJTl9NQVNLPTEyODtMLlZBUkJZVEVJTlRfTUFYPTI2ODQzNTQ1NTtMLlNFU1NJT05QUkVTRU5UX01BU0s9MTtMLlNFU1NJT05QUkVTRU5UX0hFQURFUj1PZS5mcm9tKFtMLlNFU1NJT05QUkVTRU5UX01BU0tdKTtMLkNPTk5BQ0tfSEVBREVSPU9lLmZyb20oW0wuY29kZXMuY29ubmFjazw8TC5DTURfU0hJRlRdKTtMLlVTRVJOQU1FX01BU0s9MTI4O0wuUEFTU1dPUkRfTUFTSz02NDtMLldJTExfUkVUQUlOX01BU0s9MzI7TC5XSUxMX1FPU19NQVNLPTI0O0wuV0lMTF9RT1NfU0hJRlQ9MztMLldJTExfRkxBR19NQVNLPTQ7TC5DTEVBTl9TRVNTSU9OX01BU0s9MjtMLkNPTk5FQ1RfSEVBREVSPU9lLmZyb20oW0wuY29kZXMuY29ubmVjdDw8TC5DTURfU0hJRlRdKTtMLnByb3BlcnRpZXM9e3Nlc3Npb25FeHBpcnlJbnRlcnZhbDoxNyx3aWxsRGVsYXlJbnRlcnZhbDoyNCxyZWNlaXZlTWF4aW11bTozMyxtYXhpbXVtUGFja2V0U2l6ZTozOSx0b3BpY0FsaWFzTWF4aW11bTozNCxyZXF1ZXN0UmVzcG9uc2VJbmZvcm1hdGlvbjoyNSxyZXF1ZXN0UHJvYmxlbUluZm9ybWF0aW9uOjIzLHVzZXJQcm9wZXJ0aWVzOjM4LGF1dGhlbnRpY2F0aW9uTWV0aG9kOjIxLGF1dGhlbnRpY2F0aW9uRGF0YToyMixwYXlsb2FkRm9ybWF0SW5kaWNhdG9yOjEsbWVzc2FnZUV4cGlyeUludGVydmFsOjIsY29udGVudFR5cGU6MyxyZXNwb25zZVRvcGljOjgsY29ycmVsYXRpb25EYXRhOjksbWF4aW11bVFvUzozNixyZXRhaW5BdmFpbGFibGU6MzcsYXNzaWduZWRDbGllbnRJZGVudGlmaWVyOjE4LHJlYXNvblN0cmluZzozMSx3aWxkY2FyZFN1YnNjcmlwdGlvbkF2YWlsYWJsZTo0MCxzdWJzY3JpcHRpb25JZGVudGlmaWVyc0F2YWlsYWJsZTo0MSxzaGFyZWRTdWJzY3JpcHRpb25BdmFpbGFibGU6NDIsc2VydmVyS2VlcEFsaXZlOjE5LHJlc3BvbnNlSW5mb3JtYXRpb246MjYsc2VydmVyUmVmZXJlbmNlOjI4LHRvcGljQWxpYXM6MzUsc3Vic2NyaXB0aW9uSWRlbnRpZmllcjoxMX07TC5wcm9wZXJ0aWVzQ29kZXM9e307Zm9yKGxldCB0IGluIEwucHJvcGVydGllcyl7bGV0IGU9TC5wcm9wZXJ0aWVzW3RdO0wucHJvcGVydGllc0NvZGVzW2VdPXQ7fUwucHJvcGVydGllc1R5cGVzPXtzZXNzaW9uRXhwaXJ5SW50ZXJ2YWw6XCJpbnQzMlwiLHdpbGxEZWxheUludGVydmFsOlwiaW50MzJcIixyZWNlaXZlTWF4aW11bTpcImludDE2XCIsbWF4aW11bVBhY2tldFNpemU6XCJpbnQzMlwiLHRvcGljQWxpYXNNYXhpbXVtOlwiaW50MTZcIixyZXF1ZXN0UmVzcG9uc2VJbmZvcm1hdGlvbjpcImJ5dGVcIixyZXF1ZXN0UHJvYmxlbUluZm9ybWF0aW9uOlwiYnl0ZVwiLHVzZXJQcm9wZXJ0aWVzOlwicGFpclwiLGF1dGhlbnRpY2F0aW9uTWV0aG9kOlwic3RyaW5nXCIsYXV0aGVudGljYXRpb25EYXRhOlwiYmluYXJ5XCIscGF5bG9hZEZvcm1hdEluZGljYXRvcjpcImJ5dGVcIixtZXNzYWdlRXhwaXJ5SW50ZXJ2YWw6XCJpbnQzMlwiLGNvbnRlbnRUeXBlOlwic3RyaW5nXCIscmVzcG9uc2VUb3BpYzpcInN0cmluZ1wiLGNvcnJlbGF0aW9uRGF0YTpcImJpbmFyeVwiLG1heGltdW1Rb1M6XCJpbnQ4XCIscmV0YWluQXZhaWxhYmxlOlwiYnl0ZVwiLGFzc2lnbmVkQ2xpZW50SWRlbnRpZmllcjpcInN0cmluZ1wiLHJlYXNvblN0cmluZzpcInN0cmluZ1wiLHdpbGRjYXJkU3Vic2NyaXB0aW9uQXZhaWxhYmxlOlwiYnl0ZVwiLHN1YnNjcmlwdGlvbklkZW50aWZpZXJzQXZhaWxhYmxlOlwiYnl0ZVwiLHNoYXJlZFN1YnNjcmlwdGlvbkF2YWlsYWJsZTpcImJ5dGVcIixzZXJ2ZXJLZWVwQWxpdmU6XCJpbnQxNlwiLHJlc3BvbnNlSW5mb3JtYXRpb246XCJzdHJpbmdcIixzZXJ2ZXJSZWZlcmVuY2U6XCJzdHJpbmdcIix0b3BpY0FsaWFzOlwiaW50MTZcIixzdWJzY3JpcHRpb25JZGVudGlmaWVyOlwidmFyXCJ9O2Z1bmN0aW9uIGp0KHQpe3JldHVybiBbMCwxLDJdLm1hcChlPT5bMCwxXS5tYXAocj0+WzAsMV0ubWFwKGk9PntsZXQgbj1PZS5hbGxvYygxKTtyZXR1cm4gbi53cml0ZVVJbnQ4KEwuY29kZXNbdF08PEwuQ01EX1NISUZUfChyP0wuRFVQX01BU0s6MCl8ZTw8TC5RT1NfU0hJRlR8aSwwLCEwKSxufSkpKX1MLlBVQkxJU0hfSEVBREVSPWp0KFwicHVibGlzaFwiKTtMLlNVQlNDUklCRV9IRUFERVI9anQoXCJzdWJzY3JpYmVcIik7TC5TVUJTQ1JJQkVfT1BUSU9OU19RT1NfTUFTSz0zO0wuU1VCU0NSSUJFX09QVElPTlNfTkxfTUFTSz0xO0wuU1VCU0NSSUJFX09QVElPTlNfTkxfU0hJRlQ9MjtMLlNVQlNDUklCRV9PUFRJT05TX1JBUF9NQVNLPTE7TC5TVUJTQ1JJQkVfT1BUSU9OU19SQVBfU0hJRlQ9MztMLlNVQlNDUklCRV9PUFRJT05TX1JIX01BU0s9MztMLlNVQlNDUklCRV9PUFRJT05TX1JIX1NISUZUPTQ7TC5TVUJTQ1JJQkVfT1BUSU9OU19SSD1bMCwxNiwzMl07TC5TVUJTQ1JJQkVfT1BUSU9OU19OTD00O0wuU1VCU0NSSUJFX09QVElPTlNfUkFQPTg7TC5TVUJTQ1JJQkVfT1BUSU9OU19RT1M9WzAsMSwyXTtMLlVOU1VCU0NSSUJFX0hFQURFUj1qdChcInVuc3Vic2NyaWJlXCIpO0wuQUNLUz17dW5zdWJhY2s6anQoXCJ1bnN1YmFja1wiKSxwdWJhY2s6anQoXCJwdWJhY2tcIikscHViY29tcDpqdChcInB1YmNvbXBcIikscHVicmVsOmp0KFwicHVicmVsXCIpLHB1YnJlYzpqdChcInB1YnJlY1wiKX07TC5TVUJBQ0tfSEVBREVSPU9lLmZyb20oW0wuY29kZXMuc3ViYWNrPDxMLkNNRF9TSElGVF0pO0wuVkVSU0lPTjM9T2UuZnJvbShbM10pO0wuVkVSU0lPTjQ9T2UuZnJvbShbNF0pO0wuVkVSU0lPTjU9T2UuZnJvbShbNV0pO0wuVkVSU0lPTjEzMT1PZS5mcm9tKFsxMzFdKTtMLlZFUlNJT04xMzI9T2UuZnJvbShbMTMyXSk7TC5RT1M9WzAsMSwyXS5tYXAodD0+T2UuZnJvbShbdF0pKTtMLkVNUFRZPXtwaW5ncmVxOk9lLmZyb20oW0wuY29kZXMucGluZ3JlcTw8NCwwXSkscGluZ3Jlc3A6T2UuZnJvbShbTC5jb2Rlcy5waW5ncmVzcDw8NCwwXSksZGlzY29ubmVjdDpPZS5mcm9tKFtMLmNvZGVzLmRpc2Nvbm5lY3Q8PDQsMF0pfTtMLk1RVFQ1X1BVQkFDS19QVUJSRUNfQ09ERVM9ezA6XCJTdWNjZXNzXCIsMTY6XCJObyBtYXRjaGluZyBzdWJzY3JpYmVyc1wiLDEyODpcIlVuc3BlY2lmaWVkIGVycm9yXCIsMTMxOlwiSW1wbGVtZW50YXRpb24gc3BlY2lmaWMgZXJyb3JcIiwxMzU6XCJOb3QgYXV0aG9yaXplZFwiLDE0NDpcIlRvcGljIE5hbWUgaW52YWxpZFwiLDE0NTpcIlBhY2tldCBpZGVudGlmaWVyIGluIHVzZVwiLDE1MTpcIlF1b3RhIGV4Y2VlZGVkXCIsMTUzOlwiUGF5bG9hZCBmb3JtYXQgaW52YWxpZFwifTtMLk1RVFQ1X1BVQlJFTF9QVUJDT01QX0NPREVTPXswOlwiU3VjY2Vzc1wiLDE0NjpcIlBhY2tldCBJZGVudGlmaWVyIG5vdCBmb3VuZFwifTtMLk1RVFQ1X1NVQkFDS19DT0RFUz17MDpcIkdyYW50ZWQgUW9TIDBcIiwxOlwiR3JhbnRlZCBRb1MgMVwiLDI6XCJHcmFudGVkIFFvUyAyXCIsMTI4OlwiVW5zcGVjaWZpZWQgZXJyb3JcIiwxMzE6XCJJbXBsZW1lbnRhdGlvbiBzcGVjaWZpYyBlcnJvclwiLDEzNTpcIk5vdCBhdXRob3JpemVkXCIsMTQzOlwiVG9waWMgRmlsdGVyIGludmFsaWRcIiwxNDU6XCJQYWNrZXQgSWRlbnRpZmllciBpbiB1c2VcIiwxNTE6XCJRdW90YSBleGNlZWRlZFwiLDE1ODpcIlNoYXJlZCBTdWJzY3JpcHRpb25zIG5vdCBzdXBwb3J0ZWRcIiwxNjE6XCJTdWJzY3JpcHRpb24gSWRlbnRpZmllcnMgbm90IHN1cHBvcnRlZFwiLDE2MjpcIldpbGRjYXJkIFN1YnNjcmlwdGlvbnMgbm90IHN1cHBvcnRlZFwifTtMLk1RVFQ1X1VOU1VCQUNLX0NPREVTPXswOlwiU3VjY2Vzc1wiLDE3OlwiTm8gc3Vic2NyaXB0aW9uIGV4aXN0ZWRcIiwxMjg6XCJVbnNwZWNpZmllZCBlcnJvclwiLDEzMTpcIkltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yXCIsMTM1OlwiTm90IGF1dGhvcml6ZWRcIiwxNDM6XCJUb3BpYyBGaWx0ZXIgaW52YWxpZFwiLDE0NTpcIlBhY2tldCBJZGVudGlmaWVyIGluIHVzZVwifTtMLk1RVFQ1X0RJU0NPTk5FQ1RfQ09ERVM9ezA6XCJOb3JtYWwgZGlzY29ubmVjdGlvblwiLDQ6XCJEaXNjb25uZWN0IHdpdGggV2lsbCBNZXNzYWdlXCIsMTI4OlwiVW5zcGVjaWZpZWQgZXJyb3JcIiwxMjk6XCJNYWxmb3JtZWQgUGFja2V0XCIsMTMwOlwiUHJvdG9jb2wgRXJyb3JcIiwxMzE6XCJJbXBsZW1lbnRhdGlvbiBzcGVjaWZpYyBlcnJvclwiLDEzNTpcIk5vdCBhdXRob3JpemVkXCIsMTM3OlwiU2VydmVyIGJ1c3lcIiwxMzk6XCJTZXJ2ZXIgc2h1dHRpbmcgZG93blwiLDE0MTpcIktlZXAgQWxpdmUgdGltZW91dFwiLDE0MjpcIlNlc3Npb24gdGFrZW4gb3ZlclwiLDE0MzpcIlRvcGljIEZpbHRlciBpbnZhbGlkXCIsMTQ0OlwiVG9waWMgTmFtZSBpbnZhbGlkXCIsMTQ3OlwiUmVjZWl2ZSBNYXhpbXVtIGV4Y2VlZGVkXCIsMTQ4OlwiVG9waWMgQWxpYXMgaW52YWxpZFwiLDE0OTpcIlBhY2tldCB0b28gbGFyZ2VcIiwxNTA6XCJNZXNzYWdlIHJhdGUgdG9vIGhpZ2hcIiwxNTE6XCJRdW90YSBleGNlZWRlZFwiLDE1MjpcIkFkbWluaXN0cmF0aXZlIGFjdGlvblwiLDE1MzpcIlBheWxvYWQgZm9ybWF0IGludmFsaWRcIiwxNTQ6XCJSZXRhaW4gbm90IHN1cHBvcnRlZFwiLDE1NTpcIlFvUyBub3Qgc3VwcG9ydGVkXCIsMTU2OlwiVXNlIGFub3RoZXIgc2VydmVyXCIsMTU3OlwiU2VydmVyIG1vdmVkXCIsMTU4OlwiU2hhcmVkIFN1YnNjcmlwdGlvbnMgbm90IHN1cHBvcnRlZFwiLDE1OTpcIkNvbm5lY3Rpb24gcmF0ZSBleGNlZWRlZFwiLDE2MDpcIk1heGltdW0gY29ubmVjdCB0aW1lXCIsMTYxOlwiU3Vic2NyaXB0aW9uIElkZW50aWZpZXJzIG5vdCBzdXBwb3J0ZWRcIiwxNjI6XCJXaWxkY2FyZCBTdWJzY3JpcHRpb25zIG5vdCBzdXBwb3J0ZWRcIn07TC5NUVRUNV9BVVRIX0NPREVTPXswOlwiU3VjY2Vzc1wiLDI0OlwiQ29udGludWUgYXV0aGVudGljYXRpb25cIiwyNTpcIlJlLWF1dGhlbnRpY2F0ZVwifTt9KTt2YXIgZ2Q9TSgoc1AscGQpPT57digpO20oKTtfKCk7dmFyIFZyPTFlMyx6cj1Wcio2MCxLcj16cio2MCxncj1LcioyNCxibT1ncio3LHdtPWdyKjM2NS4yNTtwZC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7ZT1lfHx7fTt2YXIgcj10eXBlb2YgdDtpZihyPT09XCJzdHJpbmdcIiYmdC5sZW5ndGg+MClyZXR1cm4gX20odCk7aWYocj09PVwibnVtYmVyXCImJmlzRmluaXRlKHQpKXJldHVybiBlLmxvbmc/dm0odCk6bW0odCk7dGhyb3cgbmV3IEVycm9yKFwidmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD1cIitKU09OLnN0cmluZ2lmeSh0KSl9O2Z1bmN0aW9uIF9tKHQpe2lmKHQ9U3RyaW5nKHQpLCEodC5sZW5ndGg+MTAwKSl7dmFyIGU9L14oLT8oPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHdlZWtzP3x3fHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHQpO2lmKGUpe3ZhciByPXBhcnNlRmxvYXQoZVsxXSksaT0oZVsyXXx8XCJtc1wiKS50b0xvd2VyQ2FzZSgpO3N3aXRjaChpKXtjYXNlXCJ5ZWFyc1wiOmNhc2VcInllYXJcIjpjYXNlXCJ5cnNcIjpjYXNlXCJ5clwiOmNhc2VcInlcIjpyZXR1cm4gcip3bTtjYXNlXCJ3ZWVrc1wiOmNhc2VcIndlZWtcIjpjYXNlXCJ3XCI6cmV0dXJuIHIqYm07Y2FzZVwiZGF5c1wiOmNhc2VcImRheVwiOmNhc2VcImRcIjpyZXR1cm4gcipncjtjYXNlXCJob3Vyc1wiOmNhc2VcImhvdXJcIjpjYXNlXCJocnNcIjpjYXNlXCJoclwiOmNhc2VcImhcIjpyZXR1cm4gcipLcjtjYXNlXCJtaW51dGVzXCI6Y2FzZVwibWludXRlXCI6Y2FzZVwibWluc1wiOmNhc2VcIm1pblwiOmNhc2VcIm1cIjpyZXR1cm4gcip6cjtjYXNlXCJzZWNvbmRzXCI6Y2FzZVwic2Vjb25kXCI6Y2FzZVwic2Vjc1wiOmNhc2VcInNlY1wiOmNhc2VcInNcIjpyZXR1cm4gcipWcjtjYXNlXCJtaWxsaXNlY29uZHNcIjpjYXNlXCJtaWxsaXNlY29uZFwiOmNhc2VcIm1zZWNzXCI6Y2FzZVwibXNlY1wiOmNhc2VcIm1zXCI6cmV0dXJuIHI7ZGVmYXVsdDpyZXR1cm59fX19ZnVuY3Rpb24gbW0odCl7dmFyIGU9TWF0aC5hYnModCk7cmV0dXJuIGU+PWdyP01hdGgucm91bmQodC9ncikrXCJkXCI6ZT49S3I/TWF0aC5yb3VuZCh0L0tyKStcImhcIjplPj16cj9NYXRoLnJvdW5kKHQvenIpK1wibVwiOmU+PVZyP01hdGgucm91bmQodC9WcikrXCJzXCI6dCtcIm1zXCJ9ZnVuY3Rpb24gdm0odCl7dmFyIGU9TWF0aC5hYnModCk7cmV0dXJuIGU+PWdyP1RuKHQsZSxncixcImRheVwiKTplPj1Lcj9Ubih0LGUsS3IsXCJob3VyXCIpOmU+PXpyP1RuKHQsZSx6cixcIm1pbnV0ZVwiKTplPj1Wcj9Ubih0LGUsVnIsXCJzZWNvbmRcIik6dCtcIiBtc1wifWZ1bmN0aW9uIFRuKHQsZSxyLGkpe3ZhciBuPWU+PXIqMS41O3JldHVybiBNYXRoLnJvdW5kKHQvcikrXCIgXCIraSsobj9cInNcIjpcIlwiKX19KTt2YXIgYmQ9TSgoZ1AseWQpPT57digpO20oKTtfKCk7ZnVuY3Rpb24gRW0odCl7ci5kZWJ1Zz1yLHIuZGVmYXVsdD1yLHIuY29lcmNlPXUsci5kaXNhYmxlPW8sci5lbmFibGU9bixyLmVuYWJsZWQ9cyxyLmh1bWFuaXplPWdkKCksci5kZXN0cm95PWMsT2JqZWN0LmtleXModCkuZm9yRWFjaChoPT57cltoXT10W2hdO30pLHIubmFtZXM9W10sci5za2lwcz1bXSxyLmZvcm1hdHRlcnM9e307ZnVuY3Rpb24gZShoKXtsZXQgZD0wO2ZvcihsZXQgZz0wO2c8aC5sZW5ndGg7ZysrKWQ9KGQ8PDUpLWQraC5jaGFyQ29kZUF0KGcpLGR8PTA7cmV0dXJuIHIuY29sb3JzW01hdGguYWJzKGQpJXIuY29sb3JzLmxlbmd0aF19ci5zZWxlY3RDb2xvcj1lO2Z1bmN0aW9uIHIoaCl7bGV0IGQsZz1udWxsLHksdztmdW5jdGlvbiBFKC4uLlMpe2lmKCFFLmVuYWJsZWQpcmV0dXJuO2xldCBJPUUsQz1OdW1iZXIobmV3IERhdGUpLFI9Qy0oZHx8Qyk7SS5kaWZmPVIsSS5wcmV2PWQsSS5jdXJyPUMsZD1DLFNbMF09ci5jb2VyY2UoU1swXSksdHlwZW9mIFNbMF0hPVwic3RyaW5nXCImJlMudW5zaGlmdChcIiVPXCIpO2xldCBVPTA7U1swXT1TWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLChXLEspPT57aWYoVz09PVwiJSVcIilyZXR1cm4gXCIlXCI7VSsrO2xldCB6PXIuZm9ybWF0dGVyc1tLXTtpZih0eXBlb2Ygej09XCJmdW5jdGlvblwiKXtsZXQgUT1TW1VdO1c9ei5jYWxsKEksUSksUy5zcGxpY2UoVSwxKSxVLS07fXJldHVybiBXfSksci5mb3JtYXRBcmdzLmNhbGwoSSxTKSwoSS5sb2d8fHIubG9nKS5hcHBseShJLFMpO31yZXR1cm4gRS5uYW1lc3BhY2U9aCxFLnVzZUNvbG9ycz1yLnVzZUNvbG9ycygpLEUuY29sb3I9ci5zZWxlY3RDb2xvcihoKSxFLmV4dGVuZD1pLEUuZGVzdHJveT1yLmRlc3Ryb3ksT2JqZWN0LmRlZmluZVByb3BlcnR5KEUsXCJlbmFibGVkXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDooKT0+ZyE9PW51bGw/ZzooeSE9PXIubmFtZXNwYWNlcyYmKHk9ci5uYW1lc3BhY2VzLHc9ci5lbmFibGVkKGgpKSx3KSxzZXQ6Uz0+e2c9Uzt9fSksdHlwZW9mIHIuaW5pdD09XCJmdW5jdGlvblwiJiZyLmluaXQoRSksRX1mdW5jdGlvbiBpKGgsZCl7bGV0IGc9cih0aGlzLm5hbWVzcGFjZSsodHlwZW9mIGQ+XCJ1XCI/XCI6XCI6ZCkraCk7cmV0dXJuIGcubG9nPXRoaXMubG9nLGd9ZnVuY3Rpb24gbihoKXtyLnNhdmUoaCksci5uYW1lc3BhY2VzPWgsci5uYW1lcz1bXSxyLnNraXBzPVtdO2xldCBkLGc9KHR5cGVvZiBoPT1cInN0cmluZ1wiP2g6XCJcIikuc3BsaXQoL1tcXHMsXSsvKSx5PWcubGVuZ3RoO2ZvcihkPTA7ZDx5O2QrKylnW2RdJiYoaD1nW2RdLnJlcGxhY2UoL1xcKi9nLFwiLio/XCIpLGhbMF09PT1cIi1cIj9yLnNraXBzLnB1c2gobmV3IFJlZ0V4cChcIl5cIitoLnNsaWNlKDEpK1wiJFwiKSk6ci5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoXCJeXCIraCtcIiRcIikpKTt9ZnVuY3Rpb24gbygpe2xldCBoPVsuLi5yLm5hbWVzLm1hcChhKSwuLi5yLnNraXBzLm1hcChhKS5tYXAoZD0+XCItXCIrZCldLmpvaW4oXCIsXCIpO3JldHVybiByLmVuYWJsZShcIlwiKSxofWZ1bmN0aW9uIHMoaCl7aWYoaFtoLmxlbmd0aC0xXT09PVwiKlwiKXJldHVybiAhMDtsZXQgZCxnO2ZvcihkPTAsZz1yLnNraXBzLmxlbmd0aDtkPGc7ZCsrKWlmKHIuc2tpcHNbZF0udGVzdChoKSlyZXR1cm4gITE7Zm9yKGQ9MCxnPXIubmFtZXMubGVuZ3RoO2Q8ZztkKyspaWYoci5uYW1lc1tkXS50ZXN0KGgpKXJldHVybiAhMDtyZXR1cm4gITF9ZnVuY3Rpb24gYShoKXtyZXR1cm4gaC50b1N0cmluZygpLnN1YnN0cmluZygyLGgudG9TdHJpbmcoKS5sZW5ndGgtMikucmVwbGFjZSgvXFwuXFwqXFw/JC8sXCIqXCIpfWZ1bmN0aW9uIHUoaCl7cmV0dXJuIGggaW5zdGFuY2VvZiBFcnJvcj9oLnN0YWNrfHxoLm1lc3NhZ2U6aH1mdW5jdGlvbiBjKCl7Y29uc29sZS53YXJuKFwiSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLlwiKTt9cmV0dXJuIHIuZW5hYmxlKHIubG9hZCgpKSxyfXlkLmV4cG9ydHM9RW07fSk7dmFyIG90PU0oKHhlLFJuKT0+e3YoKTttKCk7XygpO3hlLmZvcm1hdEFyZ3M9QW07eGUuc2F2ZT1JbTt4ZS5sb2FkPVRtO3hlLnVzZUNvbG9ycz1TbTt4ZS5zdG9yYWdlPVJtKCk7eGUuZGVzdHJveT0oKCk9PntsZXQgdD0hMTtyZXR1cm4gKCk9Pnt0fHwodD0hMCxjb25zb2xlLndhcm4oXCJJbnN0YW5jZSBtZXRob2QgYGRlYnVnLmRlc3Ryb3koKWAgaXMgZGVwcmVjYXRlZCBhbmQgbm8gbG9uZ2VyIGRvZXMgYW55dGhpbmcuIEl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIGBkZWJ1Z2AuXCIpKTt9fSkoKTt4ZS5jb2xvcnM9W1wiIzAwMDBDQ1wiLFwiIzAwMDBGRlwiLFwiIzAwMzNDQ1wiLFwiIzAwMzNGRlwiLFwiIzAwNjZDQ1wiLFwiIzAwNjZGRlwiLFwiIzAwOTlDQ1wiLFwiIzAwOTlGRlwiLFwiIzAwQ0MwMFwiLFwiIzAwQ0MzM1wiLFwiIzAwQ0M2NlwiLFwiIzAwQ0M5OVwiLFwiIzAwQ0NDQ1wiLFwiIzAwQ0NGRlwiLFwiIzMzMDBDQ1wiLFwiIzMzMDBGRlwiLFwiIzMzMzNDQ1wiLFwiIzMzMzNGRlwiLFwiIzMzNjZDQ1wiLFwiIzMzNjZGRlwiLFwiIzMzOTlDQ1wiLFwiIzMzOTlGRlwiLFwiIzMzQ0MwMFwiLFwiIzMzQ0MzM1wiLFwiIzMzQ0M2NlwiLFwiIzMzQ0M5OVwiLFwiIzMzQ0NDQ1wiLFwiIzMzQ0NGRlwiLFwiIzY2MDBDQ1wiLFwiIzY2MDBGRlwiLFwiIzY2MzNDQ1wiLFwiIzY2MzNGRlwiLFwiIzY2Q0MwMFwiLFwiIzY2Q0MzM1wiLFwiIzk5MDBDQ1wiLFwiIzk5MDBGRlwiLFwiIzk5MzNDQ1wiLFwiIzk5MzNGRlwiLFwiIzk5Q0MwMFwiLFwiIzk5Q0MzM1wiLFwiI0NDMDAwMFwiLFwiI0NDMDAzM1wiLFwiI0NDMDA2NlwiLFwiI0NDMDA5OVwiLFwiI0NDMDBDQ1wiLFwiI0NDMDBGRlwiLFwiI0NDMzMwMFwiLFwiI0NDMzMzM1wiLFwiI0NDMzM2NlwiLFwiI0NDMzM5OVwiLFwiI0NDMzNDQ1wiLFwiI0NDMzNGRlwiLFwiI0NDNjYwMFwiLFwiI0NDNjYzM1wiLFwiI0NDOTkwMFwiLFwiI0NDOTkzM1wiLFwiI0NDQ0MwMFwiLFwiI0NDQ0MzM1wiLFwiI0ZGMDAwMFwiLFwiI0ZGMDAzM1wiLFwiI0ZGMDA2NlwiLFwiI0ZGMDA5OVwiLFwiI0ZGMDBDQ1wiLFwiI0ZGMDBGRlwiLFwiI0ZGMzMwMFwiLFwiI0ZGMzMzM1wiLFwiI0ZGMzM2NlwiLFwiI0ZGMzM5OVwiLFwiI0ZGMzNDQ1wiLFwiI0ZGMzNGRlwiLFwiI0ZGNjYwMFwiLFwiI0ZGNjYzM1wiLFwiI0ZGOTkwMFwiLFwiI0ZGOTkzM1wiLFwiI0ZGQ0MwMFwiLFwiI0ZGQ0MzM1wiXTtmdW5jdGlvbiBTbSgpe3JldHVybiB0eXBlb2Ygd2luZG93PFwidVwiJiZ3aW5kb3cucHJvY2VzcyYmKHdpbmRvdy5wcm9jZXNzLnR5cGU9PT1cInJlbmRlcmVyXCJ8fHdpbmRvdy5wcm9jZXNzLl9fbndqcyk/ITA6dHlwZW9mIEI8XCJ1XCImJkIudXNlckFnZW50JiZCLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pPyExOnR5cGVvZiBkb2N1bWVudDxcInVcIiYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5XZWJraXRBcHBlYXJhbmNlfHx0eXBlb2Ygd2luZG93PFwidVwiJiZ3aW5kb3cuY29uc29sZSYmKHdpbmRvdy5jb25zb2xlLmZpcmVidWd8fHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiYmd2luZG93LmNvbnNvbGUudGFibGUpfHx0eXBlb2YgQjxcInVcIiYmQi51c2VyQWdlbnQmJkIudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSYmcGFyc2VJbnQoUmVnRXhwLiQxLDEwKT49MzF8fHR5cGVvZiBCPFwidVwiJiZCLnVzZXJBZ2VudCYmQi51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKX1mdW5jdGlvbiBBbSh0KXtpZih0WzBdPSh0aGlzLnVzZUNvbG9ycz9cIiVjXCI6XCJcIikrdGhpcy5uYW1lc3BhY2UrKHRoaXMudXNlQ29sb3JzP1wiICVjXCI6XCIgXCIpK3RbMF0rKHRoaXMudXNlQ29sb3JzP1wiJWMgXCI6XCIgXCIpK1wiK1wiK1JuLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKSwhdGhpcy51c2VDb2xvcnMpcmV0dXJuO2xldCBlPVwiY29sb3I6IFwiK3RoaXMuY29sb3I7dC5zcGxpY2UoMSwwLGUsXCJjb2xvcjogaW5oZXJpdFwiKTtsZXQgcj0wLGk9MDt0WzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZyxuPT57biE9PVwiJSVcIiYmKHIrKyxuPT09XCIlY1wiJiYoaT1yKSk7fSksdC5zcGxpY2UoaSwwLGUpO314ZS5sb2c9Y29uc29sZS5kZWJ1Z3x8Y29uc29sZS5sb2d8fCgoKT0+e30pO2Z1bmN0aW9uIEltKHQpe3RyeXt0P3hlLnN0b3JhZ2Uuc2V0SXRlbShcImRlYnVnXCIsdCk6eGUuc3RvcmFnZS5yZW1vdmVJdGVtKFwiZGVidWdcIik7fWNhdGNoe319ZnVuY3Rpb24gVG0oKXtsZXQgdDt0cnl7dD14ZS5zdG9yYWdlLmdldEl0ZW0oXCJkZWJ1Z1wiKTt9Y2F0Y2h7fXJldHVybiAhdCYmdHlwZW9mIFA8XCJ1XCImJlwiZW52XCJpbiBQJiYodD1QLmVudi5ERUJVRyksdH1mdW5jdGlvbiBSbSgpe3RyeXtyZXR1cm4gbG9jYWxTdG9yYWdlfWNhdGNoe319Um4uZXhwb3J0cz1iZCgpKHhlKTt2YXJ7Zm9ybWF0dGVyczpDbX09Um4uZXhwb3J0cztDbS5qPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkodCl9Y2F0Y2goZSl7cmV0dXJuIFwiW1VuZXhwZWN0ZWRKU09OUGFyc2VFcnJvcl06IFwiK2UubWVzc2FnZX19O30pO3ZhciBtZD1NKChNUCxfZCk9Pnt2KCk7bSgpO18oKTt2YXIgQm09ZmQoKSx7RXZlbnRFbWl0dGVyOlBtfT0oaXIoKSxYKHJyKSksd2Q9aGQoKSxWPUZvKCksRD1vdCgpKFwibXF0dC1wYWNrZXQ6cGFyc2VyXCIpLFdvPWNsYXNzIHQgZXh0ZW5kcyBQbXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5wYXJzZXI9dGhpcy5jb25zdHJ1Y3Rvci5wYXJzZXI7fXN0YXRpYyBwYXJzZXIoZSl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiB0Pyh0aGlzLnNldHRpbmdzPWV8fHt9LHRoaXMuX3N0YXRlcz1bXCJfcGFyc2VIZWFkZXJcIixcIl9wYXJzZUxlbmd0aFwiLFwiX3BhcnNlUGF5bG9hZFwiLFwiX25ld1BhY2tldFwiXSx0aGlzLl9yZXNldFN0YXRlKCksdGhpcyk6bmV3IHQoKS5wYXJzZXIoZSl9X3Jlc2V0U3RhdGUoKXtEKFwiX3Jlc2V0U3RhdGU6IHJlc2V0dGluZyBwYWNrZXQsIGVycm9yLCBfbGlzdCwgYW5kIF9zdGF0ZUNvdW50ZXJcIiksdGhpcy5wYWNrZXQ9bmV3IHdkLHRoaXMuZXJyb3I9bnVsbCx0aGlzLl9saXN0PUJtKCksdGhpcy5fc3RhdGVDb3VudGVyPTA7fXBhcnNlKGUpe2Zvcih0aGlzLmVycm9yJiZ0aGlzLl9yZXNldFN0YXRlKCksdGhpcy5fbGlzdC5hcHBlbmQoZSksRChcInBhcnNlOiBjdXJyZW50IHN0YXRlOiAlc1wiLHRoaXMuX3N0YXRlc1t0aGlzLl9zdGF0ZUNvdW50ZXJdKTsodGhpcy5wYWNrZXQubGVuZ3RoIT09LTF8fHRoaXMuX2xpc3QubGVuZ3RoPjApJiZ0aGlzW3RoaXMuX3N0YXRlc1t0aGlzLl9zdGF0ZUNvdW50ZXJdXSgpJiYhdGhpcy5lcnJvcjspdGhpcy5fc3RhdGVDb3VudGVyKyssRChcInBhcnNlOiBzdGF0ZSBjb21wbGV0ZS4gX3N0YXRlQ291bnRlciBpcyBub3c6ICVkXCIsdGhpcy5fc3RhdGVDb3VudGVyKSxEKFwicGFyc2U6IHBhY2tldC5sZW5ndGg6ICVkLCBidWZmZXIgbGlzdCBsZW5ndGg6ICVkXCIsdGhpcy5wYWNrZXQubGVuZ3RoLHRoaXMuX2xpc3QubGVuZ3RoKSx0aGlzLl9zdGF0ZUNvdW50ZXI+PXRoaXMuX3N0YXRlcy5sZW5ndGgmJih0aGlzLl9zdGF0ZUNvdW50ZXI9MCk7cmV0dXJuIEQoXCJwYXJzZTogZXhpdGVkIHdoaWxlIGxvb3AuIHBhY2tldDogJWQsIGJ1ZmZlciBsaXN0IGxlbmd0aDogJWRcIix0aGlzLnBhY2tldC5sZW5ndGgsdGhpcy5fbGlzdC5sZW5ndGgpLHRoaXMuX2xpc3QubGVuZ3RofV9wYXJzZUhlYWRlcigpe2xldCBlPXRoaXMuX2xpc3QucmVhZFVJbnQ4KDApLHI9ZT4+Vi5DTURfU0hJRlQ7dGhpcy5wYWNrZXQuY21kPVYudHlwZXNbcl07bGV0IGk9ZSYxNSxuPVYucmVxdWlyZWRIZWFkZXJGbGFnc1tyXTtyZXR1cm4gbiE9bnVsbCYmaSE9PW4/dGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihWLnJlcXVpcmVkSGVhZGVyRmxhZ3NFcnJvcnNbcl0pKToodGhpcy5wYWNrZXQucmV0YWluPShlJlYuUkVUQUlOX01BU0spIT09MCx0aGlzLnBhY2tldC5xb3M9ZT4+Vi5RT1NfU0hJRlQmVi5RT1NfTUFTSyx0aGlzLnBhY2tldC5xb3M+Mj90aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiUGFja2V0IG11c3Qgbm90IGhhdmUgYm90aCBRb1MgYml0cyBzZXQgdG8gMVwiKSk6KHRoaXMucGFja2V0LmR1cD0oZSZWLkRVUF9NQVNLKSE9PTAsRChcIl9wYXJzZUhlYWRlcjogcGFja2V0OiAlb1wiLHRoaXMucGFja2V0KSx0aGlzLl9saXN0LmNvbnN1bWUoMSksITApKX1fcGFyc2VMZW5ndGgoKXtsZXQgZT10aGlzLl9wYXJzZVZhckJ5dGVOdW0oITApO3JldHVybiBlJiYodGhpcy5wYWNrZXQubGVuZ3RoPWUudmFsdWUsdGhpcy5fbGlzdC5jb25zdW1lKGUuYnl0ZXMpKSxEKFwiX3BhcnNlTGVuZ3RoICVkXCIsZS52YWx1ZSksISFlfV9wYXJzZVBheWxvYWQoKXtEKFwiX3BhcnNlUGF5bG9hZDogcGF5bG9hZCAlT1wiLHRoaXMuX2xpc3QpO2xldCBlPSExO2lmKHRoaXMucGFja2V0Lmxlbmd0aD09PTB8fHRoaXMuX2xpc3QubGVuZ3RoPj10aGlzLnBhY2tldC5sZW5ndGgpe3N3aXRjaCh0aGlzLl9wb3M9MCx0aGlzLnBhY2tldC5jbWQpe2Nhc2VcImNvbm5lY3RcIjp0aGlzLl9wYXJzZUNvbm5lY3QoKTticmVhaztjYXNlXCJjb25uYWNrXCI6dGhpcy5fcGFyc2VDb25uYWNrKCk7YnJlYWs7Y2FzZVwicHVibGlzaFwiOnRoaXMuX3BhcnNlUHVibGlzaCgpO2JyZWFrO2Nhc2VcInB1YmFja1wiOmNhc2VcInB1YnJlY1wiOmNhc2VcInB1YnJlbFwiOmNhc2VcInB1YmNvbXBcIjp0aGlzLl9wYXJzZUNvbmZpcm1hdGlvbigpO2JyZWFrO2Nhc2VcInN1YnNjcmliZVwiOnRoaXMuX3BhcnNlU3Vic2NyaWJlKCk7YnJlYWs7Y2FzZVwic3ViYWNrXCI6dGhpcy5fcGFyc2VTdWJhY2soKTticmVhaztjYXNlXCJ1bnN1YnNjcmliZVwiOnRoaXMuX3BhcnNlVW5zdWJzY3JpYmUoKTticmVhaztjYXNlXCJ1bnN1YmFja1wiOnRoaXMuX3BhcnNlVW5zdWJhY2soKTticmVhaztjYXNlXCJwaW5ncmVxXCI6Y2FzZVwicGluZ3Jlc3BcIjpicmVhaztjYXNlXCJkaXNjb25uZWN0XCI6dGhpcy5fcGFyc2VEaXNjb25uZWN0KCk7YnJlYWs7Y2FzZVwiYXV0aFwiOnRoaXMuX3BhcnNlQXV0aCgpO2JyZWFrO2RlZmF1bHQ6dGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIk5vdCBzdXBwb3J0ZWRcIikpO31lPSEwO31yZXR1cm4gRChcIl9wYXJzZVBheWxvYWQgY29tcGxldGUgcmVzdWx0OiAlc1wiLGUpLGV9X3BhcnNlQ29ubmVjdCgpe0QoXCJfcGFyc2VDb25uZWN0XCIpO2xldCBlLHIsaSxuLG89e30scz10aGlzLnBhY2tldCxhPXRoaXMuX3BhcnNlU3RyaW5nKCk7aWYoYT09PW51bGwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgcHJvdG9jb2xJZFwiKSk7aWYoYSE9PVwiTVFUVFwiJiZhIT09XCJNUUlzZHBcIilyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgcHJvdG9jb2xJZFwiKSk7aWYocy5wcm90b2NvbElkPWEsdGhpcy5fcG9zPj10aGlzLl9saXN0Lmxlbmd0aClyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIlBhY2tldCB0b28gc2hvcnRcIikpO2lmKHMucHJvdG9jb2xWZXJzaW9uPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3Bvcykscy5wcm90b2NvbFZlcnNpb24+PTEyOCYmKHMuYnJpZGdlTW9kZT0hMCxzLnByb3RvY29sVmVyc2lvbj1zLnByb3RvY29sVmVyc2lvbi0xMjgpLHMucHJvdG9jb2xWZXJzaW9uIT09MyYmcy5wcm90b2NvbFZlcnNpb24hPT00JiZzLnByb3RvY29sVmVyc2lvbiE9PTUpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3RvY29sIHZlcnNpb25cIikpO2lmKHRoaXMuX3BvcysrLHRoaXMuX3Bvcz49dGhpcy5fbGlzdC5sZW5ndGgpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJQYWNrZXQgdG9vIHNob3J0XCIpKTtpZih0aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MpJjEpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDb25uZWN0IGZsYWcgYml0IDAgbXVzdCBiZSAwLCBidXQgZ290IDFcIikpO28udXNlcm5hbWU9dGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKSZWLlVTRVJOQU1FX01BU0ssby5wYXNzd29yZD10aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MpJlYuUEFTU1dPUkRfTUFTSyxvLndpbGw9dGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKSZWLldJTExfRkxBR19NQVNLO2xldCB1PSEhKHRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3BvcykmVi5XSUxMX1JFVEFJTl9NQVNLKSxjPSh0aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MpJlYuV0lMTF9RT1NfTUFTSyk+PlYuV0lMTF9RT1NfU0hJRlQ7aWYoby53aWxsKXMud2lsbD17fSxzLndpbGwucmV0YWluPXUscy53aWxsLnFvcz1jO2Vsc2Uge2lmKHUpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJXaWxsIFJldGFpbiBGbGFnIG11c3QgYmUgc2V0IHRvIHplcm8gd2hlbiBXaWxsIEZsYWcgaXMgc2V0IHRvIDBcIikpO2lmKGMpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJXaWxsIFFvUyBtdXN0IGJlIHNldCB0byB6ZXJvIHdoZW4gV2lsbCBGbGFnIGlzIHNldCB0byAwXCIpKX1pZihzLmNsZWFuPSh0aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MpJlYuQ0xFQU5fU0VTU0lPTl9NQVNLKSE9PTAsdGhpcy5fcG9zKysscy5rZWVwYWxpdmU9dGhpcy5fcGFyc2VOdW0oKSxzLmtlZXBhbGl2ZT09PS0xKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiUGFja2V0IHRvbyBzaG9ydFwiKSk7aWYocy5wcm90b2NvbFZlcnNpb249PT01KXtsZXQgZD10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkKS5sZW5ndGgmJihzLnByb3BlcnRpZXM9ZCk7fWxldCBoPXRoaXMuX3BhcnNlU3RyaW5nKCk7aWYoaD09PW51bGwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJQYWNrZXQgdG9vIHNob3J0XCIpKTtpZihzLmNsaWVudElkPWgsRChcIl9wYXJzZUNvbm5lY3Q6IHBhY2tldC5jbGllbnRJZDogJXNcIixzLmNsaWVudElkKSxvLndpbGwpe2lmKHMucHJvdG9jb2xWZXJzaW9uPT09NSl7bGV0IGQ9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZCkubGVuZ3RoJiYocy53aWxsLnByb3BlcnRpZXM9ZCk7fWlmKGU9dGhpcy5fcGFyc2VTdHJpbmcoKSxlPT09bnVsbClyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSB3aWxsIHRvcGljXCIpKTtpZihzLndpbGwudG9waWM9ZSxEKFwiX3BhcnNlQ29ubmVjdDogcGFja2V0LndpbGwudG9waWM6ICVzXCIscy53aWxsLnRvcGljKSxyPXRoaXMuX3BhcnNlQnVmZmVyKCkscj09PW51bGwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2Ugd2lsbCBwYXlsb2FkXCIpKTtzLndpbGwucGF5bG9hZD1yLEQoXCJfcGFyc2VDb25uZWN0OiBwYWNrZXQud2lsbC5wYXlsYW9kOiAlc1wiLHMud2lsbC5wYXlsb2FkKTt9aWYoby51c2VybmFtZSl7aWYobj10aGlzLl9wYXJzZVN0cmluZygpLG49PT1udWxsKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHVzZXJuYW1lXCIpKTtzLnVzZXJuYW1lPW4sRChcIl9wYXJzZUNvbm5lY3Q6IHBhY2tldC51c2VybmFtZTogJXNcIixzLnVzZXJuYW1lKTt9aWYoby5wYXNzd29yZCl7aWYoaT10aGlzLl9wYXJzZUJ1ZmZlcigpLGk9PT1udWxsKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHBhc3N3b3JkXCIpKTtzLnBhc3N3b3JkPWk7fXJldHVybiB0aGlzLnNldHRpbmdzPXMsRChcIl9wYXJzZUNvbm5lY3Q6IGNvbXBsZXRlXCIpLHN9X3BhcnNlQ29ubmFjaygpe0QoXCJfcGFyc2VDb25uYWNrXCIpO2xldCBlPXRoaXMucGFja2V0O2lmKHRoaXMuX2xpc3QubGVuZ3RoPDEpcmV0dXJuIG51bGw7bGV0IHI9dGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKyspO2lmKHI+MSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgY29ubmFjayBmbGFncywgYml0cyA3LTEgbXVzdCBiZSBzZXQgdG8gMFwiKSk7aWYoZS5zZXNzaW9uUHJlc2VudD0hIShyJlYuU0VTU0lPTlBSRVNFTlRfTUFTSyksdGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb249PT01KXRoaXMuX2xpc3QubGVuZ3RoPj0yP2UucmVhc29uQ29kZT10aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MrKyk6ZS5yZWFzb25Db2RlPTA7ZWxzZSB7aWYodGhpcy5fbGlzdC5sZW5ndGg8MilyZXR1cm4gbnVsbDtlLnJldHVybkNvZGU9dGhpcy5fbGlzdC5yZWFkVUludDgodGhpcy5fcG9zKyspO31pZihlLnJldHVybkNvZGU9PT0tMXx8ZS5yZWFzb25Db2RlPT09LTEpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgcmV0dXJuIGNvZGVcIikpO2lmKHRoaXMuc2V0dGluZ3MucHJvdG9jb2xWZXJzaW9uPT09NSl7bGV0IGk9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaSkubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPWkpO31EKFwiX3BhcnNlQ29ubmFjazogY29tcGxldGVcIik7fV9wYXJzZVB1Ymxpc2goKXtEKFwiX3BhcnNlUHVibGlzaFwiKTtsZXQgZT10aGlzLnBhY2tldDtpZihlLnRvcGljPXRoaXMuX3BhcnNlU3RyaW5nKCksZS50b3BpYz09PW51bGwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgdG9waWNcIikpO2lmKCEoZS5xb3M+MCYmIXRoaXMuX3BhcnNlTWVzc2FnZUlkKCkpKXtpZih0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTUpe2xldCByPXRoaXMuX3BhcnNlUHJvcGVydGllcygpO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpLmxlbmd0aCYmKGUucHJvcGVydGllcz1yKTt9ZS5wYXlsb2FkPXRoaXMuX2xpc3Quc2xpY2UodGhpcy5fcG9zLGUubGVuZ3RoKSxEKFwiX3BhcnNlUHVibGlzaDogcGF5bG9hZCBmcm9tIGJ1ZmZlciBsaXN0OiAlb1wiLGUucGF5bG9hZCk7fX1fcGFyc2VTdWJzY3JpYmUoKXtEKFwiX3BhcnNlU3Vic2NyaWJlXCIpO2xldCBlPXRoaXMucGFja2V0LHIsaSxuLG8scyxhLHU7aWYoZS5zdWJzY3JpcHRpb25zPVtdLCEhdGhpcy5fcGFyc2VNZXNzYWdlSWQoKSl7aWYodGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb249PT01KXtsZXQgYz10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjKS5sZW5ndGgmJihlLnByb3BlcnRpZXM9Yyk7fWlmKGUubGVuZ3RoPD0wKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiTWFsZm9ybWVkIHN1YnNjcmliZSwgbm8gcGF5bG9hZCBzcGVjaWZpZWRcIikpO2Zvcig7dGhpcy5fcG9zPGUubGVuZ3RoOyl7aWYocj10aGlzLl9wYXJzZVN0cmluZygpLHI9PT1udWxsKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHRvcGljXCIpKTtpZih0aGlzLl9wb3M+PWUubGVuZ3RoKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiTWFsZm9ybWVkIFN1YnNjcmliZSBQYXlsb2FkXCIpKTtpZihpPXRoaXMuX3BhcnNlQnl0ZSgpLHRoaXMuc2V0dGluZ3MucHJvdG9jb2xWZXJzaW9uPT09NSl7aWYoaSYxOTIpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmliZSB0b3BpYyBmbGFnIGJpdHMsIGJpdHMgNy02IG11c3QgYmUgMFwiKSl9ZWxzZSBpZihpJjI1MilyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgc3Vic2NyaWJlIHRvcGljIGZsYWcgYml0cywgYml0cyA3LTIgbXVzdCBiZSAwXCIpKTtpZihuPWkmVi5TVUJTQ1JJQkVfT1BUSU9OU19RT1NfTUFTSyxuPjIpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmliZSBRb1MsIG11c3QgYmUgPD0gMlwiKSk7aWYoYT0oaT4+Vi5TVUJTQ1JJQkVfT1BUSU9OU19OTF9TSElGVCZWLlNVQlNDUklCRV9PUFRJT05TX05MX01BU0spIT09MCxzPShpPj5WLlNVQlNDUklCRV9PUFRJT05TX1JBUF9TSElGVCZWLlNVQlNDUklCRV9PUFRJT05TX1JBUF9NQVNLKSE9PTAsbz1pPj5WLlNVQlNDUklCRV9PUFRJT05TX1JIX1NISUZUJlYuU1VCU0NSSUJFX09QVElPTlNfUkhfTUFTSyxvPjIpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHJldGFpbiBoYW5kbGluZywgbXVzdCBiZSA8PSAyXCIpKTt1PXt0b3BpYzpyLHFvczpufSx0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTU/KHUubmw9YSx1LnJhcD1zLHUucmg9byk6dGhpcy5zZXR0aW5ncy5icmlkZ2VNb2RlJiYodS5yaD0wLHUucmFwPSEwLHUubmw9ITApLEQoXCJfcGFyc2VTdWJzY3JpYmU6IHB1c2ggc3Vic2NyaXB0aW9uIGAlc2AgdG8gc3Vic2NyaXB0aW9uXCIsdSksZS5zdWJzY3JpcHRpb25zLnB1c2godSk7fX19X3BhcnNlU3ViYWNrKCl7RChcIl9wYXJzZVN1YmFja1wiKTtsZXQgZT10aGlzLnBhY2tldDtpZih0aGlzLnBhY2tldC5ncmFudGVkPVtdLCEhdGhpcy5fcGFyc2VNZXNzYWdlSWQoKSl7aWYodGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb249PT01KXtsZXQgcj10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKS5sZW5ndGgmJihlLnByb3BlcnRpZXM9cik7fWlmKGUubGVuZ3RoPD0wKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiTWFsZm9ybWVkIHN1YmFjaywgbm8gcGF5bG9hZCBzcGVjaWZpZWRcIikpO2Zvcig7dGhpcy5fcG9zPHRoaXMucGFja2V0Lmxlbmd0aDspe2xldCByPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHRoaXMuX3BvcysrKTtpZih0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTUpe2lmKCFWLk1RVFQ1X1NVQkFDS19DT0RFU1tyXSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgc3ViYWNrIGNvZGVcIikpfWVsc2UgaWYocj4yJiZyIT09MTI4KXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiSW52YWxpZCBzdWJhY2sgUW9TLCBtdXN0IGJlIDAsIDEsIDIgb3IgMTI4XCIpKTt0aGlzLnBhY2tldC5ncmFudGVkLnB1c2gocik7fX19X3BhcnNlVW5zdWJzY3JpYmUoKXtEKFwiX3BhcnNlVW5zdWJzY3JpYmVcIik7bGV0IGU9dGhpcy5wYWNrZXQ7aWYoZS51bnN1YnNjcmlwdGlvbnM9W10sISF0aGlzLl9wYXJzZU1lc3NhZ2VJZCgpKXtpZih0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTUpe2xldCByPXRoaXMuX3BhcnNlUHJvcGVydGllcygpO09iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpLmxlbmd0aCYmKGUucHJvcGVydGllcz1yKTt9aWYoZS5sZW5ndGg8PTApcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJNYWxmb3JtZWQgdW5zdWJzY3JpYmUsIG5vIHBheWxvYWQgc3BlY2lmaWVkXCIpKTtmb3IoO3RoaXMuX3BvczxlLmxlbmd0aDspe2xldCByPXRoaXMuX3BhcnNlU3RyaW5nKCk7aWYocj09PW51bGwpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgdG9waWNcIikpO0QoXCJfcGFyc2VVbnN1YnNjcmliZTogcHVzaCB0b3BpYyBgJXNgIHRvIHVuc3Vic2NyaXB0aW9uc1wiLHIpLGUudW5zdWJzY3JpcHRpb25zLnB1c2gocik7fX19X3BhcnNlVW5zdWJhY2soKXtEKFwiX3BhcnNlVW5zdWJhY2tcIik7bGV0IGU9dGhpcy5wYWNrZXQ7aWYoIXRoaXMuX3BhcnNlTWVzc2FnZUlkKCkpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJDYW5ub3QgcGFyc2UgbWVzc2FnZUlkXCIpKTtpZigodGhpcy5zZXR0aW5ncy5wcm90b2NvbFZlcnNpb249PT0zfHx0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTQpJiZlLmxlbmd0aCE9PTIpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJNYWxmb3JtZWQgdW5zdWJhY2ssIHBheWxvYWQgbGVuZ3RoIG11c3QgYmUgMlwiKSk7aWYoZS5sZW5ndGg8PTApcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJNYWxmb3JtZWQgdW5zdWJhY2ssIG5vIHBheWxvYWQgc3BlY2lmaWVkXCIpKTtpZih0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbj09PTUpe2xldCByPXRoaXMuX3BhcnNlUHJvcGVydGllcygpO2ZvcihPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKS5sZW5ndGgmJihlLnByb3BlcnRpZXM9ciksZS5ncmFudGVkPVtdO3RoaXMuX3Bvczx0aGlzLnBhY2tldC5sZW5ndGg7KXtsZXQgaT10aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MrKyk7aWYoIVYuTVFUVDVfVU5TVUJBQ0tfQ09ERVNbaV0pcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc3ViYWNrIGNvZGVcIikpO3RoaXMucGFja2V0LmdyYW50ZWQucHVzaChpKTt9fX1fcGFyc2VDb25maXJtYXRpb24oKXtEKFwiX3BhcnNlQ29uZmlybWF0aW9uOiBwYWNrZXQuY21kOiBgJXNgXCIsdGhpcy5wYWNrZXQuY21kKTtsZXQgZT10aGlzLnBhY2tldDtpZih0aGlzLl9wYXJzZU1lc3NhZ2VJZCgpLHRoaXMuc2V0dGluZ3MucHJvdG9jb2xWZXJzaW9uPT09NSl7aWYoZS5sZW5ndGg+Mil7c3dpdGNoKGUucmVhc29uQ29kZT10aGlzLl9wYXJzZUJ5dGUoKSx0aGlzLnBhY2tldC5jbWQpe2Nhc2VcInB1YmFja1wiOmNhc2VcInB1YnJlY1wiOmlmKCFWLk1RVFQ1X1BVQkFDS19QVUJSRUNfQ09ERVNbZS5yZWFzb25Db2RlXSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgXCIrdGhpcy5wYWNrZXQuY21kK1wiIHJlYXNvbiBjb2RlXCIpKTticmVhaztjYXNlXCJwdWJyZWxcIjpjYXNlXCJwdWJjb21wXCI6aWYoIVYuTVFUVDVfUFVCUkVMX1BVQkNPTVBfQ09ERVNbZS5yZWFzb25Db2RlXSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgXCIrdGhpcy5wYWNrZXQuY21kK1wiIHJlYXNvbiBjb2RlXCIpKTticmVha31EKFwiX3BhcnNlQ29uZmlybWF0aW9uOiBwYWNrZXQucmVhc29uQ29kZSBgJWRgXCIsZS5yZWFzb25Db2RlKTt9ZWxzZSBlLnJlYXNvbkNvZGU9MDtpZihlLmxlbmd0aD4zKXtsZXQgcj10aGlzLl9wYXJzZVByb3BlcnRpZXMoKTtPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKS5sZW5ndGgmJihlLnByb3BlcnRpZXM9cik7fX1yZXR1cm4gITB9X3BhcnNlRGlzY29ubmVjdCgpe2xldCBlPXRoaXMucGFja2V0O2lmKEQoXCJfcGFyc2VEaXNjb25uZWN0XCIpLHRoaXMuc2V0dGluZ3MucHJvdG9jb2xWZXJzaW9uPT09NSl7dGhpcy5fbGlzdC5sZW5ndGg+MD8oZS5yZWFzb25Db2RlPXRoaXMuX3BhcnNlQnl0ZSgpLFYuTVFUVDVfRElTQ09OTkVDVF9DT0RFU1tlLnJlYXNvbkNvZGVdfHx0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiSW52YWxpZCBkaXNjb25uZWN0IHJlYXNvbiBjb2RlXCIpKSk6ZS5yZWFzb25Db2RlPTA7bGV0IHI9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocikubGVuZ3RoJiYoZS5wcm9wZXJ0aWVzPXIpO31yZXR1cm4gRChcIl9wYXJzZURpc2Nvbm5lY3QgcmVzdWx0OiB0cnVlXCIpLCEwfV9wYXJzZUF1dGgoKXtEKFwiX3BhcnNlQXV0aFwiKTtsZXQgZT10aGlzLnBhY2tldDtpZih0aGlzLnNldHRpbmdzLnByb3RvY29sVmVyc2lvbiE9PTUpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJOb3Qgc3VwcG9ydGVkIGF1dGggcGFja2V0IGZvciB0aGlzIHZlcnNpb24gTVFUVFwiKSk7aWYoZS5yZWFzb25Db2RlPXRoaXMuX3BhcnNlQnl0ZSgpLCFWLk1RVFQ1X0FVVEhfQ09ERVNbZS5yZWFzb25Db2RlXSlyZXR1cm4gdGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkludmFsaWQgYXV0aCByZWFzb24gY29kZVwiKSk7bGV0IHI9dGhpcy5fcGFyc2VQcm9wZXJ0aWVzKCk7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHIpLmxlbmd0aCYmKGUucHJvcGVydGllcz1yKSxEKFwiX3BhcnNlQXV0aDogcmVzdWx0OiB0cnVlXCIpLCEwfV9wYXJzZU1lc3NhZ2VJZCgpe2xldCBlPXRoaXMucGFja2V0O3JldHVybiBlLm1lc3NhZ2VJZD10aGlzLl9wYXJzZU51bSgpLGUubWVzc2FnZUlkPT09bnVsbD8odGhpcy5fZW1pdEVycm9yKG5ldyBFcnJvcihcIkNhbm5vdCBwYXJzZSBtZXNzYWdlSWRcIikpLCExKTooRChcIl9wYXJzZU1lc3NhZ2VJZDogcGFja2V0Lm1lc3NhZ2VJZCAlZFwiLGUubWVzc2FnZUlkKSwhMCl9X3BhcnNlU3RyaW5nKGUpe2xldCByPXRoaXMuX3BhcnNlTnVtKCksaT1yK3RoaXMuX3BvcztpZihyPT09LTF8fGk+dGhpcy5fbGlzdC5sZW5ndGh8fGk+dGhpcy5wYWNrZXQubGVuZ3RoKXJldHVybiBudWxsO2xldCBuPXRoaXMuX2xpc3QudG9TdHJpbmcoXCJ1dGY4XCIsdGhpcy5fcG9zLGkpO3JldHVybiB0aGlzLl9wb3MrPXIsRChcIl9wYXJzZVN0cmluZzogcmVzdWx0OiAlc1wiLG4pLG59X3BhcnNlU3RyaW5nUGFpcigpe3JldHVybiBEKFwiX3BhcnNlU3RyaW5nUGFpclwiKSx7bmFtZTp0aGlzLl9wYXJzZVN0cmluZygpLHZhbHVlOnRoaXMuX3BhcnNlU3RyaW5nKCl9fV9wYXJzZUJ1ZmZlcigpe2xldCBlPXRoaXMuX3BhcnNlTnVtKCkscj1lK3RoaXMuX3BvcztpZihlPT09LTF8fHI+dGhpcy5fbGlzdC5sZW5ndGh8fHI+dGhpcy5wYWNrZXQubGVuZ3RoKXJldHVybiBudWxsO2xldCBpPXRoaXMuX2xpc3Quc2xpY2UodGhpcy5fcG9zLHIpO3JldHVybiB0aGlzLl9wb3MrPWUsRChcIl9wYXJzZUJ1ZmZlcjogcmVzdWx0OiAlb1wiLGkpLGl9X3BhcnNlTnVtKCl7aWYodGhpcy5fbGlzdC5sZW5ndGgtdGhpcy5fcG9zPDIpcmV0dXJuIC0xO2xldCBlPXRoaXMuX2xpc3QucmVhZFVJbnQxNkJFKHRoaXMuX3Bvcyk7cmV0dXJuIHRoaXMuX3Bvcys9MixEKFwiX3BhcnNlTnVtOiByZXN1bHQ6ICVzXCIsZSksZX1fcGFyc2U0Qnl0ZU51bSgpe2lmKHRoaXMuX2xpc3QubGVuZ3RoLXRoaXMuX3Bvczw0KXJldHVybiAtMTtsZXQgZT10aGlzLl9saXN0LnJlYWRVSW50MzJCRSh0aGlzLl9wb3MpO3JldHVybiB0aGlzLl9wb3MrPTQsRChcIl9wYXJzZTRCeXRlTnVtOiByZXN1bHQ6ICVzXCIsZSksZX1fcGFyc2VWYXJCeXRlTnVtKGUpe0QoXCJfcGFyc2VWYXJCeXRlTnVtXCIpO2xldCByPTQsaT0wLG49MSxvPTAscz0hMSxhLHU9dGhpcy5fcG9zP3RoaXMuX3BvczowO2Zvcig7aTxyJiZ1K2k8dGhpcy5fbGlzdC5sZW5ndGg7KXtpZihhPXRoaXMuX2xpc3QucmVhZFVJbnQ4KHUraSsrKSxvKz1uKihhJlYuVkFSQllURUlOVF9NQVNLKSxuKj0xMjgsIShhJlYuVkFSQllURUlOVF9GSU5fTUFTSykpe3M9ITA7YnJlYWt9aWYodGhpcy5fbGlzdC5sZW5ndGg8PWkpYnJlYWt9cmV0dXJuICFzJiZpPT09ciYmdGhpcy5fbGlzdC5sZW5ndGg+PWkmJnRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJJbnZhbGlkIHZhcmlhYmxlIGJ5dGUgaW50ZWdlclwiKSksdSYmKHRoaXMuX3Bvcys9aSkscz9lP3M9e2J5dGVzOmksdmFsdWU6b306cz1vOnM9ITEsRChcIl9wYXJzZVZhckJ5dGVOdW06IHJlc3VsdDogJW9cIixzKSxzfV9wYXJzZUJ5dGUoKXtsZXQgZTtyZXR1cm4gdGhpcy5fcG9zPHRoaXMuX2xpc3QubGVuZ3RoJiYoZT10aGlzLl9saXN0LnJlYWRVSW50OCh0aGlzLl9wb3MpLHRoaXMuX3BvcysrKSxEKFwiX3BhcnNlQnl0ZTogcmVzdWx0OiAlb1wiLGUpLGV9X3BhcnNlQnlUeXBlKGUpe3N3aXRjaChEKFwiX3BhcnNlQnlUeXBlOiB0eXBlOiAlc1wiLGUpLGUpe2Nhc2VcImJ5dGVcIjpyZXR1cm4gdGhpcy5fcGFyc2VCeXRlKCkhPT0wO2Nhc2VcImludDhcIjpyZXR1cm4gdGhpcy5fcGFyc2VCeXRlKCk7Y2FzZVwiaW50MTZcIjpyZXR1cm4gdGhpcy5fcGFyc2VOdW0oKTtjYXNlXCJpbnQzMlwiOnJldHVybiB0aGlzLl9wYXJzZTRCeXRlTnVtKCk7Y2FzZVwidmFyXCI6cmV0dXJuIHRoaXMuX3BhcnNlVmFyQnl0ZU51bSgpO2Nhc2VcInN0cmluZ1wiOnJldHVybiB0aGlzLl9wYXJzZVN0cmluZygpO2Nhc2VcInBhaXJcIjpyZXR1cm4gdGhpcy5fcGFyc2VTdHJpbmdQYWlyKCk7Y2FzZVwiYmluYXJ5XCI6cmV0dXJuIHRoaXMuX3BhcnNlQnVmZmVyKCl9fV9wYXJzZVByb3BlcnRpZXMoKXtEKFwiX3BhcnNlUHJvcGVydGllc1wiKTtsZXQgZT10aGlzLl9wYXJzZVZhckJ5dGVOdW0oKSxpPXRoaXMuX3BvcytlLG49e307Zm9yKDt0aGlzLl9wb3M8aTspe2xldCBvPXRoaXMuX3BhcnNlQnl0ZSgpO2lmKCFvKXJldHVybiB0aGlzLl9lbWl0RXJyb3IobmV3IEVycm9yKFwiQ2Fubm90IHBhcnNlIHByb3BlcnR5IGNvZGUgdHlwZVwiKSksITE7bGV0IHM9Vi5wcm9wZXJ0aWVzQ29kZXNbb107aWYoIXMpcmV0dXJuIHRoaXMuX2VtaXRFcnJvcihuZXcgRXJyb3IoXCJVbmtub3duIHByb3BlcnR5XCIpKSwhMTtpZihzPT09XCJ1c2VyUHJvcGVydGllc1wiKXtuW3NdfHwobltzXT1PYmplY3QuY3JlYXRlKG51bGwpKTtsZXQgYT10aGlzLl9wYXJzZUJ5VHlwZShWLnByb3BlcnRpZXNUeXBlc1tzXSk7aWYobltzXVthLm5hbWVdKWlmKEFycmF5LmlzQXJyYXkobltzXVthLm5hbWVdKSluW3NdW2EubmFtZV0ucHVzaChhLnZhbHVlKTtlbHNlIHtsZXQgdT1uW3NdW2EubmFtZV07bltzXVthLm5hbWVdPVt1XSxuW3NdW2EubmFtZV0ucHVzaChhLnZhbHVlKTt9ZWxzZSBuW3NdW2EubmFtZV09YS52YWx1ZTtjb250aW51ZX1uW3NdP0FycmF5LmlzQXJyYXkobltzXSk/bltzXS5wdXNoKHRoaXMuX3BhcnNlQnlUeXBlKFYucHJvcGVydGllc1R5cGVzW3NdKSk6KG5bc109W25bc11dLG5bc10ucHVzaCh0aGlzLl9wYXJzZUJ5VHlwZShWLnByb3BlcnRpZXNUeXBlc1tzXSkpKTpuW3NdPXRoaXMuX3BhcnNlQnlUeXBlKFYucHJvcGVydGllc1R5cGVzW3NdKTt9cmV0dXJuIG59X25ld1BhY2tldCgpe3JldHVybiBEKFwiX25ld1BhY2tldFwiKSx0aGlzLnBhY2tldCYmKHRoaXMuX2xpc3QuY29uc3VtZSh0aGlzLnBhY2tldC5sZW5ndGgpLEQoXCJfbmV3UGFja2V0OiBwYXJzZXIgZW1pdCBwYWNrZXQ6IHBhY2tldC5jbWQ6ICVzLCBwYWNrZXQucGF5bG9hZDogJXMsIHBhY2tldC5sZW5ndGg6ICVkXCIsdGhpcy5wYWNrZXQuY21kLHRoaXMucGFja2V0LnBheWxvYWQsdGhpcy5wYWNrZXQubGVuZ3RoKSx0aGlzLmVtaXQoXCJwYWNrZXRcIix0aGlzLnBhY2tldCkpLEQoXCJfbmV3UGFja2V0OiBuZXcgcGFja2V0XCIpLHRoaXMucGFja2V0PW5ldyB3ZCx0aGlzLl9wb3M9MCwhMH1fZW1pdEVycm9yKGUpe0QoXCJfZW1pdEVycm9yXCIsZSksdGhpcy5lcnJvcj1lLHRoaXMuZW1pdChcImVycm9yXCIsZSk7fX07X2QuZXhwb3J0cz1Xbzt9KTt2YXIgQWQ9TSgoSFAsU2QpPT57digpO20oKTtfKCk7dmFye0J1ZmZlcjp2aX09KHllKCksWChfZSkpLE9tPTY1NTM2LHZkPXt9LGttPXZpLmlzQnVmZmVyKHZpLmZyb20oWzEsMl0pLnN1YmFycmF5KDAsMSkpO2Z1bmN0aW9uIEVkKHQpe2xldCBlPXZpLmFsbG9jVW5zYWZlKDIpO3JldHVybiBlLndyaXRlVUludDgodD4+OCwwKSxlLndyaXRlVUludDgodCYyNTUsMCsxKSxlfWZ1bmN0aW9uIHhtKCl7Zm9yKGxldCB0PTA7dDxPbTt0KyspdmRbdF09RWQodCk7fWZ1bmN0aW9uIE1tKHQpe2xldCByPTAsaT0wLG49dmkuYWxsb2NVbnNhZmUoNCk7ZG8gcj10JTEyOHwwLHQ9dC8xMjh8MCx0PjAmJihyPXJ8MTI4KSxuLndyaXRlVUludDgocixpKyspO3doaWxlKHQ+MCYmaTw0KTtyZXR1cm4gdD4wJiYoaT0wKSxrbT9uLnN1YmFycmF5KDAsaSk6bi5zbGljZSgwLGkpfWZ1bmN0aW9uIExtKHQpe2xldCBlPXZpLmFsbG9jVW5zYWZlKDQpO3JldHVybiBlLndyaXRlVUludDMyQkUodCwwKSxlfVNkLmV4cG9ydHM9e2NhY2hlOnZkLGdlbmVyYXRlQ2FjaGU6eG0sZ2VuZXJhdGVOdW1iZXI6RWQsZ2VuQnVmVmFyaWFibGVCeXRlSW50Ok1tLGdlbmVyYXRlNEJ5dGVCdWZmZXI6TG19O30pO3ZhciBJZD1NKChlTywkbyk9Pnt2KCk7bSgpO18oKTt0eXBlb2YgUD5cInVcInx8IVAudmVyc2lvbnx8UC52ZXJzaW9uLmluZGV4T2YoXCJ2MC5cIik9PT0wfHxQLnZlcnNpb24uaW5kZXhPZihcInYxLlwiKT09PTAmJlAudmVyc2lvbi5pbmRleE9mKFwidjEuOC5cIikhPT0wPyRvLmV4cG9ydHM9e25leHRUaWNrOlVtfTokby5leHBvcnRzPVA7ZnVuY3Rpb24gVW0odCxlLHIsaSl7aWYodHlwZW9mIHQhPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7dmFyIG49YXJndW1lbnRzLmxlbmd0aCxvLHM7c3dpdGNoKG4pe2Nhc2UgMDpjYXNlIDE6cmV0dXJuIFAubmV4dFRpY2sodCk7Y2FzZSAyOnJldHVybiBQLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5jYWxsKG51bGwsZSk7fSk7Y2FzZSAzOnJldHVybiBQLm5leHRUaWNrKGZ1bmN0aW9uKCl7dC5jYWxsKG51bGwsZSxyKTt9KTtjYXNlIDQ6cmV0dXJuIFAubmV4dFRpY2soZnVuY3Rpb24oKXt0LmNhbGwobnVsbCxlLHIsaSk7fSk7ZGVmYXVsdDpmb3Iobz1uZXcgQXJyYXkobi0xKSxzPTA7czxvLmxlbmd0aDspb1tzKytdPWFyZ3VtZW50c1tzXTtyZXR1cm4gUC5uZXh0VGljayhmdW5jdGlvbigpe3QuYXBwbHkobnVsbCxvKTt9KX19fSk7dmFyIHpvPU0oKGZPLHhkKT0+e3YoKTttKCk7XygpO3ZhciBqPUZvKCkse0J1ZmZlcjpxfT0oeWUoKSxYKF9lKSksTm09cS5hbGxvY1Vuc2FmZSgwKSxxbT1xLmZyb20oWzBdKSxFaT1BZCgpLERtPUlkKCkubmV4dFRpY2sscWU9b3QoKShcIm1xdHQtcGFja2V0OndyaXRlVG9TdHJlYW1cIiksQ249RWkuY2FjaGUsam09RWkuZ2VuZXJhdGVOdW1iZXIsRm09RWkuZ2VuZXJhdGVDYWNoZSxIbz1FaS5nZW5CdWZWYXJpYWJsZUJ5dGVJbnQsV209RWkuZ2VuZXJhdGU0Qnl0ZUJ1ZmZlcixJZT1WbyxCbj0hMDtmdW5jdGlvbiBPZCh0LGUscil7c3dpdGNoKHFlKFwiZ2VuZXJhdGUgY2FsbGVkXCIpLGUuY29yayYmKGUuY29yaygpLERtKCRtLGUpKSxCbiYmKEJuPSExLEZtKCkpLHFlKFwiZ2VuZXJhdGU6IHBhY2tldC5jbWQ6ICVzXCIsdC5jbWQpLHQuY21kKXtjYXNlXCJjb25uZWN0XCI6cmV0dXJuIEhtKHQsZSk7Y2FzZVwiY29ubmFja1wiOnJldHVybiBWbSh0LGUscik7Y2FzZVwicHVibGlzaFwiOnJldHVybiB6bSh0LGUscik7Y2FzZVwicHViYWNrXCI6Y2FzZVwicHVicmVjXCI6Y2FzZVwicHVicmVsXCI6Y2FzZVwicHViY29tcFwiOnJldHVybiBLbSh0LGUscik7Y2FzZVwic3Vic2NyaWJlXCI6cmV0dXJuIEdtKHQsZSxyKTtjYXNlXCJzdWJhY2tcIjpyZXR1cm4gUW0odCxlLHIpO2Nhc2VcInVuc3Vic2NyaWJlXCI6cmV0dXJuIFltKHQsZSxyKTtjYXNlXCJ1bnN1YmFja1wiOnJldHVybiBKbSh0LGUscik7Y2FzZVwicGluZ3JlcVwiOmNhc2VcInBpbmdyZXNwXCI6cmV0dXJuIFhtKHQsZSk7Y2FzZVwiZGlzY29ubmVjdFwiOnJldHVybiBabSh0LGUscik7Y2FzZVwiYXV0aFwiOnJldHVybiBlMSh0LGUscik7ZGVmYXVsdDpyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIlVua25vd24gY29tbWFuZFwiKSksITF9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShPZCxcImNhY2hlTnVtYmVyc1wiLHtnZXQoKXtyZXR1cm4gSWU9PT1Wb30sc2V0KHQpe3Q/KCghQ258fE9iamVjdC5rZXlzKENuKS5sZW5ndGg9PT0wKSYmKEJuPSEwKSxJZT1Wbyk6KEJuPSExLEllPXQxKTt9fSk7ZnVuY3Rpb24gJG0odCl7dC51bmNvcmsoKTt9ZnVuY3Rpb24gSG0odCxlLHIpe2xldCBpPXR8fHt9LG49aS5wcm90b2NvbElkfHxcIk1RVFRcIixvPWkucHJvdG9jb2xWZXJzaW9ufHw0LHM9aS53aWxsLGE9aS5jbGVhbix1PWkua2VlcGFsaXZlfHwwLGM9aS5jbGllbnRJZHx8XCJcIixoPWkudXNlcm5hbWUsZD1pLnBhc3N3b3JkLGc9aS5wcm9wZXJ0aWVzO2E9PT12b2lkIDAmJihhPSEwKTtsZXQgeT0wO2lmKCFufHx0eXBlb2YgbiE9XCJzdHJpbmdcIiYmIXEuaXNCdWZmZXIobikpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3RvY29sSWRcIikpLCExO2lmKHkrPW4ubGVuZ3RoKzIsbyE9PTMmJm8hPT00JiZvIT09NSlyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgcHJvdG9jb2wgdmVyc2lvblwiKSksITE7aWYoeSs9MSwodHlwZW9mIGM9PVwic3RyaW5nXCJ8fHEuaXNCdWZmZXIoYykpJiYoY3x8bz49NCkmJihjfHxhKSl5Kz1xLmJ5dGVMZW5ndGgoYykrMjtlbHNlIHtpZihvPDQpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJjbGllbnRJZCBtdXN0IGJlIHN1cHBsaWVkIGJlZm9yZSAzLjEuMVwiKSksITE7aWYoYSoxPT09MClyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcImNsaWVudElkIG11c3QgYmUgZ2l2ZW4gaWYgY2xlYW5TZXNzaW9uIHNldCB0byAwXCIpKSwhMX1pZih0eXBlb2YgdSE9XCJudW1iZXJcInx8dTwwfHx1PjY1NTM1fHx1JTEhPT0wKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBrZWVwYWxpdmVcIikpLCExO3krPTIseSs9MTtsZXQgdyxFO2lmKG89PT01KXtpZih3PUZ0KGUsZyksIXcpcmV0dXJuICExO3krPXcubGVuZ3RoO31pZihzKXtpZih0eXBlb2YgcyE9XCJvYmplY3RcIilyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgd2lsbFwiKSksITE7aWYoIXMudG9waWN8fHR5cGVvZiBzLnRvcGljIT1cInN0cmluZ1wiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCB3aWxsIHRvcGljXCIpKSwhMTtpZih5Kz1xLmJ5dGVMZW5ndGgocy50b3BpYykrMix5Kz0yLHMucGF5bG9hZClpZihzLnBheWxvYWQubGVuZ3RoPj0wKXR5cGVvZiBzLnBheWxvYWQ9PVwic3RyaW5nXCI/eSs9cS5ieXRlTGVuZ3RoKHMucGF5bG9hZCk6eSs9cy5wYXlsb2FkLmxlbmd0aDtlbHNlIHJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCB3aWxsIHBheWxvYWRcIikpLCExO2lmKEU9e30sbz09PTUpe2lmKEU9RnQoZSxzLnByb3BlcnRpZXMpLCFFKXJldHVybiAhMTt5Kz1FLmxlbmd0aDt9fWxldCBTPSExO2lmKGghPW51bGwpaWYoUGQoaCkpUz0hMCx5Kz1xLmJ5dGVMZW5ndGgoaCkrMjtlbHNlIHJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCB1c2VybmFtZVwiKSksITE7aWYoZCE9bnVsbCl7aWYoIVMpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJVc2VybmFtZSBpcyByZXF1aXJlZCB0byB1c2UgcGFzc3dvcmRcIikpLCExO2lmKFBkKGQpKXkrPWtkKGQpKzI7ZWxzZSByZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgcGFzc3dvcmRcIikpLCExfWUud3JpdGUoai5DT05ORUNUX0hFQURFUiksRGUoZSx5KSxHcihlLG4pLGkuYnJpZGdlTW9kZSYmKG8rPTEyOCksZS53cml0ZShvPT09MTMxP2ouVkVSU0lPTjEzMTpvPT09MTMyP2ouVkVSU0lPTjEzMjpvPT09ND9qLlZFUlNJT040Om89PT01P2ouVkVSU0lPTjU6ai5WRVJTSU9OMyk7bGV0IEk9MDtyZXR1cm4gSXw9aCE9bnVsbD9qLlVTRVJOQU1FX01BU0s6MCxJfD1kIT1udWxsP2ouUEFTU1dPUkRfTUFTSzowLEl8PXMmJnMucmV0YWluP2ouV0lMTF9SRVRBSU5fTUFTSzowLEl8PXMmJnMucW9zP3MucW9zPDxqLldJTExfUU9TX1NISUZUOjAsSXw9cz9qLldJTExfRkxBR19NQVNLOjAsSXw9YT9qLkNMRUFOX1NFU1NJT05fTUFTSzowLGUud3JpdGUocS5mcm9tKFtJXSkpLEllKGUsdSksbz09PTUmJncud3JpdGUoKSxHcihlLGMpLHMmJihvPT09NSYmRS53cml0ZSgpLHlyKGUscy50b3BpYyksR3IoZSxzLnBheWxvYWQpKSxoIT1udWxsJiZHcihlLGgpLGQhPW51bGwmJkdyKGUsZCksITB9ZnVuY3Rpb24gVm0odCxlLHIpe2xldCBpPXI/ci5wcm90b2NvbFZlcnNpb246NCxuPXR8fHt9LG89aT09PTU/bi5yZWFzb25Db2RlOm4ucmV0dXJuQ29kZSxzPW4ucHJvcGVydGllcyxhPTI7aWYodHlwZW9mIG8hPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHJldHVybiBjb2RlXCIpKSwhMTtsZXQgdT1udWxsO2lmKGk9PT01KXtpZih1PUZ0KGUscyksIXUpcmV0dXJuICExO2ErPXUubGVuZ3RoO31yZXR1cm4gZS53cml0ZShqLkNPTk5BQ0tfSEVBREVSKSxEZShlLGEpLGUud3JpdGUobi5zZXNzaW9uUHJlc2VudD9qLlNFU1NJT05QUkVTRU5UX0hFQURFUjpxbSksZS53cml0ZShxLmZyb20oW29dKSksdT8ud3JpdGUoKSwhMH1mdW5jdGlvbiB6bSh0LGUscil7cWUoXCJwdWJsaXNoOiBwYWNrZXQ6ICVvXCIsdCk7bGV0IGk9cj9yLnByb3RvY29sVmVyc2lvbjo0LG49dHx8e30sbz1uLnFvc3x8MCxzPW4ucmV0YWluP2ouUkVUQUlOX01BU0s6MCxhPW4udG9waWMsdT1uLnBheWxvYWR8fE5tLGM9bi5tZXNzYWdlSWQsaD1uLnByb3BlcnRpZXMsZD0wO2lmKHR5cGVvZiBhPT1cInN0cmluZ1wiKWQrPXEuYnl0ZUxlbmd0aChhKSsyO2Vsc2UgaWYocS5pc0J1ZmZlcihhKSlkKz1hLmxlbmd0aCsyO2Vsc2UgcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHRvcGljXCIpKSwhMTtpZihxLmlzQnVmZmVyKHUpP2QrPXUubGVuZ3RoOmQrPXEuYnl0ZUxlbmd0aCh1KSxvJiZ0eXBlb2YgYyE9XCJudW1iZXJcIilyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgbWVzc2FnZUlkXCIpKSwhMTtvJiYoZCs9Mik7bGV0IGc9bnVsbDtpZihpPT09NSl7aWYoZz1GdChlLGgpLCFnKXJldHVybiAhMTtkKz1nLmxlbmd0aDt9cmV0dXJuIGUud3JpdGUoai5QVUJMSVNIX0hFQURFUltvXVtuLmR1cD8xOjBdW3M/MTowXSksRGUoZSxkKSxJZShlLGtkKGEpKSxlLndyaXRlKGEpLG8+MCYmSWUoZSxjKSxnPy53cml0ZSgpLHFlKFwicHVibGlzaDogcGF5bG9hZDogJW9cIix1KSxlLndyaXRlKHUpfWZ1bmN0aW9uIEttKHQsZSxyKXtsZXQgaT1yP3IucHJvdG9jb2xWZXJzaW9uOjQsbj10fHx7fSxvPW4uY21kfHxcInB1YmFja1wiLHM9bi5tZXNzYWdlSWQsYT1uLmR1cCYmbz09PVwicHVicmVsXCI/ai5EVVBfTUFTSzowLHU9MCxjPW4ucmVhc29uQ29kZSxoPW4ucHJvcGVydGllcyxkPWk9PT01PzM6MjtpZihvPT09XCJwdWJyZWxcIiYmKHU9MSksdHlwZW9mIHMhPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VJZFwiKSksITE7bGV0IGc9bnVsbDtpZihpPT09NSYmdHlwZW9mIGg9PVwib2JqZWN0XCIpe2lmKGc9U2koZSxoLHIsZCksIWcpcmV0dXJuICExO2QrPWcubGVuZ3RoO31yZXR1cm4gZS53cml0ZShqLkFDS1Nbb11bdV1bYV1bMF0pLGQ9PT0zJiYoZCs9YyE9PTA/MTotMSksRGUoZSxkKSxJZShlLHMpLGk9PT01JiZkIT09MiYmZS53cml0ZShxLmZyb20oW2NdKSksZyE9PW51bGw/Zy53cml0ZSgpOmQ9PT00JiZlLndyaXRlKHEuZnJvbShbMF0pKSwhMH1mdW5jdGlvbiBHbSh0LGUscil7cWUoXCJzdWJzY3JpYmU6IHBhY2tldDogXCIpO2xldCBpPXI/ci5wcm90b2NvbFZlcnNpb246NCxuPXR8fHt9LG89bi5kdXA/ai5EVVBfTUFTSzowLHM9bi5tZXNzYWdlSWQsYT1uLnN1YnNjcmlwdGlvbnMsdT1uLnByb3BlcnRpZXMsYz0wO2lmKHR5cGVvZiBzIT1cIm51bWJlclwiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBtZXNzYWdlSWRcIikpLCExO2MrPTI7bGV0IGg9bnVsbDtpZihpPT09NSl7aWYoaD1GdChlLHUpLCFoKXJldHVybiAhMTtjKz1oLmxlbmd0aDt9aWYodHlwZW9mIGE9PVwib2JqZWN0XCImJmEubGVuZ3RoKWZvcihsZXQgZz0wO2c8YS5sZW5ndGg7Zys9MSl7bGV0IHk9YVtnXS50b3BpYyx3PWFbZ10ucW9zO2lmKHR5cGVvZiB5IT1cInN0cmluZ1wiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBzdWJzY3JpcHRpb25zIC0gaW52YWxpZCB0b3BpY1wiKSksITE7aWYodHlwZW9mIHchPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmlwdGlvbnMgLSBpbnZhbGlkIHFvc1wiKSksITE7aWYoaT09PTUpe2lmKHR5cGVvZihhW2ddLm5sfHwhMSkhPVwiYm9vbGVhblwiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBzdWJzY3JpcHRpb25zIC0gaW52YWxpZCBObyBMb2NhbFwiKSksITE7aWYodHlwZW9mKGFbZ10ucmFwfHwhMSkhPVwiYm9vbGVhblwiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBzdWJzY3JpcHRpb25zIC0gaW52YWxpZCBSZXRhaW4gYXMgUHVibGlzaGVkXCIpKSwhMTtsZXQgST1hW2ddLnJofHwwO2lmKHR5cGVvZiBJIT1cIm51bWJlclwifHxJPjIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHN1YnNjcmlwdGlvbnMgLSBpbnZhbGlkIFJldGFpbiBIYW5kbGluZ1wiKSksITF9Yys9cS5ieXRlTGVuZ3RoKHkpKzIrMTt9ZWxzZSByZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgc3Vic2NyaXB0aW9uc1wiKSksITE7cWUoXCJzdWJzY3JpYmU6IHdyaXRpbmcgdG8gc3RyZWFtOiAlb1wiLGouU1VCU0NSSUJFX0hFQURFUiksZS53cml0ZShqLlNVQlNDUklCRV9IRUFERVJbMV1bbz8xOjBdWzBdKSxEZShlLGMpLEllKGUscyksaCE9PW51bGwmJmgud3JpdGUoKTtsZXQgZD0hMDtmb3IobGV0IGcgb2YgYSl7bGV0IHk9Zy50b3BpYyx3PWcucW9zLEU9K2cubmwsUz0rZy5yYXAsST1nLnJoLEM7eXIoZSx5KSxDPWouU1VCU0NSSUJFX09QVElPTlNfUU9TW3ddLGk9PT01JiYoQ3w9RT9qLlNVQlNDUklCRV9PUFRJT05TX05MOjAsQ3w9Uz9qLlNVQlNDUklCRV9PUFRJT05TX1JBUDowLEN8PUk/ai5TVUJTQ1JJQkVfT1BUSU9OU19SSFtJXTowKSxkPWUud3JpdGUocS5mcm9tKFtDXSkpO31yZXR1cm4gZH1mdW5jdGlvbiBRbSh0LGUscil7bGV0IGk9cj9yLnByb3RvY29sVmVyc2lvbjo0LG49dHx8e30sbz1uLm1lc3NhZ2VJZCxzPW4uZ3JhbnRlZCxhPW4ucHJvcGVydGllcyx1PTA7aWYodHlwZW9mIG8hPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VJZFwiKSksITE7aWYodSs9Mix0eXBlb2Ygcz09XCJvYmplY3RcIiYmcy5sZW5ndGgpZm9yKGxldCBoPTA7aDxzLmxlbmd0aDtoKz0xKXtpZih0eXBlb2Ygc1toXSE9XCJudW1iZXJcIilyZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgcW9zIHZlY3RvclwiKSksITE7dSs9MTt9ZWxzZSByZXR1cm4gZS5kZXN0cm95KG5ldyBFcnJvcihcIkludmFsaWQgcW9zIHZlY3RvclwiKSksITE7bGV0IGM9bnVsbDtpZihpPT09NSl7aWYoYz1TaShlLGEscix1KSwhYylyZXR1cm4gITE7dSs9Yy5sZW5ndGg7fXJldHVybiBlLndyaXRlKGouU1VCQUNLX0hFQURFUiksRGUoZSx1KSxJZShlLG8pLGMhPT1udWxsJiZjLndyaXRlKCksZS53cml0ZShxLmZyb20ocykpfWZ1bmN0aW9uIFltKHQsZSxyKXtsZXQgaT1yP3IucHJvdG9jb2xWZXJzaW9uOjQsbj10fHx7fSxvPW4ubWVzc2FnZUlkLHM9bi5kdXA/ai5EVVBfTUFTSzowLGE9bi51bnN1YnNjcmlwdGlvbnMsdT1uLnByb3BlcnRpZXMsYz0wO2lmKHR5cGVvZiBvIT1cIm51bWJlclwiKXJldHVybiBlLmRlc3Ryb3kobmV3IEVycm9yKFwiSW52YWxpZCBtZXNzYWdlSWRcIikpLCExO2lmKGMrPTIsdHlwZW9mIGE9PVwib2JqZWN0XCImJmEubGVuZ3RoKWZvcihsZXQgZz0wO2c8YS5sZW5ndGg7Zys9MSl7aWYodHlwZW9mIGFbZ10hPVwic3RyaW5nXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc3Vic2NyaXB0aW9uc1wiKSksITE7Yys9cS5ieXRlTGVuZ3RoKGFbZ10pKzI7fWVsc2UgcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHVuc3Vic2NyaXB0aW9uc1wiKSksITE7bGV0IGg9bnVsbDtpZihpPT09NSl7aWYoaD1GdChlLHUpLCFoKXJldHVybiAhMTtjKz1oLmxlbmd0aDt9ZS53cml0ZShqLlVOU1VCU0NSSUJFX0hFQURFUlsxXVtzPzE6MF1bMF0pLERlKGUsYyksSWUoZSxvKSxoIT09bnVsbCYmaC53cml0ZSgpO2xldCBkPSEwO2ZvcihsZXQgZz0wO2c8YS5sZW5ndGg7ZysrKWQ9eXIoZSxhW2ddKTtyZXR1cm4gZH1mdW5jdGlvbiBKbSh0LGUscil7bGV0IGk9cj9yLnByb3RvY29sVmVyc2lvbjo0LG49dHx8e30sbz1uLm1lc3NhZ2VJZCxzPW4uZHVwP2ouRFVQX01BU0s6MCxhPW4uZ3JhbnRlZCx1PW4ucHJvcGVydGllcyxjPW4uY21kLGg9MCxkPTI7aWYodHlwZW9mIG8hPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIG1lc3NhZ2VJZFwiKSksITE7aWYoaT09PTUpaWYodHlwZW9mIGE9PVwib2JqZWN0XCImJmEubGVuZ3RoKWZvcihsZXQgeT0wO3k8YS5sZW5ndGg7eSs9MSl7aWYodHlwZW9mIGFbeV0hPVwibnVtYmVyXCIpcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHFvcyB2ZWN0b3JcIikpLCExO2QrPTE7fWVsc2UgcmV0dXJuIGUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIHFvcyB2ZWN0b3JcIikpLCExO2xldCBnPW51bGw7aWYoaT09PTUpe2lmKGc9U2koZSx1LHIsZCksIWcpcmV0dXJuICExO2QrPWcubGVuZ3RoO31yZXR1cm4gZS53cml0ZShqLkFDS1NbY11baF1bc11bMF0pLERlKGUsZCksSWUoZSxvKSxnIT09bnVsbCYmZy53cml0ZSgpLGk9PT01JiZlLndyaXRlKHEuZnJvbShhKSksITB9ZnVuY3Rpb24gWG0odCxlLHIpe3JldHVybiBlLndyaXRlKGouRU1QVFlbdC5jbWRdKX1mdW5jdGlvbiBabSh0LGUscil7bGV0IGk9cj9yLnByb3RvY29sVmVyc2lvbjo0LG49dHx8e30sbz1uLnJlYXNvbkNvZGUscz1uLnByb3BlcnRpZXMsYT1pPT09NT8xOjAsdT1udWxsO2lmKGk9PT01KXtpZih1PVNpKGUscyxyLGEpLCF1KXJldHVybiAhMTthKz11Lmxlbmd0aDt9cmV0dXJuIGUud3JpdGUocS5mcm9tKFtqLmNvZGVzLmRpc2Nvbm5lY3Q8PDRdKSksRGUoZSxhKSxpPT09NSYmZS53cml0ZShxLmZyb20oW29dKSksdSE9PW51bGwmJnUud3JpdGUoKSwhMH1mdW5jdGlvbiBlMSh0LGUscil7bGV0IGk9cj9yLnByb3RvY29sVmVyc2lvbjo0LG49dHx8e30sbz1uLnJlYXNvbkNvZGUscz1uLnByb3BlcnRpZXMsYT1pPT09NT8xOjA7aSE9PTUmJmUuZGVzdHJveShuZXcgRXJyb3IoXCJJbnZhbGlkIG1xdHQgdmVyc2lvbiBmb3IgYXV0aCBwYWNrZXRcIikpO2xldCB1PVNpKGUscyxyLGEpO3JldHVybiB1PyhhKz11Lmxlbmd0aCxlLndyaXRlKHEuZnJvbShbai5jb2Rlcy5hdXRoPDw0XSkpLERlKGUsYSksZS53cml0ZShxLmZyb20oW29dKSksdSE9PW51bGwmJnUud3JpdGUoKSwhMCk6ITF9dmFyIFRkPXt9O2Z1bmN0aW9uIERlKHQsZSl7aWYoZT5qLlZBUkJZVEVJTlRfTUFYKXJldHVybiB0LmRlc3Ryb3kobmV3IEVycm9yKGBJbnZhbGlkIHZhcmlhYmxlIGJ5dGUgaW50ZWdlcjogJHtlfWApKSwhMTtsZXQgcj1UZFtlXTtyZXR1cm4gcnx8KHI9SG8oZSksZTwxNjM4NCYmKFRkW2VdPXIpKSxxZShcIndyaXRlVmFyQnl0ZUludDogd3JpdGluZyB0byBzdHJlYW06ICVvXCIsciksdC53cml0ZShyKX1mdW5jdGlvbiB5cih0LGUpe2xldCByPXEuYnl0ZUxlbmd0aChlKTtyZXR1cm4gSWUodCxyKSxxZShcIndyaXRlU3RyaW5nOiAlc1wiLGUpLHQud3JpdGUoZSxcInV0ZjhcIil9ZnVuY3Rpb24gUmQodCxlLHIpe3lyKHQsZSkseXIodCxyKTt9ZnVuY3Rpb24gVm8odCxlKXtyZXR1cm4gcWUoXCJ3cml0ZU51bWJlckNhY2hlZDogbnVtYmVyOiAlZFwiLGUpLHFlKFwid3JpdGVOdW1iZXJDYWNoZWQ6ICVvXCIsQ25bZV0pLHQud3JpdGUoQ25bZV0pfWZ1bmN0aW9uIHQxKHQsZSl7bGV0IHI9am0oZSk7cmV0dXJuIHFlKFwid3JpdGVOdW1iZXJHZW5lcmF0ZWQ6ICVvXCIsciksdC53cml0ZShyKX1mdW5jdGlvbiByMSh0LGUpe2xldCByPVdtKGUpO3JldHVybiBxZShcIndyaXRlNEJ5dGVOdW1iZXI6ICVvXCIsciksdC53cml0ZShyKX1mdW5jdGlvbiBHcih0LGUpe3R5cGVvZiBlPT1cInN0cmluZ1wiP3lyKHQsZSk6ZT8oSWUodCxlLmxlbmd0aCksdC53cml0ZShlKSk6SWUodCwwKTt9ZnVuY3Rpb24gRnQodCxlKXtpZih0eXBlb2YgZSE9XCJvYmplY3RcInx8ZS5sZW5ndGghPW51bGwpcmV0dXJuIHtsZW5ndGg6MSx3cml0ZSgpe0JkKHQse30sMCk7fX07bGV0IHI9MDtmdW5jdGlvbiBpKG8scyl7bGV0IGE9ai5wcm9wZXJ0aWVzVHlwZXNbb10sdT0wO3N3aXRjaChhKXtjYXNlXCJieXRlXCI6e2lmKHR5cGVvZiBzIT1cImJvb2xlYW5cIilyZXR1cm4gdC5kZXN0cm95KG5ldyBFcnJvcihgSW52YWxpZCAke299OiAke3N9YCkpLCExO3UrPTErMTticmVha31jYXNlXCJpbnQ4XCI6e2lmKHR5cGVvZiBzIT1cIm51bWJlclwifHxzPDB8fHM+MjU1KXJldHVybiB0LmRlc3Ryb3kobmV3IEVycm9yKGBJbnZhbGlkICR7b306ICR7c31gKSksITE7dSs9MSsxO2JyZWFrfWNhc2VcImJpbmFyeVwiOntpZihzJiZzPT09bnVsbClyZXR1cm4gdC5kZXN0cm95KG5ldyBFcnJvcihgSW52YWxpZCAke299OiAke3N9YCkpLCExO3UrPTErcS5ieXRlTGVuZ3RoKHMpKzI7YnJlYWt9Y2FzZVwiaW50MTZcIjp7aWYodHlwZW9mIHMhPVwibnVtYmVyXCJ8fHM8MHx8cz42NTUzNSlyZXR1cm4gdC5kZXN0cm95KG5ldyBFcnJvcihgSW52YWxpZCAke299OiAke3N9YCkpLCExO3UrPTErMjticmVha31jYXNlXCJpbnQzMlwiOntpZih0eXBlb2YgcyE9XCJudW1iZXJcInx8czwwfHxzPjQyOTQ5NjcyOTUpcmV0dXJuIHQuZGVzdHJveShuZXcgRXJyb3IoYEludmFsaWQgJHtvfTogJHtzfWApKSwhMTt1Kz0xKzQ7YnJlYWt9Y2FzZVwidmFyXCI6e2lmKHR5cGVvZiBzIT1cIm51bWJlclwifHxzPDB8fHM+MjY4NDM1NDU1KXJldHVybiB0LmRlc3Ryb3kobmV3IEVycm9yKGBJbnZhbGlkICR7b306ICR7c31gKSksITE7dSs9MStxLmJ5dGVMZW5ndGgoSG8ocykpO2JyZWFrfWNhc2VcInN0cmluZ1wiOntpZih0eXBlb2YgcyE9XCJzdHJpbmdcIilyZXR1cm4gdC5kZXN0cm95KG5ldyBFcnJvcihgSW52YWxpZCAke299OiAke3N9YCkpLCExO3UrPTErMitxLmJ5dGVMZW5ndGgocy50b1N0cmluZygpKTticmVha31jYXNlXCJwYWlyXCI6e2lmKHR5cGVvZiBzIT1cIm9iamVjdFwiKXJldHVybiB0LmRlc3Ryb3kobmV3IEVycm9yKGBJbnZhbGlkICR7b306ICR7c31gKSksITE7dSs9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocykucmVkdWNlKChjLGgpPT57bGV0IGQ9c1toXTtyZXR1cm4gQXJyYXkuaXNBcnJheShkKT9jKz1kLnJlZHVjZSgoZyx5KT0+KGcrPTErMitxLmJ5dGVMZW5ndGgoaC50b1N0cmluZygpKSsyK3EuYnl0ZUxlbmd0aCh5LnRvU3RyaW5nKCkpLGcpLDApOmMrPTErMitxLmJ5dGVMZW5ndGgoaC50b1N0cmluZygpKSsyK3EuYnl0ZUxlbmd0aChzW2hdLnRvU3RyaW5nKCkpLGN9LDApO2JyZWFrfWRlZmF1bHQ6cmV0dXJuIHQuZGVzdHJveShuZXcgRXJyb3IoYEludmFsaWQgcHJvcGVydHkgJHtvfTogJHtzfWApKSwhMX1yZXR1cm4gdX1pZihlKWZvcihsZXQgbyBpbiBlKXtsZXQgcz0wLGE9MCx1PWVbb107aWYoQXJyYXkuaXNBcnJheSh1KSlmb3IobGV0IGM9MDtjPHUubGVuZ3RoO2MrKyl7aWYoYT1pKG8sdVtjXSksIWEpcmV0dXJuICExO3MrPWE7fWVsc2Uge2lmKGE9aShvLHUpLCFhKXJldHVybiAhMTtzPWE7fWlmKCFzKXJldHVybiAhMTtyKz1zO31yZXR1cm4ge2xlbmd0aDpxLmJ5dGVMZW5ndGgoSG8ocikpK3Isd3JpdGUoKXtCZCh0LGUscik7fX19ZnVuY3Rpb24gU2kodCxlLHIsaSl7bGV0IG49W1wicmVhc29uU3RyaW5nXCIsXCJ1c2VyUHJvcGVydGllc1wiXSxvPXImJnIucHJvcGVydGllcyYmci5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplP3IucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZTowLHM9RnQodCxlKTtpZihvKWZvcig7aStzLmxlbmd0aD5vOyl7bGV0IGE9bi5zaGlmdCgpO2lmKGEmJmVbYV0pZGVsZXRlIGVbYV0scz1GdCh0LGUpO2Vsc2UgcmV0dXJuICExfXJldHVybiBzfWZ1bmN0aW9uIENkKHQsZSxyKXtzd2l0Y2goai5wcm9wZXJ0aWVzVHlwZXNbZV0pe2Nhc2VcImJ5dGVcIjp7dC53cml0ZShxLmZyb20oW2oucHJvcGVydGllc1tlXV0pKSx0LndyaXRlKHEuZnJvbShbK3JdKSk7YnJlYWt9Y2FzZVwiaW50OFwiOnt0LndyaXRlKHEuZnJvbShbai5wcm9wZXJ0aWVzW2VdXSkpLHQud3JpdGUocS5mcm9tKFtyXSkpO2JyZWFrfWNhc2VcImJpbmFyeVwiOnt0LndyaXRlKHEuZnJvbShbai5wcm9wZXJ0aWVzW2VdXSkpLEdyKHQscik7YnJlYWt9Y2FzZVwiaW50MTZcIjp7dC53cml0ZShxLmZyb20oW2oucHJvcGVydGllc1tlXV0pKSxJZSh0LHIpO2JyZWFrfWNhc2VcImludDMyXCI6e3Qud3JpdGUocS5mcm9tKFtqLnByb3BlcnRpZXNbZV1dKSkscjEodCxyKTticmVha31jYXNlXCJ2YXJcIjp7dC53cml0ZShxLmZyb20oW2oucHJvcGVydGllc1tlXV0pKSxEZSh0LHIpO2JyZWFrfWNhc2VcInN0cmluZ1wiOnt0LndyaXRlKHEuZnJvbShbai5wcm9wZXJ0aWVzW2VdXSkpLHlyKHQscik7YnJlYWt9Y2FzZVwicGFpclwiOntPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhyKS5mb3JFYWNoKG49PntsZXQgbz1yW25dO0FycmF5LmlzQXJyYXkobyk/by5mb3JFYWNoKHM9Pnt0LndyaXRlKHEuZnJvbShbai5wcm9wZXJ0aWVzW2VdXSkpLFJkKHQsbi50b1N0cmluZygpLHMudG9TdHJpbmcoKSk7fSk6KHQud3JpdGUocS5mcm9tKFtqLnByb3BlcnRpZXNbZV1dKSksUmQodCxuLnRvU3RyaW5nKCksby50b1N0cmluZygpKSk7fSk7YnJlYWt9ZGVmYXVsdDpyZXR1cm4gdC5kZXN0cm95KG5ldyBFcnJvcihgSW52YWxpZCBwcm9wZXJ0eSAke2V9IHZhbHVlOiAke3J9YCkpLCExfX1mdW5jdGlvbiBCZCh0LGUscil7RGUodCxyKTtmb3IobGV0IGkgaW4gZSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxpKSYmZVtpXSE9PW51bGwpe2xldCBuPWVbaV07aWYoQXJyYXkuaXNBcnJheShuKSlmb3IobGV0IG89MDtvPG4ubGVuZ3RoO28rKylDZCh0LGksbltvXSk7ZWxzZSBDZCh0LGksbik7fX1mdW5jdGlvbiBrZCh0KXtyZXR1cm4gdD90IGluc3RhbmNlb2YgcT90Lmxlbmd0aDpxLmJ5dGVMZW5ndGgodCk6MH1mdW5jdGlvbiBQZCh0KXtyZXR1cm4gdHlwZW9mIHQ9PVwic3RyaW5nXCJ8fHQgaW5zdGFuY2VvZiBxfXhkLmV4cG9ydHM9T2Q7fSk7dmFyIFVkPU0oKG1PLExkKT0+e3YoKTttKCk7XygpO3ZhciBpMT16bygpLHtFdmVudEVtaXR0ZXI6bjF9PShpcigpLFgocnIpKSx7QnVmZmVyOk1kfT0oeWUoKSxYKF9lKSk7ZnVuY3Rpb24gczEodCxlKXtsZXQgcj1uZXcgS287cmV0dXJuIGkxKHQscixlKSxyLmNvbmNhdCgpfXZhciBLbz1jbGFzcyBleHRlbmRzIG4xe2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLl9hcnJheT1uZXcgQXJyYXkoMjApLHRoaXMuX2k9MDt9d3JpdGUoZSl7cmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2krK109ZSwhMH1jb25jYXQoKXtsZXQgZT0wLHI9bmV3IEFycmF5KHRoaXMuX2FycmF5Lmxlbmd0aCksaT10aGlzLl9hcnJheSxuPTAsbztmb3Iobz0wO288aS5sZW5ndGgmJmlbb10hPT12b2lkIDA7bysrKXR5cGVvZiBpW29dIT1cInN0cmluZ1wiP3Jbb109aVtvXS5sZW5ndGg6cltvXT1NZC5ieXRlTGVuZ3RoKGlbb10pLGUrPXJbb107bGV0IHM9TWQuYWxsb2NVbnNhZmUoZSk7Zm9yKG89MDtvPGkubGVuZ3RoJiZpW29dIT09dm9pZCAwO28rKyl0eXBlb2YgaVtvXSE9XCJzdHJpbmdcIj8oaVtvXS5jb3B5KHMsbiksbis9cltvXSk6KHMud3JpdGUoaVtvXSxuKSxuKz1yW29dKTtyZXR1cm4gc31kZXN0cm95KGUpe2UmJnRoaXMuZW1pdChcImVycm9yXCIsZSk7fX07TGQuZXhwb3J0cz1zMTt9KTt2YXIgTmQ9TShQbj0+e3YoKTttKCk7XygpO1BuLnBhcnNlcj1tZCgpLnBhcnNlcjtQbi5nZW5lcmF0ZT1VZCgpO1BuLndyaXRlVG9TdHJlYW09em8oKTt9KTt2YXIgWW89TShRbz0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShRbyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgR289Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLm5leHRJZD1NYXRoLm1heCgxLE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSo2NTUzNSkpO31hbGxvY2F0ZSgpe2xldCBlPXRoaXMubmV4dElkKys7cmV0dXJuIHRoaXMubmV4dElkPT09NjU1MzYmJih0aGlzLm5leHRJZD0xKSxlfWdldExhc3RBbGxvY2F0ZWQoKXtyZXR1cm4gdGhpcy5uZXh0SWQ9PT0xPzY1NTM1OnRoaXMubmV4dElkLTF9cmVnaXN0ZXIoZSl7cmV0dXJuICEwfWRlYWxsb2NhdGUoZSl7fWNsZWFyKCl7fX07UW8uZGVmYXVsdD1Hbzt9KTt2YXIgRGQ9TSgoWU8scWQpPT57digpO20oKTtfKCk7cWQuZXhwb3J0cz1vMTtmdW5jdGlvbiBRcih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHg/eC5mcm9tKHQpOm5ldyB0LmNvbnN0cnVjdG9yKHQuYnVmZmVyLnNsaWNlKCksdC5ieXRlT2Zmc2V0LHQubGVuZ3RoKX1mdW5jdGlvbiBvMSh0KXtpZih0PXR8fHt9LHQuY2lyY2xlcylyZXR1cm4gYTEodCk7cmV0dXJuIHQucHJvdG8/aTpyO2Z1bmN0aW9uIGUobixvKXtmb3IodmFyIHM9T2JqZWN0LmtleXMobiksYT1uZXcgQXJyYXkocy5sZW5ndGgpLHU9MDt1PHMubGVuZ3RoO3UrKyl7dmFyIGM9c1t1XSxoPW5bY107dHlwZW9mIGghPVwib2JqZWN0XCJ8fGg9PT1udWxsP2FbY109aDpoIGluc3RhbmNlb2YgRGF0ZT9hW2NdPW5ldyBEYXRlKGgpOkFycmF5QnVmZmVyLmlzVmlldyhoKT9hW2NdPVFyKGgpOmFbY109byhoKTt9cmV0dXJuIGF9ZnVuY3Rpb24gcihuKXtpZih0eXBlb2YgbiE9XCJvYmplY3RcInx8bj09PW51bGwpcmV0dXJuIG47aWYobiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKG4pO2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIGUobixyKTtpZihuIGluc3RhbmNlb2YgTWFwKXJldHVybiBuZXcgTWFwKGUoQXJyYXkuZnJvbShuKSxyKSk7aWYobiBpbnN0YW5jZW9mIFNldClyZXR1cm4gbmV3IFNldChlKEFycmF5LmZyb20obikscikpO3ZhciBvPXt9O2Zvcih2YXIgcyBpbiBuKWlmKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scykhPT0hMSl7dmFyIGE9bltzXTt0eXBlb2YgYSE9XCJvYmplY3RcInx8YT09PW51bGw/b1tzXT1hOmEgaW5zdGFuY2VvZiBEYXRlP29bc109bmV3IERhdGUoYSk6YSBpbnN0YW5jZW9mIE1hcD9vW3NdPW5ldyBNYXAoZShBcnJheS5mcm9tKGEpLHIpKTphIGluc3RhbmNlb2YgU2V0P29bc109bmV3IFNldChlKEFycmF5LmZyb20oYSkscikpOkFycmF5QnVmZmVyLmlzVmlldyhhKT9vW3NdPVFyKGEpOm9bc109cihhKTt9cmV0dXJuIG99ZnVuY3Rpb24gaShuKXtpZih0eXBlb2YgbiE9XCJvYmplY3RcInx8bj09PW51bGwpcmV0dXJuIG47aWYobiBpbnN0YW5jZW9mIERhdGUpcmV0dXJuIG5ldyBEYXRlKG4pO2lmKEFycmF5LmlzQXJyYXkobikpcmV0dXJuIGUobixpKTtpZihuIGluc3RhbmNlb2YgTWFwKXJldHVybiBuZXcgTWFwKGUoQXJyYXkuZnJvbShuKSxpKSk7aWYobiBpbnN0YW5jZW9mIFNldClyZXR1cm4gbmV3IFNldChlKEFycmF5LmZyb20obiksaSkpO3ZhciBvPXt9O2Zvcih2YXIgcyBpbiBuKXt2YXIgYT1uW3NdO3R5cGVvZiBhIT1cIm9iamVjdFwifHxhPT09bnVsbD9vW3NdPWE6YSBpbnN0YW5jZW9mIERhdGU/b1tzXT1uZXcgRGF0ZShhKTphIGluc3RhbmNlb2YgTWFwP29bc109bmV3IE1hcChlKEFycmF5LmZyb20oYSksaSkpOmEgaW5zdGFuY2VvZiBTZXQ/b1tzXT1uZXcgU2V0KGUoQXJyYXkuZnJvbShhKSxpKSk6QXJyYXlCdWZmZXIuaXNWaWV3KGEpP29bc109UXIoYSk6b1tzXT1pKGEpO31yZXR1cm4gb319ZnVuY3Rpb24gYTEodCl7dmFyIGU9W10scj1bXTtyZXR1cm4gdC5wcm90bz9vOm47ZnVuY3Rpb24gaShzLGEpe2Zvcih2YXIgdT1PYmplY3Qua2V5cyhzKSxjPW5ldyBBcnJheSh1Lmxlbmd0aCksaD0wO2g8dS5sZW5ndGg7aCsrKXt2YXIgZD11W2hdLGc9c1tkXTtpZih0eXBlb2YgZyE9XCJvYmplY3RcInx8Zz09PW51bGwpY1tkXT1nO2Vsc2UgaWYoZyBpbnN0YW5jZW9mIERhdGUpY1tkXT1uZXcgRGF0ZShnKTtlbHNlIGlmKEFycmF5QnVmZmVyLmlzVmlldyhnKSljW2RdPVFyKGcpO2Vsc2Uge3ZhciB5PWUuaW5kZXhPZihnKTt5IT09LTE/Y1tkXT1yW3ldOmNbZF09YShnKTt9fXJldHVybiBjfWZ1bmN0aW9uIG4ocyl7aWYodHlwZW9mIHMhPVwib2JqZWN0XCJ8fHM9PT1udWxsKXJldHVybiBzO2lmKHMgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShzKTtpZihBcnJheS5pc0FycmF5KHMpKXJldHVybiBpKHMsbik7aWYocyBpbnN0YW5jZW9mIE1hcClyZXR1cm4gbmV3IE1hcChpKEFycmF5LmZyb20ocyksbikpO2lmKHMgaW5zdGFuY2VvZiBTZXQpcmV0dXJuIG5ldyBTZXQoaShBcnJheS5mcm9tKHMpLG4pKTt2YXIgYT17fTtlLnB1c2gocyksci5wdXNoKGEpO2Zvcih2YXIgdSBpbiBzKWlmKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsdSkhPT0hMSl7dmFyIGM9c1t1XTtpZih0eXBlb2YgYyE9XCJvYmplY3RcInx8Yz09PW51bGwpYVt1XT1jO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIERhdGUpYVt1XT1uZXcgRGF0ZShjKTtlbHNlIGlmKGMgaW5zdGFuY2VvZiBNYXApYVt1XT1uZXcgTWFwKGkoQXJyYXkuZnJvbShjKSxuKSk7ZWxzZSBpZihjIGluc3RhbmNlb2YgU2V0KWFbdV09bmV3IFNldChpKEFycmF5LmZyb20oYyksbikpO2Vsc2UgaWYoQXJyYXlCdWZmZXIuaXNWaWV3KGMpKWFbdV09UXIoYyk7ZWxzZSB7dmFyIGg9ZS5pbmRleE9mKGMpO2ghPT0tMT9hW3VdPXJbaF06YVt1XT1uKGMpO319cmV0dXJuIGUucG9wKCksci5wb3AoKSxhfWZ1bmN0aW9uIG8ocyl7aWYodHlwZW9mIHMhPVwib2JqZWN0XCJ8fHM9PT1udWxsKXJldHVybiBzO2lmKHMgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShzKTtpZihBcnJheS5pc0FycmF5KHMpKXJldHVybiBpKHMsbyk7aWYocyBpbnN0YW5jZW9mIE1hcClyZXR1cm4gbmV3IE1hcChpKEFycmF5LmZyb20ocyksbykpO2lmKHMgaW5zdGFuY2VvZiBTZXQpcmV0dXJuIG5ldyBTZXQoaShBcnJheS5mcm9tKHMpLG8pKTt2YXIgYT17fTtlLnB1c2gocyksci5wdXNoKGEpO2Zvcih2YXIgdSBpbiBzKXt2YXIgYz1zW3VdO2lmKHR5cGVvZiBjIT1cIm9iamVjdFwifHxjPT09bnVsbClhW3VdPWM7ZWxzZSBpZihjIGluc3RhbmNlb2YgRGF0ZSlhW3VdPW5ldyBEYXRlKGMpO2Vsc2UgaWYoYyBpbnN0YW5jZW9mIE1hcClhW3VdPW5ldyBNYXAoaShBcnJheS5mcm9tKGMpLG8pKTtlbHNlIGlmKGMgaW5zdGFuY2VvZiBTZXQpYVt1XT1uZXcgU2V0KGkoQXJyYXkuZnJvbShjKSxvKSk7ZWxzZSBpZihBcnJheUJ1ZmZlci5pc1ZpZXcoYykpYVt1XT1RcihjKTtlbHNlIHt2YXIgaD1lLmluZGV4T2YoYyk7aCE9PS0xP2FbdV09cltoXTphW3VdPW8oYyk7fX1yZXR1cm4gZS5wb3AoKSxyLnBvcCgpLGF9fX0pO3ZhciBGZD1NKChvayxqZCk9Pnt2KCk7bSgpO18oKTtqZC5leHBvcnRzPURkKCkoKTt9KTt2YXIgJGQ9TShZcj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShZcixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtZci52YWxpZGF0ZVRvcGljcz1Zci52YWxpZGF0ZVRvcGljPXZvaWQgMDtmdW5jdGlvbiBXZCh0KXtsZXQgZT10LnNwbGl0KFwiL1wiKTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKylpZihlW3JdIT09XCIrXCIpe2lmKGVbcl09PT1cIiNcIilyZXR1cm4gcj09PWUubGVuZ3RoLTE7aWYoZVtyXS5pbmRleE9mKFwiK1wiKSE9PS0xfHxlW3JdLmluZGV4T2YoXCIjXCIpIT09LTEpcmV0dXJuICExfXJldHVybiAhMH1Zci52YWxpZGF0ZVRvcGljPVdkO2Z1bmN0aW9uIGwxKHQpe2lmKHQubGVuZ3RoPT09MClyZXR1cm4gXCJlbXB0eV90b3BpY19saXN0XCI7Zm9yKGxldCBlPTA7ZTx0Lmxlbmd0aDtlKyspaWYoIVdkKHRbZV0pKXJldHVybiB0W2VdO3JldHVybiBudWxsfVlyLnZhbGlkYXRlVG9waWNzPWwxO30pO3ZhciBabz1NKFhvPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFhvLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB1MT1EdCgpLGYxPXtvYmplY3RNb2RlOiEwfSxjMT17Y2xlYW46ITB9LEpvPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMub3B0aW9ucz1lfHx7fSx0aGlzLm9wdGlvbnM9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGMxKSxlKSx0aGlzLl9pbmZsaWdodHM9bmV3IE1hcDt9cHV0KGUscil7cmV0dXJuIHRoaXMuX2luZmxpZ2h0cy5zZXQoZS5tZXNzYWdlSWQsZSksciYmcigpLHRoaXN9Y3JlYXRlU3RyZWFtKCl7bGV0IGU9bmV3IHUxLlJlYWRhYmxlKGYxKSxyPVtdLGk9ITEsbj0wO3JldHVybiB0aGlzLl9pbmZsaWdodHMuZm9yRWFjaCgobyxzKT0+e3IucHVzaChvKTt9KSxlLl9yZWFkPSgpPT57IWkmJm48ci5sZW5ndGg/ZS5wdXNoKHJbbisrXSk6ZS5wdXNoKG51bGwpO30sZS5kZXN0cm95PW89PntpZighaSlyZXR1cm4gaT0hMCxzZXRUaW1lb3V0KCgpPT57ZS5lbWl0KFwiY2xvc2VcIik7fSwwKSxlfSxlfWRlbChlLHIpe2xldCBpPXRoaXMuX2luZmxpZ2h0cy5nZXQoZS5tZXNzYWdlSWQpO3JldHVybiBpPyh0aGlzLl9pbmZsaWdodHMuZGVsZXRlKGUubWVzc2FnZUlkKSxyKG51bGwsaSkpOnImJnIobmV3IEVycm9yKFwibWlzc2luZyBwYWNrZXRcIikpLHRoaXN9Z2V0KGUscil7bGV0IGk9dGhpcy5faW5mbGlnaHRzLmdldChlLm1lc3NhZ2VJZCk7cmV0dXJuIGk/cihudWxsLGkpOnImJnIobmV3IEVycm9yKFwibWlzc2luZyBwYWNrZXRcIikpLHRoaXN9Y2xvc2UoZSl7dGhpcy5vcHRpb25zLmNsZWFuJiYodGhpcy5faW5mbGlnaHRzPW51bGwpLGUmJmUoKTt9fTtYby5kZWZhdWx0PUpvO30pO3ZhciBWZD1NKGVhPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGVhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBIZD1bMCwxNiwxMjgsMTMxLDEzNSwxNDQsMTQ1LDE1MSwxNTNdLGgxPSh0LGUscik9Pnt0LmxvZyhcImhhbmRsZVB1Ymxpc2g6IHBhY2tldCAlb1wiLGUpLHI9dHlwZW9mIHI8XCJ1XCI/cjp0Lm5vb3A7bGV0IGk9ZS50b3BpYy50b1N0cmluZygpLG49ZS5wYXlsb2FkLHtxb3M6b309ZSx7bWVzc2FnZUlkOnN9PWUse29wdGlvbnM6YX09dDtpZih0Lm9wdGlvbnMucHJvdG9jb2xWZXJzaW9uPT09NSl7bGV0IHU7aWYoZS5wcm9wZXJ0aWVzJiYodT1lLnByb3BlcnRpZXMudG9waWNBbGlhcyksdHlwZW9mIHU8XCJ1XCIpaWYoaS5sZW5ndGg9PT0wKWlmKHU+MCYmdTw9NjU1MzUpe2xldCBjPXQudG9waWNBbGlhc1JlY3YuZ2V0VG9waWNCeUFsaWFzKHUpO2lmKGMpaT1jLHQubG9nKFwiaGFuZGxlUHVibGlzaCA6OiB0b3BpYyBjb21wbGVtZW50ZWQgYnkgYWxpYXMuIHRvcGljOiAlcyAtIGFsaWFzOiAlZFwiLGksdSk7ZWxzZSB7dC5sb2coXCJoYW5kbGVQdWJsaXNoIDo6IHVucmVnaXN0ZXJlZCB0b3BpYyBhbGlhcy4gYWxpYXM6ICVkXCIsdSksdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJSZWNlaXZlZCB1bnJlZ2lzdGVyZWQgVG9waWMgQWxpYXNcIikpO3JldHVybn19ZWxzZSB7dC5sb2coXCJoYW5kbGVQdWJsaXNoIDo6IHRvcGljIGFsaWFzIG91dCBvZiByYW5nZS4gYWxpYXM6ICVkXCIsdSksdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoXCJSZWNlaXZlZCBUb3BpYyBBbGlhcyBpcyBvdXQgb2YgcmFuZ2VcIikpO3JldHVybn1lbHNlIGlmKHQudG9waWNBbGlhc1JlY3YucHV0KGksdSkpdC5sb2coXCJoYW5kbGVQdWJsaXNoIDo6IHJlZ2lzdGVyZWQgdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsaSx1KTtlbHNlIHt0LmxvZyhcImhhbmRsZVB1Ymxpc2ggOjogdG9waWMgYWxpYXMgb3V0IG9mIHJhbmdlLiBhbGlhczogJWRcIix1KSx0LmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlJlY2VpdmVkIFRvcGljIEFsaWFzIGlzIG91dCBvZiByYW5nZVwiKSk7cmV0dXJufX1zd2l0Y2godC5sb2coXCJoYW5kbGVQdWJsaXNoOiBxb3MgJWRcIixvKSxvKXtjYXNlIDI6e2EuY3VzdG9tSGFuZGxlQWNrcyhpLG4sZSwodSxjKT0+e2lmKHR5cGVvZiB1PT1cIm51bWJlclwiJiYoYz11LHU9bnVsbCksdSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIix1KTtpZihIZC5pbmRleE9mKGMpPT09LTEpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiV3JvbmcgcmVhc29uIGNvZGUgZm9yIHB1YnJlY1wiKSk7Yz90Ll9zZW5kUGFja2V0KHtjbWQ6XCJwdWJyZWNcIixtZXNzYWdlSWQ6cyxyZWFzb25Db2RlOmN9LHIpOnQuaW5jb21pbmdTdG9yZS5wdXQoZSwoKT0+e3QuX3NlbmRQYWNrZXQoe2NtZDpcInB1YnJlY1wiLG1lc3NhZ2VJZDpzfSxyKTt9KTt9KTticmVha31jYXNlIDE6e2EuY3VzdG9tSGFuZGxlQWNrcyhpLG4sZSwodSxjKT0+e2lmKHR5cGVvZiB1PT1cIm51bWJlclwiJiYoYz11LHU9bnVsbCksdSlyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIix1KTtpZihIZC5pbmRleE9mKGMpPT09LTEpcmV0dXJuIHQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiV3JvbmcgcmVhc29uIGNvZGUgZm9yIHB1YmFja1wiKSk7Y3x8dC5lbWl0KFwibWVzc2FnZVwiLGksbixlKSx0LmhhbmRsZU1lc3NhZ2UoZSxoPT57aWYoaClyZXR1cm4gciYmcihoKTt0Ll9zZW5kUGFja2V0KHtjbWQ6XCJwdWJhY2tcIixtZXNzYWdlSWQ6cyxyZWFzb25Db2RlOmN9LHIpO30pO30pO2JyZWFrfWNhc2UgMDp0LmVtaXQoXCJtZXNzYWdlXCIsaSxuLGUpLHQuaGFuZGxlTWVzc2FnZShlLHIpO2JyZWFrO2RlZmF1bHQ6dC5sb2coXCJoYW5kbGVQdWJsaXNoOiB1bmtub3duIFFvUy4gRG9pbmcgbm90aGluZy5cIik7YnJlYWt9fTtlYS5kZWZhdWx0PWgxO30pO3ZhciBKcj1NKFd0PT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFd0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO1d0Lm5leHRUaWNrPVd0LmFwcGx5TWl4aW49V3QuRXJyb3JXaXRoUmVhc29uQ29kZT12b2lkIDA7dmFyIHRhPWNsYXNzIHQgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlLHIpe3N1cGVyKGUpLHRoaXMuY29kZT1yLE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLHQucHJvdG90eXBlKSxPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykubmFtZT1cIkVycm9yV2l0aFJlYXNvbkNvZGVcIjt9fTtXdC5FcnJvcldpdGhSZWFzb25Db2RlPXRhO2Z1bmN0aW9uIGQxKHQsZSxyPSExKXt2YXIgaTtsZXQgbj1bZV07Zm9yKDs7KXtsZXQgbz1uWzBdLHM9T2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO2lmKHM/LnByb3RvdHlwZSluLnVuc2hpZnQocyk7ZWxzZSBicmVha31mb3IobGV0IG8gb2Ygbilmb3IobGV0IHMgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoby5wcm90b3R5cGUpKShyfHxzIT09XCJjb25zdHJ1Y3RvclwiKSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLHMsKGk9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLnByb3RvdHlwZSxzKSkhPT1udWxsJiZpIT09dm9pZCAwP2k6T2JqZWN0LmNyZWF0ZShudWxsKSk7fVd0LmFwcGx5TWl4aW49ZDE7V3QubmV4dFRpY2s9dHlwZW9mKFA9PT1udWxsfHxQPT09dm9pZCAwP3ZvaWQgMDpQLm5leHRUaWNrKT09XCJmdW5jdGlvblwiP1AubmV4dFRpY2s6dD0+e3NldFRpbWVvdXQodCwwKTt9O30pO3ZhciBBaT1NKGJyPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGJyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2JyLlJlYXNvbkNvZGVzPXZvaWQgMDtici5SZWFzb25Db2Rlcz17MDpcIlwiLDE6XCJVbmFjY2VwdGFibGUgcHJvdG9jb2wgdmVyc2lvblwiLDI6XCJJZGVudGlmaWVyIHJlamVjdGVkXCIsMzpcIlNlcnZlciB1bmF2YWlsYWJsZVwiLDQ6XCJCYWQgdXNlcm5hbWUgb3IgcGFzc3dvcmRcIiw1OlwiTm90IGF1dGhvcml6ZWRcIiwxNjpcIk5vIG1hdGNoaW5nIHN1YnNjcmliZXJzXCIsMTc6XCJObyBzdWJzY3JpcHRpb24gZXhpc3RlZFwiLDEyODpcIlVuc3BlY2lmaWVkIGVycm9yXCIsMTI5OlwiTWFsZm9ybWVkIFBhY2tldFwiLDEzMDpcIlByb3RvY29sIEVycm9yXCIsMTMxOlwiSW1wbGVtZW50YXRpb24gc3BlY2lmaWMgZXJyb3JcIiwxMzI6XCJVbnN1cHBvcnRlZCBQcm90b2NvbCBWZXJzaW9uXCIsMTMzOlwiQ2xpZW50IElkZW50aWZpZXIgbm90IHZhbGlkXCIsMTM0OlwiQmFkIFVzZXIgTmFtZSBvciBQYXNzd29yZFwiLDEzNTpcIk5vdCBhdXRob3JpemVkXCIsMTM2OlwiU2VydmVyIHVuYXZhaWxhYmxlXCIsMTM3OlwiU2VydmVyIGJ1c3lcIiwxMzg6XCJCYW5uZWRcIiwxMzk6XCJTZXJ2ZXIgc2h1dHRpbmcgZG93blwiLDE0MDpcIkJhZCBhdXRoZW50aWNhdGlvbiBtZXRob2RcIiwxNDE6XCJLZWVwIEFsaXZlIHRpbWVvdXRcIiwxNDI6XCJTZXNzaW9uIHRha2VuIG92ZXJcIiwxNDM6XCJUb3BpYyBGaWx0ZXIgaW52YWxpZFwiLDE0NDpcIlRvcGljIE5hbWUgaW52YWxpZFwiLDE0NTpcIlBhY2tldCBpZGVudGlmaWVyIGluIHVzZVwiLDE0NjpcIlBhY2tldCBJZGVudGlmaWVyIG5vdCBmb3VuZFwiLDE0NzpcIlJlY2VpdmUgTWF4aW11bSBleGNlZWRlZFwiLDE0ODpcIlRvcGljIEFsaWFzIGludmFsaWRcIiwxNDk6XCJQYWNrZXQgdG9vIGxhcmdlXCIsMTUwOlwiTWVzc2FnZSByYXRlIHRvbyBoaWdoXCIsMTUxOlwiUXVvdGEgZXhjZWVkZWRcIiwxNTI6XCJBZG1pbmlzdHJhdGl2ZSBhY3Rpb25cIiwxNTM6XCJQYXlsb2FkIGZvcm1hdCBpbnZhbGlkXCIsMTU0OlwiUmV0YWluIG5vdCBzdXBwb3J0ZWRcIiwxNTU6XCJRb1Mgbm90IHN1cHBvcnRlZFwiLDE1NjpcIlVzZSBhbm90aGVyIHNlcnZlclwiLDE1NzpcIlNlcnZlciBtb3ZlZFwiLDE1ODpcIlNoYXJlZCBTdWJzY3JpcHRpb25zIG5vdCBzdXBwb3J0ZWRcIiwxNTk6XCJDb25uZWN0aW9uIHJhdGUgZXhjZWVkZWRcIiwxNjA6XCJNYXhpbXVtIGNvbm5lY3QgdGltZVwiLDE2MTpcIlN1YnNjcmlwdGlvbiBJZGVudGlmaWVycyBub3Qgc3VwcG9ydGVkXCIsMTYyOlwiV2lsZGNhcmQgU3Vic2NyaXB0aW9ucyBub3Qgc3VwcG9ydGVkXCJ9O3ZhciBwMT0odCxlKT0+e2xldHttZXNzYWdlSWQ6cn09ZSxpPWUuY21kLG49bnVsbCxvPXQub3V0Z29pbmdbcl0/dC5vdXRnb2luZ1tyXS5jYjpudWxsLHM7aWYoIW8pe3QubG9nKFwiX2hhbmRsZUFjayA6OiBTZXJ2ZXIgc2VudCBhbiBhY2sgaW4gZXJyb3IuIElnbm9yaW5nLlwiKTtyZXR1cm59c3dpdGNoKHQubG9nKFwiX2hhbmRsZUFjayA6OiBwYWNrZXQgdHlwZVwiLGkpLGkpe2Nhc2VcInB1YmNvbXBcIjpjYXNlXCJwdWJhY2tcIjp7bGV0IGE9ZS5yZWFzb25Db2RlO2EmJmE+MCYmYSE9PTE2PyhzPW5ldyBFcnJvcihgUHVibGlzaCBlcnJvcjogJHtici5SZWFzb25Db2Rlc1thXX1gKSxzLmNvZGU9YSx0Ll9yZW1vdmVPdXRnb2luZ0FuZFN0b3JlTWVzc2FnZShyLCgpPT57byhzLGUpO30pKTp0Ll9yZW1vdmVPdXRnb2luZ0FuZFN0b3JlTWVzc2FnZShyLG8pO2JyZWFrfWNhc2VcInB1YnJlY1wiOntuPXtjbWQ6XCJwdWJyZWxcIixxb3M6MixtZXNzYWdlSWQ6cn07bGV0IGE9ZS5yZWFzb25Db2RlO2EmJmE+MCYmYSE9PTE2PyhzPW5ldyBFcnJvcihgUHVibGlzaCBlcnJvcjogJHtici5SZWFzb25Db2Rlc1thXX1gKSxzLmNvZGU9YSx0Ll9yZW1vdmVPdXRnb2luZ0FuZFN0b3JlTWVzc2FnZShyLCgpPT57byhzLGUpO30pKTp0Ll9zZW5kUGFja2V0KG4pO2JyZWFrfWNhc2VcInN1YmFja1wiOntkZWxldGUgdC5vdXRnb2luZ1tyXSx0Lm1lc3NhZ2VJZFByb3ZpZGVyLmRlYWxsb2NhdGUocik7bGV0IGE9ZS5ncmFudGVkO2ZvcihsZXQgdT0wO3U8YS5sZW5ndGg7dSsrKWlmKGFbdV0mMTI4KXtsZXQgYz10Lm1lc3NhZ2VJZFRvVG9waWNbcl07YyYmYy5mb3JFYWNoKGg9PntkZWxldGUgdC5fcmVzdWJzY3JpYmVUb3BpY3NbaF07fSk7fWRlbGV0ZSB0Lm1lc3NhZ2VJZFRvVG9waWNbcl0sdC5faW52b2tlU3RvcmVQcm9jZXNzaW5nUXVldWUoKSxvKG51bGwsZSk7YnJlYWt9Y2FzZVwidW5zdWJhY2tcIjp7ZGVsZXRlIHQub3V0Z29pbmdbcl0sdC5tZXNzYWdlSWRQcm92aWRlci5kZWFsbG9jYXRlKHIpLHQuX2ludm9rZVN0b3JlUHJvY2Vzc2luZ1F1ZXVlKCksbyhudWxsKTticmVha31kZWZhdWx0OnQuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwidW5yZWNvZ25pemVkIHBhY2tldCB0eXBlXCIpKTt9dC5kaXNjb25uZWN0aW5nJiZPYmplY3Qua2V5cyh0Lm91dGdvaW5nKS5sZW5ndGg9PT0wJiZ0LmVtaXQoXCJvdXRnb2luZ0VtcHR5XCIpO307YnIuZGVmYXVsdD1wMTt9KTt2YXIgS2Q9TShyYT0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyYSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgemQ9SnIoKSxnMT1BaSgpLHkxPSh0LGUpPT57bGV0e29wdGlvbnM6cn09dCxpPXIucHJvdG9jb2xWZXJzaW9uLG49aT09PTU/ZS5yZWFzb25Db2RlOmUucmV0dXJuQ29kZTtpZihpIT09NSl7bGV0IG89bmV3IHpkLkVycm9yV2l0aFJlYXNvbkNvZGUoYFByb3RvY29sIGVycm9yOiBBdXRoIHBhY2tldHMgYXJlIG9ubHkgc3VwcG9ydGVkIGluIE1RVFQgNS4gWW91ciB2ZXJzaW9uOiR7aX1gLG4pO3QuZW1pdChcImVycm9yXCIsbyk7cmV0dXJufXQuaGFuZGxlQXV0aChlLChvLHMpPT57aWYobyl7dC5lbWl0KFwiZXJyb3JcIixvKTtyZXR1cm59aWYobj09PTI0KXQucmVjb25uZWN0aW5nPSExLHQuX3NlbmRQYWNrZXQocyk7ZWxzZSB7bGV0IGE9bmV3IHpkLkVycm9yV2l0aFJlYXNvbkNvZGUoYENvbm5lY3Rpb24gcmVmdXNlZDogJHtnMS5SZWFzb25Db2Rlc1tuXX1gLG4pO3QuZW1pdChcImVycm9yXCIsYSk7fX0pO307cmEuZGVmYXVsdD15MTt9KTt2YXIgWGQ9TShrbj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShrbixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtrbi5MUlVDYWNoZT12b2lkIDA7dmFyIElpPXR5cGVvZiBwZXJmb3JtYW5jZT09XCJvYmplY3RcIiYmcGVyZm9ybWFuY2UmJnR5cGVvZiBwZXJmb3JtYW5jZS5ub3c9PVwiZnVuY3Rpb25cIj9wZXJmb3JtYW5jZTpEYXRlLFFkPW5ldyBTZXQsaWE9dHlwZW9mIFA9PVwib2JqZWN0XCImJlA/UDp7fSxZZD0odCxlLHIsaSk9Pnt0eXBlb2YgaWEuZW1pdFdhcm5pbmc9PVwiZnVuY3Rpb25cIj9pYS5lbWl0V2FybmluZyh0LGUscixpKTpjb25zb2xlLmVycm9yKGBbJHtyfV0gJHtlfTogJHt0fWApO30sT249Z2xvYmFsVGhpcy5BYm9ydENvbnRyb2xsZXIsR2Q9Z2xvYmFsVGhpcy5BYm9ydFNpZ25hbDtpZih0eXBlb2YgT24+XCJ1XCIpe0dkPWNsYXNze29uYWJvcnQ7X29uYWJvcnQ9W107cmVhc29uO2Fib3J0ZWQ9ITE7YWRkRXZlbnRMaXN0ZW5lcihpLG4pe3RoaXMuX29uYWJvcnQucHVzaChuKTt9fSxPbj1jbGFzc3tjb25zdHJ1Y3Rvcigpe2UoKTt9c2lnbmFsPW5ldyBHZDthYm9ydChpKXtpZighdGhpcy5zaWduYWwuYWJvcnRlZCl7dGhpcy5zaWduYWwucmVhc29uPWksdGhpcy5zaWduYWwuYWJvcnRlZD0hMDtmb3IobGV0IG4gb2YgdGhpcy5zaWduYWwuX29uYWJvcnQpbihpKTt0aGlzLnNpZ25hbC5vbmFib3J0Py4oaSk7fX19O2xldCB0PWlhLmVudj8uTFJVX0NBQ0hFX0lHTk9SRV9BQ19XQVJOSU5HIT09XCIxXCIsZT0oKT0+e3QmJih0PSExLFlkKFwiQWJvcnRDb250cm9sbGVyIGlzIG5vdCBkZWZpbmVkLiBJZiB1c2luZyBscnUtY2FjaGUgaW4gbm9kZSAxNCwgbG9hZCBhbiBBYm9ydENvbnRyb2xsZXIgcG9seWZpbGwgZnJvbSB0aGUgYG5vZGUtYWJvcnQtY29udHJvbGxlcmAgcGFja2FnZS4gQSBtaW5pbWFsIHBvbHlmaWxsIGlzIHByb3ZpZGVkIGZvciB1c2UgYnkgTFJVQ2FjaGUuZmV0Y2goKSwgYnV0IGl0IHNob3VsZCBub3QgYmUgcmVsaWVkIHVwb24gaW4gb3RoZXIgY29udGV4dHMgKGVnLCBwYXNzaW5nIGl0IHRvIG90aGVyIEFQSXMgdGhhdCB1c2UgQWJvcnRDb250cm9sbGVyL0Fib3J0U2lnbmFsIG1pZ2h0IGhhdmUgdW5kZXNpcmFibGUgZWZmZWN0cykuIFlvdSBtYXkgZGlzYWJsZSB0aGlzIHdpdGggTFJVX0NBQ0hFX0lHTk9SRV9BQ19XQVJOSU5HPTEgaW4gdGhlIGVudi5cIixcIk5PX0FCT1JUX0NPTlRST0xMRVJcIixcIkVOT1RTVVBcIixlKSk7fTt9dmFyIGIxPXQ9PiFRZC5oYXModCksJHQ9dD0+dCYmdD09PU1hdGguZmxvb3IodCkmJnQ+MCYmaXNGaW5pdGUodCksSmQ9dD0+JHQodCk/dDw9TWF0aC5wb3coMiw4KT9VaW50OEFycmF5OnQ8PU1hdGgucG93KDIsMTYpP1VpbnQxNkFycmF5OnQ8PU1hdGgucG93KDIsMzIpP1VpbnQzMkFycmF5OnQ8PU51bWJlci5NQVhfU0FGRV9JTlRFR0VSP1hyOm51bGw6bnVsbCxYcj1jbGFzcyBleHRlbmRzIEFycmF5e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLHRoaXMuZmlsbCgwKTt9fSxuYT1jbGFzcyB0e2hlYXA7bGVuZ3RoO3N0YXRpYyNsPSExO3N0YXRpYyBjcmVhdGUoZSl7bGV0IHI9SmQoZSk7aWYoIXIpcmV0dXJuIFtdO3QuI2w9ITA7bGV0IGk9bmV3IHQoZSxyKTtyZXR1cm4gdC4jbD0hMSxpfWNvbnN0cnVjdG9yKGUscil7aWYoIXQuI2wpdGhyb3cgbmV3IFR5cGVFcnJvcihcImluc3RhbnRpYXRlIFN0YWNrIHVzaW5nIFN0YWNrLmNyZWF0ZShuKVwiKTt0aGlzLmhlYXA9bmV3IHIoZSksdGhpcy5sZW5ndGg9MDt9cHVzaChlKXt0aGlzLmhlYXBbdGhpcy5sZW5ndGgrK109ZTt9cG9wKCl7cmV0dXJuIHRoaXMuaGVhcFstLXRoaXMubGVuZ3RoXX19LHNhPWNsYXNzIHR7I2w7I2M7I3A7I2c7I0I7dHRsO3R0bFJlc29sdXRpb247dHRsQXV0b3B1cmdlO3VwZGF0ZUFnZU9uR2V0O3VwZGF0ZUFnZU9uSGFzO2FsbG93U3RhbGU7bm9EaXNwb3NlT25TZXQ7bm9VcGRhdGVUVEw7bWF4RW50cnlTaXplO3NpemVDYWxjdWxhdGlvbjtub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb247bm9EZWxldGVPblN0YWxlR2V0O2FsbG93U3RhbGVPbkZldGNoQWJvcnQ7YWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb247aWdub3JlRmV0Y2hBYm9ydDsjaTsjeTsjbjsjcjsjZTsjdTsjaDsjYTsjczsjYjsjbzsjRTsjUzsjdzsjXzsjSTsjZjtzdGF0aWMgdW5zYWZlRXhwb3NlSW50ZXJuYWxzKGUpe3JldHVybiB7c3RhcnRzOmUuI1MsdHRsczplLiN3LHNpemVzOmUuI0Usa2V5TWFwOmUuI24sa2V5TGlzdDplLiNyLHZhbExpc3Q6ZS4jZSxuZXh0OmUuI3UscHJldjplLiNoLGdldCBoZWFkKCl7cmV0dXJuIGUuI2F9LGdldCB0YWlsKCl7cmV0dXJuIGUuI3N9LGZyZWU6ZS4jYixpc0JhY2tncm91bmRGZXRjaDpyPT5lLiN0KHIpLGJhY2tncm91bmRGZXRjaDoocixpLG4sbyk9PmUuI2socixpLG4sbyksbW92ZVRvVGFpbDpyPT5lLiNDKHIpLGluZGV4ZXM6cj0+ZS4jbShyKSxyaW5kZXhlczpyPT5lLiN2KHIpLGlzU3RhbGU6cj0+ZS4jZChyKX19Z2V0IG1heCgpe3JldHVybiB0aGlzLiNsfWdldCBtYXhTaXplKCl7cmV0dXJuIHRoaXMuI2N9Z2V0IGNhbGN1bGF0ZWRTaXplKCl7cmV0dXJuIHRoaXMuI3l9Z2V0IHNpemUoKXtyZXR1cm4gdGhpcy4jaX1nZXQgZmV0Y2hNZXRob2QoKXtyZXR1cm4gdGhpcy4jQn1nZXQgZGlzcG9zZSgpe3JldHVybiB0aGlzLiNwfWdldCBkaXNwb3NlQWZ0ZXIoKXtyZXR1cm4gdGhpcy4jZ31jb25zdHJ1Y3RvcihlKXtsZXR7bWF4OnI9MCx0dGw6aSx0dGxSZXNvbHV0aW9uOm49MSx0dGxBdXRvcHVyZ2U6byx1cGRhdGVBZ2VPbkdldDpzLHVwZGF0ZUFnZU9uSGFzOmEsYWxsb3dTdGFsZTp1LGRpc3Bvc2U6YyxkaXNwb3NlQWZ0ZXI6aCxub0Rpc3Bvc2VPblNldDpkLG5vVXBkYXRlVFRMOmcsbWF4U2l6ZTp5PTAsbWF4RW50cnlTaXplOnc9MCxzaXplQ2FsY3VsYXRpb246RSxmZXRjaE1ldGhvZDpTLG5vRGVsZXRlT25GZXRjaFJlamVjdGlvbjpJLG5vRGVsZXRlT25TdGFsZUdldDpDLGFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uOlIsYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydDpVLGlnbm9yZUZldGNoQWJvcnQ6Tn09ZTtpZihyIT09MCYmISR0KHIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJtYXggb3B0aW9uIG11c3QgYmUgYSBub25uZWdhdGl2ZSBpbnRlZ2VyXCIpO2xldCBXPXI/SmQocik6QXJyYXk7aWYoIVcpdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBtYXggdmFsdWU6IFwiK3IpO2lmKHRoaXMuI2w9cix0aGlzLiNjPXksdGhpcy5tYXhFbnRyeVNpemU9d3x8dGhpcy4jYyx0aGlzLnNpemVDYWxjdWxhdGlvbj1FLHRoaXMuc2l6ZUNhbGN1bGF0aW9uKXtpZighdGhpcy4jYyYmIXRoaXMubWF4RW50cnlTaXplKXRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3Qgc2V0IHNpemVDYWxjdWxhdGlvbiB3aXRob3V0IHNldHRpbmcgbWF4U2l6ZSBvciBtYXhFbnRyeVNpemVcIik7aWYodHlwZW9mIHRoaXMuc2l6ZUNhbGN1bGF0aW9uIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNpemVDYWxjdWxhdGlvbiBzZXQgdG8gbm9uLWZ1bmN0aW9uXCIpfWlmKFMhPT12b2lkIDAmJnR5cGVvZiBTIT1cImZ1bmN0aW9uXCIpdGhyb3cgbmV3IFR5cGVFcnJvcihcImZldGNoTWV0aG9kIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBzcGVjaWZpZWRcIik7aWYodGhpcy4jQj1TLHRoaXMuI0k9ISFTLHRoaXMuI249bmV3IE1hcCx0aGlzLiNyPW5ldyBBcnJheShyKS5maWxsKHZvaWQgMCksdGhpcy4jZT1uZXcgQXJyYXkocikuZmlsbCh2b2lkIDApLHRoaXMuI3U9bmV3IFcociksdGhpcy4jaD1uZXcgVyhyKSx0aGlzLiNhPTAsdGhpcy4jcz0wLHRoaXMuI2I9bmEuY3JlYXRlKHIpLHRoaXMuI2k9MCx0aGlzLiN5PTAsdHlwZW9mIGM9PVwiZnVuY3Rpb25cIiYmKHRoaXMuI3A9YyksdHlwZW9mIGg9PVwiZnVuY3Rpb25cIj8odGhpcy4jZz1oLHRoaXMuI289W10pOih0aGlzLiNnPXZvaWQgMCx0aGlzLiNvPXZvaWQgMCksdGhpcy4jXz0hIXRoaXMuI3AsdGhpcy4jZj0hIXRoaXMuI2csdGhpcy5ub0Rpc3Bvc2VPblNldD0hIWQsdGhpcy5ub1VwZGF0ZVRUTD0hIWcsdGhpcy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb249ISFJLHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb249ISFSLHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydD0hIVUsdGhpcy5pZ25vcmVGZXRjaEFib3J0PSEhTix0aGlzLm1heEVudHJ5U2l6ZSE9PTApe2lmKHRoaXMuI2MhPT0wJiYhJHQodGhpcy4jYykpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm1heFNpemUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgaWYgc3BlY2lmaWVkXCIpO2lmKCEkdCh0aGlzLm1heEVudHJ5U2l6ZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIm1heEVudHJ5U2l6ZSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciBpZiBzcGVjaWZpZWRcIik7dGhpcy4jcSgpO31pZih0aGlzLmFsbG93U3RhbGU9ISF1LHRoaXMubm9EZWxldGVPblN0YWxlR2V0PSEhQyx0aGlzLnVwZGF0ZUFnZU9uR2V0PSEhcyx0aGlzLnVwZGF0ZUFnZU9uSGFzPSEhYSx0aGlzLnR0bFJlc29sdXRpb249JHQobil8fG49PT0wP246MSx0aGlzLnR0bEF1dG9wdXJnZT0hIW8sdGhpcy50dGw9aXx8MCx0aGlzLnR0bCl7aWYoISR0KHRoaXMudHRsKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwidHRsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZFwiKTt0aGlzLiN4KCk7fWlmKHRoaXMuI2w9PT0wJiZ0aGlzLnR0bD09PTAmJnRoaXMuI2M9PT0wKXRocm93IG5ldyBUeXBlRXJyb3IoXCJBdCBsZWFzdCBvbmUgb2YgbWF4LCBtYXhTaXplLCBvciB0dGwgaXMgcmVxdWlyZWRcIik7aWYoIXRoaXMudHRsQXV0b3B1cmdlJiYhdGhpcy4jbCYmIXRoaXMuI2Mpe2xldCBLPVwiTFJVX0NBQ0hFX1VOQk9VTkRFRFwiO2IxKEspJiYoUWQuYWRkKEspLFlkKFwiVFRMIGNhY2hpbmcgd2l0aG91dCB0dGxBdXRvcHVyZ2UsIG1heCwgb3IgbWF4U2l6ZSBjYW4gcmVzdWx0IGluIHVuYm91bmRlZCBtZW1vcnkgY29uc3VtcHRpb24uXCIsXCJVbmJvdW5kZWRDYWNoZVdhcm5pbmdcIixLLHQpKTt9fWdldFJlbWFpbmluZ1RUTChlKXtyZXR1cm4gdGhpcy4jbi5oYXMoZSk/MS8wOjB9I3goKXtsZXQgZT1uZXcgWHIodGhpcy4jbCkscj1uZXcgWHIodGhpcy4jbCk7dGhpcy4jdz1lLHRoaXMuI1M9cix0aGlzLiNNPShvLHMsYT1JaS5ub3coKSk9PntpZihyW29dPXMhPT0wP2E6MCxlW29dPXMscyE9PTAmJnRoaXMudHRsQXV0b3B1cmdlKXtsZXQgdT1zZXRUaW1lb3V0KCgpPT57dGhpcy4jZChvKSYmdGhpcy5kZWxldGUodGhpcy4jcltvXSk7fSxzKzEpO3UudW5yZWYmJnUudW5yZWYoKTt9fSx0aGlzLiNUPW89PntyW29dPWVbb10hPT0wP0lpLm5vdygpOjA7fSx0aGlzLiNBPShvLHMpPT57aWYoZVtzXSl7bGV0IGE9ZVtzXSx1PXJbc107by50dGw9YSxvLnN0YXJ0PXUsby5ub3c9aXx8bigpO2xldCBjPW8ubm93LXU7by5yZW1haW5pbmdUVEw9YS1jO319O2xldCBpPTAsbj0oKT0+e2xldCBvPUlpLm5vdygpO2lmKHRoaXMudHRsUmVzb2x1dGlvbj4wKXtpPW87bGV0IHM9c2V0VGltZW91dCgoKT0+aT0wLHRoaXMudHRsUmVzb2x1dGlvbik7cy51bnJlZiYmcy51bnJlZigpO31yZXR1cm4gb307dGhpcy5nZXRSZW1haW5pbmdUVEw9bz0+e2xldCBzPXRoaXMuI24uZ2V0KG8pO2lmKHM9PT12b2lkIDApcmV0dXJuIDA7bGV0IGE9ZVtzXSx1PXJbc107aWYoYT09PTB8fHU9PT0wKXJldHVybiAxLzA7bGV0IGM9KGl8fG4oKSktdTtyZXR1cm4gYS1jfSx0aGlzLiNkPW89PmVbb10hPT0wJiZyW29dIT09MCYmKGl8fG4oKSktcltvXT5lW29dO30jVD0oKT0+e307I0E9KCk9Pnt9OyNNPSgpPT57fTsjZD0oKT0+ITE7I3EoKXtsZXQgZT1uZXcgWHIodGhpcy4jbCk7dGhpcy4jeT0wLHRoaXMuI0U9ZSx0aGlzLiNSPXI9Pnt0aGlzLiN5LT1lW3JdLGVbcl09MDt9LHRoaXMuI0w9KHIsaSxuLG8pPT57aWYodGhpcy4jdChpKSlyZXR1cm4gMDtpZighJHQobikpaWYobyl7aWYodHlwZW9mIG8hPVwiZnVuY3Rpb25cIil0aHJvdyBuZXcgVHlwZUVycm9yKFwic2l6ZUNhbGN1bGF0aW9uIG11c3QgYmUgYSBmdW5jdGlvblwiKTtpZihuPW8oaSxyKSwhJHQobikpdGhyb3cgbmV3IFR5cGVFcnJvcihcInNpemVDYWxjdWxhdGlvbiByZXR1cm4gaW52YWxpZCAoZXhwZWN0IHBvc2l0aXZlIGludGVnZXIpXCIpfWVsc2UgdGhyb3cgbmV3IFR5cGVFcnJvcihcImludmFsaWQgc2l6ZSB2YWx1ZSAobXVzdCBiZSBwb3NpdGl2ZSBpbnRlZ2VyKS4gV2hlbiBtYXhTaXplIG9yIG1heEVudHJ5U2l6ZSBpcyB1c2VkLCBzaXplQ2FsY3VsYXRpb24gb3Igc2l6ZSBtdXN0IGJlIHNldC5cIik7cmV0dXJuIG59LHRoaXMuI1A9KHIsaSxuKT0+e2lmKGVbcl09aSx0aGlzLiNjKXtsZXQgbz10aGlzLiNjLWVbcl07Zm9yKDt0aGlzLiN5Pm87KXRoaXMuI08oITApO310aGlzLiN5Kz1lW3JdLG4mJihuLmVudHJ5U2l6ZT1pLG4udG90YWxDYWxjdWxhdGVkU2l6ZT10aGlzLiN5KTt9O30jUj1lPT57fTsjUD0oZSxyLGkpPT57fTsjTD0oZSxyLGksbik9PntpZihpfHxuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJjYW5ub3Qgc2V0IHNpemUgd2l0aG91dCBzZXR0aW5nIG1heFNpemUgb3IgbWF4RW50cnlTaXplIG9uIGNhY2hlXCIpO3JldHVybiAwfTsqI20oe2FsbG93U3RhbGU6ZT10aGlzLmFsbG93U3RhbGV9PXt9KXtpZih0aGlzLiNpKWZvcihsZXQgcj10aGlzLiNzOyEoIXRoaXMuI1Uocil8fCgoZXx8IXRoaXMuI2QocikpJiYoeWllbGQgcikscj09PXRoaXMuI2EpKTspcj10aGlzLiNoW3JdO30qI3Yoe2FsbG93U3RhbGU6ZT10aGlzLmFsbG93U3RhbGV9PXt9KXtpZih0aGlzLiNpKWZvcihsZXQgcj10aGlzLiNhOyEoIXRoaXMuI1Uocil8fCgoZXx8IXRoaXMuI2QocikpJiYoeWllbGQgcikscj09PXRoaXMuI3MpKTspcj10aGlzLiN1W3JdO30jVShlKXtyZXR1cm4gZSE9PXZvaWQgMCYmdGhpcy4jbi5nZXQodGhpcy4jcltlXSk9PT1lfSplbnRyaWVzKCl7Zm9yKGxldCBlIG9mIHRoaXMuI20oKSl0aGlzLiNlW2VdIT09dm9pZCAwJiZ0aGlzLiNyW2VdIT09dm9pZCAwJiYhdGhpcy4jdCh0aGlzLiNlW2VdKSYmKHlpZWxkIFt0aGlzLiNyW2VdLHRoaXMuI2VbZV1dKTt9KnJlbnRyaWVzKCl7Zm9yKGxldCBlIG9mIHRoaXMuI3YoKSl0aGlzLiNlW2VdIT09dm9pZCAwJiZ0aGlzLiNyW2VdIT09dm9pZCAwJiYhdGhpcy4jdCh0aGlzLiNlW2VdKSYmKHlpZWxkIFt0aGlzLiNyW2VdLHRoaXMuI2VbZV1dKTt9KmtleXMoKXtmb3IobGV0IGUgb2YgdGhpcy4jbSgpKXtsZXQgcj10aGlzLiNyW2VdO3IhPT12b2lkIDAmJiF0aGlzLiN0KHRoaXMuI2VbZV0pJiYoeWllbGQgcik7fX0qcmtleXMoKXtmb3IobGV0IGUgb2YgdGhpcy4jdigpKXtsZXQgcj10aGlzLiNyW2VdO3IhPT12b2lkIDAmJiF0aGlzLiN0KHRoaXMuI2VbZV0pJiYoeWllbGQgcik7fX0qdmFsdWVzKCl7Zm9yKGxldCBlIG9mIHRoaXMuI20oKSl0aGlzLiNlW2VdIT09dm9pZCAwJiYhdGhpcy4jdCh0aGlzLiNlW2VdKSYmKHlpZWxkIHRoaXMuI2VbZV0pO30qcnZhbHVlcygpe2ZvcihsZXQgZSBvZiB0aGlzLiN2KCkpdGhpcy4jZVtlXSE9PXZvaWQgMCYmIXRoaXMuI3QodGhpcy4jZVtlXSkmJih5aWVsZCB0aGlzLiNlW2VdKTt9W1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gdGhpcy5lbnRyaWVzKCl9ZmluZChlLHI9e30pe2ZvcihsZXQgaSBvZiB0aGlzLiNtKCkpe2xldCBuPXRoaXMuI2VbaV0sbz10aGlzLiN0KG4pP24uX19zdGFsZVdoaWxlRmV0Y2hpbmc6bjtpZihvIT09dm9pZCAwJiZlKG8sdGhpcy4jcltpXSx0aGlzKSlyZXR1cm4gdGhpcy5nZXQodGhpcy4jcltpXSxyKX19Zm9yRWFjaChlLHI9dGhpcyl7Zm9yKGxldCBpIG9mIHRoaXMuI20oKSl7bGV0IG49dGhpcy4jZVtpXSxvPXRoaXMuI3Qobik/bi5fX3N0YWxlV2hpbGVGZXRjaGluZzpuO28hPT12b2lkIDAmJmUuY2FsbChyLG8sdGhpcy4jcltpXSx0aGlzKTt9fXJmb3JFYWNoKGUscj10aGlzKXtmb3IobGV0IGkgb2YgdGhpcy4jdigpKXtsZXQgbj10aGlzLiNlW2ldLG89dGhpcy4jdChuKT9uLl9fc3RhbGVXaGlsZUZldGNoaW5nOm47byE9PXZvaWQgMCYmZS5jYWxsKHIsbyx0aGlzLiNyW2ldLHRoaXMpO319cHVyZ2VTdGFsZSgpe2xldCBlPSExO2ZvcihsZXQgciBvZiB0aGlzLiN2KHthbGxvd1N0YWxlOiEwfSkpdGhpcy4jZChyKSYmKHRoaXMuZGVsZXRlKHRoaXMuI3Jbcl0pLGU9ITApO3JldHVybiBlfWR1bXAoKXtsZXQgZT1bXTtmb3IobGV0IHIgb2YgdGhpcy4jbSh7YWxsb3dTdGFsZTohMH0pKXtsZXQgaT10aGlzLiNyW3JdLG49dGhpcy4jZVtyXSxvPXRoaXMuI3Qobik/bi5fX3N0YWxlV2hpbGVGZXRjaGluZzpuO2lmKG89PT12b2lkIDB8fGk9PT12b2lkIDApY29udGludWU7bGV0IHM9e3ZhbHVlOm99O2lmKHRoaXMuI3cmJnRoaXMuI1Mpe3MudHRsPXRoaXMuI3dbcl07bGV0IGE9SWkubm93KCktdGhpcy4jU1tyXTtzLnN0YXJ0PU1hdGguZmxvb3IoRGF0ZS5ub3coKS1hKTt9dGhpcy4jRSYmKHMuc2l6ZT10aGlzLiNFW3JdKSxlLnVuc2hpZnQoW2ksc10pO31yZXR1cm4gZX1sb2FkKGUpe3RoaXMuY2xlYXIoKTtmb3IobGV0W3IsaV1vZiBlKXtpZihpLnN0YXJ0KXtsZXQgbj1EYXRlLm5vdygpLWkuc3RhcnQ7aS5zdGFydD1JaS5ub3coKS1uO310aGlzLnNldChyLGkudmFsdWUsaSk7fX1zZXQoZSxyLGk9e30pe2lmKHI9PT12b2lkIDApcmV0dXJuIHRoaXMuZGVsZXRlKGUpLHRoaXM7bGV0e3R0bDpuPXRoaXMudHRsLHN0YXJ0Om8sbm9EaXNwb3NlT25TZXQ6cz10aGlzLm5vRGlzcG9zZU9uU2V0LHNpemVDYWxjdWxhdGlvbjphPXRoaXMuc2l6ZUNhbGN1bGF0aW9uLHN0YXR1czp1fT1pLHtub1VwZGF0ZVRUTDpjPXRoaXMubm9VcGRhdGVUVEx9PWksaD10aGlzLiNMKGUscixpLnNpemV8fDAsYSk7aWYodGhpcy5tYXhFbnRyeVNpemUmJmg+dGhpcy5tYXhFbnRyeVNpemUpcmV0dXJuIHUmJih1LnNldD1cIm1pc3NcIix1Lm1heEVudHJ5U2l6ZUV4Y2VlZGVkPSEwKSx0aGlzLmRlbGV0ZShlKSx0aGlzO2xldCBkPXRoaXMuI2k9PT0wP3ZvaWQgMDp0aGlzLiNuLmdldChlKTtpZihkPT09dm9pZCAwKWQ9dGhpcy4jaT09PTA/dGhpcy4jczp0aGlzLiNiLmxlbmd0aCE9PTA/dGhpcy4jYi5wb3AoKTp0aGlzLiNpPT09dGhpcy4jbD90aGlzLiNPKCExKTp0aGlzLiNpLHRoaXMuI3JbZF09ZSx0aGlzLiNlW2RdPXIsdGhpcy4jbi5zZXQoZSxkKSx0aGlzLiN1W3RoaXMuI3NdPWQsdGhpcy4jaFtkXT10aGlzLiNzLHRoaXMuI3M9ZCx0aGlzLiNpKyssdGhpcy4jUChkLGgsdSksdSYmKHUuc2V0PVwiYWRkXCIpLGM9ITE7ZWxzZSB7dGhpcy4jQyhkKTtsZXQgZz10aGlzLiNlW2RdO2lmKHIhPT1nKXtpZih0aGlzLiNJJiZ0aGlzLiN0KGcpKXtnLl9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcihcInJlcGxhY2VkXCIpKTtsZXR7X19zdGFsZVdoaWxlRmV0Y2hpbmc6eX09Zzt5IT09dm9pZCAwJiYhcyYmKHRoaXMuI18mJnRoaXMuI3A/Lih5LGUsXCJzZXRcIiksdGhpcy4jZiYmdGhpcy4jbz8ucHVzaChbeSxlLFwic2V0XCJdKSk7fWVsc2Ugc3x8KHRoaXMuI18mJnRoaXMuI3A/LihnLGUsXCJzZXRcIiksdGhpcy4jZiYmdGhpcy4jbz8ucHVzaChbZyxlLFwic2V0XCJdKSk7aWYodGhpcy4jUihkKSx0aGlzLiNQKGQsaCx1KSx0aGlzLiNlW2RdPXIsdSl7dS5zZXQ9XCJyZXBsYWNlXCI7bGV0IHk9ZyYmdGhpcy4jdChnKT9nLl9fc3RhbGVXaGlsZUZldGNoaW5nOmc7eSE9PXZvaWQgMCYmKHUub2xkVmFsdWU9eSk7fX1lbHNlIHUmJih1LnNldD1cInVwZGF0ZVwiKTt9aWYobiE9PTAmJiF0aGlzLiN3JiZ0aGlzLiN4KCksdGhpcy4jdyYmKGN8fHRoaXMuI00oZCxuLG8pLHUmJnRoaXMuI0EodSxkKSksIXMmJnRoaXMuI2YmJnRoaXMuI28pe2xldCBnPXRoaXMuI28seTtmb3IoO3k9Zz8uc2hpZnQoKTspdGhpcy4jZz8uKC4uLnkpO31yZXR1cm4gdGhpc31wb3AoKXt0cnl7Zm9yKDt0aGlzLiNpOyl7bGV0IGU9dGhpcy4jZVt0aGlzLiNhXTtpZih0aGlzLiNPKCEwKSx0aGlzLiN0KGUpKXtpZihlLl9fc3RhbGVXaGlsZUZldGNoaW5nKXJldHVybiBlLl9fc3RhbGVXaGlsZUZldGNoaW5nfWVsc2UgaWYoZSE9PXZvaWQgMClyZXR1cm4gZX19ZmluYWxseXtpZih0aGlzLiNmJiZ0aGlzLiNvKXtsZXQgZT10aGlzLiNvLHI7Zm9yKDtyPWU/LnNoaWZ0KCk7KXRoaXMuI2c/LiguLi5yKTt9fX0jTyhlKXtsZXQgcj10aGlzLiNhLGk9dGhpcy4jcltyXSxuPXRoaXMuI2Vbcl07cmV0dXJuIHRoaXMuI0kmJnRoaXMuI3Qobik/bi5fX2Fib3J0Q29udHJvbGxlci5hYm9ydChuZXcgRXJyb3IoXCJldmljdGVkXCIpKToodGhpcy4jX3x8dGhpcy4jZikmJih0aGlzLiNfJiZ0aGlzLiNwPy4obixpLFwiZXZpY3RcIiksdGhpcy4jZiYmdGhpcy4jbz8ucHVzaChbbixpLFwiZXZpY3RcIl0pKSx0aGlzLiNSKHIpLGUmJih0aGlzLiNyW3JdPXZvaWQgMCx0aGlzLiNlW3JdPXZvaWQgMCx0aGlzLiNiLnB1c2gocikpLHRoaXMuI2k9PT0xPyh0aGlzLiNhPXRoaXMuI3M9MCx0aGlzLiNiLmxlbmd0aD0wKTp0aGlzLiNhPXRoaXMuI3Vbcl0sdGhpcy4jbi5kZWxldGUoaSksdGhpcy4jaS0tLHJ9aGFzKGUscj17fSl7bGV0e3VwZGF0ZUFnZU9uSGFzOmk9dGhpcy51cGRhdGVBZ2VPbkhhcyxzdGF0dXM6bn09cixvPXRoaXMuI24uZ2V0KGUpO2lmKG8hPT12b2lkIDApe2xldCBzPXRoaXMuI2Vbb107aWYodGhpcy4jdChzKSYmcy5fX3N0YWxlV2hpbGVGZXRjaGluZz09PXZvaWQgMClyZXR1cm4gITE7aWYodGhpcy4jZChvKSluJiYobi5oYXM9XCJzdGFsZVwiLHRoaXMuI0EobixvKSk7ZWxzZSByZXR1cm4gaSYmdGhpcy4jVChvKSxuJiYobi5oYXM9XCJoaXRcIix0aGlzLiNBKG4sbykpLCEwfWVsc2UgbiYmKG4uaGFzPVwibWlzc1wiKTtyZXR1cm4gITF9cGVlayhlLHI9e30pe2xldHthbGxvd1N0YWxlOmk9dGhpcy5hbGxvd1N0YWxlfT1yLG49dGhpcy4jbi5nZXQoZSk7aWYobiE9PXZvaWQgMCYmKGl8fCF0aGlzLiNkKG4pKSl7bGV0IG89dGhpcy4jZVtuXTtyZXR1cm4gdGhpcy4jdChvKT9vLl9fc3RhbGVXaGlsZUZldGNoaW5nOm99fSNrKGUscixpLG4pe2xldCBvPXI9PT12b2lkIDA/dm9pZCAwOnRoaXMuI2Vbcl07aWYodGhpcy4jdChvKSlyZXR1cm4gbztsZXQgcz1uZXcgT24se3NpZ25hbDphfT1pO2E/LmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCgpPT5zLmFib3J0KGEucmVhc29uKSx7c2lnbmFsOnMuc2lnbmFsfSk7bGV0IHU9e3NpZ25hbDpzLnNpZ25hbCxvcHRpb25zOmksY29udGV4dDpufSxjPShFLFM9ITEpPT57bGV0e2Fib3J0ZWQ6SX09cy5zaWduYWwsQz1pLmlnbm9yZUZldGNoQWJvcnQmJkUhPT12b2lkIDA7aWYoaS5zdGF0dXMmJihJJiYhUz8oaS5zdGF0dXMuZmV0Y2hBYm9ydGVkPSEwLGkuc3RhdHVzLmZldGNoRXJyb3I9cy5zaWduYWwucmVhc29uLEMmJihpLnN0YXR1cy5mZXRjaEFib3J0SWdub3JlZD0hMCkpOmkuc3RhdHVzLmZldGNoUmVzb2x2ZWQ9ITApLEkmJiFDJiYhUylyZXR1cm4gZChzLnNpZ25hbC5yZWFzb24pO2xldCBSPXk7cmV0dXJuIHRoaXMuI2Vbcl09PT15JiYoRT09PXZvaWQgMD9SLl9fc3RhbGVXaGlsZUZldGNoaW5nP3RoaXMuI2Vbcl09Ui5fX3N0YWxlV2hpbGVGZXRjaGluZzp0aGlzLmRlbGV0ZShlKTooaS5zdGF0dXMmJihpLnN0YXR1cy5mZXRjaFVwZGF0ZWQ9ITApLHRoaXMuc2V0KGUsRSx1Lm9wdGlvbnMpKSksRX0saD1FPT4oaS5zdGF0dXMmJihpLnN0YXR1cy5mZXRjaFJlamVjdGVkPSEwLGkuc3RhdHVzLmZldGNoRXJyb3I9RSksZChFKSksZD1FPT57bGV0e2Fib3J0ZWQ6U309cy5zaWduYWwsST1TJiZpLmFsbG93U3RhbGVPbkZldGNoQWJvcnQsQz1JfHxpLmFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uLFI9Q3x8aS5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24sVT15O2lmKHRoaXMuI2Vbcl09PT15JiYoIVJ8fFUuX19zdGFsZVdoaWxlRmV0Y2hpbmc9PT12b2lkIDA/dGhpcy5kZWxldGUoZSk6SXx8KHRoaXMuI2Vbcl09VS5fX3N0YWxlV2hpbGVGZXRjaGluZykpLEMpcmV0dXJuIGkuc3RhdHVzJiZVLl9fc3RhbGVXaGlsZUZldGNoaW5nIT09dm9pZCAwJiYoaS5zdGF0dXMucmV0dXJuZWRTdGFsZT0hMCksVS5fX3N0YWxlV2hpbGVGZXRjaGluZztpZihVLl9fcmV0dXJuZWQ9PT1VKXRocm93IEV9LGc9KEUsUyk9PntsZXQgST10aGlzLiNCPy4oZSxvLHUpO0kmJkkgaW5zdGFuY2VvZiBQcm9taXNlJiZJLnRoZW4oQz0+RShDPT09dm9pZCAwP3ZvaWQgMDpDKSxTKSxzLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwoKT0+eyghaS5pZ25vcmVGZXRjaEFib3J0fHxpLmFsbG93U3RhbGVPbkZldGNoQWJvcnQpJiYoRSh2b2lkIDApLGkuYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCYmKEU9Qz0+YyhDLCEwKSkpO30pO307aS5zdGF0dXMmJihpLnN0YXR1cy5mZXRjaERpc3BhdGNoZWQ9ITApO2xldCB5PW5ldyBQcm9taXNlKGcpLnRoZW4oYyxoKSx3PU9iamVjdC5hc3NpZ24oeSx7X19hYm9ydENvbnRyb2xsZXI6cyxfX3N0YWxlV2hpbGVGZXRjaGluZzpvLF9fcmV0dXJuZWQ6dm9pZCAwfSk7cmV0dXJuIHI9PT12b2lkIDA/KHRoaXMuc2V0KGUsdyx7Li4udS5vcHRpb25zLHN0YXR1czp2b2lkIDB9KSxyPXRoaXMuI24uZ2V0KGUpKTp0aGlzLiNlW3JdPXcsd30jdChlKXtpZighdGhpcy4jSSlyZXR1cm4gITE7bGV0IHI9ZTtyZXR1cm4gISFyJiZyIGluc3RhbmNlb2YgUHJvbWlzZSYmci5oYXNPd25Qcm9wZXJ0eShcIl9fc3RhbGVXaGlsZUZldGNoaW5nXCIpJiZyLl9fYWJvcnRDb250cm9sbGVyIGluc3RhbmNlb2YgT259YXN5bmMgZmV0Y2goZSxyPXt9KXtsZXR7YWxsb3dTdGFsZTppPXRoaXMuYWxsb3dTdGFsZSx1cGRhdGVBZ2VPbkdldDpuPXRoaXMudXBkYXRlQWdlT25HZXQsbm9EZWxldGVPblN0YWxlR2V0Om89dGhpcy5ub0RlbGV0ZU9uU3RhbGVHZXQsdHRsOnM9dGhpcy50dGwsbm9EaXNwb3NlT25TZXQ6YT10aGlzLm5vRGlzcG9zZU9uU2V0LHNpemU6dT0wLHNpemVDYWxjdWxhdGlvbjpjPXRoaXMuc2l6ZUNhbGN1bGF0aW9uLG5vVXBkYXRlVFRMOmg9dGhpcy5ub1VwZGF0ZVRUTCxub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb246ZD10aGlzLm5vRGVsZXRlT25GZXRjaFJlamVjdGlvbixhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbjpnPXRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24saWdub3JlRmV0Y2hBYm9ydDp5PXRoaXMuaWdub3JlRmV0Y2hBYm9ydCxhbGxvd1N0YWxlT25GZXRjaEFib3J0Onc9dGhpcy5hbGxvd1N0YWxlT25GZXRjaEFib3J0LGNvbnRleHQ6RSxmb3JjZVJlZnJlc2g6Uz0hMSxzdGF0dXM6SSxzaWduYWw6Q309cjtpZighdGhpcy4jSSlyZXR1cm4gSSYmKEkuZmV0Y2g9XCJnZXRcIiksdGhpcy5nZXQoZSx7YWxsb3dTdGFsZTppLHVwZGF0ZUFnZU9uR2V0Om4sbm9EZWxldGVPblN0YWxlR2V0Om8sc3RhdHVzOkl9KTtsZXQgUj17YWxsb3dTdGFsZTppLHVwZGF0ZUFnZU9uR2V0Om4sbm9EZWxldGVPblN0YWxlR2V0Om8sdHRsOnMsbm9EaXNwb3NlT25TZXQ6YSxzaXplOnUsc2l6ZUNhbGN1bGF0aW9uOmMsbm9VcGRhdGVUVEw6aCxub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb246ZCxhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbjpnLGFsbG93U3RhbGVPbkZldGNoQWJvcnQ6dyxpZ25vcmVGZXRjaEFib3J0Onksc3RhdHVzOkksc2lnbmFsOkN9LFU9dGhpcy4jbi5nZXQoZSk7aWYoVT09PXZvaWQgMCl7SSYmKEkuZmV0Y2g9XCJtaXNzXCIpO2xldCBOPXRoaXMuI2soZSxVLFIsRSk7cmV0dXJuIE4uX19yZXR1cm5lZD1OfWVsc2Uge2xldCBOPXRoaXMuI2VbVV07aWYodGhpcy4jdChOKSl7bGV0IGRlPWkmJk4uX19zdGFsZVdoaWxlRmV0Y2hpbmchPT12b2lkIDA7cmV0dXJuIEkmJihJLmZldGNoPVwiaW5mbGlnaHRcIixkZSYmKEkucmV0dXJuZWRTdGFsZT0hMCkpLGRlP04uX19zdGFsZVdoaWxlRmV0Y2hpbmc6Ti5fX3JldHVybmVkPU59bGV0IFc9dGhpcy4jZChVKTtpZighUyYmIVcpcmV0dXJuIEkmJihJLmZldGNoPVwiaGl0XCIpLHRoaXMuI0MoVSksbiYmdGhpcy4jVChVKSxJJiZ0aGlzLiNBKEksVSksTjtsZXQgSz10aGlzLiNrKGUsVSxSLEUpLFE9Sy5fX3N0YWxlV2hpbGVGZXRjaGluZyE9PXZvaWQgMCYmaTtyZXR1cm4gSSYmKEkuZmV0Y2g9Vz9cInN0YWxlXCI6XCJyZWZyZXNoXCIsUSYmVyYmKEkucmV0dXJuZWRTdGFsZT0hMCkpLFE/Sy5fX3N0YWxlV2hpbGVGZXRjaGluZzpLLl9fcmV0dXJuZWQ9S319Z2V0KGUscj17fSl7bGV0e2FsbG93U3RhbGU6aT10aGlzLmFsbG93U3RhbGUsdXBkYXRlQWdlT25HZXQ6bj10aGlzLnVwZGF0ZUFnZU9uR2V0LG5vRGVsZXRlT25TdGFsZUdldDpvPXRoaXMubm9EZWxldGVPblN0YWxlR2V0LHN0YXR1czpzfT1yLGE9dGhpcy4jbi5nZXQoZSk7aWYoYSE9PXZvaWQgMCl7bGV0IHU9dGhpcy4jZVthXSxjPXRoaXMuI3QodSk7cmV0dXJuIHMmJnRoaXMuI0EocyxhKSx0aGlzLiNkKGEpPyhzJiYocy5nZXQ9XCJzdGFsZVwiKSxjPyhzJiZpJiZ1Ll9fc3RhbGVXaGlsZUZldGNoaW5nIT09dm9pZCAwJiYocy5yZXR1cm5lZFN0YWxlPSEwKSxpP3UuX19zdGFsZVdoaWxlRmV0Y2hpbmc6dm9pZCAwKToob3x8dGhpcy5kZWxldGUoZSkscyYmaSYmKHMucmV0dXJuZWRTdGFsZT0hMCksaT91OnZvaWQgMCkpOihzJiYocy5nZXQ9XCJoaXRcIiksYz91Ll9fc3RhbGVXaGlsZUZldGNoaW5nOih0aGlzLiNDKGEpLG4mJnRoaXMuI1QoYSksdSkpfWVsc2UgcyYmKHMuZ2V0PVwibWlzc1wiKTt9I04oZSxyKXt0aGlzLiNoW3JdPWUsdGhpcy4jdVtlXT1yO30jQyhlKXtlIT09dGhpcy4jcyYmKGU9PT10aGlzLiNhP3RoaXMuI2E9dGhpcy4jdVtlXTp0aGlzLiNOKHRoaXMuI2hbZV0sdGhpcy4jdVtlXSksdGhpcy4jTih0aGlzLiNzLGUpLHRoaXMuI3M9ZSk7fWRlbGV0ZShlKXtsZXQgcj0hMTtpZih0aGlzLiNpIT09MCl7bGV0IGk9dGhpcy4jbi5nZXQoZSk7aWYoaSE9PXZvaWQgMClpZihyPSEwLHRoaXMuI2k9PT0xKXRoaXMuY2xlYXIoKTtlbHNlIHt0aGlzLiNSKGkpO2xldCBuPXRoaXMuI2VbaV07dGhpcy4jdChuKT9uLl9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcihcImRlbGV0ZWRcIikpOih0aGlzLiNffHx0aGlzLiNmKSYmKHRoaXMuI18mJnRoaXMuI3A/LihuLGUsXCJkZWxldGVcIiksdGhpcy4jZiYmdGhpcy4jbz8ucHVzaChbbixlLFwiZGVsZXRlXCJdKSksdGhpcy4jbi5kZWxldGUoZSksdGhpcy4jcltpXT12b2lkIDAsdGhpcy4jZVtpXT12b2lkIDAsaT09PXRoaXMuI3M/dGhpcy4jcz10aGlzLiNoW2ldOmk9PT10aGlzLiNhP3RoaXMuI2E9dGhpcy4jdVtpXToodGhpcy4jdVt0aGlzLiNoW2ldXT10aGlzLiN1W2ldLHRoaXMuI2hbdGhpcy4jdVtpXV09dGhpcy4jaFtpXSksdGhpcy4jaS0tLHRoaXMuI2IucHVzaChpKTt9fWlmKHRoaXMuI2YmJnRoaXMuI28/Lmxlbmd0aCl7bGV0IGk9dGhpcy4jbyxuO2Zvcig7bj1pPy5zaGlmdCgpOyl0aGlzLiNnPy4oLi4ubik7fXJldHVybiByfWNsZWFyKCl7Zm9yKGxldCBlIG9mIHRoaXMuI3Yoe2FsbG93U3RhbGU6ITB9KSl7bGV0IHI9dGhpcy4jZVtlXTtpZih0aGlzLiN0KHIpKXIuX19hYm9ydENvbnRyb2xsZXIuYWJvcnQobmV3IEVycm9yKFwiZGVsZXRlZFwiKSk7ZWxzZSB7bGV0IGk9dGhpcy4jcltlXTt0aGlzLiNfJiZ0aGlzLiNwPy4ocixpLFwiZGVsZXRlXCIpLHRoaXMuI2YmJnRoaXMuI28/LnB1c2goW3IsaSxcImRlbGV0ZVwiXSk7fX1pZih0aGlzLiNuLmNsZWFyKCksdGhpcy4jZS5maWxsKHZvaWQgMCksdGhpcy4jci5maWxsKHZvaWQgMCksdGhpcy4jdyYmdGhpcy4jUyYmKHRoaXMuI3cuZmlsbCgwKSx0aGlzLiNTLmZpbGwoMCkpLHRoaXMuI0UmJnRoaXMuI0UuZmlsbCgwKSx0aGlzLiNhPTAsdGhpcy4jcz0wLHRoaXMuI2IubGVuZ3RoPTAsdGhpcy4jeT0wLHRoaXMuI2k9MCx0aGlzLiNmJiZ0aGlzLiNvKXtsZXQgZT10aGlzLiNvLHI7Zm9yKDtyPWU/LnNoaWZ0KCk7KXRoaXMuI2c/LiguLi5yKTt9fX07a24uTFJVQ2FjaGU9c2E7fSk7dmFyIGF0PU0oSHQ9Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSHQsXCJ0XCIse3ZhbHVlOiEwfSk7SHQuQ29udGFpbmVySXRlcmF0b3I9SHQuQ29udGFpbmVyPUh0LkJhc2U9dm9pZCAwO3ZhciBvYT1jbGFzc3tjb25zdHJ1Y3RvcihlPTApe3RoaXMuaXRlcmF0b3JUeXBlPWU7fWVxdWFscyhlKXtyZXR1cm4gdGhpcy5vPT09ZS5vfX07SHQuQ29udGFpbmVySXRlcmF0b3I9b2E7dmFyIHhuPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5pPTA7fWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5pfXNpemUoKXtyZXR1cm4gdGhpcy5pfWVtcHR5KCl7cmV0dXJuIHRoaXMuaT09PTB9fTtIdC5CYXNlPXhuO3ZhciBhYT1jbGFzcyBleHRlbmRzIHhue307SHQuQ29udGFpbmVyPWFhO30pO3ZhciBaZD1NKE1uPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KE1uLFwidFwiLHt2YWx1ZTohMH0pO01uLmRlZmF1bHQ9dm9pZCAwO3ZhciB3MT1hdCgpLGxhPWNsYXNzIGV4dGVuZHMgdzEuQmFzZXtjb25zdHJ1Y3RvcihlPVtdKXtzdXBlcigpLHRoaXMuUz1bXTtsZXQgcj10aGlzO2UuZm9yRWFjaChmdW5jdGlvbihpKXtyLnB1c2goaSk7fSk7fWNsZWFyKCl7dGhpcy5pPTAsdGhpcy5TPVtdO31wdXNoKGUpe3JldHVybiB0aGlzLlMucHVzaChlKSx0aGlzLmkrPTEsdGhpcy5pfXBvcCgpe2lmKHRoaXMuaSE9PTApcmV0dXJuIHRoaXMuaS09MSx0aGlzLlMucG9wKCl9dG9wKCl7cmV0dXJuIHRoaXMuU1t0aGlzLmktMV19fSxfMT1sYTtNbi5kZWZhdWx0PV8xO30pO3ZhciBlcD1NKExuPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KExuLFwidFwiLHt2YWx1ZTohMH0pO0xuLmRlZmF1bHQ9dm9pZCAwO3ZhciBtMT1hdCgpLHVhPWNsYXNzIGV4dGVuZHMgbTEuQmFzZXtjb25zdHJ1Y3RvcihlPVtdKXtzdXBlcigpLHRoaXMuaj0wLHRoaXMucT1bXTtsZXQgcj10aGlzO2UuZm9yRWFjaChmdW5jdGlvbihpKXtyLnB1c2goaSk7fSk7fWNsZWFyKCl7dGhpcy5xPVtdLHRoaXMuaT10aGlzLmo9MDt9cHVzaChlKXtsZXQgcj10aGlzLnEubGVuZ3RoO2lmKHRoaXMuai9yPi41JiZ0aGlzLmordGhpcy5pPj1yJiZyPjQwOTYpe2xldCBpPXRoaXMuaTtmb3IobGV0IG49MDtuPGk7KytuKXRoaXMucVtuXT10aGlzLnFbdGhpcy5qK25dO3RoaXMuaj0wLHRoaXMucVt0aGlzLmldPWU7fWVsc2UgdGhpcy5xW3RoaXMuait0aGlzLmldPWU7cmV0dXJuICsrdGhpcy5pfXBvcCgpe2lmKHRoaXMuaT09PTApcmV0dXJuO2xldCBlPXRoaXMucVt0aGlzLmorK107cmV0dXJuIHRoaXMuaS09MSxlfWZyb250KCl7aWYodGhpcy5pIT09MClyZXR1cm4gdGhpcy5xW3RoaXMual19fSx2MT11YTtMbi5kZWZhdWx0PXYxO30pO3ZhciB0cD1NKFVuPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFVuLFwidFwiLHt2YWx1ZTohMH0pO1VuLmRlZmF1bHQ9dm9pZCAwO3ZhciBFMT1hdCgpLGZhPWNsYXNzIGV4dGVuZHMgRTEuQmFzZXtjb25zdHJ1Y3RvcihlPVtdLHI9ZnVuY3Rpb24obixvKXtyZXR1cm4gbj5vPy0xOm48bz8xOjB9LGk9ITApe2lmKHN1cGVyKCksdGhpcy52PXIsQXJyYXkuaXNBcnJheShlKSl0aGlzLkM9aT9bLi4uZV06ZTtlbHNlIHt0aGlzLkM9W107bGV0IG89dGhpcztlLmZvckVhY2goZnVuY3Rpb24ocyl7by5DLnB1c2gocyk7fSk7fXRoaXMuaT10aGlzLkMubGVuZ3RoO2xldCBuPXRoaXMuaT4+MTtmb3IobGV0IG89dGhpcy5pLTE+PjE7bz49MDstLW8pdGhpcy5rKG8sbik7fW0oZSl7bGV0IHI9dGhpcy5DW2VdO2Zvcig7ZT4wOyl7bGV0IGk9ZS0xPj4xLG49dGhpcy5DW2ldO2lmKHRoaXMudihuLHIpPD0wKWJyZWFrO3RoaXMuQ1tlXT1uLGU9aTt9dGhpcy5DW2VdPXI7fWsoZSxyKXtsZXQgaT10aGlzLkNbZV07Zm9yKDtlPHI7KXtsZXQgbj1lPDwxfDEsbz1uKzEscz10aGlzLkNbbl07aWYobzx0aGlzLmkmJnRoaXMudihzLHRoaXMuQ1tvXSk+MCYmKG49byxzPXRoaXMuQ1tvXSksdGhpcy52KHMsaSk+PTApYnJlYWs7dGhpcy5DW2VdPXMsZT1uO310aGlzLkNbZV09aTt9Y2xlYXIoKXt0aGlzLmk9MCx0aGlzLkMubGVuZ3RoPTA7fXB1c2goZSl7dGhpcy5DLnB1c2goZSksdGhpcy5tKHRoaXMuaSksdGhpcy5pKz0xO31wb3AoKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT10aGlzLkNbMF0scj10aGlzLkMucG9wKCk7cmV0dXJuIHRoaXMuaS09MSx0aGlzLmkmJih0aGlzLkNbMF09cix0aGlzLmsoMCx0aGlzLmk+PjEpKSxlfXRvcCgpe3JldHVybiB0aGlzLkNbMF19ZmluZChlKXtyZXR1cm4gdGhpcy5DLmluZGV4T2YoZSk+PTB9cmVtb3ZlKGUpe2xldCByPXRoaXMuQy5pbmRleE9mKGUpO3JldHVybiByPDA/ITE6KHI9PT0wP3RoaXMucG9wKCk6cj09PXRoaXMuaS0xPyh0aGlzLkMucG9wKCksdGhpcy5pLT0xKToodGhpcy5DLnNwbGljZShyLDEsdGhpcy5DLnBvcCgpKSx0aGlzLmktPTEsdGhpcy5tKHIpLHRoaXMuayhyLHRoaXMuaT4+MSkpLCEwKX11cGRhdGVJdGVtKGUpe2xldCByPXRoaXMuQy5pbmRleE9mKGUpO3JldHVybiByPDA/ITE6KHRoaXMubShyKSx0aGlzLmsocix0aGlzLmk+PjEpLCEwKX10b0FycmF5KCl7cmV0dXJuIFsuLi50aGlzLkNdfX0sUzE9ZmE7VW4uZGVmYXVsdD1TMTt9KTt2YXIgcW49TShObj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShObixcInRcIix7dmFsdWU6ITB9KTtObi5kZWZhdWx0PXZvaWQgMDt2YXIgQTE9YXQoKSxjYT1jbGFzcyBleHRlbmRzIEExLkNvbnRhaW5lcnt9LEkxPWNhO05uLmRlZmF1bHQ9STE7fSk7dmFyIGx0PU0oaGE9Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoaGEsXCJ0XCIse3ZhbHVlOiEwfSk7aGEudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yPVQxO2Z1bmN0aW9uIFQxKCl7dGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJdGVyYXRvciBhY2Nlc3MgZGVuaWVkIVwiKX19KTt2YXIgcGE9TShqbj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShqbixcInRcIix7dmFsdWU6ITB9KTtqbi5SYW5kb21JdGVyYXRvcj12b2lkIDA7dmFyIFIxPWF0KCksRG49bHQoKSxkYT1jbGFzcyBleHRlbmRzIFIxLkNvbnRhaW5lckl0ZXJhdG9ye2NvbnN0cnVjdG9yKGUscil7c3VwZXIociksdGhpcy5vPWUsdGhpcy5pdGVyYXRvclR5cGU9PT0wPyh0aGlzLnByZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT0wJiYoMCwgRG4udGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMuby09MSx0aGlzfSx0aGlzLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vPT09dGhpcy5jb250YWluZXIuc2l6ZSgpJiYoMCwgRG4udGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMubys9MSx0aGlzfSk6KHRoaXMucHJlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubz09PXRoaXMuY29udGFpbmVyLnNpemUoKS0xJiYoMCwgRG4udGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMubys9MSx0aGlzfSx0aGlzLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vPT09LTEmJigwLCBEbi50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vLT0xLHRoaXN9KTt9Z2V0IHBvaW50ZXIoKXtyZXR1cm4gdGhpcy5jb250YWluZXIuZ2V0RWxlbWVudEJ5UG9zKHRoaXMubyl9c2V0IHBvaW50ZXIoZSl7dGhpcy5jb250YWluZXIuc2V0RWxlbWVudEJ5UG9zKHRoaXMubyxlKTt9fTtqbi5SYW5kb21JdGVyYXRvcj1kYTt9KTt2YXIgcnA9TShGbj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShGbixcInRcIix7dmFsdWU6ITB9KTtGbi5kZWZhdWx0PXZvaWQgMDt2YXIgQzE9UDEocW4oKSksQjE9cGEoKTtmdW5jdGlvbiBQMSh0KXtyZXR1cm4gdCYmdC50P3Q6e2RlZmF1bHQ6dH19dmFyIHdyPWNsYXNzIHQgZXh0ZW5kcyBCMS5SYW5kb21JdGVyYXRvcntjb25zdHJ1Y3RvcihlLHIsaSl7c3VwZXIoZSxpKSx0aGlzLmNvbnRhaW5lcj1yO31jb3B5KCl7cmV0dXJuIG5ldyB0KHRoaXMubyx0aGlzLmNvbnRhaW5lcix0aGlzLml0ZXJhdG9yVHlwZSl9fSxnYT1jbGFzcyBleHRlbmRzIEMxLmRlZmF1bHR7Y29uc3RydWN0b3IoZT1bXSxyPSEwKXtpZihzdXBlcigpLEFycmF5LmlzQXJyYXkoZSkpdGhpcy5KPXI/Wy4uLmVdOmUsdGhpcy5pPWUubGVuZ3RoO2Vsc2Uge3RoaXMuSj1bXTtsZXQgaT10aGlzO2UuZm9yRWFjaChmdW5jdGlvbihuKXtpLnB1c2hCYWNrKG4pO30pO319Y2xlYXIoKXt0aGlzLmk9MCx0aGlzLkoubGVuZ3RoPTA7fWJlZ2luKCl7cmV0dXJuIG5ldyB3cigwLHRoaXMpfWVuZCgpe3JldHVybiBuZXcgd3IodGhpcy5pLHRoaXMpfXJCZWdpbigpe3JldHVybiBuZXcgd3IodGhpcy5pLTEsdGhpcywxKX1yRW5kKCl7cmV0dXJuIG5ldyB3cigtMSx0aGlzLDEpfWZyb250KCl7cmV0dXJuIHRoaXMuSlswXX1iYWNrKCl7cmV0dXJuIHRoaXMuSlt0aGlzLmktMV19Z2V0RWxlbWVudEJ5UG9zKGUpe2lmKGU8MHx8ZT50aGlzLmktMSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjtyZXR1cm4gdGhpcy5KW2VdfWVyYXNlRWxlbWVudEJ5UG9zKGUpe2lmKGU8MHx8ZT50aGlzLmktMSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjtyZXR1cm4gdGhpcy5KLnNwbGljZShlLDEpLHRoaXMuaS09MSx0aGlzLml9ZXJhc2VFbGVtZW50QnlWYWx1ZShlKXtsZXQgcj0wO2ZvcihsZXQgaT0wO2k8dGhpcy5pOysraSl0aGlzLkpbaV0hPT1lJiYodGhpcy5KW3IrK109dGhpcy5KW2ldKTtyZXR1cm4gdGhpcy5pPXRoaXMuSi5sZW5ndGg9cix0aGlzLml9ZXJhc2VFbGVtZW50QnlJdGVyYXRvcihlKXtsZXQgcj1lLm87cmV0dXJuIGU9ZS5uZXh0KCksdGhpcy5lcmFzZUVsZW1lbnRCeVBvcyhyKSxlfXB1c2hCYWNrKGUpe3JldHVybiB0aGlzLkoucHVzaChlKSx0aGlzLmkrPTEsdGhpcy5pfXBvcEJhY2soKXtpZih0aGlzLmkhPT0wKXJldHVybiB0aGlzLmktPTEsdGhpcy5KLnBvcCgpfXNldEVsZW1lbnRCeVBvcyhlLHIpe2lmKGU8MHx8ZT50aGlzLmktMSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjt0aGlzLkpbZV09cjt9aW5zZXJ0KGUscixpPTEpe2lmKGU8MHx8ZT50aGlzLmkpdGhyb3cgbmV3IFJhbmdlRXJyb3I7cmV0dXJuIHRoaXMuSi5zcGxpY2UoZSwwLC4uLm5ldyBBcnJheShpKS5maWxsKHIpKSx0aGlzLmkrPWksdGhpcy5pfWZpbmQoZSl7Zm9yKGxldCByPTA7cjx0aGlzLmk7KytyKWlmKHRoaXMuSltyXT09PWUpcmV0dXJuIG5ldyB3cihyLHRoaXMpO3JldHVybiB0aGlzLmVuZCgpfXJldmVyc2UoKXt0aGlzLkoucmV2ZXJzZSgpO311bmlxdWUoKXtsZXQgZT0xO2ZvcihsZXQgcj0xO3I8dGhpcy5pOysrcil0aGlzLkpbcl0hPT10aGlzLkpbci0xXSYmKHRoaXMuSltlKytdPXRoaXMuSltyXSk7cmV0dXJuIHRoaXMuaT10aGlzLkoubGVuZ3RoPWUsdGhpcy5pfXNvcnQoZSl7dGhpcy5KLnNvcnQoZSk7fWZvckVhY2goZSl7Zm9yKGxldCByPTA7cjx0aGlzLmk7KytyKWUodGhpcy5KW3JdLHIsdGhpcyk7fVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIGZ1bmN0aW9uKigpe3lpZWxkKnRoaXMuSjt9LmJpbmQodGhpcykoKX19LE8xPWdhO0ZuLmRlZmF1bHQ9TzE7fSk7dmFyIGlwPU0oV249Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoV24sXCJ0XCIse3ZhbHVlOiEwfSk7V24uZGVmYXVsdD12b2lkIDA7dmFyIGsxPU0xKHFuKCkpLHgxPWF0KCksX3I9bHQoKTtmdW5jdGlvbiBNMSh0KXtyZXR1cm4gdCYmdC50P3Q6e2RlZmF1bHQ6dH19dmFyIG1yPWNsYXNzIHQgZXh0ZW5kcyB4MS5Db250YWluZXJJdGVyYXRvcntjb25zdHJ1Y3RvcihlLHIsaSxuKXtzdXBlcihuKSx0aGlzLm89ZSx0aGlzLmg9cix0aGlzLmNvbnRhaW5lcj1pLHRoaXMuaXRlcmF0b3JUeXBlPT09MD8odGhpcy5wcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLkw9PT10aGlzLmgmJigwLCBfci50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5MLHRoaXN9LHRoaXMubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCBfci50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5CLHRoaXN9KToodGhpcy5wcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLkI9PT10aGlzLmgmJigwLCBfci50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5CLHRoaXN9LHRoaXMubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCBfci50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5MLHRoaXN9KTt9Z2V0IHBvaW50ZXIoKXtyZXR1cm4gdGhpcy5vPT09dGhpcy5oJiYoMCwgX3IudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMuby5sfXNldCBwb2ludGVyKGUpe3RoaXMubz09PXRoaXMuaCYmKDAsIF9yLnRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcikoKSx0aGlzLm8ubD1lO31jb3B5KCl7cmV0dXJuIG5ldyB0KHRoaXMubyx0aGlzLmgsdGhpcy5jb250YWluZXIsdGhpcy5pdGVyYXRvclR5cGUpfX0seWE9Y2xhc3MgZXh0ZW5kcyBrMS5kZWZhdWx0e2NvbnN0cnVjdG9yKGU9W10pe3N1cGVyKCksdGhpcy5oPXt9LHRoaXMucD10aGlzLl89dGhpcy5oLkw9dGhpcy5oLkI9dGhpcy5oO2xldCByPXRoaXM7ZS5mb3JFYWNoKGZ1bmN0aW9uKGkpe3IucHVzaEJhY2soaSk7fSk7fVYoZSl7bGV0e0w6cixCOml9PWU7ci5CPWksaS5MPXIsZT09PXRoaXMucCYmKHRoaXMucD1pKSxlPT09dGhpcy5fJiYodGhpcy5fPXIpLHRoaXMuaS09MTt9RyhlLHIpe2xldCBpPXIuQixuPXtsOmUsTDpyLEI6aX07ci5CPW4saS5MPW4scj09PXRoaXMuaCYmKHRoaXMucD1uKSxpPT09dGhpcy5oJiYodGhpcy5fPW4pLHRoaXMuaSs9MTt9Y2xlYXIoKXt0aGlzLmk9MCx0aGlzLnA9dGhpcy5fPXRoaXMuaC5MPXRoaXMuaC5CPXRoaXMuaDt9YmVnaW4oKXtyZXR1cm4gbmV3IG1yKHRoaXMucCx0aGlzLmgsdGhpcyl9ZW5kKCl7cmV0dXJuIG5ldyBtcih0aGlzLmgsdGhpcy5oLHRoaXMpfXJCZWdpbigpe3JldHVybiBuZXcgbXIodGhpcy5fLHRoaXMuaCx0aGlzLDEpfXJFbmQoKXtyZXR1cm4gbmV3IG1yKHRoaXMuaCx0aGlzLmgsdGhpcywxKX1mcm9udCgpe3JldHVybiB0aGlzLnAubH1iYWNrKCl7cmV0dXJuIHRoaXMuXy5sfWdldEVsZW1lbnRCeVBvcyhlKXtpZihlPDB8fGU+dGhpcy5pLTEpdGhyb3cgbmV3IFJhbmdlRXJyb3I7bGV0IHI9dGhpcy5wO2Zvcig7ZS0tOylyPXIuQjtyZXR1cm4gci5sfWVyYXNlRWxlbWVudEJ5UG9zKGUpe2lmKGU8MHx8ZT50aGlzLmktMSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjtsZXQgcj10aGlzLnA7Zm9yKDtlLS07KXI9ci5CO3JldHVybiB0aGlzLlYociksdGhpcy5pfWVyYXNlRWxlbWVudEJ5VmFsdWUoZSl7bGV0IHI9dGhpcy5wO2Zvcig7ciE9PXRoaXMuaDspci5sPT09ZSYmdGhpcy5WKHIpLHI9ci5CO3JldHVybiB0aGlzLml9ZXJhc2VFbGVtZW50QnlJdGVyYXRvcihlKXtsZXQgcj1lLm87cmV0dXJuIHI9PT10aGlzLmgmJigwLCBfci50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksZT1lLm5leHQoKSx0aGlzLlYociksZX1wdXNoQmFjayhlKXtyZXR1cm4gdGhpcy5HKGUsdGhpcy5fKSx0aGlzLml9cG9wQmFjaygpe2lmKHRoaXMuaT09PTApcmV0dXJuO2xldCBlPXRoaXMuXy5sO3JldHVybiB0aGlzLlYodGhpcy5fKSxlfXB1c2hGcm9udChlKXtyZXR1cm4gdGhpcy5HKGUsdGhpcy5oKSx0aGlzLml9cG9wRnJvbnQoKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT10aGlzLnAubDtyZXR1cm4gdGhpcy5WKHRoaXMucCksZX1zZXRFbGVtZW50QnlQb3MoZSxyKXtpZihlPDB8fGU+dGhpcy5pLTEpdGhyb3cgbmV3IFJhbmdlRXJyb3I7bGV0IGk9dGhpcy5wO2Zvcig7ZS0tOylpPWkuQjtpLmw9cjt9aW5zZXJ0KGUscixpPTEpe2lmKGU8MHx8ZT50aGlzLmkpdGhyb3cgbmV3IFJhbmdlRXJyb3I7aWYoaTw9MClyZXR1cm4gdGhpcy5pO2lmKGU9PT0wKWZvcig7aS0tOyl0aGlzLnB1c2hGcm9udChyKTtlbHNlIGlmKGU9PT10aGlzLmkpZm9yKDtpLS07KXRoaXMucHVzaEJhY2socik7ZWxzZSB7bGV0IG49dGhpcy5wO2ZvcihsZXQgcz0xO3M8ZTsrK3Mpbj1uLkI7bGV0IG89bi5CO2Zvcih0aGlzLmkrPWk7aS0tOyluLkI9e2w6cixMOm59LG4uQi5MPW4sbj1uLkI7bi5CPW8sby5MPW47fXJldHVybiB0aGlzLml9ZmluZChlKXtsZXQgcj10aGlzLnA7Zm9yKDtyIT09dGhpcy5oOyl7aWYoci5sPT09ZSlyZXR1cm4gbmV3IG1yKHIsdGhpcy5oLHRoaXMpO3I9ci5CO31yZXR1cm4gdGhpcy5lbmQoKX1yZXZlcnNlKCl7aWYodGhpcy5pPD0xKXJldHVybjtsZXQgZT10aGlzLnAscj10aGlzLl8saT0wO2Zvcig7aTw8MTx0aGlzLmk7KXtsZXQgbj1lLmw7ZS5sPXIubCxyLmw9bixlPWUuQixyPXIuTCxpKz0xO319dW5pcXVlKCl7aWYodGhpcy5pPD0xKXJldHVybiB0aGlzLmk7bGV0IGU9dGhpcy5wO2Zvcig7ZSE9PXRoaXMuaDspe2xldCByPWU7Zm9yKDtyLkIhPT10aGlzLmgmJnIubD09PXIuQi5sOylyPXIuQix0aGlzLmktPTE7ZS5CPXIuQixlLkIuTD1lLGU9ZS5CO31yZXR1cm4gdGhpcy5pfXNvcnQoZSl7aWYodGhpcy5pPD0xKXJldHVybjtsZXQgcj1bXTt0aGlzLmZvckVhY2goZnVuY3Rpb24obil7ci5wdXNoKG4pO30pLHIuc29ydChlKTtsZXQgaT10aGlzLnA7ci5mb3JFYWNoKGZ1bmN0aW9uKG4pe2kubD1uLGk9aS5CO30pO31tZXJnZShlKXtsZXQgcj10aGlzO2lmKHRoaXMuaT09PTApZS5mb3JFYWNoKGZ1bmN0aW9uKGkpe3IucHVzaEJhY2soaSk7fSk7ZWxzZSB7bGV0IGk9dGhpcy5wO2UuZm9yRWFjaChmdW5jdGlvbihuKXtmb3IoO2khPT1yLmgmJmkubDw9bjspaT1pLkI7ci5HKG4saS5MKTt9KTt9cmV0dXJuIHRoaXMuaX1mb3JFYWNoKGUpe2xldCByPXRoaXMucCxpPTA7Zm9yKDtyIT09dGhpcy5oOyllKHIubCxpKyssdGhpcykscj1yLkI7fVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIGZ1bmN0aW9uKigpe2lmKHRoaXMuaT09PTApcmV0dXJuO2xldCBlPXRoaXMucDtmb3IoO2UhPT10aGlzLmg7KXlpZWxkIGUubCxlPWUuQjt9LmJpbmQodGhpcykoKX19LEwxPXlhO1duLmRlZmF1bHQ9TDE7fSk7dmFyIG5wPU0oJG49Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoJG4sXCJ0XCIse3ZhbHVlOiEwfSk7JG4uZGVmYXVsdD12b2lkIDA7dmFyIFUxPXExKHFuKCkpLE4xPXBhKCk7ZnVuY3Rpb24gcTEodCl7cmV0dXJuIHQmJnQudD90OntkZWZhdWx0OnR9fXZhciB2cj1jbGFzcyB0IGV4dGVuZHMgTjEuUmFuZG9tSXRlcmF0b3J7Y29uc3RydWN0b3IoZSxyLGkpe3N1cGVyKGUsaSksdGhpcy5jb250YWluZXI9cjt9Y29weSgpe3JldHVybiBuZXcgdCh0aGlzLm8sdGhpcy5jb250YWluZXIsdGhpcy5pdGVyYXRvclR5cGUpfX0sYmE9Y2xhc3MgZXh0ZW5kcyBVMS5kZWZhdWx0e2NvbnN0cnVjdG9yKGU9W10scj00MDk2KXtzdXBlcigpLHRoaXMuaj0wLHRoaXMuRD0wLHRoaXMuUj0wLHRoaXMuTj0wLHRoaXMuUD0wLHRoaXMuQT1bXTtsZXQgaT0oKCk9PntpZih0eXBlb2YgZS5sZW5ndGg9PVwibnVtYmVyXCIpcmV0dXJuIGUubGVuZ3RoO2lmKHR5cGVvZiBlLnNpemU9PVwibnVtYmVyXCIpcmV0dXJuIGUuc2l6ZTtpZih0eXBlb2YgZS5zaXplPT1cImZ1bmN0aW9uXCIpcmV0dXJuIGUuc2l6ZSgpO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgZ2V0IHRoZSBsZW5ndGggb3Igc2l6ZSBvZiB0aGUgY29udGFpbmVyXCIpfSkoKTt0aGlzLkY9cix0aGlzLlA9TWF0aC5tYXgoTWF0aC5jZWlsKGkvdGhpcy5GKSwxKTtmb3IobGV0IHM9MDtzPHRoaXMuUDsrK3MpdGhpcy5BLnB1c2gobmV3IEFycmF5KHRoaXMuRikpO2xldCBuPU1hdGguY2VpbChpL3RoaXMuRik7dGhpcy5qPXRoaXMuUj0odGhpcy5QPj4xKS0obj4+MSksdGhpcy5EPXRoaXMuTj10aGlzLkYtaSV0aGlzLkY+PjE7bGV0IG89dGhpcztlLmZvckVhY2goZnVuY3Rpb24ocyl7by5wdXNoQmFjayhzKTt9KTt9VCgpe2xldCBlPVtdLHI9TWF0aC5tYXgodGhpcy5QPj4xLDEpO2ZvcihsZXQgaT0wO2k8cjsrK2kpZVtpXT1uZXcgQXJyYXkodGhpcy5GKTtmb3IobGV0IGk9dGhpcy5qO2k8dGhpcy5QOysraSllW2UubGVuZ3RoXT10aGlzLkFbaV07Zm9yKGxldCBpPTA7aTx0aGlzLlI7KytpKWVbZS5sZW5ndGhdPXRoaXMuQVtpXTtlW2UubGVuZ3RoXT1bLi4udGhpcy5BW3RoaXMuUl1dLHRoaXMuaj1yLHRoaXMuUj1lLmxlbmd0aC0xO2ZvcihsZXQgaT0wO2k8cjsrK2kpZVtlLmxlbmd0aF09bmV3IEFycmF5KHRoaXMuRik7dGhpcy5BPWUsdGhpcy5QPWUubGVuZ3RoO31PKGUpe2xldCByPXRoaXMuRCtlKzEsaT1yJXRoaXMuRixuPWktMSxvPXRoaXMuaisoci1pKS90aGlzLkY7cmV0dXJuIGk9PT0wJiYoby09MSksbyU9dGhpcy5QLG48MCYmKG4rPXRoaXMuRikse2N1ck5vZGVCdWNrZXRJbmRleDpvLGN1ck5vZGVQb2ludGVySW5kZXg6bn19Y2xlYXIoKXt0aGlzLkE9W25ldyBBcnJheSh0aGlzLkYpXSx0aGlzLlA9MSx0aGlzLmo9dGhpcy5SPXRoaXMuaT0wLHRoaXMuRD10aGlzLk49dGhpcy5GPj4xO31iZWdpbigpe3JldHVybiBuZXcgdnIoMCx0aGlzKX1lbmQoKXtyZXR1cm4gbmV3IHZyKHRoaXMuaSx0aGlzKX1yQmVnaW4oKXtyZXR1cm4gbmV3IHZyKHRoaXMuaS0xLHRoaXMsMSl9ckVuZCgpe3JldHVybiBuZXcgdnIoLTEsdGhpcywxKX1mcm9udCgpe2lmKHRoaXMuaSE9PTApcmV0dXJuIHRoaXMuQVt0aGlzLmpdW3RoaXMuRF19YmFjaygpe2lmKHRoaXMuaSE9PTApcmV0dXJuIHRoaXMuQVt0aGlzLlJdW3RoaXMuTl19cHVzaEJhY2soZSl7cmV0dXJuIHRoaXMuaSYmKHRoaXMuTjx0aGlzLkYtMT90aGlzLk4rPTE6dGhpcy5SPHRoaXMuUC0xPyh0aGlzLlIrPTEsdGhpcy5OPTApOih0aGlzLlI9MCx0aGlzLk49MCksdGhpcy5SPT09dGhpcy5qJiZ0aGlzLk49PT10aGlzLkQmJnRoaXMuVCgpKSx0aGlzLmkrPTEsdGhpcy5BW3RoaXMuUl1bdGhpcy5OXT1lLHRoaXMuaX1wb3BCYWNrKCl7aWYodGhpcy5pPT09MClyZXR1cm47bGV0IGU9dGhpcy5BW3RoaXMuUl1bdGhpcy5OXTtyZXR1cm4gdGhpcy5pIT09MSYmKHRoaXMuTj4wP3RoaXMuTi09MTp0aGlzLlI+MD8odGhpcy5SLT0xLHRoaXMuTj10aGlzLkYtMSk6KHRoaXMuUj10aGlzLlAtMSx0aGlzLk49dGhpcy5GLTEpKSx0aGlzLmktPTEsZX1wdXNoRnJvbnQoZSl7cmV0dXJuIHRoaXMuaSYmKHRoaXMuRD4wP3RoaXMuRC09MTp0aGlzLmo+MD8odGhpcy5qLT0xLHRoaXMuRD10aGlzLkYtMSk6KHRoaXMuaj10aGlzLlAtMSx0aGlzLkQ9dGhpcy5GLTEpLHRoaXMuaj09PXRoaXMuUiYmdGhpcy5EPT09dGhpcy5OJiZ0aGlzLlQoKSksdGhpcy5pKz0xLHRoaXMuQVt0aGlzLmpdW3RoaXMuRF09ZSx0aGlzLml9cG9wRnJvbnQoKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT10aGlzLkFbdGhpcy5qXVt0aGlzLkRdO3JldHVybiB0aGlzLmkhPT0xJiYodGhpcy5EPHRoaXMuRi0xP3RoaXMuRCs9MTp0aGlzLmo8dGhpcy5QLTE/KHRoaXMuais9MSx0aGlzLkQ9MCk6KHRoaXMuaj0wLHRoaXMuRD0wKSksdGhpcy5pLT0xLGV9Z2V0RWxlbWVudEJ5UG9zKGUpe2lmKGU8MHx8ZT50aGlzLmktMSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjtsZXR7Y3VyTm9kZUJ1Y2tldEluZGV4OnIsY3VyTm9kZVBvaW50ZXJJbmRleDppfT10aGlzLk8oZSk7cmV0dXJuIHRoaXMuQVtyXVtpXX1zZXRFbGVtZW50QnlQb3MoZSxyKXtpZihlPDB8fGU+dGhpcy5pLTEpdGhyb3cgbmV3IFJhbmdlRXJyb3I7bGV0e2N1ck5vZGVCdWNrZXRJbmRleDppLGN1ck5vZGVQb2ludGVySW5kZXg6bn09dGhpcy5PKGUpO3RoaXMuQVtpXVtuXT1yO31pbnNlcnQoZSxyLGk9MSl7aWYoZTwwfHxlPnRoaXMuaSl0aHJvdyBuZXcgUmFuZ2VFcnJvcjtpZihlPT09MClmb3IoO2ktLTspdGhpcy5wdXNoRnJvbnQocik7ZWxzZSBpZihlPT09dGhpcy5pKWZvcig7aS0tOyl0aGlzLnB1c2hCYWNrKHIpO2Vsc2Uge2xldCBuPVtdO2ZvcihsZXQgbz1lO288dGhpcy5pOysrbyluLnB1c2godGhpcy5nZXRFbGVtZW50QnlQb3MobykpO3RoaXMuY3V0KGUtMSk7Zm9yKGxldCBvPTA7bzxpOysrbyl0aGlzLnB1c2hCYWNrKHIpO2ZvcihsZXQgbz0wO288bi5sZW5ndGg7KytvKXRoaXMucHVzaEJhY2sobltvXSk7fXJldHVybiB0aGlzLml9Y3V0KGUpe2lmKGU8MClyZXR1cm4gdGhpcy5jbGVhcigpLDA7bGV0e2N1ck5vZGVCdWNrZXRJbmRleDpyLGN1ck5vZGVQb2ludGVySW5kZXg6aX09dGhpcy5PKGUpO3JldHVybiB0aGlzLlI9cix0aGlzLk49aSx0aGlzLmk9ZSsxLHRoaXMuaX1lcmFzZUVsZW1lbnRCeVBvcyhlKXtpZihlPDB8fGU+dGhpcy5pLTEpdGhyb3cgbmV3IFJhbmdlRXJyb3I7aWYoZT09PTApdGhpcy5wb3BGcm9udCgpO2Vsc2UgaWYoZT09PXRoaXMuaS0xKXRoaXMucG9wQmFjaygpO2Vsc2Uge2xldCByPVtdO2ZvcihsZXQgbj1lKzE7bjx0aGlzLmk7KytuKXIucHVzaCh0aGlzLmdldEVsZW1lbnRCeVBvcyhuKSk7dGhpcy5jdXQoZSksdGhpcy5wb3BCYWNrKCk7bGV0IGk9dGhpcztyLmZvckVhY2goZnVuY3Rpb24obil7aS5wdXNoQmFjayhuKTt9KTt9cmV0dXJuIHRoaXMuaX1lcmFzZUVsZW1lbnRCeVZhbHVlKGUpe2lmKHRoaXMuaT09PTApcmV0dXJuIDA7bGV0IHI9W107Zm9yKGxldCBuPTA7bjx0aGlzLmk7KytuKXtsZXQgbz10aGlzLmdldEVsZW1lbnRCeVBvcyhuKTtvIT09ZSYmci5wdXNoKG8pO31sZXQgaT1yLmxlbmd0aDtmb3IobGV0IG49MDtuPGk7KytuKXRoaXMuc2V0RWxlbWVudEJ5UG9zKG4scltuXSk7cmV0dXJuIHRoaXMuY3V0KGktMSl9ZXJhc2VFbGVtZW50QnlJdGVyYXRvcihlKXtsZXQgcj1lLm87cmV0dXJuIHRoaXMuZXJhc2VFbGVtZW50QnlQb3MociksZT1lLm5leHQoKSxlfWZpbmQoZSl7Zm9yKGxldCByPTA7cjx0aGlzLmk7KytyKWlmKHRoaXMuZ2V0RWxlbWVudEJ5UG9zKHIpPT09ZSlyZXR1cm4gbmV3IHZyKHIsdGhpcyk7cmV0dXJuIHRoaXMuZW5kKCl9cmV2ZXJzZSgpe2xldCBlPTAscj10aGlzLmktMTtmb3IoO2U8cjspe2xldCBpPXRoaXMuZ2V0RWxlbWVudEJ5UG9zKGUpO3RoaXMuc2V0RWxlbWVudEJ5UG9zKGUsdGhpcy5nZXRFbGVtZW50QnlQb3MocikpLHRoaXMuc2V0RWxlbWVudEJ5UG9zKHIsaSksZSs9MSxyLT0xO319dW5pcXVlKCl7aWYodGhpcy5pPD0xKXJldHVybiB0aGlzLmk7bGV0IGU9MSxyPXRoaXMuZ2V0RWxlbWVudEJ5UG9zKDApO2ZvcihsZXQgaT0xO2k8dGhpcy5pOysraSl7bGV0IG49dGhpcy5nZXRFbGVtZW50QnlQb3MoaSk7biE9PXImJihyPW4sdGhpcy5zZXRFbGVtZW50QnlQb3MoZSsrLG4pKTt9Zm9yKDt0aGlzLmk+ZTspdGhpcy5wb3BCYWNrKCk7cmV0dXJuIHRoaXMuaX1zb3J0KGUpe2xldCByPVtdO2ZvcihsZXQgaT0wO2k8dGhpcy5pOysraSlyLnB1c2godGhpcy5nZXRFbGVtZW50QnlQb3MoaSkpO3Iuc29ydChlKTtmb3IobGV0IGk9MDtpPHRoaXMuaTsrK2kpdGhpcy5zZXRFbGVtZW50QnlQb3MoaSxyW2ldKTt9c2hyaW5rVG9GaXQoKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT1bXTt0aGlzLmZvckVhY2goZnVuY3Rpb24ocil7ZS5wdXNoKHIpO30pLHRoaXMuUD1NYXRoLm1heChNYXRoLmNlaWwodGhpcy5pL3RoaXMuRiksMSksdGhpcy5pPXRoaXMuaj10aGlzLlI9dGhpcy5EPXRoaXMuTj0wLHRoaXMuQT1bXTtmb3IobGV0IHI9MDtyPHRoaXMuUDsrK3IpdGhpcy5BLnB1c2gobmV3IEFycmF5KHRoaXMuRikpO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7KytyKXRoaXMucHVzaEJhY2soZVtyXSk7fWZvckVhY2goZSl7Zm9yKGxldCByPTA7cjx0aGlzLmk7KytyKWUodGhpcy5nZXRFbGVtZW50QnlQb3Mocikscix0aGlzKTt9W1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gZnVuY3Rpb24qKCl7Zm9yKGxldCBlPTA7ZTx0aGlzLmk7KytlKXlpZWxkIHRoaXMuZ2V0RWxlbWVudEJ5UG9zKGUpO30uYmluZCh0aGlzKSgpfX0sRDE9YmE7JG4uZGVmYXVsdD1EMTt9KTt2YXIgc3A9TShacj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShacixcInRcIix7dmFsdWU6ITB9KTtaci5UcmVlTm9kZUVuYWJsZUluZGV4PVpyLlRyZWVOb2RlPXZvaWQgMDt2YXIgSG49Y2xhc3N7Y29uc3RydWN0b3IoZSxyKXt0aGlzLmVlPTEsdGhpcy51PXZvaWQgMCx0aGlzLmw9dm9pZCAwLHRoaXMuVT12b2lkIDAsdGhpcy5XPXZvaWQgMCx0aGlzLnR0PXZvaWQgMCx0aGlzLnU9ZSx0aGlzLmw9cjt9TCgpe2xldCBlPXRoaXM7aWYoZS5lZT09PTEmJmUudHQudHQ9PT1lKWU9ZS5XO2Vsc2UgaWYoZS5VKWZvcihlPWUuVTtlLlc7KWU9ZS5XO2Vsc2Uge2xldCByPWUudHQ7Zm9yKDtyLlU9PT1lOyllPXIscj1lLnR0O2U9cjt9cmV0dXJuIGV9Qigpe2xldCBlPXRoaXM7aWYoZS5XKXtmb3IoZT1lLlc7ZS5VOyllPWUuVTtyZXR1cm4gZX1lbHNlIHtsZXQgcj1lLnR0O2Zvcig7ci5XPT09ZTspZT1yLHI9ZS50dDtyZXR1cm4gZS5XIT09cj9yOmV9fXRlKCl7bGV0IGU9dGhpcy50dCxyPXRoaXMuVyxpPXIuVTtyZXR1cm4gZS50dD09PXRoaXM/ZS50dD1yOmUuVT09PXRoaXM/ZS5VPXI6ZS5XPXIsci50dD1lLHIuVT10aGlzLHRoaXMudHQ9cix0aGlzLlc9aSxpJiYoaS50dD10aGlzKSxyfXNlKCl7bGV0IGU9dGhpcy50dCxyPXRoaXMuVSxpPXIuVztyZXR1cm4gZS50dD09PXRoaXM/ZS50dD1yOmUuVT09PXRoaXM/ZS5VPXI6ZS5XPXIsci50dD1lLHIuVz10aGlzLHRoaXMudHQ9cix0aGlzLlU9aSxpJiYoaS50dD10aGlzKSxyfX07WnIuVHJlZU5vZGU9SG47dmFyIHdhPWNsYXNzIGV4dGVuZHMgSG57Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucnQ9MTt9dGUoKXtsZXQgZT1zdXBlci50ZSgpO3JldHVybiB0aGlzLmllKCksZS5pZSgpLGV9c2UoKXtsZXQgZT1zdXBlci5zZSgpO3JldHVybiB0aGlzLmllKCksZS5pZSgpLGV9aWUoKXt0aGlzLnJ0PTEsdGhpcy5VJiYodGhpcy5ydCs9dGhpcy5VLnJ0KSx0aGlzLlcmJih0aGlzLnJ0Kz10aGlzLlcucnQpO319O1pyLlRyZWVOb2RlRW5hYmxlSW5kZXg9d2E7fSk7dmFyIG1hPU0oVm49Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVm4sXCJ0XCIse3ZhbHVlOiEwfSk7Vm4uZGVmYXVsdD12b2lkIDA7dmFyIG9wPXNwKCksajE9YXQoKSxhcD1sdCgpLF9hPWNsYXNzIGV4dGVuZHMgajEuQ29udGFpbmVye2NvbnN0cnVjdG9yKGU9ZnVuY3Rpb24oaSxuKXtyZXR1cm4gaTxuPy0xOmk+bj8xOjB9LHI9ITEpe3N1cGVyKCksdGhpcy5ZPXZvaWQgMCx0aGlzLnY9ZSxyPyh0aGlzLnJlPW9wLlRyZWVOb2RlRW5hYmxlSW5kZXgsdGhpcy5NPWZ1bmN0aW9uKGksbixvKXtsZXQgcz10aGlzLm5lKGksbixvKTtpZihzKXtsZXQgYT1zLnR0O2Zvcig7YSE9PXRoaXMuaDspYS5ydCs9MSxhPWEudHQ7bGV0IHU9dGhpcy5oZShzKTtpZih1KXtsZXR7cGFyZW50Tm9kZTpjLGdyYW5kUGFyZW50OmgsY3VyTm9kZTpkfT11O2MuaWUoKSxoLmllKCksZC5pZSgpO319cmV0dXJuIHRoaXMuaX0sdGhpcy5WPWZ1bmN0aW9uKGkpe2xldCBuPXRoaXMuZmUoaSk7Zm9yKDtuIT09dGhpcy5oOyluLnJ0LT0xLG49bi50dDt9KToodGhpcy5yZT1vcC5UcmVlTm9kZSx0aGlzLk09ZnVuY3Rpb24oaSxuLG8pe2xldCBzPXRoaXMubmUoaSxuLG8pO3JldHVybiBzJiZ0aGlzLmhlKHMpLHRoaXMuaX0sdGhpcy5WPXRoaXMuZmUpLHRoaXMuaD1uZXcgdGhpcy5yZTt9WChlLHIpe2xldCBpPXRoaXMuaDtmb3IoO2U7KXtsZXQgbj10aGlzLnYoZS51LHIpO2lmKG48MCllPWUuVztlbHNlIGlmKG4+MClpPWUsZT1lLlU7ZWxzZSByZXR1cm4gZX1yZXR1cm4gaX1aKGUscil7bGV0IGk9dGhpcy5oO2Zvcig7ZTspdGhpcy52KGUudSxyKTw9MD9lPWUuVzooaT1lLGU9ZS5VKTtyZXR1cm4gaX0kKGUscil7bGV0IGk9dGhpcy5oO2Zvcig7ZTspe2xldCBuPXRoaXMudihlLnUscik7aWYobjwwKWk9ZSxlPWUuVztlbHNlIGlmKG4+MCllPWUuVTtlbHNlIHJldHVybiBlfXJldHVybiBpfXJyKGUscil7bGV0IGk9dGhpcy5oO2Zvcig7ZTspdGhpcy52KGUudSxyKTwwPyhpPWUsZT1lLlcpOmU9ZS5VO3JldHVybiBpfXVlKGUpe2Zvcig7Oyl7bGV0IHI9ZS50dDtpZihyPT09dGhpcy5oKXJldHVybjtpZihlLmVlPT09MSl7ZS5lZT0wO3JldHVybn1pZihlPT09ci5VKXtsZXQgaT1yLlc7aWYoaS5lZT09PTEpaS5lZT0wLHIuZWU9MSxyPT09dGhpcy5ZP3RoaXMuWT1yLnRlKCk6ci50ZSgpO2Vsc2UgaWYoaS5XJiZpLlcuZWU9PT0xKXtpLmVlPXIuZWUsci5lZT0wLGkuVy5lZT0wLHI9PT10aGlzLlk/dGhpcy5ZPXIudGUoKTpyLnRlKCk7cmV0dXJufWVsc2UgaS5VJiZpLlUuZWU9PT0xPyhpLmVlPTEsaS5VLmVlPTAsaS5zZSgpKTooaS5lZT0xLGU9cik7fWVsc2Uge2xldCBpPXIuVTtpZihpLmVlPT09MSlpLmVlPTAsci5lZT0xLHI9PT10aGlzLlk/dGhpcy5ZPXIuc2UoKTpyLnNlKCk7ZWxzZSBpZihpLlUmJmkuVS5lZT09PTEpe2kuZWU9ci5lZSxyLmVlPTAsaS5VLmVlPTAscj09PXRoaXMuWT90aGlzLlk9ci5zZSgpOnIuc2UoKTtyZXR1cm59ZWxzZSBpLlcmJmkuVy5lZT09PTE/KGkuZWU9MSxpLlcuZWU9MCxpLnRlKCkpOihpLmVlPTEsZT1yKTt9fX1mZShlKXtpZih0aGlzLmk9PT0xKXJldHVybiB0aGlzLmNsZWFyKCksdGhpcy5oO2xldCByPWU7Zm9yKDtyLlV8fHIuVzspe2lmKHIuVylmb3Iocj1yLlc7ci5VOylyPXIuVTtlbHNlIHI9ci5VO1tlLnUsci51XT1bci51LGUudV0sW2UubCxyLmxdPVtyLmwsZS5sXSxlPXI7fXRoaXMuaC5VPT09cj90aGlzLmguVT1yLnR0OnRoaXMuaC5XPT09ciYmKHRoaXMuaC5XPXIudHQpLHRoaXMudWUocik7bGV0IGk9ci50dDtyZXR1cm4gcj09PWkuVT9pLlU9dm9pZCAwOmkuVz12b2lkIDAsdGhpcy5pLT0xLHRoaXMuWS5lZT0wLGl9b2UoZSxyKXtyZXR1cm4gZT09PXZvaWQgMD8hMTp0aGlzLm9lKGUuVSxyKXx8cihlKT8hMDp0aGlzLm9lKGUuVyxyKX1oZShlKXtmb3IoOzspe2xldCByPWUudHQ7aWYoci5lZT09PTApcmV0dXJuO2xldCBpPXIudHQ7aWYocj09PWkuVSl7bGV0IG49aS5XO2lmKG4mJm4uZWU9PT0xKXtpZihuLmVlPXIuZWU9MCxpPT09dGhpcy5ZKXJldHVybjtpLmVlPTEsZT1pO2NvbnRpbnVlfWVsc2UgaWYoZT09PXIuVyl7aWYoZS5lZT0wLGUuVSYmKGUuVS50dD1yKSxlLlcmJihlLlcudHQ9aSksci5XPWUuVSxpLlU9ZS5XLGUuVT1yLGUuVz1pLGk9PT10aGlzLlkpdGhpcy5ZPWUsdGhpcy5oLnR0PWU7ZWxzZSB7bGV0IG89aS50dDtvLlU9PT1pP28uVT1lOm8uVz1lO31yZXR1cm4gZS50dD1pLnR0LHIudHQ9ZSxpLnR0PWUsaS5lZT0xLHtwYXJlbnROb2RlOnIsZ3JhbmRQYXJlbnQ6aSxjdXJOb2RlOmV9fWVsc2Ugci5lZT0wLGk9PT10aGlzLlk/dGhpcy5ZPWkuc2UoKTppLnNlKCksaS5lZT0xO31lbHNlIHtsZXQgbj1pLlU7aWYobiYmbi5lZT09PTEpe2lmKG4uZWU9ci5lZT0wLGk9PT10aGlzLlkpcmV0dXJuO2kuZWU9MSxlPWk7Y29udGludWV9ZWxzZSBpZihlPT09ci5VKXtpZihlLmVlPTAsZS5VJiYoZS5VLnR0PWkpLGUuVyYmKGUuVy50dD1yKSxpLlc9ZS5VLHIuVT1lLlcsZS5VPWksZS5XPXIsaT09PXRoaXMuWSl0aGlzLlk9ZSx0aGlzLmgudHQ9ZTtlbHNlIHtsZXQgbz1pLnR0O28uVT09PWk/by5VPWU6by5XPWU7fXJldHVybiBlLnR0PWkudHQsci50dD1lLGkudHQ9ZSxpLmVlPTEse3BhcmVudE5vZGU6cixncmFuZFBhcmVudDppLGN1ck5vZGU6ZX19ZWxzZSByLmVlPTAsaT09PXRoaXMuWT90aGlzLlk9aS50ZSgpOmkudGUoKSxpLmVlPTE7fXJldHVybn19bmUoZSxyLGkpe2lmKHRoaXMuWT09PXZvaWQgMCl7dGhpcy5pKz0xLHRoaXMuWT1uZXcgdGhpcy5yZShlLHIpLHRoaXMuWS5lZT0wLHRoaXMuWS50dD10aGlzLmgsdGhpcy5oLnR0PXRoaXMuWSx0aGlzLmguVT10aGlzLlksdGhpcy5oLlc9dGhpcy5ZO3JldHVybn1sZXQgbixvPXRoaXMuaC5VLHM9dGhpcy52KG8udSxlKTtpZihzPT09MCl7by5sPXI7cmV0dXJufWVsc2UgaWYocz4wKW8uVT1uZXcgdGhpcy5yZShlLHIpLG8uVS50dD1vLG49by5VLHRoaXMuaC5VPW47ZWxzZSB7bGV0IGE9dGhpcy5oLlcsdT10aGlzLnYoYS51LGUpO2lmKHU9PT0wKXthLmw9cjtyZXR1cm59ZWxzZSBpZih1PDApYS5XPW5ldyB0aGlzLnJlKGUsciksYS5XLnR0PWEsbj1hLlcsdGhpcy5oLlc9bjtlbHNlIHtpZihpIT09dm9pZCAwKXtsZXQgYz1pLm87aWYoYyE9PXRoaXMuaCl7bGV0IGg9dGhpcy52KGMudSxlKTtpZihoPT09MCl7Yy5sPXI7cmV0dXJufWVsc2UgaWYoaD4wKXtsZXQgZD1jLkwoKSxnPXRoaXMudihkLnUsZSk7aWYoZz09PTApe2QubD1yO3JldHVybn1lbHNlIGc8MCYmKG49bmV3IHRoaXMucmUoZSxyKSxkLlc9PT12b2lkIDA/KGQuVz1uLG4udHQ9ZCk6KGMuVT1uLG4udHQ9YykpO319fWlmKG49PT12b2lkIDApZm9yKG49dGhpcy5ZOzspe2xldCBjPXRoaXMudihuLnUsZSk7aWYoYz4wKXtpZihuLlU9PT12b2lkIDApe24uVT1uZXcgdGhpcy5yZShlLHIpLG4uVS50dD1uLG49bi5VO2JyZWFrfW49bi5VO31lbHNlIGlmKGM8MCl7aWYobi5XPT09dm9pZCAwKXtuLlc9bmV3IHRoaXMucmUoZSxyKSxuLlcudHQ9bixuPW4uVzticmVha31uPW4uVzt9ZWxzZSB7bi5sPXI7cmV0dXJufX19fXJldHVybiB0aGlzLmkrPTEsbn1JKGUscil7Zm9yKDtlOyl7bGV0IGk9dGhpcy52KGUudSxyKTtpZihpPDApZT1lLlc7ZWxzZSBpZihpPjApZT1lLlU7ZWxzZSByZXR1cm4gZX1yZXR1cm4gZXx8dGhpcy5ofWNsZWFyKCl7dGhpcy5pPTAsdGhpcy5ZPXZvaWQgMCx0aGlzLmgudHQ9dm9pZCAwLHRoaXMuaC5VPXRoaXMuaC5XPXZvaWQgMDt9dXBkYXRlS2V5QnlJdGVyYXRvcihlLHIpe2xldCBpPWUubztpZihpPT09dGhpcy5oJiYoMCwgYXAudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMuaT09PTEpcmV0dXJuIGkudT1yLCEwO2lmKGk9PT10aGlzLmguVSlyZXR1cm4gdGhpcy52KGkuQigpLnUscik+MD8oaS51PXIsITApOiExO2lmKGk9PT10aGlzLmguVylyZXR1cm4gdGhpcy52KGkuTCgpLnUscik8MD8oaS51PXIsITApOiExO2xldCBuPWkuTCgpLnU7aWYodGhpcy52KG4scik+PTApcmV0dXJuICExO2xldCBvPWkuQigpLnU7cmV0dXJuIHRoaXMudihvLHIpPD0wPyExOihpLnU9ciwhMCl9ZXJhc2VFbGVtZW50QnlQb3MoZSl7aWYoZTwwfHxlPnRoaXMuaS0xKXRocm93IG5ldyBSYW5nZUVycm9yO2xldCByPTAsaT10aGlzO3JldHVybiB0aGlzLm9lKHRoaXMuWSxmdW5jdGlvbihuKXtyZXR1cm4gZT09PXI/KGkuVihuKSwhMCk6KHIrPTEsITEpfSksdGhpcy5pfWVyYXNlRWxlbWVudEJ5S2V5KGUpe2lmKHRoaXMuaT09PTApcmV0dXJuICExO2xldCByPXRoaXMuSSh0aGlzLlksZSk7cmV0dXJuIHI9PT10aGlzLmg/ITE6KHRoaXMuVihyKSwhMCl9ZXJhc2VFbGVtZW50QnlJdGVyYXRvcihlKXtsZXQgcj1lLm87cj09PXRoaXMuaCYmKDAsIGFwLnRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcikoKTtsZXQgaT1yLlc9PT12b2lkIDA7cmV0dXJuIGUuaXRlcmF0b3JUeXBlPT09MD9pJiZlLm5leHQoKTooIWl8fHIuVT09PXZvaWQgMCkmJmUubmV4dCgpLHRoaXMuVihyKSxlfWZvckVhY2goZSl7bGV0IHI9MDtmb3IobGV0IGkgb2YgdGhpcyllKGkscisrLHRoaXMpO31nZXRFbGVtZW50QnlQb3MoZSl7aWYoZTwwfHxlPnRoaXMuaS0xKXRocm93IG5ldyBSYW5nZUVycm9yO2xldCByLGk9MDtmb3IobGV0IG4gb2YgdGhpcyl7aWYoaT09PWUpe3I9bjticmVha31pKz0xO31yZXR1cm4gcn1nZXRIZWlnaHQoKXtpZih0aGlzLmk9PT0wKXJldHVybiAwO2xldCBlPWZ1bmN0aW9uKHIpe3JldHVybiByP01hdGgubWF4KGUoci5VKSxlKHIuVykpKzE6MH07cmV0dXJuIGUodGhpcy5ZKX19LEYxPV9hO1ZuLmRlZmF1bHQ9RjE7fSk7dmFyIEVhPU0oS249Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoS24sXCJ0XCIse3ZhbHVlOiEwfSk7S24uZGVmYXVsdD12b2lkIDA7dmFyIFcxPWF0KCksem49bHQoKSx2YT1jbGFzcyBleHRlbmRzIFcxLkNvbnRhaW5lckl0ZXJhdG9ye2NvbnN0cnVjdG9yKGUscixpKXtzdXBlcihpKSx0aGlzLm89ZSx0aGlzLmg9cix0aGlzLml0ZXJhdG9yVHlwZT09PTA/KHRoaXMucHJlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubz09PXRoaXMuaC5VJiYoMCwgem4udGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMubz10aGlzLm8uTCgpLHRoaXN9LHRoaXMubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCB6bi50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5CKCksdGhpc30pOih0aGlzLnByZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmguVyYmKDAsIHpuLnRocm93SXRlcmF0b3JBY2Nlc3NFcnJvcikoKSx0aGlzLm89dGhpcy5vLkIoKSx0aGlzfSx0aGlzLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vPT09dGhpcy5oJiYoMCwgem4udGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMubz10aGlzLm8uTCgpLHRoaXN9KTt9Z2V0IGluZGV4KCl7bGV0IGU9dGhpcy5vLHI9dGhpcy5oLnR0O2lmKGU9PT10aGlzLmgpcmV0dXJuIHI/ci5ydC0xOjA7bGV0IGk9MDtmb3IoZS5VJiYoaSs9ZS5VLnJ0KTtlIT09cjspe2xldCBuPWUudHQ7ZT09PW4uVyYmKGkrPTEsbi5VJiYoaSs9bi5VLnJ0KSksZT1uO31yZXR1cm4gaX19LCQxPXZhO0tuLmRlZmF1bHQ9JDE7fSk7dmFyIHVwPU0oR249Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoR24sXCJ0XCIse3ZhbHVlOiEwfSk7R24uZGVmYXVsdD12b2lkIDA7dmFyIEgxPWxwKG1hKCkpLFYxPWxwKEVhKCkpLHoxPWx0KCk7ZnVuY3Rpb24gbHAodCl7cmV0dXJuIHQmJnQudD90OntkZWZhdWx0OnR9fXZhciBLZT1jbGFzcyB0IGV4dGVuZHMgVjEuZGVmYXVsdHtjb25zdHJ1Y3RvcihlLHIsaSxuKXtzdXBlcihlLHIsbiksdGhpcy5jb250YWluZXI9aTt9Z2V0IHBvaW50ZXIoKXtyZXR1cm4gdGhpcy5vPT09dGhpcy5oJiYoMCwgejEudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMuby51fWNvcHkoKXtyZXR1cm4gbmV3IHQodGhpcy5vLHRoaXMuaCx0aGlzLmNvbnRhaW5lcix0aGlzLml0ZXJhdG9yVHlwZSl9fSxTYT1jbGFzcyBleHRlbmRzIEgxLmRlZmF1bHR7Y29uc3RydWN0b3IoZT1bXSxyLGkpe3N1cGVyKHIsaSk7bGV0IG49dGhpcztlLmZvckVhY2goZnVuY3Rpb24obyl7bi5pbnNlcnQobyk7fSk7fSpLKGUpe2UhPT12b2lkIDAmJih5aWVsZCp0aGlzLksoZS5VKSx5aWVsZCBlLnUseWllbGQqdGhpcy5LKGUuVykpO31iZWdpbigpe3JldHVybiBuZXcgS2UodGhpcy5oLlV8fHRoaXMuaCx0aGlzLmgsdGhpcyl9ZW5kKCl7cmV0dXJuIG5ldyBLZSh0aGlzLmgsdGhpcy5oLHRoaXMpfXJCZWdpbigpe3JldHVybiBuZXcgS2UodGhpcy5oLld8fHRoaXMuaCx0aGlzLmgsdGhpcywxKX1yRW5kKCl7cmV0dXJuIG5ldyBLZSh0aGlzLmgsdGhpcy5oLHRoaXMsMSl9ZnJvbnQoKXtyZXR1cm4gdGhpcy5oLlU/dGhpcy5oLlUudTp2b2lkIDB9YmFjaygpe3JldHVybiB0aGlzLmguVz90aGlzLmguVy51OnZvaWQgMH1pbnNlcnQoZSxyKXtyZXR1cm4gdGhpcy5NKGUsdm9pZCAwLHIpfWZpbmQoZSl7bGV0IHI9dGhpcy5JKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEtlKHIsdGhpcy5oLHRoaXMpfWxvd2VyQm91bmQoZSl7bGV0IHI9dGhpcy5YKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEtlKHIsdGhpcy5oLHRoaXMpfXVwcGVyQm91bmQoZSl7bGV0IHI9dGhpcy5aKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEtlKHIsdGhpcy5oLHRoaXMpfXJldmVyc2VMb3dlckJvdW5kKGUpe2xldCByPXRoaXMuJCh0aGlzLlksZSk7cmV0dXJuIG5ldyBLZShyLHRoaXMuaCx0aGlzKX1yZXZlcnNlVXBwZXJCb3VuZChlKXtsZXQgcj10aGlzLnJyKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEtlKHIsdGhpcy5oLHRoaXMpfXVuaW9uKGUpe2xldCByPXRoaXM7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihpKXtyLmluc2VydChpKTt9KSx0aGlzLml9W1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gdGhpcy5LKHRoaXMuWSl9fSxLMT1TYTtHbi5kZWZhdWx0PUsxO30pO3ZhciBjcD1NKFFuPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFFuLFwidFwiLHt2YWx1ZTohMH0pO1FuLmRlZmF1bHQ9dm9pZCAwO3ZhciBHMT1mcChtYSgpKSxRMT1mcChFYSgpKSxZMT1sdCgpO2Z1bmN0aW9uIGZwKHQpe3JldHVybiB0JiZ0LnQ/dDp7ZGVmYXVsdDp0fX12YXIgR2U9Y2xhc3MgdCBleHRlbmRzIFExLmRlZmF1bHR7Y29uc3RydWN0b3IoZSxyLGksbil7c3VwZXIoZSxyLG4pLHRoaXMuY29udGFpbmVyPWk7fWdldCBwb2ludGVyKCl7dGhpcy5vPT09dGhpcy5oJiYoMCwgWTEudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpO2xldCBlPXRoaXM7cmV0dXJuIG5ldyBQcm94eShbXSx7Z2V0KHIsaSl7aWYoaT09PVwiMFwiKXJldHVybiBlLm8udTtpZihpPT09XCIxXCIpcmV0dXJuIGUuby5sfSxzZXQocixpLG4pe2lmKGkhPT1cIjFcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJvcHMgbXVzdCBiZSAxXCIpO3JldHVybiBlLm8ubD1uLCEwfX0pfWNvcHkoKXtyZXR1cm4gbmV3IHQodGhpcy5vLHRoaXMuaCx0aGlzLmNvbnRhaW5lcix0aGlzLml0ZXJhdG9yVHlwZSl9fSxBYT1jbGFzcyBleHRlbmRzIEcxLmRlZmF1bHR7Y29uc3RydWN0b3IoZT1bXSxyLGkpe3N1cGVyKHIsaSk7bGV0IG49dGhpcztlLmZvckVhY2goZnVuY3Rpb24obyl7bi5zZXRFbGVtZW50KG9bMF0sb1sxXSk7fSk7fSpLKGUpe2UhPT12b2lkIDAmJih5aWVsZCp0aGlzLksoZS5VKSx5aWVsZCBbZS51LGUubF0seWllbGQqdGhpcy5LKGUuVykpO31iZWdpbigpe3JldHVybiBuZXcgR2UodGhpcy5oLlV8fHRoaXMuaCx0aGlzLmgsdGhpcyl9ZW5kKCl7cmV0dXJuIG5ldyBHZSh0aGlzLmgsdGhpcy5oLHRoaXMpfXJCZWdpbigpe3JldHVybiBuZXcgR2UodGhpcy5oLld8fHRoaXMuaCx0aGlzLmgsdGhpcywxKX1yRW5kKCl7cmV0dXJuIG5ldyBHZSh0aGlzLmgsdGhpcy5oLHRoaXMsMSl9ZnJvbnQoKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT10aGlzLmguVTtyZXR1cm4gW2UudSxlLmxdfWJhY2soKXtpZih0aGlzLmk9PT0wKXJldHVybjtsZXQgZT10aGlzLmguVztyZXR1cm4gW2UudSxlLmxdfWxvd2VyQm91bmQoZSl7bGV0IHI9dGhpcy5YKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEdlKHIsdGhpcy5oLHRoaXMpfXVwcGVyQm91bmQoZSl7bGV0IHI9dGhpcy5aKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEdlKHIsdGhpcy5oLHRoaXMpfXJldmVyc2VMb3dlckJvdW5kKGUpe2xldCByPXRoaXMuJCh0aGlzLlksZSk7cmV0dXJuIG5ldyBHZShyLHRoaXMuaCx0aGlzKX1yZXZlcnNlVXBwZXJCb3VuZChlKXtsZXQgcj10aGlzLnJyKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEdlKHIsdGhpcy5oLHRoaXMpfXNldEVsZW1lbnQoZSxyLGkpe3JldHVybiB0aGlzLk0oZSxyLGkpfWZpbmQoZSl7bGV0IHI9dGhpcy5JKHRoaXMuWSxlKTtyZXR1cm4gbmV3IEdlKHIsdGhpcy5oLHRoaXMpfWdldEVsZW1lbnRCeUtleShlKXtyZXR1cm4gdGhpcy5JKHRoaXMuWSxlKS5sfXVuaW9uKGUpe2xldCByPXRoaXM7cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihpKXtyLnNldEVsZW1lbnQoaVswXSxpWzFdKTt9KSx0aGlzLml9W1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gdGhpcy5LKHRoaXMuWSl9fSxKMT1BYTtRbi5kZWZhdWx0PUoxO30pO3ZhciBUYT1NKElhPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KElhLFwidFwiLHt2YWx1ZTohMH0pO0lhLmRlZmF1bHQ9WDE7ZnVuY3Rpb24gWDEodCl7bGV0IGU9dHlwZW9mIHQ7cmV0dXJuIGU9PT1cIm9iamVjdFwiJiZ0IT09bnVsbHx8ZT09PVwiZnVuY3Rpb25cIn19KTt2YXIgUGE9TShlaT0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlaSxcInRcIix7dmFsdWU6ITB9KTtlaS5IYXNoQ29udGFpbmVySXRlcmF0b3I9ZWkuSGFzaENvbnRhaW5lcj12b2lkIDA7dmFyIGhwPWF0KCksUmE9WjEoVGEoKSksVGk9bHQoKTtmdW5jdGlvbiBaMSh0KXtyZXR1cm4gdCYmdC50P3Q6e2RlZmF1bHQ6dH19dmFyIENhPWNsYXNzIGV4dGVuZHMgaHAuQ29udGFpbmVySXRlcmF0b3J7Y29uc3RydWN0b3IoZSxyLGkpe3N1cGVyKGkpLHRoaXMubz1lLHRoaXMuaD1yLHRoaXMuaXRlcmF0b3JUeXBlPT09MD8odGhpcy5wcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLkw9PT10aGlzLmgmJigwLCBUaS50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5MLHRoaXN9LHRoaXMubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCBUaS50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5CLHRoaXN9KToodGhpcy5wcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vLkI9PT10aGlzLmgmJigwLCBUaS50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5CLHRoaXN9LHRoaXMubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCBUaS50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vPXRoaXMuby5MLHRoaXN9KTt9fTtlaS5IYXNoQ29udGFpbmVySXRlcmF0b3I9Q2E7dmFyIEJhPWNsYXNzIGV4dGVuZHMgaHAuQ29udGFpbmVye2NvbnN0cnVjdG9yKCl7c3VwZXIoKSx0aGlzLkg9W10sdGhpcy5nPXt9LHRoaXMuSEFTSF9UQUc9U3ltYm9sKFwiQEBIQVNIX1RBR1wiKSxPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcy5nLG51bGwpLHRoaXMuaD17fSx0aGlzLmguTD10aGlzLmguQj10aGlzLnA9dGhpcy5fPXRoaXMuaDt9VihlKXtsZXR7TDpyLEI6aX09ZTtyLkI9aSxpLkw9cixlPT09dGhpcy5wJiYodGhpcy5wPWkpLGU9PT10aGlzLl8mJih0aGlzLl89ciksdGhpcy5pLT0xO31NKGUscixpKXtpPT09dm9pZCAwJiYoaT0oMCwgUmEuZGVmYXVsdCkoZSkpO2xldCBuO2lmKGkpe2xldCBvPWVbdGhpcy5IQVNIX1RBR107aWYobyE9PXZvaWQgMClyZXR1cm4gdGhpcy5IW29dLmw9cix0aGlzLmk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5IQVNIX1RBRyx7dmFsdWU6dGhpcy5ILmxlbmd0aCxjb25maWd1cmFibGU6ITB9KSxuPXt1OmUsbDpyLEw6dGhpcy5fLEI6dGhpcy5ofSx0aGlzLkgucHVzaChuKTt9ZWxzZSB7bGV0IG89dGhpcy5nW2VdO2lmKG8pcmV0dXJuIG8ubD1yLHRoaXMuaTtuPXt1OmUsbDpyLEw6dGhpcy5fLEI6dGhpcy5ofSx0aGlzLmdbZV09bjt9cmV0dXJuIHRoaXMuaT09PTA/KHRoaXMucD1uLHRoaXMuaC5CPW4pOnRoaXMuXy5CPW4sdGhpcy5fPW4sdGhpcy5oLkw9biwrK3RoaXMuaX1JKGUscil7aWYocj09PXZvaWQgMCYmKHI9KDAsIFJhLmRlZmF1bHQpKGUpKSxyKXtsZXQgaT1lW3RoaXMuSEFTSF9UQUddO3JldHVybiBpPT09dm9pZCAwP3RoaXMuaDp0aGlzLkhbaV19ZWxzZSByZXR1cm4gdGhpcy5nW2VdfHx0aGlzLmh9Y2xlYXIoKXtsZXQgZT10aGlzLkhBU0hfVEFHO3RoaXMuSC5mb3JFYWNoKGZ1bmN0aW9uKHIpe2RlbGV0ZSByLnVbZV07fSksdGhpcy5IPVtdLHRoaXMuZz17fSxPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcy5nLG51bGwpLHRoaXMuaT0wLHRoaXMucD10aGlzLl89dGhpcy5oLkw9dGhpcy5oLkI9dGhpcy5oO31lcmFzZUVsZW1lbnRCeUtleShlLHIpe2xldCBpO2lmKHI9PT12b2lkIDAmJihyPSgwLCBSYS5kZWZhdWx0KShlKSkscil7bGV0IG49ZVt0aGlzLkhBU0hfVEFHXTtpZihuPT09dm9pZCAwKXJldHVybiAhMTtkZWxldGUgZVt0aGlzLkhBU0hfVEFHXSxpPXRoaXMuSFtuXSxkZWxldGUgdGhpcy5IW25dO31lbHNlIHtpZihpPXRoaXMuZ1tlXSxpPT09dm9pZCAwKXJldHVybiAhMTtkZWxldGUgdGhpcy5nW2VdO31yZXR1cm4gdGhpcy5WKGkpLCEwfWVyYXNlRWxlbWVudEJ5SXRlcmF0b3IoZSl7bGV0IHI9ZS5vO3JldHVybiByPT09dGhpcy5oJiYoMCwgVGkudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpLHRoaXMuVihyKSxlLm5leHQoKX1lcmFzZUVsZW1lbnRCeVBvcyhlKXtpZihlPDB8fGU+dGhpcy5pLTEpdGhyb3cgbmV3IFJhbmdlRXJyb3I7bGV0IHI9dGhpcy5wO2Zvcig7ZS0tOylyPXIuQjtyZXR1cm4gdGhpcy5WKHIpLHRoaXMuaX19O2VpLkhhc2hDb250YWluZXI9QmE7fSk7dmFyIHBwPU0oWW49Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoWW4sXCJ0XCIse3ZhbHVlOiEwfSk7WW4uZGVmYXVsdD12b2lkIDA7dmFyIGRwPVBhKCksZXY9bHQoKSxFcj1jbGFzcyB0IGV4dGVuZHMgZHAuSGFzaENvbnRhaW5lckl0ZXJhdG9ye2NvbnN0cnVjdG9yKGUscixpLG4pe3N1cGVyKGUscixuKSx0aGlzLmNvbnRhaW5lcj1pO31nZXQgcG9pbnRlcigpe3JldHVybiB0aGlzLm89PT10aGlzLmgmJigwLCBldi50aHJvd0l0ZXJhdG9yQWNjZXNzRXJyb3IpKCksdGhpcy5vLnV9Y29weSgpe3JldHVybiBuZXcgdCh0aGlzLm8sdGhpcy5oLHRoaXMuY29udGFpbmVyLHRoaXMuaXRlcmF0b3JUeXBlKX19LE9hPWNsYXNzIGV4dGVuZHMgZHAuSGFzaENvbnRhaW5lcntjb25zdHJ1Y3RvcihlPVtdKXtzdXBlcigpO2xldCByPXRoaXM7ZS5mb3JFYWNoKGZ1bmN0aW9uKGkpe3IuaW5zZXJ0KGkpO30pO31iZWdpbigpe3JldHVybiBuZXcgRXIodGhpcy5wLHRoaXMuaCx0aGlzKX1lbmQoKXtyZXR1cm4gbmV3IEVyKHRoaXMuaCx0aGlzLmgsdGhpcyl9ckJlZ2luKCl7cmV0dXJuIG5ldyBFcih0aGlzLl8sdGhpcy5oLHRoaXMsMSl9ckVuZCgpe3JldHVybiBuZXcgRXIodGhpcy5oLHRoaXMuaCx0aGlzLDEpfWZyb250KCl7cmV0dXJuIHRoaXMucC51fWJhY2soKXtyZXR1cm4gdGhpcy5fLnV9aW5zZXJ0KGUscil7cmV0dXJuIHRoaXMuTShlLHZvaWQgMCxyKX1nZXRFbGVtZW50QnlQb3MoZSl7aWYoZTwwfHxlPnRoaXMuaS0xKXRocm93IG5ldyBSYW5nZUVycm9yO2xldCByPXRoaXMucDtmb3IoO2UtLTspcj1yLkI7cmV0dXJuIHIudX1maW5kKGUscil7bGV0IGk9dGhpcy5JKGUscik7cmV0dXJuIG5ldyBFcihpLHRoaXMuaCx0aGlzKX1mb3JFYWNoKGUpe2xldCByPTAsaT10aGlzLnA7Zm9yKDtpIT09dGhpcy5oOyllKGkudSxyKyssdGhpcyksaT1pLkI7fVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIGZ1bmN0aW9uKigpe2xldCBlPXRoaXMucDtmb3IoO2UhPT10aGlzLmg7KXlpZWxkIGUudSxlPWUuQjt9LmJpbmQodGhpcykoKX19LHR2PU9hO1luLmRlZmF1bHQ9dHY7fSk7dmFyIHlwPU0oSm49Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSm4sXCJ0XCIse3ZhbHVlOiEwfSk7Sm4uZGVmYXVsdD12b2lkIDA7dmFyIGdwPVBhKCkscnY9bnYoVGEoKSksaXY9bHQoKTtmdW5jdGlvbiBudih0KXtyZXR1cm4gdCYmdC50P3Q6e2RlZmF1bHQ6dH19dmFyIFNyPWNsYXNzIHQgZXh0ZW5kcyBncC5IYXNoQ29udGFpbmVySXRlcmF0b3J7Y29uc3RydWN0b3IoZSxyLGksbil7c3VwZXIoZSxyLG4pLHRoaXMuY29udGFpbmVyPWk7fWdldCBwb2ludGVyKCl7dGhpcy5vPT09dGhpcy5oJiYoMCwgaXYudGhyb3dJdGVyYXRvckFjY2Vzc0Vycm9yKSgpO2xldCBlPXRoaXM7cmV0dXJuIG5ldyBQcm94eShbXSx7Z2V0KHIsaSl7aWYoaT09PVwiMFwiKXJldHVybiBlLm8udTtpZihpPT09XCIxXCIpcmV0dXJuIGUuby5sfSxzZXQocixpLG4pe2lmKGkhPT1cIjFcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwicHJvcHMgbXVzdCBiZSAxXCIpO3JldHVybiBlLm8ubD1uLCEwfX0pfWNvcHkoKXtyZXR1cm4gbmV3IHQodGhpcy5vLHRoaXMuaCx0aGlzLmNvbnRhaW5lcix0aGlzLml0ZXJhdG9yVHlwZSl9fSxrYT1jbGFzcyBleHRlbmRzIGdwLkhhc2hDb250YWluZXJ7Y29uc3RydWN0b3IoZT1bXSl7c3VwZXIoKTtsZXQgcj10aGlzO2UuZm9yRWFjaChmdW5jdGlvbihpKXtyLnNldEVsZW1lbnQoaVswXSxpWzFdKTt9KTt9YmVnaW4oKXtyZXR1cm4gbmV3IFNyKHRoaXMucCx0aGlzLmgsdGhpcyl9ZW5kKCl7cmV0dXJuIG5ldyBTcih0aGlzLmgsdGhpcy5oLHRoaXMpfXJCZWdpbigpe3JldHVybiBuZXcgU3IodGhpcy5fLHRoaXMuaCx0aGlzLDEpfXJFbmQoKXtyZXR1cm4gbmV3IFNyKHRoaXMuaCx0aGlzLmgsdGhpcywxKX1mcm9udCgpe2lmKHRoaXMuaSE9PTApcmV0dXJuIFt0aGlzLnAudSx0aGlzLnAubF19YmFjaygpe2lmKHRoaXMuaSE9PTApcmV0dXJuIFt0aGlzLl8udSx0aGlzLl8ubF19c2V0RWxlbWVudChlLHIsaSl7cmV0dXJuIHRoaXMuTShlLHIsaSl9Z2V0RWxlbWVudEJ5S2V5KGUscil7aWYocj09PXZvaWQgMCYmKHI9KDAsIHJ2LmRlZmF1bHQpKGUpKSxyKXtsZXQgbj1lW3RoaXMuSEFTSF9UQUddO3JldHVybiBuIT09dm9pZCAwP3RoaXMuSFtuXS5sOnZvaWQgMH1sZXQgaT10aGlzLmdbZV07cmV0dXJuIGk/aS5sOnZvaWQgMH1nZXRFbGVtZW50QnlQb3MoZSl7aWYoZTwwfHxlPnRoaXMuaS0xKXRocm93IG5ldyBSYW5nZUVycm9yO2xldCByPXRoaXMucDtmb3IoO2UtLTspcj1yLkI7cmV0dXJuIFtyLnUsci5sXX1maW5kKGUscil7bGV0IGk9dGhpcy5JKGUscik7cmV0dXJuIG5ldyBTcihpLHRoaXMuaCx0aGlzKX1mb3JFYWNoKGUpe2xldCByPTAsaT10aGlzLnA7Zm9yKDtpIT09dGhpcy5oOyllKFtpLnUsaS5sXSxyKyssdGhpcyksaT1pLkI7fVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIGZ1bmN0aW9uKigpe2xldCBlPXRoaXMucDtmb3IoO2UhPT10aGlzLmg7KXlpZWxkIFtlLnUsZS5sXSxlPWUuQjt9LmJpbmQodGhpcykoKX19LHN2PWthO0puLmRlZmF1bHQ9c3Y7fSk7dmFyIGJwPU0oamU9Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoamUsXCJ0XCIse3ZhbHVlOiEwfSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGplLFwiRGVxdWVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY3YuZGVmYXVsdH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoamUsXCJIYXNoTWFwXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGd2LmRlZmF1bHR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGplLFwiSGFzaFNldFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBwdi5kZWZhdWx0fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShqZSxcIkxpbmtMaXN0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ2LmRlZmF1bHR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGplLFwiT3JkZXJlZE1hcFwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBkdi5kZWZhdWx0fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShqZSxcIk9yZGVyZWRTZXRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaHYuZGVmYXVsdH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoamUsXCJQcmlvcml0eVF1ZXVlXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx2LmRlZmF1bHR9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGplLFwiUXVldWVcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYXYuZGVmYXVsdH19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoamUsXCJTdGFja1wiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvdi5kZWZhdWx0fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShqZSxcIlZlY3RvclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB1di5kZWZhdWx0fX0pO3ZhciBvdj11dChaZCgpKSxhdj11dChlcCgpKSxsdj11dCh0cCgpKSx1dj11dChycCgpKSxmdj11dChpcCgpKSxjdj11dChucCgpKSxodj11dCh1cCgpKSxkdj11dChjcCgpKSxwdj11dChwcCgpKSxndj11dCh5cCgpKTtmdW5jdGlvbiB1dCh0KXtyZXR1cm4gdCYmdC50P3Q6e2RlZmF1bHQ6dH19fSk7dmFyIF9wPU0oKG1OLHdwKT0+e3YoKTttKCk7XygpO3ZhciB5dj1icCgpLk9yZGVyZWRTZXQsZnQ9b3QoKShcIm51bWJlci1hbGxvY2F0b3I6dHJhY2VcIiksYnY9b3QoKShcIm51bWJlci1hbGxvY2F0b3I6ZXJyb3JcIik7ZnVuY3Rpb24gVGUodCxlKXt0aGlzLmxvdz10LHRoaXMuaGlnaD1lO31UZS5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmxvdz09PXQubG93JiZ0aGlzLmhpZ2g9PT10LmhpZ2h9O1RlLnByb3RvdHlwZS5jb21wYXJlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmxvdzx0LmxvdyYmdGhpcy5oaWdoPHQubG93Py0xOnQubG93PHRoaXMubG93JiZ0LmhpZ2g8dGhpcy5sb3c/MTowfTtmdW5jdGlvbiBjdCh0LGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGN0KSlyZXR1cm4gbmV3IGN0KHQsZSk7dGhpcy5taW49dCx0aGlzLm1heD1lLHRoaXMuc3M9bmV3IHl2KFtdLChyLGkpPT5yLmNvbXBhcmUoaSkpLGZ0KFwiQ3JlYXRlXCIpLHRoaXMuY2xlYXIoKTt9Y3QucHJvdG90eXBlLmZpcnN0VmFjYW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3Muc2l6ZSgpPT09MD9udWxsOnRoaXMuc3MuZnJvbnQoKS5sb3d9O2N0LnByb3RvdHlwZS5hbGxvYz1mdW5jdGlvbigpe2lmKHRoaXMuc3Muc2l6ZSgpPT09MClyZXR1cm4gZnQoXCJhbGxvYygpOmVtcHR5XCIpLG51bGw7bGV0IHQ9dGhpcy5zcy5iZWdpbigpLGU9dC5wb2ludGVyLmxvdyxyPXQucG9pbnRlci5oaWdoLGk9ZTtyZXR1cm4gaSsxPD1yP3RoaXMuc3MudXBkYXRlS2V5QnlJdGVyYXRvcih0LG5ldyBUZShlKzEscikpOnRoaXMuc3MuZXJhc2VFbGVtZW50QnlQb3MoMCksZnQoXCJhbGxvYygpOlwiK2kpLGl9O2N0LnByb3RvdHlwZS51c2U9ZnVuY3Rpb24odCl7bGV0IGU9bmV3IFRlKHQsdCkscj10aGlzLnNzLmxvd2VyQm91bmQoZSk7aWYoIXIuZXF1YWxzKHRoaXMuc3MuZW5kKCkpKXtsZXQgaT1yLnBvaW50ZXIubG93LG49ci5wb2ludGVyLmhpZ2g7cmV0dXJuIHIucG9pbnRlci5lcXVhbHMoZSk/KHRoaXMuc3MuZXJhc2VFbGVtZW50QnlJdGVyYXRvcihyKSxmdChcInVzZSgpOlwiK3QpLCEwKTppPnQ/ITE6aT09PXQ/KHRoaXMuc3MudXBkYXRlS2V5QnlJdGVyYXRvcihyLG5ldyBUZShpKzEsbikpLGZ0KFwidXNlKCk6XCIrdCksITApOm49PT10Pyh0aGlzLnNzLnVwZGF0ZUtleUJ5SXRlcmF0b3IocixuZXcgVGUoaSxuLTEpKSxmdChcInVzZSgpOlwiK3QpLCEwKToodGhpcy5zcy51cGRhdGVLZXlCeUl0ZXJhdG9yKHIsbmV3IFRlKHQrMSxuKSksdGhpcy5zcy5pbnNlcnQobmV3IFRlKGksdC0xKSksZnQoXCJ1c2UoKTpcIit0KSwhMCl9cmV0dXJuIGZ0KFwidXNlKCk6ZmFpbGVkXCIpLCExfTtjdC5wcm90b3R5cGUuZnJlZT1mdW5jdGlvbih0KXtpZih0PHRoaXMubWlufHx0PnRoaXMubWF4KXtidihcImZyZWUoKTpcIit0K1wiIGlzIG91dCBvZiByYW5nZVwiKTtyZXR1cm59bGV0IGU9bmV3IFRlKHQsdCkscj10aGlzLnNzLnVwcGVyQm91bmQoZSk7aWYoci5lcXVhbHModGhpcy5zcy5lbmQoKSkpe2lmKHIuZXF1YWxzKHRoaXMuc3MuYmVnaW4oKSkpe3RoaXMuc3MuaW5zZXJ0KGUpO3JldHVybn1yLnByZSgpO2xldCBpPXIucG9pbnRlci5oaWdoO3IucG9pbnRlci5oaWdoKzE9PT10P3RoaXMuc3MudXBkYXRlS2V5QnlJdGVyYXRvcihyLG5ldyBUZShpLHQpKTp0aGlzLnNzLmluc2VydChlKTt9ZWxzZSBpZihyLmVxdWFscyh0aGlzLnNzLmJlZ2luKCkpKWlmKHQrMT09PXIucG9pbnRlci5sb3cpe2xldCBpPXIucG9pbnRlci5oaWdoO3RoaXMuc3MudXBkYXRlS2V5QnlJdGVyYXRvcihyLG5ldyBUZSh0LGkpKTt9ZWxzZSB0aGlzLnNzLmluc2VydChlKTtlbHNlIHtsZXQgaT1yLnBvaW50ZXIubG93LG49ci5wb2ludGVyLmhpZ2g7ci5wcmUoKTtsZXQgbz1yLnBvaW50ZXIubG93O3IucG9pbnRlci5oaWdoKzE9PT10P3QrMT09PWk/KHRoaXMuc3MuZXJhc2VFbGVtZW50QnlJdGVyYXRvcihyKSx0aGlzLnNzLnVwZGF0ZUtleUJ5SXRlcmF0b3IocixuZXcgVGUobyxuKSkpOnRoaXMuc3MudXBkYXRlS2V5QnlJdGVyYXRvcihyLG5ldyBUZShvLHQpKTp0KzE9PT1pPyh0aGlzLnNzLmVyYXNlRWxlbWVudEJ5SXRlcmF0b3Ioci5uZXh0KCkpLHRoaXMuc3MuaW5zZXJ0KG5ldyBUZSh0LG4pKSk6dGhpcy5zcy5pbnNlcnQoZSk7fWZ0KFwiZnJlZSgpOlwiK3QpO307Y3QucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7ZnQoXCJjbGVhcigpXCIpLHRoaXMuc3MuY2xlYXIoKSx0aGlzLnNzLmluc2VydChuZXcgVGUodGhpcy5taW4sdGhpcy5tYXgpKTt9O2N0LnByb3RvdHlwZS5pbnRlcnZhbENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3Muc2l6ZSgpfTtjdC5wcm90b3R5cGUuZHVtcD1mdW5jdGlvbigpe2NvbnNvbGUubG9nKFwibGVuZ3RoOlwiK3RoaXMuc3Muc2l6ZSgpKTtmb3IobGV0IHQgb2YgdGhpcy5zcyljb25zb2xlLmxvZyh0KTt9O3dwLmV4cG9ydHM9Y3Q7fSk7dmFyIHhhPU0oKFBOLG1wKT0+e3YoKTttKCk7XygpO3ZhciB3dj1fcCgpO21wLmV4cG9ydHMuTnVtYmVyQWxsb2NhdG9yPXd2O30pO3ZhciB2cD1NKExhPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KExhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBfdj1YZCgpLG12PXhhKCksTWE9Y2xhc3N7Y29uc3RydWN0b3IoZSl7ZT4wJiYodGhpcy5hbGlhc1RvVG9waWM9bmV3IF92LkxSVUNhY2hlKHttYXg6ZX0pLHRoaXMudG9waWNUb0FsaWFzPXt9LHRoaXMubnVtYmVyQWxsb2NhdG9yPW5ldyBtdi5OdW1iZXJBbGxvY2F0b3IoMSxlKSx0aGlzLm1heD1lLHRoaXMubGVuZ3RoPTApO31wdXQoZSxyKXtpZihyPT09MHx8cj50aGlzLm1heClyZXR1cm4gITE7bGV0IGk9dGhpcy5hbGlhc1RvVG9waWMuZ2V0KHIpO3JldHVybiBpJiZkZWxldGUgdGhpcy50b3BpY1RvQWxpYXNbaV0sdGhpcy5hbGlhc1RvVG9waWMuc2V0KHIsZSksdGhpcy50b3BpY1RvQWxpYXNbZV09cix0aGlzLm51bWJlckFsbG9jYXRvci51c2UociksdGhpcy5sZW5ndGg9dGhpcy5hbGlhc1RvVG9waWMuc2l6ZSwhMH1nZXRUb3BpY0J5QWxpYXMoZSl7cmV0dXJuIHRoaXMuYWxpYXNUb1RvcGljLmdldChlKX1nZXRBbGlhc0J5VG9waWMoZSl7bGV0IHI9dGhpcy50b3BpY1RvQWxpYXNbZV07cmV0dXJuIHR5cGVvZiByPFwidVwiJiZ0aGlzLmFsaWFzVG9Ub3BpYy5nZXQocikscn1jbGVhcigpe3RoaXMuYWxpYXNUb1RvcGljLmNsZWFyKCksdGhpcy50b3BpY1RvQWxpYXM9e30sdGhpcy5udW1iZXJBbGxvY2F0b3IuY2xlYXIoKSx0aGlzLmxlbmd0aD0wO31nZXRMcnVBbGlhcygpe2xldCBlPXRoaXMubnVtYmVyQWxsb2NhdG9yLmZpcnN0VmFjYW50KCk7cmV0dXJuIGV8fFsuLi50aGlzLmFsaWFzVG9Ub3BpYy5rZXlzKCldW3RoaXMuYWxpYXNUb1RvcGljLnNpemUtMV19fTtMYS5kZWZhdWx0PU1hO30pO3ZhciBFcD1NKFJpPT57digpO20oKTtfKCk7dmFyIHZ2PVJpJiZSaS5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KFJpLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBFdj1BaSgpLFN2PXZ2KHZwKCkpLEF2PUpyKCksSXY9KHQsZSk9Pnt0LmxvZyhcIl9oYW5kbGVDb25uYWNrXCIpO2xldHtvcHRpb25zOnJ9PXQsbj1yLnByb3RvY29sVmVyc2lvbj09PTU/ZS5yZWFzb25Db2RlOmUucmV0dXJuQ29kZTtpZihjbGVhclRpbWVvdXQodC5jb25uYWNrVGltZXIpLGRlbGV0ZSB0LnRvcGljQWxpYXNTZW5kLGUucHJvcGVydGllcyl7aWYoZS5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtKXtpZihlLnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW0+NjU1MzUpe3QuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwidG9waWNBbGlhc01heGltdW0gZnJvbSBicm9rZXIgaXMgb3V0IG9mIHJhbmdlXCIpKTtyZXR1cm59ZS5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtPjAmJih0LnRvcGljQWxpYXNTZW5kPW5ldyBTdi5kZWZhdWx0KGUucHJvcGVydGllcy50b3BpY0FsaWFzTWF4aW11bSkpO31lLnByb3BlcnRpZXMuc2VydmVyS2VlcEFsaXZlJiZyLmtlZXBhbGl2ZSYmKHIua2VlcGFsaXZlPWUucHJvcGVydGllcy5zZXJ2ZXJLZWVwQWxpdmUsdC5fc2hpZnRQaW5nSW50ZXJ2YWwoKSksZS5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplJiYoci5wcm9wZXJ0aWVzfHwoci5wcm9wZXJ0aWVzPXt9KSxyLnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemU9ZS5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplKTt9aWYobj09PTApdC5yZWNvbm5lY3Rpbmc9ITEsdC5fb25Db25uZWN0KGUpO2Vsc2UgaWYobj4wKXtsZXQgbz1uZXcgQXYuRXJyb3JXaXRoUmVhc29uQ29kZShgQ29ubmVjdGlvbiByZWZ1c2VkOiAke0V2LlJlYXNvbkNvZGVzW25dfWAsbik7dC5lbWl0KFwiZXJyb3JcIixvKTt9fTtSaS5kZWZhdWx0PUl2O30pO3ZhciBTcD1NKFVhPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KFVhLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBUdj0odCxlLHIpPT57dC5sb2coXCJoYW5kbGluZyBwdWJyZWwgcGFja2V0XCIpO2xldCBpPXR5cGVvZiByPFwidVwiP3I6dC5ub29wLHttZXNzYWdlSWQ6bn09ZSxvPXtjbWQ6XCJwdWJjb21wXCIsbWVzc2FnZUlkOm59O3QuaW5jb21pbmdTdG9yZS5nZXQoZSwocyxhKT0+e3M/dC5fc2VuZFBhY2tldChvLGkpOih0LmVtaXQoXCJtZXNzYWdlXCIsYS50b3BpYyxhLnBheWxvYWQsYSksdC5oYW5kbGVNZXNzYWdlKGEsdT0+e2lmKHUpcmV0dXJuIGkodSk7dC5pbmNvbWluZ1N0b3JlLmRlbChhLHQubm9vcCksdC5fc2VuZFBhY2tldChvLGkpO30pKTt9KTt9O1VhLmRlZmF1bHQ9VHY7fSk7dmFyIEFwPU0oQ2k9Pnt2KCk7bSgpO18oKTt2YXIgQmk9Q2kmJkNpLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2ksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFJ2PUJpKFZkKCkpLEN2PUJpKEtkKCkpLEJ2PUJpKEVwKCkpLFB2PUJpKEFpKCkpLE92PUJpKFNwKCkpLGt2PSh0LGUscik9PntsZXR7b3B0aW9uczppfT10O2lmKGkucHJvdG9jb2xWZXJzaW9uPT09NSYmaS5wcm9wZXJ0aWVzJiZpLnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemUmJmkucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZTxlLmxlbmd0aClyZXR1cm4gdC5lbWl0KFwiZXJyb3JcIixuZXcgRXJyb3IoYGV4Y2VlZGluZyBwYWNrZXRzIHNpemUgJHtlLmNtZH1gKSksdC5lbmQoe3JlYXNvbkNvZGU6MTQ5LHByb3BlcnRpZXM6e3JlYXNvblN0cmluZzpcIk1heGltdW0gcGFja2V0IHNpemUgd2FzIGV4Y2VlZGVkXCJ9fSksdDtzd2l0Y2godC5sb2coXCJfaGFuZGxlUGFja2V0IDo6IGVtaXR0aW5nIHBhY2tldHJlY2VpdmVcIiksdC5lbWl0KFwicGFja2V0cmVjZWl2ZVwiLGUpLGUuY21kKXtjYXNlXCJwdWJsaXNoXCI6KDAsIFJ2LmRlZmF1bHQpKHQsZSxyKTticmVhaztjYXNlXCJwdWJhY2tcIjpjYXNlXCJwdWJyZWNcIjpjYXNlXCJwdWJjb21wXCI6Y2FzZVwic3ViYWNrXCI6Y2FzZVwidW5zdWJhY2tcIjooMCwgUHYuZGVmYXVsdCkodCxlKSxyKCk7YnJlYWs7Y2FzZVwicHVicmVsXCI6KDAsIE92LmRlZmF1bHQpKHQsZSxyKTticmVhaztjYXNlXCJjb25uYWNrXCI6KDAsIEJ2LmRlZmF1bHQpKHQsZSkscigpO2JyZWFrO2Nhc2VcImF1dGhcIjooMCwgQ3YuZGVmYXVsdCkodCxlKSxyKCk7YnJlYWs7Y2FzZVwicGluZ3Jlc3BcIjp0LnBpbmdSZXNwPSEwLHIoKTticmVhaztjYXNlXCJkaXNjb25uZWN0XCI6dC5lbWl0KFwiZGlzY29ubmVjdFwiLGUpLHIoKTticmVhaztkZWZhdWx0OnQubG9nKFwiX2hhbmRsZVBhY2tldCA6OiB1bmtub3duIGNvbW1hbmRcIikscigpO2JyZWFrfX07Q2kuZGVmYXVsdD1rdjt9KTt2YXIgSXA9TSh0aT0+e3YoKTttKCk7XygpO3ZhciB4dj10aSYmdGkuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt0aS5UeXBlZEV2ZW50RW1pdHRlcj12b2lkIDA7dmFyIE12PXh2KChpcigpLFgocnIpKSksTHY9SnIoKSxYbj1jbGFzc3t9O3RpLlR5cGVkRXZlbnRFbWl0dGVyPVhuOygwLCBMdi5hcHBseU1peGluKShYbixNdi5kZWZhdWx0KTt9KTt2YXIgUGk9TShBcj0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShBcixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtBci5pc1JlYWN0TmF0aXZlQnJvd3Nlcj1Bci5pc1dlYldvcmtlcj12b2lkIDA7dmFyIFV2PSgpPT50eXBlb2Ygd2luZG93PFwidVwiJiZ0eXBlb2Ygd2luZG93LmRvY3VtZW50PFwidVwiLFRwPSgpPT57dmFyIHQsZTtyZXR1cm4gISEodHlwZW9mIHNlbGY9PVwib2JqZWN0XCImJighKChlPSh0PXNlbGY/LmNvbnN0cnVjdG9yKT09PW51bGx8fHQ9PT12b2lkIDA/dm9pZCAwOnQubmFtZSk9PT1udWxsfHxlPT09dm9pZCAwKSYmZS5pbmNsdWRlcyhcIldvcmtlckdsb2JhbFNjb3BlXCIpKSl9LFJwPSgpPT50eXBlb2YgQjxcInVcIiYmQi5wcm9kdWN0PT09XCJSZWFjdE5hdGl2ZVwiLE52PVV2KCl8fFRwKCl8fFJwKCk7QXIuaXNXZWJXb3JrZXI9VHAoKTtBci5pc1JlYWN0TmF0aXZlQnJvd3Nlcj1ScCgpO0FyLmRlZmF1bHQ9TnY7fSk7dmFyIEJwPU0oKFpuLENwKT0+e3YoKTttKCk7XygpOyhmdW5jdGlvbih0LGUpe3R5cGVvZiBabj09XCJvYmplY3RcIiYmdHlwZW9mIENwPFwidVwiP2UoWm4pOnR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSxlKToodD10eXBlb2YgZ2xvYmFsVGhpczxcInVcIj9nbG9iYWxUaGlzOnR8fHNlbGYsZSh0LmZhc3RVbmlxdWVOdW1iZXJzPXt9KSk7fSkoWm4sZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIGZ1bmN0aW9uKHkpe3ZhciB3PWcoeSk7cmV0dXJuIHkuYWRkKHcpLHd9fSxyPWZ1bmN0aW9uKGcpe3JldHVybiBmdW5jdGlvbih5LHcpe3JldHVybiBnLnNldCh5LHcpLHd9fSxpPU51bWJlci5NQVhfU0FGRV9JTlRFR0VSPT09dm9pZCAwPzkwMDcxOTkyNTQ3NDA5OTE6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsbj01MzY4NzA5MTIsbz1uKjIscz1mdW5jdGlvbihnLHkpe3JldHVybiBmdW5jdGlvbih3KXt2YXIgRT15LmdldCh3KSxTPUU9PT12b2lkIDA/dy5zaXplOkU8bz9FKzE6MDtpZighdy5oYXMoUykpcmV0dXJuIGcodyxTKTtpZih3LnNpemU8bil7Zm9yKDt3LmhhcyhTKTspUz1NYXRoLmZsb29yKE1hdGgucmFuZG9tKCkqbyk7cmV0dXJuIGcodyxTKX1pZih3LnNpemU+aSl0aHJvdyBuZXcgRXJyb3IoXCJDb25ncmF0dWxhdGlvbnMsIHlvdSBjcmVhdGVkIGEgY29sbGVjdGlvbiBvZiB1bmlxdWUgbnVtYmVycyB3aGljaCB1c2VzIGFsbCBhdmFpbGFibGUgaW50ZWdlcnMhXCIpO2Zvcig7dy5oYXMoUyk7KVM9TWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKmkpO3JldHVybiBnKHcsUyl9fSxhPW5ldyBXZWFrTWFwLHU9cihhKSxjPXModSxhKSxoPWUoYyk7dC5hZGRVbmlxdWVOdW1iZXI9aCx0LmdlbmVyYXRlVW5pcXVlTnVtYmVyPWM7fSk7fSk7dmFyIE9wPU0oKGVzLFBwKT0+e3YoKTttKCk7XygpOyhmdW5jdGlvbih0LGUpe3R5cGVvZiBlcz09XCJvYmplY3RcIiYmdHlwZW9mIFBwPFwidVwiP2UoZXMsQnAoKSk6dHlwZW9mIGRlZmluZT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCIsXCJmYXN0LXVuaXF1ZS1udW1iZXJzXCJdLGUpOih0PXR5cGVvZiBnbG9iYWxUaGlzPFwidVwiP2dsb2JhbFRoaXM6dHx8c2VsZixlKHQud29ya2VyVGltZXJzQnJva2VyPXt9LHQuZmFzdFVuaXF1ZU51bWJlcnMpKTt9KShlcyxmdW5jdGlvbih0LGUpe3ZhciByPWZ1bmN0aW9uKHMpe3JldHVybiBzLm1ldGhvZCE9PXZvaWQgMCYmcy5tZXRob2Q9PT1cImNhbGxcIn0saT1mdW5jdGlvbihzKXtyZXR1cm4gcy5lcnJvcj09PW51bGwmJnR5cGVvZiBzLmlkPT1cIm51bWJlclwifSxuPWZ1bmN0aW9uKHMpe3ZhciBhPW5ldyBNYXAoW1swLGZ1bmN0aW9uKCl7fV1dKSx1PW5ldyBNYXAoW1swLGZ1bmN0aW9uKCl7fV1dKSxjPW5ldyBNYXAsaD1uZXcgV29ya2VyKHMpO2guYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixmdW5jdGlvbihFKXt2YXIgUz1FLmRhdGE7aWYocihTKSl7dmFyIEk9Uy5wYXJhbXMsQz1JLnRpbWVySWQsUj1JLnRpbWVyVHlwZTtpZihSPT09XCJpbnRlcnZhbFwiKXt2YXIgVT1hLmdldChDKTtpZih0eXBlb2YgVT09XCJudW1iZXJcIil7dmFyIE49Yy5nZXQoVSk7aWYoTj09PXZvaWQgMHx8Ti50aW1lcklkIT09Q3x8Ti50aW1lclR5cGUhPT1SKXRocm93IG5ldyBFcnJvcihcIlRoZSB0aW1lciBpcyBpbiBhbiB1bmRlZmluZWQgc3RhdGUuXCIpfWVsc2UgaWYodHlwZW9mIFU8XCJ1XCIpVSgpO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHRpbWVyIGlzIGluIGFuIHVuZGVmaW5lZCBzdGF0ZS5cIil9ZWxzZSBpZihSPT09XCJ0aW1lb3V0XCIpe3ZhciBXPXUuZ2V0KEMpO2lmKHR5cGVvZiBXPT1cIm51bWJlclwiKXt2YXIgSz1jLmdldChXKTtpZihLPT09dm9pZCAwfHxLLnRpbWVySWQhPT1DfHxLLnRpbWVyVHlwZSE9PVIpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHRpbWVyIGlzIGluIGFuIHVuZGVmaW5lZCBzdGF0ZS5cIil9ZWxzZSBpZih0eXBlb2YgVzxcInVcIilXKCksdS5kZWxldGUoQyk7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdGltZXIgaXMgaW4gYW4gdW5kZWZpbmVkIHN0YXRlLlwiKX19ZWxzZSBpZihpKFMpKXt2YXIgej1TLmlkLFE9Yy5nZXQoeik7aWYoUT09PXZvaWQgMCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdGltZXIgaXMgaW4gYW4gdW5kZWZpbmVkIHN0YXRlLlwiKTt2YXIgZGU9US50aW1lcklkLEd0PVEudGltZXJUeXBlO2MuZGVsZXRlKHopLEd0PT09XCJpbnRlcnZhbFwiP2EuZGVsZXRlKGRlKTp1LmRlbGV0ZShkZSk7fWVsc2Uge3ZhciBwZT1TLmVycm9yLm1lc3NhZ2U7dGhyb3cgbmV3IEVycm9yKHBlKX19KTt2YXIgZD1mdW5jdGlvbihTKXt2YXIgST1lLmdlbmVyYXRlVW5pcXVlTnVtYmVyKGMpO2Muc2V0KEkse3RpbWVySWQ6Uyx0aW1lclR5cGU6XCJpbnRlcnZhbFwifSksYS5zZXQoUyxJKSxoLnBvc3RNZXNzYWdlKHtpZDpJLG1ldGhvZDpcImNsZWFyXCIscGFyYW1zOnt0aW1lcklkOlMsdGltZXJUeXBlOlwiaW50ZXJ2YWxcIn19KTt9LGc9ZnVuY3Rpb24oUyl7dmFyIEk9ZS5nZW5lcmF0ZVVuaXF1ZU51bWJlcihjKTtjLnNldChJLHt0aW1lcklkOlMsdGltZXJUeXBlOlwidGltZW91dFwifSksdS5zZXQoUyxJKSxoLnBvc3RNZXNzYWdlKHtpZDpJLG1ldGhvZDpcImNsZWFyXCIscGFyYW1zOnt0aW1lcklkOlMsdGltZXJUeXBlOlwidGltZW91dFwifX0pO30seT1mdW5jdGlvbihTKXt2YXIgST1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXZvaWQgMD9hcmd1bWVudHNbMV06MCxDPWUuZ2VuZXJhdGVVbmlxdWVOdW1iZXIoYSk7cmV0dXJuIGEuc2V0KEMsZnVuY3Rpb24oKXtTKCksdHlwZW9mIGEuZ2V0KEMpPT1cImZ1bmN0aW9uXCImJmgucG9zdE1lc3NhZ2Uoe2lkOm51bGwsbWV0aG9kOlwic2V0XCIscGFyYW1zOntkZWxheTpJLG5vdzpwZXJmb3JtYW5jZS5ub3coKSx0aW1lcklkOkMsdGltZXJUeXBlOlwiaW50ZXJ2YWxcIn19KTt9KSxoLnBvc3RNZXNzYWdlKHtpZDpudWxsLG1ldGhvZDpcInNldFwiLHBhcmFtczp7ZGVsYXk6SSxub3c6cGVyZm9ybWFuY2Uubm93KCksdGltZXJJZDpDLHRpbWVyVHlwZTpcImludGVydmFsXCJ9fSksQ30sdz1mdW5jdGlvbihTKXt2YXIgST1hcmd1bWVudHMubGVuZ3RoPjEmJmFyZ3VtZW50c1sxXSE9PXZvaWQgMD9hcmd1bWVudHNbMV06MCxDPWUuZ2VuZXJhdGVVbmlxdWVOdW1iZXIodSk7cmV0dXJuIHUuc2V0KEMsUyksaC5wb3N0TWVzc2FnZSh7aWQ6bnVsbCxtZXRob2Q6XCJzZXRcIixwYXJhbXM6e2RlbGF5Okksbm93OnBlcmZvcm1hbmNlLm5vdygpLHRpbWVySWQ6Qyx0aW1lclR5cGU6XCJ0aW1lb3V0XCJ9fSksQ307cmV0dXJuIHtjbGVhckludGVydmFsOmQsY2xlYXJUaW1lb3V0Omcsc2V0SW50ZXJ2YWw6eSxzZXRUaW1lb3V0Ond9fTt0LmxvYWQ9bjt9KTt9KTt2YXIgeHA9TSgodHMsa3ApPT57digpO20oKTtfKCk7KGZ1bmN0aW9uKHQsZSl7dHlwZW9mIHRzPT1cIm9iamVjdFwiJiZ0eXBlb2Yga3A8XCJ1XCI/ZSh0cyxPcCgpKTp0eXBlb2YgZGVmaW5lPT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIixcIndvcmtlci10aW1lcnMtYnJva2VyXCJdLGUpOih0PXR5cGVvZiBnbG9iYWxUaGlzPFwidVwiP2dsb2JhbFRoaXM6dHx8c2VsZixlKHQud29ya2VyVGltZXJzPXt9LHQud29ya2VyVGltZXJzQnJva2VyKSk7fSkodHMsZnVuY3Rpb24odCxlKXt2YXIgcj1mdW5jdGlvbihoLGQpe3ZhciBnPW51bGw7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoZyE9PW51bGwpcmV0dXJuIGc7dmFyIHk9bmV3IEJsb2IoW2RdLHt0eXBlOlwiYXBwbGljYXRpb24vamF2YXNjcmlwdDsgY2hhcnNldD11dGYtOFwifSksdz1VUkwuY3JlYXRlT2JqZWN0VVJMKHkpO3JldHVybiBnPWgodyksc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBVUkwucmV2b2tlT2JqZWN0VVJMKHcpfSksZ319LGk9YCgoKT0+e3ZhciBlPXs0NzI6KGUsdCxyKT0+e3ZhciBvLGk7dm9pZCAwPT09KGk9XCJmdW5jdGlvblwiPT10eXBlb2Yobz1mdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3ZhciBlPW5ldyBNYXAsdD1uZXcgTWFwLHI9ZnVuY3Rpb24odCl7dmFyIHI9ZS5nZXQodCk7aWYodm9pZCAwPT09cil0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIGludGVydmFsIHNjaGVkdWxlZCB3aXRoIHRoZSBnaXZlbiBpZCBcIicuY29uY2F0KHQsJ1wiLicpKTtjbGVhclRpbWVvdXQociksZS5kZWxldGUodCl9LG89ZnVuY3Rpb24oZSl7dmFyIHI9dC5nZXQoZSk7aWYodm9pZCAwPT09cil0aHJvdyBuZXcgRXJyb3IoJ1RoZXJlIGlzIG5vIHRpbWVvdXQgc2NoZWR1bGVkIHdpdGggdGhlIGdpdmVuIGlkIFwiJy5jb25jYXQoZSwnXCIuJykpO2NsZWFyVGltZW91dChyKSx0LmRlbGV0ZShlKX0saT1mdW5jdGlvbihlLHQpe3ZhciByLG89cGVyZm9ybWFuY2Uubm93KCk7cmV0dXJue2V4cGVjdGVkOm8rKHI9ZS1NYXRoLm1heCgwLG8tdCkpLHJlbWFpbmluZ0RlbGF5OnJ9fSxuPWZ1bmN0aW9uIGUodCxyLG8saSl7dmFyIG49cGVyZm9ybWFuY2Uubm93KCk7bj5vP3Bvc3RNZXNzYWdlKHtpZDpudWxsLG1ldGhvZDpcImNhbGxcIixwYXJhbXM6e3RpbWVySWQ6cix0aW1lclR5cGU6aX19KTp0LnNldChyLHNldFRpbWVvdXQoZSxvLW4sdCxyLG8saSkpfSxhPWZ1bmN0aW9uKHQscixvKXt2YXIgYT1pKHQsbykscz1hLmV4cGVjdGVkLGQ9YS5yZW1haW5pbmdEZWxheTtlLnNldChyLHNldFRpbWVvdXQobixkLGUscixzLFwiaW50ZXJ2YWxcIikpfSxzPWZ1bmN0aW9uKGUscixvKXt2YXIgYT1pKGUsbykscz1hLmV4cGVjdGVkLGQ9YS5yZW1haW5pbmdEZWxheTt0LnNldChyLHNldFRpbWVvdXQobixkLHQscixzLFwidGltZW91dFwiKSl9O2FkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsKGZ1bmN0aW9uKGUpe3ZhciB0PWUuZGF0YTt0cnl7aWYoXCJjbGVhclwiPT09dC5tZXRob2Qpe3ZhciBpPXQuaWQsbj10LnBhcmFtcyxkPW4udGltZXJJZCxjPW4udGltZXJUeXBlO2lmKFwiaW50ZXJ2YWxcIj09PWMpcihkKSxwb3N0TWVzc2FnZSh7ZXJyb3I6bnVsbCxpZDppfSk7ZWxzZXtpZihcInRpbWVvdXRcIiE9PWMpdGhyb3cgbmV3IEVycm9yKCdUaGUgZ2l2ZW4gdHlwZSBcIicuY29uY2F0KGMsJ1wiIGlzIG5vdCBzdXBwb3J0ZWQnKSk7byhkKSxwb3N0TWVzc2FnZSh7ZXJyb3I6bnVsbCxpZDppfSl9fWVsc2V7aWYoXCJzZXRcIiE9PXQubWV0aG9kKXRocm93IG5ldyBFcnJvcignVGhlIGdpdmVuIG1ldGhvZCBcIicuY29uY2F0KHQubWV0aG9kLCdcIiBpcyBub3Qgc3VwcG9ydGVkJykpO3ZhciB1PXQucGFyYW1zLGw9dS5kZWxheSxwPXUubm93LG09dS50aW1lcklkLHY9dS50aW1lclR5cGU7aWYoXCJpbnRlcnZhbFwiPT09dilhKGwsbSxwKTtlbHNle2lmKFwidGltZW91dFwiIT09dil0aHJvdyBuZXcgRXJyb3IoJ1RoZSBnaXZlbiB0eXBlIFwiJy5jb25jYXQodiwnXCIgaXMgbm90IHN1cHBvcnRlZCcpKTtzKGwsbSxwKX19fWNhdGNoKGUpe3Bvc3RNZXNzYWdlKHtlcnJvcjp7bWVzc2FnZTplLm1lc3NhZ2V9LGlkOnQuaWQscmVzdWx0Om51bGx9KX19KSl9KT9vLmNhbGwodCxyLHQsZSk6byl8fChlLmV4cG9ydHM9aSl9fSx0PXt9O2Z1bmN0aW9uIHIobyl7dmFyIGk9dFtvXTtpZih2b2lkIDAhPT1pKXJldHVybiBpLmV4cG9ydHM7dmFyIG49dFtvXT17ZXhwb3J0czp7fX07cmV0dXJuIGVbb10obixuLmV4cG9ydHMsciksbi5leHBvcnRzfXIubj1lPT57dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlPygpPT5lLmRlZmF1bHQ6KCk9PmU7cmV0dXJuIHIuZCh0LHthOnR9KSx0fSxyLmQ9KGUsdCk9Pntmb3IodmFyIG8gaW4gdClyLm8odCxvKSYmIXIubyhlLG8pJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLHtlbnVtZXJhYmxlOiEwLGdldDp0W29dfSl9LHIubz0oZSx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCksKCgpPT57XCJ1c2Ugc3RyaWN0XCI7cig0NzIpfSkoKX0pKCk7YCxuPXIoZS5sb2FkLGkpLG89ZnVuY3Rpb24oaCl7cmV0dXJuIG4oKS5jbGVhckludGVydmFsKGgpfSxzPWZ1bmN0aW9uKGgpe3JldHVybiBuKCkuY2xlYXJUaW1lb3V0KGgpfSxhPWZ1bmN0aW9uKCl7dmFyIGg7cmV0dXJuIChoPW4oKSkuc2V0SW50ZXJ2YWwuYXBwbHkoaCxhcmd1bWVudHMpfSx1PWZ1bmN0aW9uKCl7dmFyIGg7cmV0dXJuIChoPW4oKSkuc2V0VGltZW91dC5hcHBseShoLGFyZ3VtZW50cyl9O3QuY2xlYXJJbnRlcnZhbD1vLHQuY2xlYXJUaW1lb3V0PXMsdC5zZXRJbnRlcnZhbD1hLHQuc2V0VGltZW91dD11O30pO30pO3ZhciBOcD1NKFJ0PT57digpO20oKTtfKCk7dmFyIHF2PVJ0JiZSdC5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKHQsZSxyLGkpe2k9PT12b2lkIDAmJihpPXIpO3ZhciBuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSxyKTsoIW58fChcImdldFwiaW4gbj8hZS5fX2VzTW9kdWxlOm4ud3JpdGFibGV8fG4uY29uZmlndXJhYmxlKSkmJihuPXtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlW3JdfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGksbik7fTpmdW5jdGlvbih0LGUscixpKXtpPT09dm9pZCAwJiYoaT1yKSx0W2ldPWVbcl07fSksRHY9UnQmJlJ0Ll9fc2V0TW9kdWxlRGVmYXVsdHx8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24odCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSk7fTpmdW5jdGlvbih0LGUpe3QuZGVmYXVsdD1lO30pLGp2PVJ0JiZSdC5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKHQpe2lmKHQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgZT17fTtpZih0IT1udWxsKWZvcih2YXIgciBpbiB0KXIhPT1cImRlZmF1bHRcIiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJnF2KGUsdCxyKTtyZXR1cm4gRHYoZSx0KSxlfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUnQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIE5hPWp2KFBpKCkpLE1wPXhwKCksTHA9e3NldDpNcC5zZXRUaW1lb3V0LGNsZWFyOk1wLmNsZWFyVGltZW91dH0sVXA9e3NldDoodCxlKT0+c2V0VGltZW91dCh0LGUpLGNsZWFyOnQ9PmNsZWFyVGltZW91dCh0KX0sRnY9dD0+e3N3aXRjaCh0KXtjYXNlXCJuYXRpdmVcIjpyZXR1cm4gVXA7Y2FzZVwid29ya2VyXCI6cmV0dXJuIExwO2Nhc2VcImF1dG9cIjpkZWZhdWx0OnJldHVybiBOYS5kZWZhdWx0JiYhTmEuaXNXZWJXb3JrZXImJiFOYS5pc1JlYWN0TmF0aXZlQnJvd3Nlcj9McDpVcH19O1J0LmRlZmF1bHQ9RnY7fSk7dmFyIERhPU0oT2k9Pnt2KCk7bSgpO18oKTt2YXIgV3Y9T2kmJk9pLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoT2ksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyICR2PVd2KE5wKCkpLHFhPWNsYXNze2NvbnN0cnVjdG9yKGUscixpKXt0aGlzLmtlZXBhbGl2ZT1lKjFlMyx0aGlzLmNoZWNrUGluZz1yLHRoaXMudGltZXI9KDAsICR2LmRlZmF1bHQpKGkpLHRoaXMucmVzY2hlZHVsZSgpO31jbGVhcigpe3RoaXMudGltZXJJZCYmKHRoaXMudGltZXIuY2xlYXIodGhpcy50aW1lcklkKSx0aGlzLnRpbWVySWQ9bnVsbCk7fXJlc2NoZWR1bGUoKXt0aGlzLmNsZWFyKCksdGhpcy50aW1lcklkPXRoaXMudGltZXIuc2V0KCgpPT57dGhpcy5jaGVja1BpbmcoKSx0aGlzLnRpbWVySWQmJnRoaXMucmVzY2hlZHVsZSgpO30sdGhpcy5rZWVwYWxpdmUpO319O09pLmRlZmF1bHQ9cWE7fSk7dmFyIG5zPU0oUWU9Pnt2KCk7bSgpO18oKTt2YXIgSHY9UWUmJlFlLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24odCxlLHIsaSl7aT09PXZvaWQgMCYmKGk9cik7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpOyghbnx8KFwiZ2V0XCJpbiBuPyFlLl9fZXNNb2R1bGU6bi53cml0YWJsZXx8bi5jb25maWd1cmFibGUpKSYmKG49e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVbcl19fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaSxuKTt9OmZ1bmN0aW9uKHQsZSxyLGkpe2k9PT12b2lkIDAmJihpPXIpLHRbaV09ZVtyXTt9KSxWdj1RZSYmUWUuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbih0LGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KTt9OmZ1bmN0aW9uKHQsZSl7dC5kZWZhdWx0PWU7fSksV3A9UWUmJlFlLl9faW1wb3J0U3Rhcnx8ZnVuY3Rpb24odCl7aWYodCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBlPXt9O2lmKHQhPW51bGwpZm9yKHZhciByIGluIHQpciE9PVwiZGVmYXVsdFwiJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmSHYoZSx0LHIpO3JldHVybiBWdihlLHQpLGV9LFZ0PVFlJiZRZS5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KFFlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB6dj1WdChHdSgpKSxqYT1WdChOZCgpKSxLdj1WdChZbygpKSxHdj1EdCgpLHFwPVZ0KEZkKCkpLERwPVdwKCRkKCkpLFF2PVZ0KG90KCkpLHJzPVZ0KFpvKCkpLFl2PVZ0KEFwKCkpLFdhPUpyKCksSnY9SXAoKSxYdj1WdChEYSgpKSxqcD1XcChQaSgpKSxGYT1nbG9iYWxUaGlzLnNldEltbWVkaWF0ZXx8KCguLi50KT0+e2xldCBlPXQuc2hpZnQoKTsoMCwgV2EubmV4dFRpY2spKCgpPT57ZSguLi50KTt9KTt9KSxGcD17a2VlcGFsaXZlOjYwLHJlc2NoZWR1bGVQaW5nczohMCxwcm90b2NvbElkOlwiTVFUVFwiLHByb3RvY29sVmVyc2lvbjo0LHJlY29ubmVjdFBlcmlvZDoxZTMsY29ubmVjdFRpbWVvdXQ6MzAqMWUzLGNsZWFuOiEwLHJlc3Vic2NyaWJlOiEwLHdyaXRlQ2FjaGU6ITAsdGltZXJWYXJpYW50OlwiYXV0b1wifSxpcz1jbGFzcyB0IGV4dGVuZHMgSnYuVHlwZWRFdmVudEVtaXR0ZXJ7c3RhdGljIGRlZmF1bHRJZCgpe3JldHVybiBgbXF0dGpzXyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyKDIsOCl9YH1jb25zdHJ1Y3RvcihlLHIpe3N1cGVyKCksdGhpcy5vcHRpb25zPXJ8fHt9O2ZvcihsZXQgaSBpbiBGcCl0eXBlb2YgdGhpcy5vcHRpb25zW2ldPlwidVwiP3RoaXMub3B0aW9uc1tpXT1GcFtpXTp0aGlzLm9wdGlvbnNbaV09cltpXTt0aGlzLmxvZz10aGlzLm9wdGlvbnMubG9nfHwoMCwgUXYuZGVmYXVsdCkoXCJtcXR0anM6Y2xpZW50XCIpLHRoaXMubm9vcD10aGlzLl9ub29wLmJpbmQodGhpcyksdGhpcy5sb2coXCJNcXR0Q2xpZW50IDo6IHZlcnNpb246XCIsdC5WRVJTSU9OKSxqcC5pc1dlYldvcmtlcj90aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogZW52aXJvbm1lbnRcIixcIndlYndvcmtlclwiKTp0aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogZW52aXJvbm1lbnRcIixqcC5kZWZhdWx0P1wiYnJvd3NlclwiOlwibm9kZVwiKSx0aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogb3B0aW9ucy5wcm90b2NvbFwiLHIucHJvdG9jb2wpLHRoaXMubG9nKFwiTXF0dENsaWVudCA6OiBvcHRpb25zLnByb3RvY29sVmVyc2lvblwiLHIucHJvdG9jb2xWZXJzaW9uKSx0aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogb3B0aW9ucy51c2VybmFtZVwiLHIudXNlcm5hbWUpLHRoaXMubG9nKFwiTXF0dENsaWVudCA6OiBvcHRpb25zLmtlZXBhbGl2ZVwiLHIua2VlcGFsaXZlKSx0aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogb3B0aW9ucy5yZWNvbm5lY3RQZXJpb2RcIixyLnJlY29ubmVjdFBlcmlvZCksdGhpcy5sb2coXCJNcXR0Q2xpZW50IDo6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkXCIsci5yZWplY3RVbmF1dGhvcml6ZWQpLHRoaXMubG9nKFwiTXF0dENsaWVudCA6OiBvcHRpb25zLnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW1cIixyLnByb3BlcnRpZXM/ci5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtOnZvaWQgMCksdGhpcy5vcHRpb25zLmNsaWVudElkPXR5cGVvZiByLmNsaWVudElkPT1cInN0cmluZ1wiP3IuY2xpZW50SWQ6dC5kZWZhdWx0SWQoKSx0aGlzLmxvZyhcIk1xdHRDbGllbnQgOjogY2xpZW50SWRcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMub3B0aW9ucy5jdXN0b21IYW5kbGVBY2tzPXIucHJvdG9jb2xWZXJzaW9uPT09NSYmci5jdXN0b21IYW5kbGVBY2tzP3IuY3VzdG9tSGFuZGxlQWNrczooLi4uaSk9PntpWzNdKG51bGwsMCk7fSx0aGlzLm9wdGlvbnMud3JpdGVDYWNoZXx8KGphLmRlZmF1bHQud3JpdGVUb1N0cmVhbS5jYWNoZU51bWJlcnM9ITEpLHRoaXMuc3RyZWFtQnVpbGRlcj1lLHRoaXMubWVzc2FnZUlkUHJvdmlkZXI9dHlwZW9mIHRoaXMub3B0aW9ucy5tZXNzYWdlSWRQcm92aWRlcj5cInVcIj9uZXcgS3YuZGVmYXVsdDp0aGlzLm9wdGlvbnMubWVzc2FnZUlkUHJvdmlkZXIsdGhpcy5vdXRnb2luZ1N0b3JlPXIub3V0Z29pbmdTdG9yZXx8bmV3IHJzLmRlZmF1bHQsdGhpcy5pbmNvbWluZ1N0b3JlPXIuaW5jb21pbmdTdG9yZXx8bmV3IHJzLmRlZmF1bHQsdGhpcy5xdWV1ZVFvU1plcm89ci5xdWV1ZVFvU1plcm89PT12b2lkIDA/ITA6ci5xdWV1ZVFvU1plcm8sdGhpcy5fcmVzdWJzY3JpYmVUb3BpY3M9e30sdGhpcy5tZXNzYWdlSWRUb1RvcGljPXt9LHRoaXMucGluZ1RpbWVyPW51bGwsdGhpcy5jb25uZWN0ZWQ9ITEsdGhpcy5kaXNjb25uZWN0aW5nPSExLHRoaXMucmVjb25uZWN0aW5nPSExLHRoaXMucXVldWU9W10sdGhpcy5jb25uYWNrVGltZXI9bnVsbCx0aGlzLnJlY29ubmVjdFRpbWVyPW51bGwsdGhpcy5fc3RvcmVQcm9jZXNzaW5nPSExLHRoaXMuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZz17fSx0aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZT1bXSx0aGlzLm91dGdvaW5nPXt9LHRoaXMuX2ZpcnN0Q29ubmVjdGlvbj0hMCxyLnByb3BlcnRpZXMmJnIucHJvcGVydGllcy50b3BpY0FsaWFzTWF4aW11bT4wJiYoci5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtPjY1NTM1P3RoaXMubG9nKFwiTXF0dENsaWVudCA6OiBvcHRpb25zLnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW0gaXMgb3V0IG9mIHJhbmdlXCIpOnRoaXMudG9waWNBbGlhc1JlY3Y9bmV3IHp2LmRlZmF1bHQoci5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtKSksdGhpcy5vbihcImNvbm5lY3RcIiwoKT0+e2xldHtxdWV1ZTppfT10aGlzLG49KCk9PntsZXQgbz1pLnNoaWZ0KCk7dGhpcy5sb2coXCJkZWxpdmVyIDo6IGVudHJ5ICVvXCIsbyk7bGV0IHM9bnVsbDtpZighbyl7dGhpcy5fcmVzdWJzY3JpYmUoKTtyZXR1cm59cz1vLnBhY2tldCx0aGlzLmxvZyhcImRlbGl2ZXIgOjogY2FsbCBfc2VuZFBhY2tldCBmb3IgJW9cIixzKTtsZXQgYT0hMDtzLm1lc3NhZ2VJZCYmcy5tZXNzYWdlSWQhPT0wJiYodGhpcy5tZXNzYWdlSWRQcm92aWRlci5yZWdpc3RlcihzLm1lc3NhZ2VJZCl8fChhPSExKSksYT90aGlzLl9zZW5kUGFja2V0KHMsdT0+e28uY2ImJm8uY2IodSksbigpO30pOih0aGlzLmxvZyhcIm1lc3NhZ2VJZDogJWQgaGFzIGFscmVhZHkgdXNlZC4gVGhlIG1lc3NhZ2UgaXMgc2tpcHBlZCBhbmQgcmVtb3ZlZC5cIixzLm1lc3NhZ2VJZCksbigpKTt9O3RoaXMubG9nKFwiY29ubmVjdCA6OiBzZW5kaW5nIHF1ZXVlZCBwYWNrZXRzXCIpLG4oKTt9KSx0aGlzLm9uKFwiY2xvc2VcIiwoKT0+e3RoaXMubG9nKFwiY2xvc2UgOjogY29ubmVjdGVkIHNldCB0byBgZmFsc2VgXCIpLHRoaXMuY29ubmVjdGVkPSExLHRoaXMubG9nKFwiY2xvc2UgOjogY2xlYXJpbmcgY29ubmFja1RpbWVyXCIpLGNsZWFyVGltZW91dCh0aGlzLmNvbm5hY2tUaW1lciksdGhpcy5sb2coXCJjbG9zZSA6OiBjbGVhcmluZyBwaW5nIHRpbWVyXCIpLHRoaXMucGluZ1RpbWVyJiYodGhpcy5waW5nVGltZXIuY2xlYXIoKSx0aGlzLnBpbmdUaW1lcj1udWxsKSx0aGlzLnRvcGljQWxpYXNSZWN2JiZ0aGlzLnRvcGljQWxpYXNSZWN2LmNsZWFyKCksdGhpcy5sb2coXCJjbG9zZSA6OiBjYWxsaW5nIF9zZXR1cFJlY29ubmVjdFwiKSx0aGlzLl9zZXR1cFJlY29ubmVjdCgpO30pLHRoaXMub3B0aW9ucy5tYW51YWxDb25uZWN0fHwodGhpcy5sb2coXCJNcXR0Q2xpZW50IDo6IHNldHRpbmcgdXAgc3RyZWFtXCIpLHRoaXMuY29ubmVjdCgpKTt9aGFuZGxlQXV0aChlLHIpe3IoKTt9aGFuZGxlTWVzc2FnZShlLHIpe3IoKTt9X25leHRJZCgpe3JldHVybiB0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyLmFsbG9jYXRlKCl9Z2V0TGFzdE1lc3NhZ2VJZCgpe3JldHVybiB0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyLmdldExhc3RBbGxvY2F0ZWQoKX1jb25uZWN0KCl7dmFyIGU7bGV0IHI9bmV3IEd2LldyaXRhYmxlLGk9amEuZGVmYXVsdC5wYXJzZXIodGhpcy5vcHRpb25zKSxuPW51bGwsbz1bXTt0aGlzLmxvZyhcImNvbm5lY3QgOjogY2FsbGluZyBtZXRob2QgdG8gY2xlYXIgcmVjb25uZWN0XCIpLHRoaXMuX2NsZWFyUmVjb25uZWN0KCksdGhpcy5sb2coXCJjb25uZWN0IDo6IHVzaW5nIHN0cmVhbUJ1aWxkZXIgcHJvdmlkZWQgdG8gY2xpZW50IHRvIGNyZWF0ZSBzdHJlYW1cIiksdGhpcy5zdHJlYW09dGhpcy5zdHJlYW1CdWlsZGVyKHRoaXMpLGkub24oXCJwYWNrZXRcIixoPT57dGhpcy5sb2coXCJwYXJzZXIgOjogb24gcGFja2V0IHB1c2ggdG8gcGFja2V0cyBhcnJheS5cIiksby5wdXNoKGgpO30pO2xldCBzPSgpPT57dGhpcy5sb2coXCJ3b3JrIDo6IGdldHRpbmcgbmV4dCBwYWNrZXQgaW4gcXVldWVcIik7bGV0IGg9by5zaGlmdCgpO2lmKGgpdGhpcy5sb2coXCJ3b3JrIDo6IHBhY2tldCBwdWxsZWQgZnJvbSBxdWV1ZVwiKSwoMCwgWXYuZGVmYXVsdCkodGhpcyxoLGEpO2Vsc2Uge3RoaXMubG9nKFwid29yayA6OiBubyBwYWNrZXRzIGluIHF1ZXVlXCIpO2xldCBkPW47bj1udWxsLHRoaXMubG9nKFwid29yayA6OiBkb25lIGZsYWcgaXMgJXNcIiwhIWQpLGQmJmQoKTt9fSxhPSgpPT57aWYoby5sZW5ndGgpKDAsIFdhLm5leHRUaWNrKShzKTtlbHNlIHtsZXQgaD1uO249bnVsbCxoKCk7fX07ci5fd3JpdGU9KGgsZCxnKT0+e249Zyx0aGlzLmxvZyhcIndyaXRhYmxlIHN0cmVhbSA6OiBwYXJzaW5nIGJ1ZmZlclwiKSxpLnBhcnNlKGgpLHMoKTt9O2xldCB1PWg9Pnt0aGlzLmxvZyhcInN0cmVhbUVycm9ySGFuZGxlciA6OiBlcnJvclwiLGgubWVzc2FnZSksaC5jb2RlPyh0aGlzLmxvZyhcInN0cmVhbUVycm9ySGFuZGxlciA6OiBlbWl0dGluZyBlcnJvclwiKSx0aGlzLmVtaXQoXCJlcnJvclwiLGgpKTp0aGlzLm5vb3AoaCk7fTt0aGlzLmxvZyhcImNvbm5lY3QgOjogcGlwZSBzdHJlYW0gdG8gd3JpdGFibGUgc3RyZWFtXCIpLHRoaXMuc3RyZWFtLnBpcGUociksdGhpcy5zdHJlYW0ub24oXCJlcnJvclwiLHUpLHRoaXMuc3RyZWFtLm9uKFwiY2xvc2VcIiwoKT0+e3RoaXMubG9nKFwiKCVzKXN0cmVhbSA6OiBvbiBjbG9zZVwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCksdGhpcy5fZmx1c2hWb2xhdGlsZSgpLHRoaXMubG9nKFwic3RyZWFtOiBlbWl0IGNsb3NlIHRvIE1xdHRDbGllbnRcIiksdGhpcy5lbWl0KFwiY2xvc2VcIik7fSksdGhpcy5sb2coXCJjb25uZWN0OiBzZW5kaW5nIHBhY2tldCBgY29ubmVjdGBcIik7bGV0IGM9e2NtZDpcImNvbm5lY3RcIixwcm90b2NvbElkOnRoaXMub3B0aW9ucy5wcm90b2NvbElkLHByb3RvY29sVmVyc2lvbjp0aGlzLm9wdGlvbnMucHJvdG9jb2xWZXJzaW9uLGNsZWFuOnRoaXMub3B0aW9ucy5jbGVhbixjbGllbnRJZDp0aGlzLm9wdGlvbnMuY2xpZW50SWQsa2VlcGFsaXZlOnRoaXMub3B0aW9ucy5rZWVwYWxpdmUsdXNlcm5hbWU6dGhpcy5vcHRpb25zLnVzZXJuYW1lLHBhc3N3b3JkOnRoaXMub3B0aW9ucy5wYXNzd29yZCxwcm9wZXJ0aWVzOnRoaXMub3B0aW9ucy5wcm9wZXJ0aWVzfTtpZih0aGlzLm9wdGlvbnMud2lsbCYmKGMud2lsbD1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdGhpcy5vcHRpb25zLndpbGwpLHtwYXlsb2FkOihlPXRoaXMub3B0aW9ucy53aWxsKT09PW51bGx8fGU9PT12b2lkIDA/dm9pZCAwOmUucGF5bG9hZH0pKSx0aGlzLnRvcGljQWxpYXNSZWN2JiYoYy5wcm9wZXJ0aWVzfHwoYy5wcm9wZXJ0aWVzPXt9KSx0aGlzLnRvcGljQWxpYXNSZWN2JiYoYy5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtPXRoaXMudG9waWNBbGlhc1JlY3YubWF4KSksdGhpcy5fd3JpdGVQYWNrZXQoYyksaS5vbihcImVycm9yXCIsdGhpcy5lbWl0LmJpbmQodGhpcyxcImVycm9yXCIpKSx0aGlzLm9wdGlvbnMucHJvcGVydGllcyl7aWYoIXRoaXMub3B0aW9ucy5wcm9wZXJ0aWVzLmF1dGhlbnRpY2F0aW9uTWV0aG9kJiZ0aGlzLm9wdGlvbnMucHJvcGVydGllcy5hdXRoZW50aWNhdGlvbkRhdGEpcmV0dXJuIHRoaXMuZW5kKCgpPT50aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlBhY2tldCBoYXMgbm8gQXV0aGVudGljYXRpb24gTWV0aG9kXCIpKSksdGhpcztpZih0aGlzLm9wdGlvbnMucHJvcGVydGllcy5hdXRoZW50aWNhdGlvbk1ldGhvZCYmdGhpcy5vcHRpb25zLmF1dGhQYWNrZXQmJnR5cGVvZiB0aGlzLm9wdGlvbnMuYXV0aFBhY2tldD09XCJvYmplY3RcIil7bGV0IGg9T2JqZWN0LmFzc2lnbih7Y21kOlwiYXV0aFwiLHJlYXNvbkNvZGU6MH0sdGhpcy5vcHRpb25zLmF1dGhQYWNrZXQpO3RoaXMuX3dyaXRlUGFja2V0KGgpO319cmV0dXJuIHRoaXMuc3RyZWFtLnNldE1heExpc3RlbmVycygxZTMpLGNsZWFyVGltZW91dCh0aGlzLmNvbm5hY2tUaW1lciksdGhpcy5jb25uYWNrVGltZXI9c2V0VGltZW91dCgoKT0+e3RoaXMubG9nKFwiISFjb25uZWN0VGltZW91dCBoaXQhISBDYWxsaW5nIF9jbGVhblVwIHdpdGggZm9yY2UgYHRydWVgXCIpLHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiY29ubmFjayB0aW1lb3V0XCIpKSx0aGlzLl9jbGVhblVwKCEwKTt9LHRoaXMub3B0aW9ucy5jb25uZWN0VGltZW91dCksdGhpc31wdWJsaXNoKGUscixpLG4pe3RoaXMubG9nKFwicHVibGlzaCA6OiBtZXNzYWdlIGAlc2AgdG8gdG9waWMgYCVzYFwiLHIsZSk7bGV0e29wdGlvbnM6b309dGhpczt0eXBlb2YgaT09XCJmdW5jdGlvblwiJiYobj1pLGk9bnVsbCksaT1pfHx7fSxpPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSx7cW9zOjAscmV0YWluOiExLGR1cDohMX0pLGkpO2xldHtxb3M6YSxyZXRhaW46dSxkdXA6Yyxwcm9wZXJ0aWVzOmgsY2JTdG9yZVB1dDpkfT1pO2lmKHRoaXMuX2NoZWNrRGlzY29ubmVjdGluZyhuKSlyZXR1cm4gdGhpcztsZXQgZz0oKT0+e2xldCB5PTA7aWYoKGE9PT0xfHxhPT09MikmJih5PXRoaXMuX25leHRJZCgpLHk9PT1udWxsKSlyZXR1cm4gdGhpcy5sb2coXCJObyBtZXNzYWdlSWQgbGVmdFwiKSwhMTtsZXQgdz17Y21kOlwicHVibGlzaFwiLHRvcGljOmUscGF5bG9hZDpyLHFvczphLHJldGFpbjp1LG1lc3NhZ2VJZDp5LGR1cDpjfTtzd2l0Y2goby5wcm90b2NvbFZlcnNpb249PT01JiYody5wcm9wZXJ0aWVzPWgpLHRoaXMubG9nKFwicHVibGlzaCA6OiBxb3NcIixhKSxhKXtjYXNlIDE6Y2FzZSAyOnRoaXMub3V0Z29pbmdbdy5tZXNzYWdlSWRdPXt2b2xhdGlsZTohMSxjYjpufHx0aGlzLm5vb3B9LHRoaXMubG9nKFwiTXF0dENsaWVudDpwdWJsaXNoOiBwYWNrZXQgY21kOiAlc1wiLHcuY21kKSx0aGlzLl9zZW5kUGFja2V0KHcsdm9pZCAwLGQpO2JyZWFrO2RlZmF1bHQ6dGhpcy5sb2coXCJNcXR0Q2xpZW50OnB1Ymxpc2g6IHBhY2tldCBjbWQ6ICVzXCIsdy5jbWQpLHRoaXMuX3NlbmRQYWNrZXQodyxuLGQpO2JyZWFrfXJldHVybiAhMH07cmV0dXJuICh0aGlzLl9zdG9yZVByb2Nlc3Npbmd8fHRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLmxlbmd0aD4wfHwhZygpKSYmdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUucHVzaCh7aW52b2tlOmcsY2JTdG9yZVB1dDppLmNiU3RvcmVQdXQsY2FsbGJhY2s6bn0pLHRoaXN9cHVibGlzaEFzeW5jKGUscixpKXtyZXR1cm4gbmV3IFByb21pc2UoKG4sbyk9Pnt0aGlzLnB1Ymxpc2goZSxyLGksKHMsYSk9PntzP28ocyk6bihhKTt9KTt9KX1zdWJzY3JpYmUoZSxyLGkpe2xldCBuPXRoaXMub3B0aW9ucy5wcm90b2NvbFZlcnNpb247dHlwZW9mIHI9PVwiZnVuY3Rpb25cIiYmKGk9ciksaT1pfHx0aGlzLm5vb3A7bGV0IG89ITEscz1bXTt0eXBlb2YgZT09XCJzdHJpbmdcIj8oZT1bZV0scz1lKTpBcnJheS5pc0FycmF5KGUpP3M9ZTp0eXBlb2YgZT09XCJvYmplY3RcIiYmKG89ZS5yZXN1YnNjcmliZSxkZWxldGUgZS5yZXN1YnNjcmliZSxzPU9iamVjdC5rZXlzKGUpKTtsZXQgYT1EcC52YWxpZGF0ZVRvcGljcyhzKTtpZihhIT09bnVsbClyZXR1cm4gRmEoaSxuZXcgRXJyb3IoYEludmFsaWQgdG9waWMgJHthfWApKSx0aGlzO2lmKHRoaXMuX2NoZWNrRGlzY29ubmVjdGluZyhpKSlyZXR1cm4gdGhpcy5sb2coXCJzdWJzY3JpYmU6IGRpc2Njb25lY3RpbmcgdHJ1ZVwiKSx0aGlzO2xldCB1PXtxb3M6MH07bj09PTUmJih1Lm5sPSExLHUucmFwPSExLHUucmg9MCkscj1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sdSkscik7bGV0IGM9ci5wcm9wZXJ0aWVzLGg9W10sZD0oeSx3KT0+e2lmKHc9d3x8ciwhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzLHkpfHx0aGlzLl9yZXN1YnNjcmliZVRvcGljc1t5XS5xb3M8dy5xb3N8fG8pe2xldCBFPXt0b3BpYzp5LHFvczp3LnFvc307bj09PTUmJihFLm5sPXcubmwsRS5yYXA9dy5yYXAsRS5yaD13LnJoLEUucHJvcGVydGllcz1jKSx0aGlzLmxvZyhcInN1YnNjcmliZTogcHVzaGluZyB0b3BpYyBgJXNgIGFuZCBxb3MgYCVzYCB0byBzdWJzIGxpc3RcIixFLnRvcGljLEUucW9zKSxoLnB1c2goRSk7fX07aWYoQXJyYXkuaXNBcnJheShlKT9lLmZvckVhY2goeT0+e3RoaXMubG9nKFwic3Vic2NyaWJlOiBhcnJheSB0b3BpYyAlc1wiLHkpLGQoeSk7fSk6T2JqZWN0LmtleXMoZSkuZm9yRWFjaCh5PT57dGhpcy5sb2coXCJzdWJzY3JpYmU6IG9iamVjdCB0b3BpYyAlcywgJW9cIix5LGVbeV0pLGQoeSxlW3ldKTt9KSwhaC5sZW5ndGgpcmV0dXJuIGkobnVsbCxbXSksdGhpcztsZXQgZz0oKT0+e2xldCB5PXRoaXMuX25leHRJZCgpO2lmKHk9PT1udWxsKXJldHVybiB0aGlzLmxvZyhcIk5vIG1lc3NhZ2VJZCBsZWZ0XCIpLCExO2xldCB3PXtjbWQ6XCJzdWJzY3JpYmVcIixzdWJzY3JpcHRpb25zOmgsbWVzc2FnZUlkOnl9O2lmKGMmJih3LnByb3BlcnRpZXM9YyksdGhpcy5vcHRpb25zLnJlc3Vic2NyaWJlKXt0aGlzLmxvZyhcInN1YnNjcmliZSA6OiByZXN1YnNjcmliZSB0cnVlXCIpO2xldCBFPVtdO2guZm9yRWFjaChTPT57aWYodGhpcy5vcHRpb25zLnJlY29ubmVjdFBlcmlvZD4wKXtsZXQgST17cW9zOlMucW9zfTtuPT09NSYmKEkubmw9Uy5ubHx8ITEsSS5yYXA9Uy5yYXB8fCExLEkucmg9Uy5yaHx8MCxJLnByb3BlcnRpZXM9Uy5wcm9wZXJ0aWVzKSx0aGlzLl9yZXN1YnNjcmliZVRvcGljc1tTLnRvcGljXT1JLEUucHVzaChTLnRvcGljKTt9fSksdGhpcy5tZXNzYWdlSWRUb1RvcGljW3cubWVzc2FnZUlkXT1FO31yZXR1cm4gdGhpcy5vdXRnb2luZ1t3Lm1lc3NhZ2VJZF09e3ZvbGF0aWxlOiEwLGNiKEUsUyl7aWYoIUUpe2xldHtncmFudGVkOkl9PVM7Zm9yKGxldCBDPTA7QzxJLmxlbmd0aDtDKz0xKWhbQ10ucW9zPUlbQ107fWkoRSxoKTt9fSx0aGlzLmxvZyhcInN1YnNjcmliZSA6OiBjYWxsIF9zZW5kUGFja2V0XCIpLHRoaXMuX3NlbmRQYWNrZXQodyksITB9O3JldHVybiAodGhpcy5fc3RvcmVQcm9jZXNzaW5nfHx0aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZS5sZW5ndGg+MHx8IWcoKSkmJnRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLnB1c2goe2ludm9rZTpnLGNhbGxiYWNrOml9KSx0aGlzfXN1YnNjcmliZUFzeW5jKGUscil7cmV0dXJuIG5ldyBQcm9taXNlKChpLG4pPT57dGhpcy5zdWJzY3JpYmUoZSxyLChvLHMpPT57bz9uKG8pOmkocyk7fSk7fSl9dW5zdWJzY3JpYmUoZSxyLGkpe3R5cGVvZiBlPT1cInN0cmluZ1wiJiYoZT1bZV0pLHR5cGVvZiByPT1cImZ1bmN0aW9uXCImJihpPXIpLGk9aXx8dGhpcy5ub29wO2xldCBuPURwLnZhbGlkYXRlVG9waWNzKGUpO2lmKG4hPT1udWxsKXJldHVybiBGYShpLG5ldyBFcnJvcihgSW52YWxpZCB0b3BpYyAke259YCkpLHRoaXM7aWYodGhpcy5fY2hlY2tEaXNjb25uZWN0aW5nKGkpKXJldHVybiB0aGlzO2xldCBvPSgpPT57bGV0IHM9dGhpcy5fbmV4dElkKCk7aWYocz09PW51bGwpcmV0dXJuIHRoaXMubG9nKFwiTm8gbWVzc2FnZUlkIGxlZnRcIiksITE7bGV0IGE9e2NtZDpcInVuc3Vic2NyaWJlXCIsbWVzc2FnZUlkOnMsdW5zdWJzY3JpcHRpb25zOltdfTtyZXR1cm4gdHlwZW9mIGU9PVwic3RyaW5nXCI/YS51bnN1YnNjcmlwdGlvbnM9W2VdOkFycmF5LmlzQXJyYXkoZSkmJihhLnVuc3Vic2NyaXB0aW9ucz1lKSx0aGlzLm9wdGlvbnMucmVzdWJzY3JpYmUmJmEudW5zdWJzY3JpcHRpb25zLmZvckVhY2godT0+e2RlbGV0ZSB0aGlzLl9yZXN1YnNjcmliZVRvcGljc1t1XTt9KSx0eXBlb2Ygcj09XCJvYmplY3RcIiYmci5wcm9wZXJ0aWVzJiYoYS5wcm9wZXJ0aWVzPXIucHJvcGVydGllcyksdGhpcy5vdXRnb2luZ1thLm1lc3NhZ2VJZF09e3ZvbGF0aWxlOiEwLGNiOml9LHRoaXMubG9nKFwidW5zdWJzY3JpYmU6IGNhbGwgX3NlbmRQYWNrZXRcIiksdGhpcy5fc2VuZFBhY2tldChhKSwhMH07cmV0dXJuICh0aGlzLl9zdG9yZVByb2Nlc3Npbmd8fHRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLmxlbmd0aD4wfHwhbygpKSYmdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUucHVzaCh7aW52b2tlOm8sY2FsbGJhY2s6aX0pLHRoaXN9dW5zdWJzY3JpYmVBc3luYyhlLHIpe3JldHVybiBuZXcgUHJvbWlzZSgoaSxuKT0+e3RoaXMudW5zdWJzY3JpYmUoZSxyLChvLHMpPT57bz9uKG8pOmkocyk7fSk7fSl9ZW5kKGUscixpKXt0aGlzLmxvZyhcImVuZCA6OiAoJXMpXCIsdGhpcy5vcHRpb25zLmNsaWVudElkKSwoZT09bnVsbHx8dHlwZW9mIGUhPVwiYm9vbGVhblwiKSYmKGk9aXx8cixyPWUsZT0hMSksdHlwZW9mIHIhPVwib2JqZWN0XCImJihpPWl8fHIscj1udWxsKSx0aGlzLmxvZyhcImVuZCA6OiBjYj8gJXNcIiwhIWkpLCghaXx8dHlwZW9mIGkhPVwiZnVuY3Rpb25cIikmJihpPXRoaXMubm9vcCk7bGV0IG49KCk9Pnt0aGlzLmxvZyhcImVuZCA6OiBjbG9zZVN0b3JlczogY2xvc2luZyBpbmNvbWluZyBhbmQgb3V0Z29pbmcgc3RvcmVzXCIpLHRoaXMuZGlzY29ubmVjdGVkPSEwLHRoaXMuaW5jb21pbmdTdG9yZS5jbG9zZShzPT57dGhpcy5vdXRnb2luZ1N0b3JlLmNsb3NlKGE9PntpZih0aGlzLmxvZyhcImVuZCA6OiBjbG9zZVN0b3JlczogZW1pdHRpbmcgZW5kXCIpLHRoaXMuZW1pdChcImVuZFwiKSxpKXtsZXQgdT1zfHxhO3RoaXMubG9nKFwiZW5kIDo6IGNsb3NlU3RvcmVzOiBpbnZva2luZyBjYWxsYmFjayB3aXRoIGFyZ3NcIiksaSh1KTt9fSk7fSksdGhpcy5fZGVmZXJyZWRSZWNvbm5lY3QmJnRoaXMuX2RlZmVycmVkUmVjb25uZWN0KCk7fSxvPSgpPT57dGhpcy5sb2coXCJlbmQgOjogKCVzKSA6OiBmaW5pc2ggOjogY2FsbGluZyBfY2xlYW5VcCB3aXRoIGZvcmNlICVzXCIsdGhpcy5vcHRpb25zLmNsaWVudElkLGUpLHRoaXMuX2NsZWFuVXAoZSwoKT0+e3RoaXMubG9nKFwiZW5kIDo6IGZpbmlzaCA6OiBjYWxsaW5nIHByb2Nlc3MubmV4dFRpY2sgb24gY2xvc2VTdG9yZXNcIiksKDAsIFdhLm5leHRUaWNrKShuKTt9LHIpO307cmV0dXJuIHRoaXMuZGlzY29ubmVjdGluZz8oaSgpLHRoaXMpOih0aGlzLl9jbGVhclJlY29ubmVjdCgpLHRoaXMuZGlzY29ubmVjdGluZz0hMCwhZSYmT2JqZWN0LmtleXModGhpcy5vdXRnb2luZykubGVuZ3RoPjA/KHRoaXMubG9nKFwiZW5kIDo6ICglcykgOjogY2FsbGluZyBmaW5pc2ggaW4gMTBtcyBvbmNlIG91dGdvaW5nIGlzIGVtcHR5XCIsdGhpcy5vcHRpb25zLmNsaWVudElkKSx0aGlzLm9uY2UoXCJvdXRnb2luZ0VtcHR5XCIsc2V0VGltZW91dC5iaW5kKG51bGwsbywxMCkpKToodGhpcy5sb2coXCJlbmQgOjogKCVzKSA6OiBpbW1lZGlhdGVseSBjYWxsaW5nIGZpbmlzaFwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCksbygpKSx0aGlzKX1lbmRBc3luYyhlLHIpe3JldHVybiBuZXcgUHJvbWlzZSgoaSxuKT0+e3RoaXMuZW5kKGUscixvPT57bz9uKG8pOmkoKTt9KTt9KX1yZW1vdmVPdXRnb2luZ01lc3NhZ2UoZSl7aWYodGhpcy5vdXRnb2luZ1tlXSl7bGV0e2NiOnJ9PXRoaXMub3V0Z29pbmdbZV07dGhpcy5fcmVtb3ZlT3V0Z29pbmdBbmRTdG9yZU1lc3NhZ2UoZSwoKT0+e3IobmV3IEVycm9yKFwiTWVzc2FnZSByZW1vdmVkXCIpKTt9KTt9cmV0dXJuIHRoaXN9cmVjb25uZWN0KGUpe3RoaXMubG9nKFwiY2xpZW50IHJlY29ubmVjdFwiKTtsZXQgcj0oKT0+e2U/KHRoaXMub3B0aW9ucy5pbmNvbWluZ1N0b3JlPWUuaW5jb21pbmdTdG9yZSx0aGlzLm9wdGlvbnMub3V0Z29pbmdTdG9yZT1lLm91dGdvaW5nU3RvcmUpOih0aGlzLm9wdGlvbnMuaW5jb21pbmdTdG9yZT1udWxsLHRoaXMub3B0aW9ucy5vdXRnb2luZ1N0b3JlPW51bGwpLHRoaXMuaW5jb21pbmdTdG9yZT10aGlzLm9wdGlvbnMuaW5jb21pbmdTdG9yZXx8bmV3IHJzLmRlZmF1bHQsdGhpcy5vdXRnb2luZ1N0b3JlPXRoaXMub3B0aW9ucy5vdXRnb2luZ1N0b3JlfHxuZXcgcnMuZGVmYXVsdCx0aGlzLmRpc2Nvbm5lY3Rpbmc9ITEsdGhpcy5kaXNjb25uZWN0ZWQ9ITEsdGhpcy5fZGVmZXJyZWRSZWNvbm5lY3Q9bnVsbCx0aGlzLl9yZWNvbm5lY3QoKTt9O3JldHVybiB0aGlzLmRpc2Nvbm5lY3RpbmcmJiF0aGlzLmRpc2Nvbm5lY3RlZD90aGlzLl9kZWZlcnJlZFJlY29ubmVjdD1yOnIoKSx0aGlzfV9mbHVzaFZvbGF0aWxlKCl7dGhpcy5vdXRnb2luZyYmKHRoaXMubG9nKFwiX2ZsdXNoVm9sYXRpbGUgOjogZGVsZXRpbmcgdm9sYXRpbGUgbWVzc2FnZXMgZnJvbSB0aGUgcXVldWUgYW5kIHNldHRpbmcgdGhlaXIgY2FsbGJhY2tzIGFzIGVycm9yIGZ1bmN0aW9uXCIpLE9iamVjdC5rZXlzKHRoaXMub3V0Z29pbmcpLmZvckVhY2goZT0+e3RoaXMub3V0Z29pbmdbZV0udm9sYXRpbGUmJnR5cGVvZiB0aGlzLm91dGdvaW5nW2VdLmNiPT1cImZ1bmN0aW9uXCImJih0aGlzLm91dGdvaW5nW2VdLmNiKG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkXCIpKSxkZWxldGUgdGhpcy5vdXRnb2luZ1tlXSk7fSkpO31fZmx1c2goKXt0aGlzLm91dGdvaW5nJiYodGhpcy5sb2coXCJfZmx1c2g6IHF1ZXVlIGV4aXN0cz8gJWJcIiwhIXRoaXMub3V0Z29pbmcpLE9iamVjdC5rZXlzKHRoaXMub3V0Z29pbmcpLmZvckVhY2goZT0+e3R5cGVvZiB0aGlzLm91dGdvaW5nW2VdLmNiPT1cImZ1bmN0aW9uXCImJih0aGlzLm91dGdvaW5nW2VdLmNiKG5ldyBFcnJvcihcIkNvbm5lY3Rpb24gY2xvc2VkXCIpKSxkZWxldGUgdGhpcy5vdXRnb2luZ1tlXSk7fSkpO31fcmVtb3ZlVG9waWNBbGlhc0FuZFJlY292ZXJUb3BpY05hbWUoZSl7bGV0IHI7ZS5wcm9wZXJ0aWVzJiYocj1lLnByb3BlcnRpZXMudG9waWNBbGlhcyk7bGV0IGk9ZS50b3BpYy50b1N0cmluZygpO2lmKHRoaXMubG9nKFwiX3JlbW92ZVRvcGljQWxpYXNBbmRSZWNvdmVyVG9waWNOYW1lIDo6IGFsaWFzICVkLCB0b3BpYyAlb1wiLHIsaSksaS5sZW5ndGg9PT0wKXtpZih0eXBlb2Ygcj5cInVcIilyZXR1cm4gbmV3IEVycm9yKFwiVW5yZWdpc3RlcmVkIFRvcGljIEFsaWFzXCIpO2lmKGk9dGhpcy50b3BpY0FsaWFzU2VuZC5nZXRUb3BpY0J5QWxpYXMociksdHlwZW9mIGk+XCJ1XCIpcmV0dXJuIG5ldyBFcnJvcihcIlVucmVnaXN0ZXJlZCBUb3BpYyBBbGlhc1wiKTtlLnRvcGljPWk7fXImJmRlbGV0ZSBlLnByb3BlcnRpZXMudG9waWNBbGlhczt9X2NoZWNrRGlzY29ubmVjdGluZyhlKXtyZXR1cm4gdGhpcy5kaXNjb25uZWN0aW5nJiYoZSYmZSE9PXRoaXMubm9vcD9lKG5ldyBFcnJvcihcImNsaWVudCBkaXNjb25uZWN0aW5nXCIpKTp0aGlzLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcImNsaWVudCBkaXNjb25uZWN0aW5nXCIpKSksdGhpcy5kaXNjb25uZWN0aW5nfV9yZWNvbm5lY3QoKXt0aGlzLmxvZyhcIl9yZWNvbm5lY3Q6IGVtaXR0aW5nIHJlY29ubmVjdCB0byBjbGllbnRcIiksdGhpcy5lbWl0KFwicmVjb25uZWN0XCIpLHRoaXMuY29ubmVjdGVkPyh0aGlzLmVuZCgoKT0+e3RoaXMuY29ubmVjdCgpO30pLHRoaXMubG9nKFwiY2xpZW50IGFscmVhZHkgY29ubmVjdGVkLiBkaXNjb25uZWN0aW5nIGZpcnN0LlwiKSk6KHRoaXMubG9nKFwiX3JlY29ubmVjdDogY2FsbGluZyBjb25uZWN0XCIpLHRoaXMuY29ubmVjdCgpKTt9X3NldHVwUmVjb25uZWN0KCl7IXRoaXMuZGlzY29ubmVjdGluZyYmIXRoaXMucmVjb25uZWN0VGltZXImJnRoaXMub3B0aW9ucy5yZWNvbm5lY3RQZXJpb2Q+MD8odGhpcy5yZWNvbm5lY3Rpbmd8fCh0aGlzLmxvZyhcIl9zZXR1cFJlY29ubmVjdCA6OiBlbWl0IGBvZmZsaW5lYCBzdGF0ZVwiKSx0aGlzLmVtaXQoXCJvZmZsaW5lXCIpLHRoaXMubG9nKFwiX3NldHVwUmVjb25uZWN0IDo6IHNldCBgcmVjb25uZWN0aW5nYCB0byBgdHJ1ZWBcIiksdGhpcy5yZWNvbm5lY3Rpbmc9ITApLHRoaXMubG9nKFwiX3NldHVwUmVjb25uZWN0IDo6IHNldHRpbmcgcmVjb25uZWN0VGltZXIgZm9yICVkIG1zXCIsdGhpcy5vcHRpb25zLnJlY29ubmVjdFBlcmlvZCksdGhpcy5yZWNvbm5lY3RUaW1lcj1zZXRJbnRlcnZhbCgoKT0+e3RoaXMubG9nKFwicmVjb25uZWN0VGltZXIgOjogcmVjb25uZWN0IHRyaWdnZXJlZCFcIiksdGhpcy5fcmVjb25uZWN0KCk7fSx0aGlzLm9wdGlvbnMucmVjb25uZWN0UGVyaW9kKSk6dGhpcy5sb2coXCJfc2V0dXBSZWNvbm5lY3QgOjogZG9pbmcgbm90aGluZy4uLlwiKTt9X2NsZWFyUmVjb25uZWN0KCl7dGhpcy5sb2coXCJfY2xlYXJSZWNvbm5lY3QgOiBjbGVhcmluZyByZWNvbm5lY3QgdGltZXJcIiksdGhpcy5yZWNvbm5lY3RUaW1lciYmKGNsZWFySW50ZXJ2YWwodGhpcy5yZWNvbm5lY3RUaW1lciksdGhpcy5yZWNvbm5lY3RUaW1lcj1udWxsKTt9X2NsZWFuVXAoZSxyLGk9e30pe2lmKHImJih0aGlzLmxvZyhcIl9jbGVhblVwIDo6IGRvbmUgY2FsbGJhY2sgcHJvdmlkZWQgZm9yIG9uIHN0cmVhbSBjbG9zZVwiKSx0aGlzLnN0cmVhbS5vbihcImNsb3NlXCIscikpLHRoaXMubG9nKFwiX2NsZWFuVXAgOjogZm9yY2VkPyAlc1wiLGUpLGUpdGhpcy5vcHRpb25zLnJlY29ubmVjdFBlcmlvZD09PTAmJnRoaXMub3B0aW9ucy5jbGVhbiYmdGhpcy5fZmx1c2goKSx0aGlzLmxvZyhcIl9jbGVhblVwIDo6ICglcykgOjogZGVzdHJveWluZyBzdHJlYW1cIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuc3RyZWFtLmRlc3Ryb3koKTtlbHNlIHtsZXQgbj1PYmplY3QuYXNzaWduKHtjbWQ6XCJkaXNjb25uZWN0XCJ9LGkpO3RoaXMubG9nKFwiX2NsZWFuVXAgOjogKCVzKSA6OiBjYWxsIF9zZW5kUGFja2V0IHdpdGggZGlzY29ubmVjdCBwYWNrZXRcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuX3NlbmRQYWNrZXQobiwoKT0+e3RoaXMubG9nKFwiX2NsZWFuVXAgOjogKCVzKSA6OiBkZXN0cm95aW5nIHN0cmVhbVwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCksRmEoKCk9Pnt0aGlzLnN0cmVhbS5lbmQoKCk9Pnt0aGlzLmxvZyhcIl9jbGVhblVwIDo6ICglcykgOjogc3RyZWFtIGRlc3Ryb3llZFwiLHRoaXMub3B0aW9ucy5jbGllbnRJZCk7fSk7fSk7fSk7fSF0aGlzLmRpc2Nvbm5lY3RpbmcmJiF0aGlzLnJlY29ubmVjdGluZyYmKHRoaXMubG9nKFwiX2NsZWFuVXAgOjogY2xpZW50IG5vdCBkaXNjb25uZWN0aW5nL3JlY29ubmVjdGluZy4gQ2xlYXJpbmcgYW5kIHJlc2V0dGluZyByZWNvbm5lY3QuXCIpLHRoaXMuX2NsZWFyUmVjb25uZWN0KCksdGhpcy5fc2V0dXBSZWNvbm5lY3QoKSksdGhpcy5waW5nVGltZXImJih0aGlzLmxvZyhcIl9jbGVhblVwIDo6IGNsZWFyaW5nIHBpbmdUaW1lclwiKSx0aGlzLnBpbmdUaW1lci5jbGVhcigpLHRoaXMucGluZ1RpbWVyPW51bGwpLHImJiF0aGlzLmNvbm5lY3RlZCYmKHRoaXMubG9nKFwiX2NsZWFuVXAgOjogKCVzKSA6OiByZW1vdmluZyBzdHJlYW0gYGRvbmVgIGNhbGxiYWNrIGBjbG9zZWAgbGlzdGVuZXJcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLHRoaXMuc3RyZWFtLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixyKSxyKCkpO31fc3RvcmVBbmRTZW5kKGUscixpKXt0aGlzLmxvZyhcInN0b3JlQW5kU2VuZCA6OiBzdG9yZSBwYWNrZXQgd2l0aCBjbWQgJXMgdG8gb3V0Z29pbmdTdG9yZVwiLGUuY21kKTtsZXQgbj1lLG87aWYobi5jbWQ9PT1cInB1Ymxpc2hcIiYmKG49KDAsIHFwLmRlZmF1bHQpKGUpLG89dGhpcy5fcmVtb3ZlVG9waWNBbGlhc0FuZFJlY292ZXJUb3BpY05hbWUobiksbykpcmV0dXJuIHImJnIobyk7dGhpcy5vdXRnb2luZ1N0b3JlLnB1dChuLHM9PntpZihzKXJldHVybiByJiZyKHMpO2koKSx0aGlzLl93cml0ZVBhY2tldChlLHIpO30pO31fYXBwbHlUb3BpY0FsaWFzKGUpe2lmKHRoaXMub3B0aW9ucy5wcm90b2NvbFZlcnNpb249PT01JiZlLmNtZD09PVwicHVibGlzaFwiKXtsZXQgcjtlLnByb3BlcnRpZXMmJihyPWUucHJvcGVydGllcy50b3BpY0FsaWFzKTtsZXQgaT1lLnRvcGljLnRvU3RyaW5nKCk7aWYodGhpcy50b3BpY0FsaWFzU2VuZClpZihyKXtpZihpLmxlbmd0aCE9PTAmJih0aGlzLmxvZyhcImFwcGx5VG9waWNBbGlhcyA6OiByZWdpc3RlciB0b3BpYzogJXMgLSBhbGlhczogJWRcIixpLHIpLCF0aGlzLnRvcGljQWxpYXNTZW5kLnB1dChpLHIpKSlyZXR1cm4gdGhpcy5sb2coXCJhcHBseVRvcGljQWxpYXMgOjogZXJyb3Igb3V0IG9mIHJhbmdlLiB0b3BpYzogJXMgLSBhbGlhczogJWRcIixpLHIpLG5ldyBFcnJvcihcIlNlbmRpbmcgVG9waWMgQWxpYXMgb3V0IG9mIHJhbmdlXCIpfWVsc2UgaS5sZW5ndGghPT0wJiYodGhpcy5vcHRpb25zLmF1dG9Bc3NpZ25Ub3BpY0FsaWFzPyhyPXRoaXMudG9waWNBbGlhc1NlbmQuZ2V0QWxpYXNCeVRvcGljKGkpLHI/KGUudG9waWM9XCJcIixlLnByb3BlcnRpZXM9T2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LGUucHJvcGVydGllcykse3RvcGljQWxpYXM6cn0pLHRoaXMubG9nKFwiYXBwbHlUb3BpY0FsaWFzIDo6IGF1dG8gYXNzaWduKHVzZSkgdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsaSxyKSk6KHI9dGhpcy50b3BpY0FsaWFzU2VuZC5nZXRMcnVBbGlhcygpLHRoaXMudG9waWNBbGlhc1NlbmQucHV0KGksciksZS5wcm9wZXJ0aWVzPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxlLnByb3BlcnRpZXMpLHt0b3BpY0FsaWFzOnJ9KSx0aGlzLmxvZyhcImFwcGx5VG9waWNBbGlhcyA6OiBhdXRvIGFzc2lnbiB0b3BpYzogJXMgLSBhbGlhczogJWRcIixpLHIpKSk6dGhpcy5vcHRpb25zLmF1dG9Vc2VUb3BpY0FsaWFzJiYocj10aGlzLnRvcGljQWxpYXNTZW5kLmdldEFsaWFzQnlUb3BpYyhpKSxyJiYoZS50b3BpYz1cIlwiLGUucHJvcGVydGllcz1PYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sZS5wcm9wZXJ0aWVzKSx7dG9waWNBbGlhczpyfSksdGhpcy5sb2coXCJhcHBseVRvcGljQWxpYXMgOjogYXV0byB1c2UgdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsaSxyKSkpKTtlbHNlIGlmKHIpcmV0dXJuIHRoaXMubG9nKFwiYXBwbHlUb3BpY0FsaWFzIDo6IGVycm9yIG91dCBvZiByYW5nZS4gdG9waWM6ICVzIC0gYWxpYXM6ICVkXCIsaSxyKSxuZXcgRXJyb3IoXCJTZW5kaW5nIFRvcGljIEFsaWFzIG91dCBvZiByYW5nZVwiKX19X25vb3AoZSl7dGhpcy5sb2coXCJub29wIDo6XCIsZSk7fV93cml0ZVBhY2tldChlLHIpe3RoaXMubG9nKFwiX3dyaXRlUGFja2V0IDo6IHBhY2tldDogJU9cIixlKSx0aGlzLmxvZyhcIl93cml0ZVBhY2tldCA6OiBlbWl0dGluZyBgcGFja2V0c2VuZGBcIiksdGhpcy5lbWl0KFwicGFja2V0c2VuZFwiLGUpLHRoaXMuX3NoaWZ0UGluZ0ludGVydmFsKCksdGhpcy5sb2coXCJfd3JpdGVQYWNrZXQgOjogd3JpdGluZyB0byBzdHJlYW1cIik7bGV0IGk9amEuZGVmYXVsdC53cml0ZVRvU3RyZWFtKGUsdGhpcy5zdHJlYW0sdGhpcy5vcHRpb25zKTt0aGlzLmxvZyhcIl93cml0ZVBhY2tldCA6OiB3cml0ZVRvU3RyZWFtIHJlc3VsdCAlc1wiLGkpLCFpJiZyJiZyIT09dGhpcy5ub29wPyh0aGlzLmxvZyhcIl93cml0ZVBhY2tldCA6OiBoYW5kbGUgZXZlbnRzIG9uIGBkcmFpbmAgb25jZSB0aHJvdWdoIGNhbGxiYWNrLlwiKSx0aGlzLnN0cmVhbS5vbmNlKFwiZHJhaW5cIixyKSk6ciYmKHRoaXMubG9nKFwiX3dyaXRlUGFja2V0IDo6IGludm9raW5nIGNiXCIpLHIoKSk7fV9zZW5kUGFja2V0KGUscixpLG4pe3RoaXMubG9nKFwiX3NlbmRQYWNrZXQgOjogKCVzKSA6OiAgc3RhcnRcIix0aGlzLm9wdGlvbnMuY2xpZW50SWQpLGk9aXx8dGhpcy5ub29wLHI9cnx8dGhpcy5ub29wO2xldCBvPXRoaXMuX2FwcGx5VG9waWNBbGlhcyhlKTtpZihvKXtyKG8pO3JldHVybn1pZighdGhpcy5jb25uZWN0ZWQpe2lmKGUuY21kPT09XCJhdXRoXCIpe3RoaXMuX3dyaXRlUGFja2V0KGUscik7cmV0dXJufXRoaXMubG9nKFwiX3NlbmRQYWNrZXQgOjogY2xpZW50IG5vdCBjb25uZWN0ZWQuIFN0b3JpbmcgcGFja2V0IG9mZmxpbmUuXCIpLHRoaXMuX3N0b3JlUGFja2V0KGUscixpKTtyZXR1cm59aWYobil7dGhpcy5fd3JpdGVQYWNrZXQoZSxyKTtyZXR1cm59c3dpdGNoKGUuY21kKXtjYXNlXCJwdWJsaXNoXCI6YnJlYWs7Y2FzZVwicHVicmVsXCI6dGhpcy5fc3RvcmVBbmRTZW5kKGUscixpKTtyZXR1cm47ZGVmYXVsdDp0aGlzLl93cml0ZVBhY2tldChlLHIpO3JldHVybn1zd2l0Y2goZS5xb3Mpe2Nhc2UgMjpjYXNlIDE6dGhpcy5fc3RvcmVBbmRTZW5kKGUscixpKTticmVhaztjYXNlIDA6ZGVmYXVsdDp0aGlzLl93cml0ZVBhY2tldChlLHIpO2JyZWFrfXRoaXMubG9nKFwiX3NlbmRQYWNrZXQgOjogKCVzKSA6OiAgZW5kXCIsdGhpcy5vcHRpb25zLmNsaWVudElkKTt9X3N0b3JlUGFja2V0KGUscixpKXt0aGlzLmxvZyhcIl9zdG9yZVBhY2tldCA6OiBwYWNrZXQ6ICVvXCIsZSksdGhpcy5sb2coXCJfc3RvcmVQYWNrZXQgOjogY2I/ICVzXCIsISFyKSxpPWl8fHRoaXMubm9vcDtsZXQgbj1lO2lmKG4uY21kPT09XCJwdWJsaXNoXCIpe249KDAsIHFwLmRlZmF1bHQpKGUpO2xldCBzPXRoaXMuX3JlbW92ZVRvcGljQWxpYXNBbmRSZWNvdmVyVG9waWNOYW1lKG4pO2lmKHMpcmV0dXJuIHImJnIocyl9bGV0IG89bi5xb3N8fDA7bz09PTAmJnRoaXMucXVldWVRb1NaZXJvfHxuLmNtZCE9PVwicHVibGlzaFwiP3RoaXMucXVldWUucHVzaCh7cGFja2V0Om4sY2I6cn0pOm8+MD8ocj10aGlzLm91dGdvaW5nW24ubWVzc2FnZUlkXT90aGlzLm91dGdvaW5nW24ubWVzc2FnZUlkXS5jYjpudWxsLHRoaXMub3V0Z29pbmdTdG9yZS5wdXQobixzPT57aWYocylyZXR1cm4gciYmcihzKTtpKCk7fSkpOnImJnIobmV3IEVycm9yKFwiTm8gY29ubmVjdGlvbiB0byBicm9rZXJcIikpO31fc2V0dXBQaW5nVGltZXIoKXt0aGlzLmxvZyhcIl9zZXR1cFBpbmdUaW1lciA6OiBrZWVwYWxpdmUgJWQgKHNlY29uZHMpXCIsdGhpcy5vcHRpb25zLmtlZXBhbGl2ZSksIXRoaXMucGluZ1RpbWVyJiZ0aGlzLm9wdGlvbnMua2VlcGFsaXZlJiYodGhpcy5waW5nUmVzcD0hMCx0aGlzLnBpbmdUaW1lcj1uZXcgWHYuZGVmYXVsdCh0aGlzLm9wdGlvbnMua2VlcGFsaXZlLCgpPT57dGhpcy5fY2hlY2tQaW5nKCk7fSx0aGlzLm9wdGlvbnMudGltZXJWYXJpYW50KSk7fV9zaGlmdFBpbmdJbnRlcnZhbCgpe3RoaXMucGluZ1RpbWVyJiZ0aGlzLm9wdGlvbnMua2VlcGFsaXZlJiZ0aGlzLm9wdGlvbnMucmVzY2hlZHVsZVBpbmdzJiZ0aGlzLnBpbmdUaW1lci5yZXNjaGVkdWxlKCk7fV9jaGVja1BpbmcoKXt0aGlzLmxvZyhcIl9jaGVja1BpbmcgOjogY2hlY2tpbmcgcGluZy4uLlwiKSx0aGlzLnBpbmdSZXNwPyh0aGlzLmxvZyhcIl9jaGVja1BpbmcgOjogcGluZyByZXNwb25zZSByZWNlaXZlZC4gQ2xlYXJpbmcgZmxhZyBhbmQgc2VuZGluZyBgcGluZ3JlcWBcIiksdGhpcy5waW5nUmVzcD0hMSx0aGlzLl9zZW5kUGFja2V0KHtjbWQ6XCJwaW5ncmVxXCJ9KSk6KHRoaXMuZW1pdChcImVycm9yXCIsbmV3IEVycm9yKFwiS2VlcGFsaXZlIHRpbWVvdXRcIikpLHRoaXMubG9nKFwiX2NoZWNrUGluZyA6OiBjYWxsaW5nIF9jbGVhblVwIHdpdGggZm9yY2UgdHJ1ZVwiKSx0aGlzLl9jbGVhblVwKCEwKSk7fV9yZXN1YnNjcmliZSgpe3RoaXMubG9nKFwiX3Jlc3Vic2NyaWJlXCIpO2xldCBlPU9iamVjdC5rZXlzKHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzKTtpZighdGhpcy5fZmlyc3RDb25uZWN0aW9uJiYodGhpcy5vcHRpb25zLmNsZWFufHx0aGlzLm9wdGlvbnMucHJvdG9jb2xWZXJzaW9uPj00JiYhdGhpcy5jb25uYWNrUGFja2V0LnNlc3Npb25QcmVzZW50KSYmZS5sZW5ndGg+MClpZih0aGlzLm9wdGlvbnMucmVzdWJzY3JpYmUpaWYodGhpcy5vcHRpb25zLnByb3RvY29sVmVyc2lvbj09PTUpe3RoaXMubG9nKFwiX3Jlc3Vic2NyaWJlOiBwcm90b2NvbFZlcnNpb24gNVwiKTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl7bGV0IGk9e307aVtlW3JdXT10aGlzLl9yZXN1YnNjcmliZVRvcGljc1tlW3JdXSxpLnJlc3Vic2NyaWJlPSEwLHRoaXMuc3Vic2NyaWJlKGkse3Byb3BlcnRpZXM6aVtlW3JdXS5wcm9wZXJ0aWVzfSk7fX1lbHNlIHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzLnJlc3Vic2NyaWJlPSEwLHRoaXMuc3Vic2NyaWJlKHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzKTtlbHNlIHRoaXMuX3Jlc3Vic2NyaWJlVG9waWNzPXt9O3RoaXMuX2ZpcnN0Q29ubmVjdGlvbj0hMTt9X29uQ29ubmVjdChlKXtpZih0aGlzLmRpc2Nvbm5lY3RlZCl7dGhpcy5lbWl0KFwiY29ubmVjdFwiLGUpO3JldHVybn10aGlzLmNvbm5hY2tQYWNrZXQ9ZSx0aGlzLm1lc3NhZ2VJZFByb3ZpZGVyLmNsZWFyKCksdGhpcy5fc2V0dXBQaW5nVGltZXIoKSx0aGlzLmNvbm5lY3RlZD0hMDtsZXQgcj0oKT0+e2xldCBpPXRoaXMub3V0Z29pbmdTdG9yZS5jcmVhdGVTdHJlYW0oKSxuPSgpPT57aS5kZXN0cm95KCksaT1udWxsLHRoaXMuX2ZsdXNoU3RvcmVQcm9jZXNzaW5nUXVldWUoKSxvKCk7fSxvPSgpPT57dGhpcy5fc3RvcmVQcm9jZXNzaW5nPSExLHRoaXMuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZz17fTt9O3RoaXMub25jZShcImNsb3NlXCIsbiksaS5vbihcImVycm9yXCIsYT0+e28oKSx0aGlzLl9mbHVzaFN0b3JlUHJvY2Vzc2luZ1F1ZXVlKCksdGhpcy5yZW1vdmVMaXN0ZW5lcihcImNsb3NlXCIsbiksdGhpcy5lbWl0KFwiZXJyb3JcIixhKTt9KTtsZXQgcz0oKT0+e2lmKCFpKXJldHVybjtsZXQgYT1pLnJlYWQoMSksdTtpZighYSl7aS5vbmNlKFwicmVhZGFibGVcIixzKTtyZXR1cm59aWYodGhpcy5fc3RvcmVQcm9jZXNzaW5nPSEwLHRoaXMuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZ1thLm1lc3NhZ2VJZF0pe3MoKTtyZXR1cm59IXRoaXMuZGlzY29ubmVjdGluZyYmIXRoaXMucmVjb25uZWN0VGltZXI/KHU9dGhpcy5vdXRnb2luZ1thLm1lc3NhZ2VJZF0/dGhpcy5vdXRnb2luZ1thLm1lc3NhZ2VJZF0uY2I6bnVsbCx0aGlzLm91dGdvaW5nW2EubWVzc2FnZUlkXT17dm9sYXRpbGU6ITEsY2IoYyxoKXt1JiZ1KGMsaCkscygpO319LHRoaXMuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZ1thLm1lc3NhZ2VJZF09ITAsdGhpcy5tZXNzYWdlSWRQcm92aWRlci5yZWdpc3RlcihhLm1lc3NhZ2VJZCk/dGhpcy5fc2VuZFBhY2tldChhLHZvaWQgMCx2b2lkIDAsITApOnRoaXMubG9nKFwibWVzc2FnZUlkOiAlZCBoYXMgYWxyZWFkeSB1c2VkLlwiLGEubWVzc2FnZUlkKSk6aS5kZXN0cm95JiZpLmRlc3Ryb3koKTt9O2kub24oXCJlbmRcIiwoKT0+e2xldCBhPSEwO2ZvcihsZXQgdSBpbiB0aGlzLl9wYWNrZXRJZHNEdXJpbmdTdG9yZVByb2Nlc3NpbmcpaWYoIXRoaXMuX3BhY2tldElkc0R1cmluZ1N0b3JlUHJvY2Vzc2luZ1t1XSl7YT0hMTticmVha310aGlzLnJlbW92ZUxpc3RlbmVyKFwiY2xvc2VcIixuKSxhPyhvKCksdGhpcy5faW52b2tlQWxsU3RvcmVQcm9jZXNzaW5nUXVldWUoKSx0aGlzLmVtaXQoXCJjb25uZWN0XCIsZSkpOnIoKTt9KSxzKCk7fTtyKCk7fV9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSgpe2lmKCF0aGlzLl9zdG9yZVByb2Nlc3NpbmcmJnRoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLmxlbmd0aD4wKXtsZXQgZT10aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZVswXTtpZihlJiZlLmludm9rZSgpKXJldHVybiB0aGlzLl9zdG9yZVByb2Nlc3NpbmdRdWV1ZS5zaGlmdCgpLCEwfXJldHVybiAhMX1faW52b2tlQWxsU3RvcmVQcm9jZXNzaW5nUXVldWUoKXtmb3IoO3RoaXMuX2ludm9rZVN0b3JlUHJvY2Vzc2luZ1F1ZXVlKCk7KTt9X2ZsdXNoU3RvcmVQcm9jZXNzaW5nUXVldWUoKXtmb3IobGV0IGUgb2YgdGhpcy5fc3RvcmVQcm9jZXNzaW5nUXVldWUpZS5jYlN0b3JlUHV0JiZlLmNiU3RvcmVQdXQobmV3IEVycm9yKFwiQ29ubmVjdGlvbiBjbG9zZWRcIikpLGUuY2FsbGJhY2smJmUuY2FsbGJhY2sobmV3IEVycm9yKFwiQ29ubmVjdGlvbiBjbG9zZWRcIikpO3RoaXMuX3N0b3JlUHJvY2Vzc2luZ1F1ZXVlLnNwbGljZSgwKTt9X3JlbW92ZU91dGdvaW5nQW5kU3RvcmVNZXNzYWdlKGUscil7ZGVsZXRlIHRoaXMub3V0Z29pbmdbZV0sdGhpcy5vdXRnb2luZ1N0b3JlLmRlbCh7bWVzc2FnZUlkOmV9LChpLG4pPT57cihpLG4pLHRoaXMubWVzc2FnZUlkUHJvdmlkZXIuZGVhbGxvY2F0ZShlKSx0aGlzLl9pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSgpO30pO319O2lzLlZFUlNJT049XCI1LjUuMlwiO1FlLmRlZmF1bHQ9aXM7fSk7dmFyICRwPU0oSGE9Pnt2KCk7bSgpO18oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoSGEsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFp2PXhhKCksJGE9Y2xhc3N7Y29uc3RydWN0b3IoKXt0aGlzLm51bWJlckFsbG9jYXRvcj1uZXcgWnYuTnVtYmVyQWxsb2NhdG9yKDEsNjU1MzUpO31hbGxvY2F0ZSgpe3JldHVybiB0aGlzLmxhc3RJZD10aGlzLm51bWJlckFsbG9jYXRvci5hbGxvYygpLHRoaXMubGFzdElkfWdldExhc3RBbGxvY2F0ZWQoKXtyZXR1cm4gdGhpcy5sYXN0SWR9cmVnaXN0ZXIoZSl7cmV0dXJuIHRoaXMubnVtYmVyQWxsb2NhdG9yLnVzZShlKX1kZWFsbG9jYXRlKGUpe3RoaXMubnVtYmVyQWxsb2NhdG9yLmZyZWUoZSk7fWNsZWFyKCl7dGhpcy5udW1iZXJBbGxvY2F0b3IuY2xlYXIoKTt9fTtIYS5kZWZhdWx0PSRhO30pO2Z1bmN0aW9uIElyKHQpe3Rocm93IG5ldyBSYW5nZUVycm9yKGlFW3RdKX1mdW5jdGlvbiBIcCh0LGUpe2xldCByPXQuc3BsaXQoXCJAXCIpLGk9XCJcIjtyLmxlbmd0aD4xJiYoaT1yWzBdK1wiQFwiLHQ9clsxXSk7bGV0IG49ZnVuY3Rpb24obyxzKXtsZXQgYT1bXSx1PW8ubGVuZ3RoO2Zvcig7dS0tOylhW3VdPXMob1t1XSk7cmV0dXJuIGF9KCh0PXQucmVwbGFjZShyRSxcIi5cIikpLnNwbGl0KFwiLlwiKSxlKS5qb2luKFwiLlwiKTtyZXR1cm4gaStufWZ1bmN0aW9uIEdwKHQpe2xldCBlPVtdLHI9MCxpPXQubGVuZ3RoO2Zvcig7cjxpOyl7bGV0IG49dC5jaGFyQ29kZUF0KHIrKyk7aWYobj49NTUyOTYmJm48PTU2MzE5JiZyPGkpe2xldCBvPXQuY2hhckNvZGVBdChyKyspOyg2NDUxMiZvKT09NTYzMjA/ZS5wdXNoKCgoMTAyMyZuKTw8MTApKygxMDIzJm8pKzY1NTM2KTooZS5wdXNoKG4pLHItLSk7fWVsc2UgZS5wdXNoKG4pO31yZXR1cm4gZX12YXIgZUUsdEUsckUsaUUsaHQsVmEsVnAsUXAsenAsS3AsenQsWXA9d2UoKCk9Pnt2KCk7bSgpO18oKTtlRT0vXnhuLS0vLHRFPS9bXlxcMC1cXHg3RV0vLHJFPS9bXFx4MkVcXHUzMDAyXFx1RkYwRVxcdUZGNjFdL2csaUU9e292ZXJmbG93OlwiT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3NcIixcIm5vdC1iYXNpY1wiOlwiSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KVwiLFwiaW52YWxpZC1pbnB1dFwiOlwiSW52YWxpZCBpbnB1dFwifSxodD1NYXRoLmZsb29yLFZhPVN0cmluZy5mcm9tQ2hhckNvZGU7VnA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCsyMis3NSoodDwyNiktKChlIT0wKTw8NSl9LFFwPWZ1bmN0aW9uKHQsZSxyKXtsZXQgaT0wO2Zvcih0PXI/aHQodC83MDApOnQ+PjEsdCs9aHQodC9lKTt0PjQ1NTtpKz0zNil0PWh0KHQvMzUpO3JldHVybiBodChpKzM2KnQvKHQrMzgpKX0senA9ZnVuY3Rpb24odCl7bGV0IGU9W10scj10Lmxlbmd0aCxpPTAsbj0xMjgsbz03MixzPXQubGFzdEluZGV4T2YoXCItXCIpO3M8MCYmKHM9MCk7Zm9yKGxldCB1PTA7dTxzOysrdSl0LmNoYXJDb2RlQXQodSk+PTEyOCYmSXIoXCJub3QtYmFzaWNcIiksZS5wdXNoKHQuY2hhckNvZGVBdCh1KSk7Zm9yKGxldCB1PXM+MD9zKzE6MDt1PHI7KXtsZXQgYz1pO2ZvcihsZXQgZD0xLGc9MzY7O2crPTM2KXt1Pj1yJiZJcihcImludmFsaWQtaW5wdXRcIik7bGV0IHk9KGE9dC5jaGFyQ29kZUF0KHUrKykpLTQ4PDEwP2EtMjI6YS02NTwyNj9hLTY1OmEtOTc8MjY/YS05NzozNjsoeT49MzZ8fHk+aHQoKDIxNDc0ODM2NDctaSkvZCkpJiZJcihcIm92ZXJmbG93XCIpLGkrPXkqZDtsZXQgdz1nPD1vPzE6Zz49bysyNj8yNjpnLW87aWYoeTx3KWJyZWFrO2xldCBFPTM2LXc7ZD5odCgyMTQ3NDgzNjQ3L0UpJiZJcihcIm92ZXJmbG93XCIpLGQqPUU7fWxldCBoPWUubGVuZ3RoKzE7bz1RcChpLWMsaCxjPT0wKSxodChpL2gpPjIxNDc0ODM2NDctbiYmSXIoXCJvdmVyZmxvd1wiKSxuKz1odChpL2gpLGklPWgsZS5zcGxpY2UoaSsrLDAsbik7fXZhciBhO3JldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5lKX0sS3A9ZnVuY3Rpb24odCl7bGV0IGU9W10scj0odD1HcCh0KSkubGVuZ3RoLGk9MTI4LG49MCxvPTcyO2ZvcihsZXQgdSBvZiB0KXU8MTI4JiZlLnB1c2goVmEodSkpO2xldCBzPWUubGVuZ3RoLGE9cztmb3IocyYmZS5wdXNoKFwiLVwiKTthPHI7KXtsZXQgdT0yMTQ3NDgzNjQ3O2ZvcihsZXQgaCBvZiB0KWg+PWkmJmg8dSYmKHU9aCk7bGV0IGM9YSsxO3UtaT5odCgoMjE0NzQ4MzY0Ny1uKS9jKSYmSXIoXCJvdmVyZmxvd1wiKSxuKz0odS1pKSpjLGk9dTtmb3IobGV0IGggb2YgdClpZihoPGkmJisrbj4yMTQ3NDgzNjQ3JiZJcihcIm92ZXJmbG93XCIpLGg9PWkpe2xldCBkPW47Zm9yKGxldCBnPTM2OztnKz0zNil7bGV0IHk9Zzw9bz8xOmc+PW8rMjY/MjY6Zy1vO2lmKGQ8eSlicmVhaztsZXQgdz1kLXksRT0zNi15O2UucHVzaChWYShWcCh5K3clRSwwKSkpLGQ9aHQody9FKTt9ZS5wdXNoKFZhKFZwKGQsMCkpKSxvPVFwKG4sYyxhPT1zKSxuPTAsKythO30rK24sKytpO31yZXR1cm4gZS5qb2luKFwiXCIpfSx6dD17dmVyc2lvbjpcIjIuMS4wXCIsdWNzMjp7ZGVjb2RlOkdwLGVuY29kZTp0PT5TdHJpbmcuZnJvbUNvZGVQb2ludCguLi50KX0sZGVjb2RlOnpwLGVuY29kZTpLcCx0b0FTQ0lJOmZ1bmN0aW9uKHQpe3JldHVybiBIcCh0LGZ1bmN0aW9uKGUpe3JldHVybiB0RS50ZXN0KGUpP1wieG4tLVwiK0twKGUpOmV9KX0sdG9Vbmljb2RlOmZ1bmN0aW9uKHQpe3JldHVybiBIcCh0LGZ1bmN0aW9uKGUpe3JldHVybiBlRS50ZXN0KGUpP3pwKGUuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSk6ZX0pfX07enQuZGVjb2RlO3p0LmVuY29kZTt6dC50b0FTQ0lJO3p0LnRvVW5pY29kZTt6dC51Y3MyO3p0LnZlcnNpb247fSk7ZnVuY3Rpb24gbkUodCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9dmFyIHNFLGtpLG9FLGR0LEpwPXdlKCgpPT57digpO20oKTtfKCk7c0U9ZnVuY3Rpb24odCxlLHIsaSl7ZT1lfHxcIiZcIixyPXJ8fFwiPVwiO3ZhciBuPXt9O2lmKHR5cGVvZiB0IT1cInN0cmluZ1wifHx0Lmxlbmd0aD09PTApcmV0dXJuIG47dmFyIG89L1xcKy9nO3Q9dC5zcGxpdChlKTt2YXIgcz0xZTM7aSYmdHlwZW9mIGkubWF4S2V5cz09XCJudW1iZXJcIiYmKHM9aS5tYXhLZXlzKTt2YXIgYT10Lmxlbmd0aDtzPjAmJmE+cyYmKGE9cyk7Zm9yKHZhciB1PTA7dTxhOysrdSl7dmFyIGMsaCxkLGcseT10W3VdLnJlcGxhY2UobyxcIiUyMFwiKSx3PXkuaW5kZXhPZihyKTt3Pj0wPyhjPXkuc3Vic3RyKDAsdyksaD15LnN1YnN0cih3KzEpKTooYz15LGg9XCJcIiksZD1kZWNvZGVVUklDb21wb25lbnQoYyksZz1kZWNvZGVVUklDb21wb25lbnQoaCksbkUobixkKT9BcnJheS5pc0FycmF5KG5bZF0pP25bZF0ucHVzaChnKTpuW2RdPVtuW2RdLGddOm5bZF09Zzt9cmV0dXJuIG59LGtpPWZ1bmN0aW9uKHQpe3N3aXRjaCh0eXBlb2YgdCl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIHQ7Y2FzZVwiYm9vbGVhblwiOnJldHVybiB0P1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUodCk/dDpcIlwiO2RlZmF1bHQ6cmV0dXJuIFwiXCJ9fSxvRT1mdW5jdGlvbih0LGUscixpKXtyZXR1cm4gZT1lfHxcIiZcIixyPXJ8fFwiPVwiLHQ9PT1udWxsJiYodD12b2lkIDApLHR5cGVvZiB0PT1cIm9iamVjdFwiP09iamVjdC5rZXlzKHQpLm1hcChmdW5jdGlvbihuKXt2YXIgbz1lbmNvZGVVUklDb21wb25lbnQoa2kobikpK3I7cmV0dXJuIEFycmF5LmlzQXJyYXkodFtuXSk/dFtuXS5tYXAoZnVuY3Rpb24ocyl7cmV0dXJuIG8rZW5jb2RlVVJJQ29tcG9uZW50KGtpKHMpKX0pLmpvaW4oZSk6bytlbmNvZGVVUklDb21wb25lbnQoa2kodFtuXSkpfSkuam9pbihlKTppP2VuY29kZVVSSUNvbXBvbmVudChraShpKSkrcitlbmNvZGVVUklDb21wb25lbnQoa2kodCkpOlwiXCJ9LGR0PXt9O2R0LmRlY29kZT1kdC5wYXJzZT1zRSxkdC5lbmNvZGU9ZHQuc3RyaW5naWZ5PW9FO2R0LmRlY29kZTtkdC5lbmNvZGU7ZHQucGFyc2U7ZHQuc3RyaW5naWZ5O30pO2Z1bmN0aW9uIHphKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBLYSgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBlZyh0KXtpZihCdD09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQodCwwKTtpZigoQnQ9PT16YXx8IUJ0KSYmc2V0VGltZW91dClyZXR1cm4gQnQ9c2V0VGltZW91dCxzZXRUaW1lb3V0KHQsMCk7dHJ5e3JldHVybiBCdCh0LDApfWNhdGNoe3RyeXtyZXR1cm4gQnQuY2FsbChudWxsLHQsMCl9Y2F0Y2h7cmV0dXJuIEJ0LmNhbGwodGhpc3x8aWksdCwwKX19fWZ1bmN0aW9uIGFFKCl7cmkmJlRyJiYocmk9ITEsVHIubGVuZ3RoP090PVRyLmNvbmNhdChPdCk6c3M9LTEsT3QubGVuZ3RoJiZ0ZygpKTt9ZnVuY3Rpb24gdGcoKXtpZighcmkpe3ZhciB0PWVnKGFFKTtyaT0hMDtmb3IodmFyIGU9T3QubGVuZ3RoO2U7KXtmb3IoVHI9T3QsT3Q9W107KytzczxlOylUciYmVHJbc3NdLnJ1bigpO3NzPS0xLGU9T3QubGVuZ3RoO31Ucj1udWxsLHJpPSExLGZ1bmN0aW9uKHIpe2lmKFB0PT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQocik7aWYoKFB0PT09S2F8fCFQdCkmJmNsZWFyVGltZW91dClyZXR1cm4gUHQ9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dChyKTt0cnl7UHQocik7fWNhdGNoe3RyeXtyZXR1cm4gUHQuY2FsbChudWxsLHIpfWNhdGNoe3JldHVybiBQdC5jYWxsKHRoaXN8fGlpLHIpfX19KHQpO319ZnVuY3Rpb24gWHAodCxlKXsodGhpc3x8aWkpLmZ1bj10LCh0aGlzfHxpaSkuYXJyYXk9ZTt9ZnVuY3Rpb24gQ3QoKXt9dmFyIFpwLEJ0LFB0LGlpLGZlLFRyLE90LHJpLHNzLG5lLHJnPXdlKCgpPT57digpO20oKTtfKCk7aWk9dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczp0eXBlb2Ygc2VsZjxcInVcIj9zZWxmOmdsb2JhbCxmZT1acD17fTsoZnVuY3Rpb24oKXt0cnl7QnQ9dHlwZW9mIHNldFRpbWVvdXQ9PVwiZnVuY3Rpb25cIj9zZXRUaW1lb3V0OnphO31jYXRjaHtCdD16YTt9dHJ5e1B0PXR5cGVvZiBjbGVhclRpbWVvdXQ9PVwiZnVuY3Rpb25cIj9jbGVhclRpbWVvdXQ6S2E7fWNhdGNoe1B0PUthO319KSgpO090PVtdLHJpPSExLHNzPS0xO2ZlLm5leHRUaWNrPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKWVbci0xXT1hcmd1bWVudHNbcl07T3QucHVzaChuZXcgWHAodCxlKSksT3QubGVuZ3RoIT09MXx8cml8fGVnKHRnKTt9LFhwLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXsodGhpc3x8aWkpLmZ1bi5hcHBseShudWxsLCh0aGlzfHxpaSkuYXJyYXkpO30sZmUudGl0bGU9XCJicm93c2VyXCIsZmUuYnJvd3Nlcj0hMCxmZS5lbnY9e30sZmUuYXJndj1bXSxmZS52ZXJzaW9uPVwiXCIsZmUudmVyc2lvbnM9e30sZmUub249Q3QsZmUuYWRkTGlzdGVuZXI9Q3QsZmUub25jZT1DdCxmZS5vZmY9Q3QsZmUucmVtb3ZlTGlzdGVuZXI9Q3QsZmUucmVtb3ZlQWxsTGlzdGVuZXJzPUN0LGZlLmVtaXQ9Q3QsZmUucHJlcGVuZExpc3RlbmVyPUN0LGZlLnByZXBlbmRPbmNlTGlzdGVuZXI9Q3QsZmUubGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybiBbXX0sZmUuYmluZGluZz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX0sZmUuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuIFwiL1wifSxmZS5jaGRpcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LGZlLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9O25lPVpwO25lLmFkZExpc3RlbmVyO25lLmFyZ3Y7bmUuYmluZGluZztuZS5icm93c2VyO25lLmNoZGlyO25lLmN3ZDtuZS5lbWl0O25lLmVudjtuZS5saXN0ZW5lcnM7bmUubmV4dFRpY2s7bmUub2ZmO25lLm9uO25lLm9uY2U7bmUucHJlcGVuZExpc3RlbmVyO25lLnByZXBlbmRPbmNlTGlzdGVuZXI7bmUucmVtb3ZlQWxsTGlzdGVuZXJzO25lLnJlbW92ZUxpc3RlbmVyO25lLnRpdGxlO25lLnVtYXNrO25lLnZlcnNpb247bmUudmVyc2lvbnM7fSk7ZnVuY3Rpb24gbEUoKXtpZihpZylyZXR1cm4gR2E7aWc9ITA7dmFyIHQ9R2E9e30sZSxyO2Z1bmN0aW9uIGkoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIG4oKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e3R5cGVvZiBzZXRUaW1lb3V0PT1cImZ1bmN0aW9uXCI/ZT1zZXRUaW1lb3V0OmU9aTt9Y2F0Y2h7ZT1pO310cnl7dHlwZW9mIGNsZWFyVGltZW91dD09XCJmdW5jdGlvblwiP3I9Y2xlYXJUaW1lb3V0OnI9bjt9Y2F0Y2h7cj1uO319KSgpO2Z1bmN0aW9uIG8oRSl7aWYoZT09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoRSwwKTtpZigoZT09PWl8fCFlKSYmc2V0VGltZW91dClyZXR1cm4gZT1zZXRUaW1lb3V0LHNldFRpbWVvdXQoRSwwKTt0cnl7cmV0dXJuIGUoRSwwKX1jYXRjaHt0cnl7cmV0dXJuIGUuY2FsbChudWxsLEUsMCl9Y2F0Y2h7cmV0dXJuIGUuY2FsbCh0aGlzfHxuaSxFLDApfX19ZnVuY3Rpb24gcyhFKXtpZihyPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoRSk7aWYoKHI9PT1ufHwhcikmJmNsZWFyVGltZW91dClyZXR1cm4gcj1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KEUpO3RyeXtyZXR1cm4gcihFKX1jYXRjaHt0cnl7cmV0dXJuIHIuY2FsbChudWxsLEUpfWNhdGNoe3JldHVybiByLmNhbGwodGhpc3x8bmksRSl9fX12YXIgYT1bXSx1PSExLGMsaD0tMTtmdW5jdGlvbiBkKCl7IXV8fCFjfHwodT0hMSxjLmxlbmd0aD9hPWMuY29uY2F0KGEpOmg9LTEsYS5sZW5ndGgmJmcoKSk7fWZ1bmN0aW9uIGcoKXtpZighdSl7dmFyIEU9byhkKTt1PSEwO2Zvcih2YXIgUz1hLmxlbmd0aDtTOyl7Zm9yKGM9YSxhPVtdOysraDxTOyljJiZjW2hdLnJ1bigpO2g9LTEsUz1hLmxlbmd0aDt9Yz1udWxsLHU9ITEscyhFKTt9fXQubmV4dFRpY2s9ZnVuY3Rpb24oRSl7dmFyIFM9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgST0xO0k8YXJndW1lbnRzLmxlbmd0aDtJKyspU1tJLTFdPWFyZ3VtZW50c1tJXTthLnB1c2gobmV3IHkoRSxTKSksYS5sZW5ndGg9PT0xJiYhdSYmbyhnKTt9O2Z1bmN0aW9uIHkoRSxTKXsodGhpc3x8bmkpLmZ1bj1FLCh0aGlzfHxuaSkuYXJyYXk9Uzt9eS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7KHRoaXN8fG5pKS5mdW4uYXBwbHkobnVsbCwodGhpc3x8bmkpLmFycmF5KTt9LHQudGl0bGU9XCJicm93c2VyXCIsdC5icm93c2VyPSEwLHQuZW52PXt9LHQuYXJndj1bXSx0LnZlcnNpb249XCJcIix0LnZlcnNpb25zPXt9O2Z1bmN0aW9uIHcoKXt9cmV0dXJuIHQub249dyx0LmFkZExpc3RlbmVyPXcsdC5vbmNlPXcsdC5vZmY9dyx0LnJlbW92ZUxpc3RlbmVyPXcsdC5yZW1vdmVBbGxMaXN0ZW5lcnM9dyx0LmVtaXQ9dyx0LnByZXBlbmRMaXN0ZW5lcj13LHQucHJlcGVuZE9uY2VMaXN0ZW5lcj13LHQubGlzdGVuZXJzPWZ1bmN0aW9uKEUpe3JldHVybiBbXX0sdC5iaW5kaW5nPWZ1bmN0aW9uKEUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSx0LmN3ZD1mdW5jdGlvbigpe3JldHVybiBcIi9cIn0sdC5jaGRpcj1mdW5jdGlvbihFKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHQudW1hc2s9ZnVuY3Rpb24oKXtyZXR1cm4gMH0sR2F9dmFyIEdhLGlnLG5pLHJlLFFhPXdlKCgpPT57digpO20oKTtfKCk7R2E9e30saWc9ITEsbmk9dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczp0eXBlb2Ygc2VsZjxcInVcIj9zZWxmOmdsb2JhbDtyZT1sRSgpO3JlLnBsYXRmb3JtPVwiYnJvd3NlclwiO3JlLmFkZExpc3RlbmVyO3JlLmFyZ3Y7cmUuYmluZGluZztyZS5icm93c2VyO3JlLmNoZGlyO3JlLmN3ZDtyZS5lbWl0O3JlLmVudjtyZS5saXN0ZW5lcnM7cmUubmV4dFRpY2s7cmUub2ZmO3JlLm9uO3JlLm9uY2U7cmUucHJlcGVuZExpc3RlbmVyO3JlLnByZXBlbmRPbmNlTGlzdGVuZXI7cmUucmVtb3ZlQWxsTGlzdGVuZXJzO3JlLnJlbW92ZUxpc3RlbmVyO3JlLnRpdGxlO3JlLnVtYXNrO3JlLnZlcnNpb247cmUudmVyc2lvbnM7fSk7ZnVuY3Rpb24gdUUoKXtpZihuZylyZXR1cm4gWWE7bmc9ITA7dmFyIHQ9cmU7ZnVuY3Rpb24gZShvKXtpZih0eXBlb2YgbyE9XCJzdHJpbmdcIil0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGF0aCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCBcIitKU09OLnN0cmluZ2lmeShvKSl9ZnVuY3Rpb24gcihvLHMpe2Zvcih2YXIgYT1cIlwiLHU9MCxjPS0xLGg9MCxkLGc9MDtnPD1vLmxlbmd0aDsrK2cpe2lmKGc8by5sZW5ndGgpZD1vLmNoYXJDb2RlQXQoZyk7ZWxzZSB7aWYoZD09PTQ3KWJyZWFrO2Q9NDc7fWlmKGQ9PT00Nyl7aWYoIShjPT09Zy0xfHxoPT09MSkpaWYoYyE9PWctMSYmaD09PTIpe2lmKGEubGVuZ3RoPDJ8fHUhPT0yfHxhLmNoYXJDb2RlQXQoYS5sZW5ndGgtMSkhPT00Nnx8YS5jaGFyQ29kZUF0KGEubGVuZ3RoLTIpIT09NDYpe2lmKGEubGVuZ3RoPjIpe3ZhciB5PWEubGFzdEluZGV4T2YoXCIvXCIpO2lmKHkhPT1hLmxlbmd0aC0xKXt5PT09LTE/KGE9XCJcIix1PTApOihhPWEuc2xpY2UoMCx5KSx1PWEubGVuZ3RoLTEtYS5sYXN0SW5kZXhPZihcIi9cIikpLGM9ZyxoPTA7Y29udGludWV9fWVsc2UgaWYoYS5sZW5ndGg9PT0yfHxhLmxlbmd0aD09PTEpe2E9XCJcIix1PTAsYz1nLGg9MDtjb250aW51ZX19cyYmKGEubGVuZ3RoPjA/YSs9XCIvLi5cIjphPVwiLi5cIix1PTIpO31lbHNlIGEubGVuZ3RoPjA/YSs9XCIvXCIrby5zbGljZShjKzEsZyk6YT1vLnNsaWNlKGMrMSxnKSx1PWctYy0xO2M9ZyxoPTA7fWVsc2UgZD09PTQ2JiZoIT09LTE/KytoOmg9LTE7fXJldHVybiBhfWZ1bmN0aW9uIGkobyxzKXt2YXIgYT1zLmRpcnx8cy5yb290LHU9cy5iYXNlfHwocy5uYW1lfHxcIlwiKSsocy5leHR8fFwiXCIpO3JldHVybiBhP2E9PT1zLnJvb3Q/YSt1OmErbyt1OnV9dmFyIG49e3Jlc29sdmU6ZnVuY3Rpb24oKXtmb3IodmFyIHM9XCJcIixhPSExLHUsYz1hcmd1bWVudHMubGVuZ3RoLTE7Yz49LTEmJiFhO2MtLSl7dmFyIGg7Yz49MD9oPWFyZ3VtZW50c1tjXToodT09PXZvaWQgMCYmKHU9dC5jd2QoKSksaD11KSxlKGgpLGgubGVuZ3RoIT09MCYmKHM9aCtcIi9cIitzLGE9aC5jaGFyQ29kZUF0KDApPT09NDcpO31yZXR1cm4gcz1yKHMsIWEpLGE/cy5sZW5ndGg+MD9cIi9cIitzOlwiL1wiOnMubGVuZ3RoPjA/czpcIi5cIn0sbm9ybWFsaXplOmZ1bmN0aW9uKHMpe2lmKGUocykscy5sZW5ndGg9PT0wKXJldHVybiBcIi5cIjt2YXIgYT1zLmNoYXJDb2RlQXQoMCk9PT00Nyx1PXMuY2hhckNvZGVBdChzLmxlbmd0aC0xKT09PTQ3O3JldHVybiBzPXIocywhYSkscy5sZW5ndGg9PT0wJiYhYSYmKHM9XCIuXCIpLHMubGVuZ3RoPjAmJnUmJihzKz1cIi9cIiksYT9cIi9cIitzOnN9LGlzQWJzb2x1dGU6ZnVuY3Rpb24ocyl7cmV0dXJuIGUocykscy5sZW5ndGg+MCYmcy5jaGFyQ29kZUF0KDApPT09NDd9LGpvaW46ZnVuY3Rpb24oKXtpZihhcmd1bWVudHMubGVuZ3RoPT09MClyZXR1cm4gXCIuXCI7Zm9yKHZhciBzLGE9MDthPGFyZ3VtZW50cy5sZW5ndGg7KythKXt2YXIgdT1hcmd1bWVudHNbYV07ZSh1KSx1Lmxlbmd0aD4wJiYocz09PXZvaWQgMD9zPXU6cys9XCIvXCIrdSk7fXJldHVybiBzPT09dm9pZCAwP1wiLlwiOm4ubm9ybWFsaXplKHMpfSxyZWxhdGl2ZTpmdW5jdGlvbihzLGEpe2lmKGUocyksZShhKSxzPT09YXx8KHM9bi5yZXNvbHZlKHMpLGE9bi5yZXNvbHZlKGEpLHM9PT1hKSlyZXR1cm4gXCJcIjtmb3IodmFyIHU9MTt1PHMubGVuZ3RoJiZzLmNoYXJDb2RlQXQodSk9PT00NzsrK3UpO2Zvcih2YXIgYz1zLmxlbmd0aCxoPWMtdSxkPTE7ZDxhLmxlbmd0aCYmYS5jaGFyQ29kZUF0KGQpPT09NDc7KytkKTtmb3IodmFyIGc9YS5sZW5ndGgseT1nLWQsdz1oPHk/aDp5LEU9LTEsUz0wO1M8PXc7KytTKXtpZihTPT09dyl7aWYoeT53KXtpZihhLmNoYXJDb2RlQXQoZCtTKT09PTQ3KXJldHVybiBhLnNsaWNlKGQrUysxKTtpZihTPT09MClyZXR1cm4gYS5zbGljZShkK1MpfWVsc2UgaD53JiYocy5jaGFyQ29kZUF0KHUrUyk9PT00Nz9FPVM6Uz09PTAmJihFPTApKTticmVha312YXIgST1zLmNoYXJDb2RlQXQodStTKSxDPWEuY2hhckNvZGVBdChkK1MpO2lmKEkhPT1DKWJyZWFrO0k9PT00NyYmKEU9Uyk7fXZhciBSPVwiXCI7Zm9yKFM9dStFKzE7Uzw9YzsrK1MpKFM9PT1jfHxzLmNoYXJDb2RlQXQoUyk9PT00NykmJihSLmxlbmd0aD09PTA/Uis9XCIuLlwiOlIrPVwiLy4uXCIpO3JldHVybiBSLmxlbmd0aD4wP1IrYS5zbGljZShkK0UpOihkKz1FLGEuY2hhckNvZGVBdChkKT09PTQ3JiYrK2QsYS5zbGljZShkKSl9LF9tYWtlTG9uZzpmdW5jdGlvbihzKXtyZXR1cm4gc30sZGlybmFtZTpmdW5jdGlvbihzKXtpZihlKHMpLHMubGVuZ3RoPT09MClyZXR1cm4gXCIuXCI7Zm9yKHZhciBhPXMuY2hhckNvZGVBdCgwKSx1PWE9PT00NyxjPS0xLGg9ITAsZD1zLmxlbmd0aC0xO2Q+PTE7LS1kKWlmKGE9cy5jaGFyQ29kZUF0KGQpLGE9PT00Nyl7aWYoIWgpe2M9ZDticmVha319ZWxzZSBoPSExO3JldHVybiBjPT09LTE/dT9cIi9cIjpcIi5cIjp1JiZjPT09MT9cIi8vXCI6cy5zbGljZSgwLGMpfSxiYXNlbmFtZTpmdW5jdGlvbihzLGEpe2lmKGEhPT12b2lkIDAmJnR5cGVvZiBhIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZXh0XCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO2Uocyk7dmFyIHU9MCxjPS0xLGg9ITAsZDtpZihhIT09dm9pZCAwJiZhLmxlbmd0aD4wJiZhLmxlbmd0aDw9cy5sZW5ndGgpe2lmKGEubGVuZ3RoPT09cy5sZW5ndGgmJmE9PT1zKXJldHVybiBcIlwiO3ZhciBnPWEubGVuZ3RoLTEseT0tMTtmb3IoZD1zLmxlbmd0aC0xO2Q+PTA7LS1kKXt2YXIgdz1zLmNoYXJDb2RlQXQoZCk7aWYodz09PTQ3KXtpZighaCl7dT1kKzE7YnJlYWt9fWVsc2UgeT09PS0xJiYoaD0hMSx5PWQrMSksZz49MCYmKHc9PT1hLmNoYXJDb2RlQXQoZyk/LS1nPT09LTEmJihjPWQpOihnPS0xLGM9eSkpO31yZXR1cm4gdT09PWM/Yz15OmM9PT0tMSYmKGM9cy5sZW5ndGgpLHMuc2xpY2UodSxjKX1lbHNlIHtmb3IoZD1zLmxlbmd0aC0xO2Q+PTA7LS1kKWlmKHMuY2hhckNvZGVBdChkKT09PTQ3KXtpZighaCl7dT1kKzE7YnJlYWt9fWVsc2UgYz09PS0xJiYoaD0hMSxjPWQrMSk7cmV0dXJuIGM9PT0tMT9cIlwiOnMuc2xpY2UodSxjKX19LGV4dG5hbWU6ZnVuY3Rpb24ocyl7ZShzKTtmb3IodmFyIGE9LTEsdT0wLGM9LTEsaD0hMCxkPTAsZz1zLmxlbmd0aC0xO2c+PTA7LS1nKXt2YXIgeT1zLmNoYXJDb2RlQXQoZyk7aWYoeT09PTQ3KXtpZighaCl7dT1nKzE7YnJlYWt9Y29udGludWV9Yz09PS0xJiYoaD0hMSxjPWcrMSkseT09PTQ2P2E9PT0tMT9hPWc6ZCE9PTEmJihkPTEpOmEhPT0tMSYmKGQ9LTEpO31yZXR1cm4gYT09PS0xfHxjPT09LTF8fGQ9PT0wfHxkPT09MSYmYT09PWMtMSYmYT09PXUrMT9cIlwiOnMuc2xpY2UoYSxjKX0sZm9ybWF0OmZ1bmN0aW9uKHMpe2lmKHM9PT1udWxsfHx0eXBlb2YgcyE9XCJvYmplY3RcIil0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJwYXRoT2JqZWN0XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBzKTtyZXR1cm4gaShcIi9cIixzKX0scGFyc2U6ZnVuY3Rpb24ocyl7ZShzKTt2YXIgYT17cm9vdDpcIlwiLGRpcjpcIlwiLGJhc2U6XCJcIixleHQ6XCJcIixuYW1lOlwiXCJ9O2lmKHMubGVuZ3RoPT09MClyZXR1cm4gYTt2YXIgdT1zLmNoYXJDb2RlQXQoMCksYz11PT09NDcsaDtjPyhhLnJvb3Q9XCIvXCIsaD0xKTpoPTA7Zm9yKHZhciBkPS0xLGc9MCx5PS0xLHc9ITAsRT1zLmxlbmd0aC0xLFM9MDtFPj1oOy0tRSl7aWYodT1zLmNoYXJDb2RlQXQoRSksdT09PTQ3KXtpZighdyl7Zz1FKzE7YnJlYWt9Y29udGludWV9eT09PS0xJiYodz0hMSx5PUUrMSksdT09PTQ2P2Q9PT0tMT9kPUU6UyE9PTEmJihTPTEpOmQhPT0tMSYmKFM9LTEpO31yZXR1cm4gZD09PS0xfHx5PT09LTF8fFM9PT0wfHxTPT09MSYmZD09PXktMSYmZD09PWcrMT95IT09LTEmJihnPT09MCYmYz9hLmJhc2U9YS5uYW1lPXMuc2xpY2UoMSx5KTphLmJhc2U9YS5uYW1lPXMuc2xpY2UoZyx5KSk6KGc9PT0wJiZjPyhhLm5hbWU9cy5zbGljZSgxLGQpLGEuYmFzZT1zLnNsaWNlKDEseSkpOihhLm5hbWU9cy5zbGljZShnLGQpLGEuYmFzZT1zLnNsaWNlKGcseSkpLGEuZXh0PXMuc2xpY2UoZCx5KSksZz4wP2EuZGlyPXMuc2xpY2UoMCxnLTEpOmMmJihhLmRpcj1cIi9cIiksYX0sc2VwOlwiL1wiLGRlbGltaXRlcjpcIjpcIix3aW4zMjpudWxsLHBvc2l4Om51bGx9O3JldHVybiBuLnBvc2l4PW4sWWE9bixZYX12YXIgWWEsbmcsSmEsc2c9d2UoKCk9Pnt2KCk7bSgpO18oKTtRYSgpO1lhPXt9LG5nPSExO0phPXVFKCk7fSk7dmFyIGRnPXt9O1F0KGRnLHtVUkw6KCk9PkRFLFVybDooKT0+TUUsZGVmYXVsdDooKT0+WixmaWxlVVJMVG9QYXRoOigpPT5jZyxmb3JtYXQ6KCk9PkxFLHBhcnNlOigpPT5xRSxwYXRoVG9GaWxlVVJMOigpPT5oZyxyZXNvbHZlOigpPT5VRSxyZXNvbHZlT2JqZWN0OigpPT5ORX0pO2Z1bmN0aW9uIEZlKCl7dGhpcy5wcm90b2NvbD1udWxsLHRoaXMuc2xhc2hlcz1udWxsLHRoaXMuYXV0aD1udWxsLHRoaXMuaG9zdD1udWxsLHRoaXMucG9ydD1udWxsLHRoaXMuaG9zdG5hbWU9bnVsbCx0aGlzLmhhc2g9bnVsbCx0aGlzLnNlYXJjaD1udWxsLHRoaXMucXVlcnk9bnVsbCx0aGlzLnBhdGhuYW1lPW51bGwsdGhpcy5wYXRoPW51bGwsdGhpcy5ocmVmPW51bGw7fWZ1bmN0aW9uIHhpKHQsZSxyKXtpZih0JiZwdC5pc09iamVjdCh0KSYmdCBpbnN0YW5jZW9mIEZlKXJldHVybiB0O3ZhciBpPW5ldyBGZTtyZXR1cm4gaS5wYXJzZSh0LGUsciksaX1mdW5jdGlvbiBiRSgpe2lmKHVnKXJldHVybiBlbDt1Zz0hMDt2YXIgdD1uZTtmdW5jdGlvbiBlKG8pe2lmKHR5cGVvZiBvIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXRoIG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkIFwiK0pTT04uc3RyaW5naWZ5KG8pKX1mdW5jdGlvbiByKG8scyl7Zm9yKHZhciBhPVwiXCIsdT0wLGM9LTEsaD0wLGQsZz0wO2c8PW8ubGVuZ3RoOysrZyl7aWYoZzxvLmxlbmd0aClkPW8uY2hhckNvZGVBdChnKTtlbHNlIHtpZihkPT09NDcpYnJlYWs7ZD00Nzt9aWYoZD09PTQ3KXtpZighKGM9PT1nLTF8fGg9PT0xKSlpZihjIT09Zy0xJiZoPT09Mil7aWYoYS5sZW5ndGg8Mnx8dSE9PTJ8fGEuY2hhckNvZGVBdChhLmxlbmd0aC0xKSE9PTQ2fHxhLmNoYXJDb2RlQXQoYS5sZW5ndGgtMikhPT00Nil7aWYoYS5sZW5ndGg+Mil7dmFyIHk9YS5sYXN0SW5kZXhPZihcIi9cIik7aWYoeSE9PWEubGVuZ3RoLTEpe3k9PT0tMT8oYT1cIlwiLHU9MCk6KGE9YS5zbGljZSgwLHkpLHU9YS5sZW5ndGgtMS1hLmxhc3RJbmRleE9mKFwiL1wiKSksYz1nLGg9MDtjb250aW51ZX19ZWxzZSBpZihhLmxlbmd0aD09PTJ8fGEubGVuZ3RoPT09MSl7YT1cIlwiLHU9MCxjPWcsaD0wO2NvbnRpbnVlfX1zJiYoYS5sZW5ndGg+MD9hKz1cIi8uLlwiOmE9XCIuLlwiLHU9Mik7fWVsc2UgYS5sZW5ndGg+MD9hKz1cIi9cIitvLnNsaWNlKGMrMSxnKTphPW8uc2xpY2UoYysxLGcpLHU9Zy1jLTE7Yz1nLGg9MDt9ZWxzZSBkPT09NDYmJmghPT0tMT8rK2g6aD0tMTt9cmV0dXJuIGF9ZnVuY3Rpb24gaShvLHMpe3ZhciBhPXMuZGlyfHxzLnJvb3QsdT1zLmJhc2V8fChzLm5hbWV8fFwiXCIpKyhzLmV4dHx8XCJcIik7cmV0dXJuIGE/YT09PXMucm9vdD9hK3U6YStvK3U6dX12YXIgbj17cmVzb2x2ZTpmdW5jdGlvbigpe2Zvcih2YXIgcz1cIlwiLGE9ITEsdSxjPWFyZ3VtZW50cy5sZW5ndGgtMTtjPj0tMSYmIWE7Yy0tKXt2YXIgaDtjPj0wP2g9YXJndW1lbnRzW2NdOih1PT09dm9pZCAwJiYodT10LmN3ZCgpKSxoPXUpLGUoaCksaC5sZW5ndGghPT0wJiYocz1oK1wiL1wiK3MsYT1oLmNoYXJDb2RlQXQoMCk9PT00Nyk7fXJldHVybiBzPXIocywhYSksYT9zLmxlbmd0aD4wP1wiL1wiK3M6XCIvXCI6cy5sZW5ndGg+MD9zOlwiLlwifSxub3JtYWxpemU6ZnVuY3Rpb24ocyl7aWYoZShzKSxzLmxlbmd0aD09PTApcmV0dXJuIFwiLlwiO3ZhciBhPXMuY2hhckNvZGVBdCgwKT09PTQ3LHU9cy5jaGFyQ29kZUF0KHMubGVuZ3RoLTEpPT09NDc7cmV0dXJuIHM9cihzLCFhKSxzLmxlbmd0aD09PTAmJiFhJiYocz1cIi5cIikscy5sZW5ndGg+MCYmdSYmKHMrPVwiL1wiKSxhP1wiL1wiK3M6c30saXNBYnNvbHV0ZTpmdW5jdGlvbihzKXtyZXR1cm4gZShzKSxzLmxlbmd0aD4wJiZzLmNoYXJDb2RlQXQoMCk9PT00N30sam9pbjpmdW5jdGlvbigpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0wKXJldHVybiBcIi5cIjtmb3IodmFyIHMsYT0wO2E8YXJndW1lbnRzLmxlbmd0aDsrK2Epe3ZhciB1PWFyZ3VtZW50c1thXTtlKHUpLHUubGVuZ3RoPjAmJihzPT09dm9pZCAwP3M9dTpzKz1cIi9cIit1KTt9cmV0dXJuIHM9PT12b2lkIDA/XCIuXCI6bi5ub3JtYWxpemUocyl9LHJlbGF0aXZlOmZ1bmN0aW9uKHMsYSl7aWYoZShzKSxlKGEpLHM9PT1hfHwocz1uLnJlc29sdmUocyksYT1uLnJlc29sdmUoYSkscz09PWEpKXJldHVybiBcIlwiO2Zvcih2YXIgdT0xO3U8cy5sZW5ndGgmJnMuY2hhckNvZGVBdCh1KT09PTQ3OysrdSk7Zm9yKHZhciBjPXMubGVuZ3RoLGg9Yy11LGQ9MTtkPGEubGVuZ3RoJiZhLmNoYXJDb2RlQXQoZCk9PT00NzsrK2QpO2Zvcih2YXIgZz1hLmxlbmd0aCx5PWctZCx3PWg8eT9oOnksRT0tMSxTPTA7Uzw9dzsrK1Mpe2lmKFM9PT13KXtpZih5Pncpe2lmKGEuY2hhckNvZGVBdChkK1MpPT09NDcpcmV0dXJuIGEuc2xpY2UoZCtTKzEpO2lmKFM9PT0wKXJldHVybiBhLnNsaWNlKGQrUyl9ZWxzZSBoPncmJihzLmNoYXJDb2RlQXQodStTKT09PTQ3P0U9UzpTPT09MCYmKEU9MCkpO2JyZWFrfXZhciBJPXMuY2hhckNvZGVBdCh1K1MpLEM9YS5jaGFyQ29kZUF0KGQrUyk7aWYoSSE9PUMpYnJlYWs7ST09PTQ3JiYoRT1TKTt9dmFyIFI9XCJcIjtmb3IoUz11K0UrMTtTPD1jOysrUykoUz09PWN8fHMuY2hhckNvZGVBdChTKT09PTQ3KSYmKFIubGVuZ3RoPT09MD9SKz1cIi4uXCI6Uis9XCIvLi5cIik7cmV0dXJuIFIubGVuZ3RoPjA/UithLnNsaWNlKGQrRSk6KGQrPUUsYS5jaGFyQ29kZUF0KGQpPT09NDcmJisrZCxhLnNsaWNlKGQpKX0sX21ha2VMb25nOmZ1bmN0aW9uKHMpe3JldHVybiBzfSxkaXJuYW1lOmZ1bmN0aW9uKHMpe2lmKGUocykscy5sZW5ndGg9PT0wKXJldHVybiBcIi5cIjtmb3IodmFyIGE9cy5jaGFyQ29kZUF0KDApLHU9YT09PTQ3LGM9LTEsaD0hMCxkPXMubGVuZ3RoLTE7ZD49MTstLWQpaWYoYT1zLmNoYXJDb2RlQXQoZCksYT09PTQ3KXtpZighaCl7Yz1kO2JyZWFrfX1lbHNlIGg9ITE7cmV0dXJuIGM9PT0tMT91P1wiL1wiOlwiLlwiOnUmJmM9PT0xP1wiLy9cIjpzLnNsaWNlKDAsYyl9LGJhc2VuYW1lOmZ1bmN0aW9uKHMsYSl7aWYoYSE9PXZvaWQgMCYmdHlwZW9mIGEhPVwic3RyaW5nXCIpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJleHRcIiBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7ZShzKTt2YXIgdT0wLGM9LTEsaD0hMCxkO2lmKGEhPT12b2lkIDAmJmEubGVuZ3RoPjAmJmEubGVuZ3RoPD1zLmxlbmd0aCl7aWYoYS5sZW5ndGg9PT1zLmxlbmd0aCYmYT09PXMpcmV0dXJuIFwiXCI7dmFyIGc9YS5sZW5ndGgtMSx5PS0xO2ZvcihkPXMubGVuZ3RoLTE7ZD49MDstLWQpe3ZhciB3PXMuY2hhckNvZGVBdChkKTtpZih3PT09NDcpe2lmKCFoKXt1PWQrMTticmVha319ZWxzZSB5PT09LTEmJihoPSExLHk9ZCsxKSxnPj0wJiYodz09PWEuY2hhckNvZGVBdChnKT8tLWc9PT0tMSYmKGM9ZCk6KGc9LTEsYz15KSk7fXJldHVybiB1PT09Yz9jPXk6Yz09PS0xJiYoYz1zLmxlbmd0aCkscy5zbGljZSh1LGMpfWVsc2Uge2ZvcihkPXMubGVuZ3RoLTE7ZD49MDstLWQpaWYocy5jaGFyQ29kZUF0KGQpPT09NDcpe2lmKCFoKXt1PWQrMTticmVha319ZWxzZSBjPT09LTEmJihoPSExLGM9ZCsxKTtyZXR1cm4gYz09PS0xP1wiXCI6cy5zbGljZSh1LGMpfX0sZXh0bmFtZTpmdW5jdGlvbihzKXtlKHMpO2Zvcih2YXIgYT0tMSx1PTAsYz0tMSxoPSEwLGQ9MCxnPXMubGVuZ3RoLTE7Zz49MDstLWcpe3ZhciB5PXMuY2hhckNvZGVBdChnKTtpZih5PT09NDcpe2lmKCFoKXt1PWcrMTticmVha31jb250aW51ZX1jPT09LTEmJihoPSExLGM9ZysxKSx5PT09NDY/YT09PS0xP2E9ZzpkIT09MSYmKGQ9MSk6YSE9PS0xJiYoZD0tMSk7fXJldHVybiBhPT09LTF8fGM9PT0tMXx8ZD09PTB8fGQ9PT0xJiZhPT09Yy0xJiZhPT09dSsxP1wiXCI6cy5zbGljZShhLGMpfSxmb3JtYXQ6ZnVuY3Rpb24ocyl7aWYocz09PW51bGx8fHR5cGVvZiBzIT1cIm9iamVjdFwiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInBhdGhPYmplY3RcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgT2JqZWN0LiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIHMpO3JldHVybiBpKFwiL1wiLHMpfSxwYXJzZTpmdW5jdGlvbihzKXtlKHMpO3ZhciBhPXtyb290OlwiXCIsZGlyOlwiXCIsYmFzZTpcIlwiLGV4dDpcIlwiLG5hbWU6XCJcIn07aWYocy5sZW5ndGg9PT0wKXJldHVybiBhO3ZhciB1PXMuY2hhckNvZGVBdCgwKSxjPXU9PT00NyxoO2M/KGEucm9vdD1cIi9cIixoPTEpOmg9MDtmb3IodmFyIGQ9LTEsZz0wLHk9LTEsdz0hMCxFPXMubGVuZ3RoLTEsUz0wO0U+PWg7LS1FKXtpZih1PXMuY2hhckNvZGVBdChFKSx1PT09NDcpe2lmKCF3KXtnPUUrMTticmVha31jb250aW51ZX15PT09LTEmJih3PSExLHk9RSsxKSx1PT09NDY/ZD09PS0xP2Q9RTpTIT09MSYmKFM9MSk6ZCE9PS0xJiYoUz0tMSk7fXJldHVybiBkPT09LTF8fHk9PT0tMXx8Uz09PTB8fFM9PT0xJiZkPT09eS0xJiZkPT09ZysxP3khPT0tMSYmKGc9PT0wJiZjP2EuYmFzZT1hLm5hbWU9cy5zbGljZSgxLHkpOmEuYmFzZT1hLm5hbWU9cy5zbGljZShnLHkpKTooZz09PTAmJmM/KGEubmFtZT1zLnNsaWNlKDEsZCksYS5iYXNlPXMuc2xpY2UoMSx5KSk6KGEubmFtZT1zLnNsaWNlKGcsZCksYS5iYXNlPXMuc2xpY2UoZyx5KSksYS5leHQ9cy5zbGljZShkLHkpKSxnPjA/YS5kaXI9cy5zbGljZSgwLGctMSk6YyYmKGEuZGlyPVwiL1wiKSxhfSxzZXA6XCIvXCIsZGVsaW1pdGVyOlwiOlwiLHdpbjMyOm51bGwscG9zaXg6bnVsbH07cmV0dXJuIG4ucG9zaXg9bixlbD1uLGVsfWZ1bmN0aW9uIEJFKHQpe2lmKHR5cGVvZiB0PT1cInN0cmluZ1wiKXQ9bmV3IFVSTCh0KTtlbHNlIGlmKCEodCBpbnN0YW5jZW9mIFVSTCkpdGhyb3cgbmV3IERlbm8uZXJyb3JzLkludmFsaWREYXRhKFwiaW52YWxpZCBhcmd1bWVudCBwYXRoICwgbXVzdCBiZSBhIHN0cmluZyBvciBVUkxcIik7aWYodC5wcm90b2NvbCE9PVwiZmlsZTpcIil0aHJvdyBuZXcgRGVuby5lcnJvcnMuSW52YWxpZERhdGEoXCJpbnZhbGlkIHVybCBzY2hlbWVcIik7cmV0dXJuIHJsP1BFKHQpOk9FKHQpfWZ1bmN0aW9uIFBFKHQpe2xldCBlPXQuaG9zdG5hbWUscj10LnBhdGhuYW1lO2ZvcihsZXQgaT0wO2k8ci5sZW5ndGg7aSsrKWlmKHJbaV09PT1cIiVcIil7bGV0IG49ci5jb2RlUG9pbnRBdChpKzIpfHwzMjtpZihyW2krMV09PT1cIjJcIiYmbj09PTEwMnx8cltpKzFdPT09XCI1XCImJm49PT05OSl0aHJvdyBuZXcgRGVuby5lcnJvcnMuSW52YWxpZERhdGEoXCJtdXN0IG5vdCBpbmNsdWRlIGVuY29kZWQgXFxcXCBvciAvIGNoYXJhY3RlcnNcIil9aWYocj1yLnJlcGxhY2UoU0UsXCJcXFxcXCIpLHI9ZGVjb2RlVVJJQ29tcG9uZW50KHIpLGUhPT1cIlwiKXJldHVybiBgXFxcXFxcXFwke2V9JHtyfWA7e2xldCBpPXIuY29kZVBvaW50QXQoMSl8MzIsbj1yWzJdO2lmKGk8dkV8fGk+RUV8fG4hPT1cIjpcIil0aHJvdyBuZXcgRGVuby5lcnJvcnMuSW52YWxpZERhdGEoXCJmaWxlIHVybCBwYXRoIG11c3QgYmUgYWJzb2x1dGVcIik7cmV0dXJuIHIuc2xpY2UoMSl9fWZ1bmN0aW9uIE9FKHQpe2lmKHQuaG9zdG5hbWUhPT1cIlwiKXRocm93IG5ldyBEZW5vLmVycm9ycy5JbnZhbGlkRGF0YShcImludmFsaWQgZmlsZSB1cmwgaG9zdG5hbWVcIik7bGV0IGU9dC5wYXRobmFtZTtmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKylpZihlW3JdPT09XCIlXCIpe2xldCBpPWUuY29kZVBvaW50QXQocisyKXx8MzI7aWYoZVtyKzFdPT09XCIyXCImJmk9PT0xMDIpdGhyb3cgbmV3IERlbm8uZXJyb3JzLkludmFsaWREYXRhKFwibXVzdCBub3QgaW5jbHVkZSBlbmNvZGVkIC8gY2hhcmFjdGVyc1wiKX1yZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGUpfWZ1bmN0aW9uIGtFKHQpe2xldCBlPWZnLnJlc29sdmUodCkscj10LmNoYXJDb2RlQXQodC5sZW5ndGgtMSk7KHI9PT1tRXx8cmwmJnI9PT1fRSkmJmVbZS5sZW5ndGgtMV0hPT1mZy5zZXAmJihlKz1cIi9cIik7bGV0IGk9bmV3IFVSTChcImZpbGU6Ly9cIik7cmV0dXJuIGUuaW5jbHVkZXMoXCIlXCIpJiYoZT1lLnJlcGxhY2UoQUUsXCIlMjVcIikpLCFybCYmZS5pbmNsdWRlcyhcIlxcXFxcIikmJihlPWUucmVwbGFjZShJRSxcIiU1Q1wiKSksZS5pbmNsdWRlcyhgXG5gKSYmKGU9ZS5yZXBsYWNlKFRFLFwiJTBBXCIpKSxlLmluY2x1ZGVzKFwiXFxyXCIpJiYoZT1lLnJlcGxhY2UoUkUsXCIlMERcIikpLGUuaW5jbHVkZXMoXCJcdFwiKSYmKGU9ZS5yZXBsYWNlKENFLFwiJTA5XCIpKSxpLnBhdGhuYW1lPWUsaX1mdW5jdGlvbiBjZyh0KXtpZih0eXBlb2YgdD09XCJzdHJpbmdcIil0PW5ldyBVUkwodCk7ZWxzZSBpZighKHQgaW5zdGFuY2VvZiBVUkwpKXRocm93IG5ldyBEZW5vLmVycm9ycy5JbnZhbGlkRGF0YShcImludmFsaWQgYXJndW1lbnQgcGF0aCAsIG11c3QgYmUgYSBzdHJpbmcgb3IgVVJMXCIpO2lmKHQucHJvdG9jb2whPT1cImZpbGU6XCIpdGhyb3cgbmV3IERlbm8uZXJyb3JzLkludmFsaWREYXRhKFwiaW52YWxpZCB1cmwgc2NoZW1lXCIpO3JldHVybiBpbD9ZRSh0KTpKRSh0KX1mdW5jdGlvbiBZRSh0KXtsZXQgZT10Lmhvc3RuYW1lLHI9dC5wYXRobmFtZTtmb3IobGV0IGk9MDtpPHIubGVuZ3RoO2krKylpZihyW2ldPT09XCIlXCIpe2xldCBuPXIuY29kZVBvaW50QXQoaSsyKXx8MzI7aWYocltpKzFdPT09XCIyXCImJm49PT0xMDJ8fHJbaSsxXT09PVwiNVwiJiZuPT09OTkpdGhyb3cgbmV3IERlbm8uZXJyb3JzLkludmFsaWREYXRhKFwibXVzdCBub3QgaW5jbHVkZSBlbmNvZGVkIFxcXFwgb3IgLyBjaGFyYWN0ZXJzXCIpfWlmKHI9ci5yZXBsYWNlKEhFLFwiXFxcXFwiKSxyPWRlY29kZVVSSUNvbXBvbmVudChyKSxlIT09XCJcIilyZXR1cm4gYFxcXFxcXFxcJHtlfSR7cn1gO3tsZXQgaT1yLmNvZGVQb2ludEF0KDEpfDMyLG49clsyXTtpZihpPFdFfHxpPiRFfHxuIT09XCI6XCIpdGhyb3cgbmV3IERlbm8uZXJyb3JzLkludmFsaWREYXRhKFwiZmlsZSB1cmwgcGF0aCBtdXN0IGJlIGFic29sdXRlXCIpO3JldHVybiByLnNsaWNlKDEpfX1mdW5jdGlvbiBKRSh0KXtpZih0Lmhvc3RuYW1lIT09XCJcIil0aHJvdyBuZXcgRGVuby5lcnJvcnMuSW52YWxpZERhdGEoXCJpbnZhbGlkIGZpbGUgdXJsIGhvc3RuYW1lXCIpO2xldCBlPXQucGF0aG5hbWU7Zm9yKGxldCByPTA7cjxlLmxlbmd0aDtyKyspaWYoZVtyXT09PVwiJVwiKXtsZXQgaT1lLmNvZGVQb2ludEF0KHIrMil8fDMyO2lmKGVbcisxXT09PVwiMlwiJiZpPT09MTAyKXRocm93IG5ldyBEZW5vLmVycm9ycy5JbnZhbGlkRGF0YShcIm11c3Qgbm90IGluY2x1ZGUgZW5jb2RlZCAvIGNoYXJhY3RlcnNcIil9cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlKX1mdW5jdGlvbiBoZyh0KXtsZXQgZT1KYS5yZXNvbHZlKHQpLHI9dC5jaGFyQ29kZUF0KHQubGVuZ3RoLTEpOyhyPT09RkV8fGlsJiZyPT09akUpJiZlW2UubGVuZ3RoLTFdIT09SmEuc2VwJiYoZSs9XCIvXCIpO2xldCBpPW5ldyBVUkwoXCJmaWxlOi8vXCIpO3JldHVybiBlLmluY2x1ZGVzKFwiJVwiKSYmKGU9ZS5yZXBsYWNlKFZFLFwiJTI1XCIpKSwhaWwmJmUuaW5jbHVkZXMoXCJcXFxcXCIpJiYoZT1lLnJlcGxhY2UoekUsXCIlNUNcIikpLGUuaW5jbHVkZXMoYFxuYCkmJihlPWUucmVwbGFjZShLRSxcIiUwQVwiKSksZS5pbmNsdWRlcyhcIlxcclwiKSYmKGU9ZS5yZXBsYWNlKEdFLFwiJTBEXCIpKSxlLmluY2x1ZGVzKFwiXHRcIikmJihlPWUucmVwbGFjZShRRSxcIiUwOVwiKSksaS5wYXRobmFtZT1lLGl9dmFyIFosZkUscHQsY0UsaEUsZEUscEUsdGwsb2csYWcsbGcsZ0UseUUsWGEsc2ksWmEsZWwsdWcsZmcsd0UsX0UsbUUsdkUsRUUscmwsU0UsQUUsSUUsVEUsUkUsQ0UseEUsTUUsTEUsVUUsTkUscUUsREUsakUsRkUsV0UsJEUsaWwsSEUsVkUsekUsS0UsR0UsUUUscGc9d2UoKCk9Pnt2KCk7bSgpO18oKTtZcCgpO0pwKCk7cmcoKTtzZygpO1FhKCk7Wj17fSxmRT16dCxwdD17aXNTdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0PT1cInN0cmluZ1wifSxpc09iamVjdDpmdW5jdGlvbih0KXtyZXR1cm4gdHlwZW9mIHQ9PVwib2JqZWN0XCImJnQhPT1udWxsfSxpc051bGw6ZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1udWxsfSxpc051bGxPclVuZGVmaW5lZDpmdW5jdGlvbih0KXtyZXR1cm4gdD09bnVsbH19O1oucGFyc2U9eGksWi5yZXNvbHZlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHhpKHQsITEsITApLnJlc29sdmUoZSl9LFoucmVzb2x2ZU9iamVjdD1mdW5jdGlvbih0LGUpe3JldHVybiB0P3hpKHQsITEsITApLnJlc29sdmVPYmplY3QoZSk6ZX0sWi5mb3JtYXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHB0LmlzU3RyaW5nKHQpJiYodD14aSh0KSksdCBpbnN0YW5jZW9mIEZlP3QuZm9ybWF0KCk6RmUucHJvdG90eXBlLmZvcm1hdC5jYWxsKHQpfSxaLlVybD1GZTtjRT0vXihbYS16MC05ListXSs6KS9pLGhFPS86WzAtOV0qJC8sZEU9L14oXFwvXFwvPyg/IVxcLylbXlxcP1xcc10qKShcXD9bXlxcc10qKT8kLyxwRT1bXCJ7XCIsXCJ9XCIsXCJ8XCIsXCJcXFxcXCIsXCJeXCIsXCJgXCJdLmNvbmNhdChbXCI8XCIsXCI+XCIsJ1wiJyxcImBcIixcIiBcIixcIlxcclwiLGBcbmAsXCJcdFwiXSksdGw9W1wiJ1wiXS5jb25jYXQocEUpLG9nPVtcIiVcIixcIi9cIixcIj9cIixcIjtcIixcIiNcIl0uY29uY2F0KHRsKSxhZz1bXCIvXCIsXCI/XCIsXCIjXCJdLGxnPS9eWythLXowLTlBLVpfLV17MCw2M30kLyxnRT0vXihbK2EtejAtOUEtWl8tXXswLDYzfSkoLiopJC8seUU9e2phdmFzY3JpcHQ6ITAsXCJqYXZhc2NyaXB0OlwiOiEwfSxYYT17amF2YXNjcmlwdDohMCxcImphdmFzY3JpcHQ6XCI6ITB9LHNpPXtodHRwOiEwLGh0dHBzOiEwLGZ0cDohMCxnb3BoZXI6ITAsZmlsZTohMCxcImh0dHA6XCI6ITAsXCJodHRwczpcIjohMCxcImZ0cDpcIjohMCxcImdvcGhlcjpcIjohMCxcImZpbGU6XCI6ITB9LFphPWR0O0ZlLnByb3RvdHlwZS5wYXJzZT1mdW5jdGlvbih0LGUscil7aWYoIXB0LmlzU3RyaW5nKHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJQYXJhbWV0ZXIgJ3VybCcgbXVzdCBiZSBhIHN0cmluZywgbm90IFwiK3R5cGVvZiB0KTt2YXIgaT10LmluZGV4T2YoXCI/XCIpLG49aSE9PS0xJiZpPHQuaW5kZXhPZihcIiNcIik/XCI/XCI6XCIjXCIsbz10LnNwbGl0KG4pO29bMF09b1swXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpO3ZhciBzPXQ9by5qb2luKG4pO2lmKHM9cy50cmltKCksIXImJnQuc3BsaXQoXCIjXCIpLmxlbmd0aD09PTEpe3ZhciBhPWRFLmV4ZWMocyk7aWYoYSlyZXR1cm4gdGhpcy5wYXRoPXMsdGhpcy5ocmVmPXMsdGhpcy5wYXRobmFtZT1hWzFdLGFbMl0/KHRoaXMuc2VhcmNoPWFbMl0sdGhpcy5xdWVyeT1lP1phLnBhcnNlKHRoaXMuc2VhcmNoLnN1YnN0cigxKSk6dGhpcy5zZWFyY2guc3Vic3RyKDEpKTplJiYodGhpcy5zZWFyY2g9XCJcIix0aGlzLnF1ZXJ5PXt9KSx0aGlzfXZhciB1PWNFLmV4ZWMocyk7aWYodSl7dmFyIGM9KHU9dVswXSkudG9Mb3dlckNhc2UoKTt0aGlzLnByb3RvY29sPWMscz1zLnN1YnN0cih1Lmxlbmd0aCk7fWlmKHJ8fHV8fHMubWF0Y2goL15cXC9cXC9bXkBcXC9dK0BbXkBcXC9dKy8pKXt2YXIgaD1zLnN1YnN0cigwLDIpPT09XCIvL1wiOyFofHx1JiZYYVt1XXx8KHM9cy5zdWJzdHIoMiksdGhpcy5zbGFzaGVzPSEwKTt9aWYoIVhhW3VdJiYoaHx8dSYmIXNpW3VdKSl7Zm9yKHZhciBkLGcseT0tMSx3PTA7dzxhZy5sZW5ndGg7dysrKShFPXMuaW5kZXhPZihhZ1t3XSkpIT09LTEmJih5PT09LTF8fEU8eSkmJih5PUUpO2ZvcigoZz15PT09LTE/cy5sYXN0SW5kZXhPZihcIkBcIik6cy5sYXN0SW5kZXhPZihcIkBcIix5KSkhPT0tMSYmKGQ9cy5zbGljZSgwLGcpLHM9cy5zbGljZShnKzEpLHRoaXMuYXV0aD1kZWNvZGVVUklDb21wb25lbnQoZCkpLHk9LTEsdz0wO3c8b2cubGVuZ3RoO3crKyl7dmFyIEU7KEU9cy5pbmRleE9mKG9nW3ddKSkhPT0tMSYmKHk9PT0tMXx8RTx5KSYmKHk9RSk7fXk9PT0tMSYmKHk9cy5sZW5ndGgpLHRoaXMuaG9zdD1zLnNsaWNlKDAseSkscz1zLnNsaWNlKHkpLHRoaXMucGFyc2VIb3N0KCksdGhpcy5ob3N0bmFtZT10aGlzLmhvc3RuYW1lfHxcIlwiO3ZhciBTPXRoaXMuaG9zdG5hbWVbMF09PT1cIltcIiYmdGhpcy5ob3N0bmFtZVt0aGlzLmhvc3RuYW1lLmxlbmd0aC0xXT09PVwiXVwiO2lmKCFTKWZvcih2YXIgST10aGlzLmhvc3RuYW1lLnNwbGl0KC9cXC4vKSxDPSh3PTAsSS5sZW5ndGgpO3c8Qzt3Kyspe3ZhciBSPUlbd107aWYoUiYmIVIubWF0Y2gobGcpKXtmb3IodmFyIFU9XCJcIixOPTAsVz1SLmxlbmd0aDtOPFc7TisrKVIuY2hhckNvZGVBdChOKT4xMjc/VSs9XCJ4XCI6VSs9UltOXTtpZighVS5tYXRjaChsZykpe3ZhciBLPUkuc2xpY2UoMCx3KSx6PUkuc2xpY2UodysxKSxRPVIubWF0Y2goZ0UpO1EmJihLLnB1c2goUVsxXSksei51bnNoaWZ0KFFbMl0pKSx6Lmxlbmd0aCYmKHM9XCIvXCIrei5qb2luKFwiLlwiKStzKSx0aGlzLmhvc3RuYW1lPUsuam9pbihcIi5cIik7YnJlYWt9fX10aGlzLmhvc3RuYW1lLmxlbmd0aD4yNTU/dGhpcy5ob3N0bmFtZT1cIlwiOnRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpLFN8fCh0aGlzLmhvc3RuYW1lPWZFLnRvQVNDSUkodGhpcy5ob3N0bmFtZSkpO3ZhciBkZT10aGlzLnBvcnQ/XCI6XCIrdGhpcy5wb3J0OlwiXCIsR3Q9dGhpcy5ob3N0bmFtZXx8XCJcIjt0aGlzLmhvc3Q9R3QrZGUsdGhpcy5ocmVmKz10aGlzLmhvc3QsUyYmKHRoaXMuaG9zdG5hbWU9dGhpcy5ob3N0bmFtZS5zdWJzdHIoMSx0aGlzLmhvc3RuYW1lLmxlbmd0aC0yKSxzWzBdIT09XCIvXCImJihzPVwiL1wiK3MpKTt9aWYoIXlFW2NdKWZvcih3PTAsQz10bC5sZW5ndGg7dzxDO3crKyl7dmFyIHBlPXRsW3ddO2lmKHMuaW5kZXhPZihwZSkhPT0tMSl7dmFyIENyPWVuY29kZVVSSUNvbXBvbmVudChwZSk7Q3I9PT1wZSYmKENyPWVzY2FwZShwZSkpLHM9cy5zcGxpdChwZSkuam9pbihDcik7fX12YXIgQnI9cy5pbmRleE9mKFwiI1wiKTtCciE9PS0xJiYodGhpcy5oYXNoPXMuc3Vic3RyKEJyKSxzPXMuc2xpY2UoMCxCcikpO3ZhciBQcj1zLmluZGV4T2YoXCI/XCIpO2lmKFByIT09LTE/KHRoaXMuc2VhcmNoPXMuc3Vic3RyKFByKSx0aGlzLnF1ZXJ5PXMuc3Vic3RyKFByKzEpLGUmJih0aGlzLnF1ZXJ5PVphLnBhcnNlKHRoaXMucXVlcnkpKSxzPXMuc2xpY2UoMCxQcikpOmUmJih0aGlzLnNlYXJjaD1cIlwiLHRoaXMucXVlcnk9e30pLHMmJih0aGlzLnBhdGhuYW1lPXMpLHNpW2NdJiZ0aGlzLmhvc3RuYW1lJiYhdGhpcy5wYXRobmFtZSYmKHRoaXMucGF0aG5hbWU9XCIvXCIpLHRoaXMucGF0aG5hbWV8fHRoaXMuc2VhcmNoKXtkZT10aGlzLnBhdGhuYW1lfHxcIlwiO3ZhciB1cz10aGlzLnNlYXJjaHx8XCJcIjt0aGlzLnBhdGg9ZGUrdXM7fXJldHVybiB0aGlzLmhyZWY9dGhpcy5mb3JtYXQoKSx0aGlzfSxGZS5wcm90b3R5cGUuZm9ybWF0PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5hdXRofHxcIlwiO3QmJih0PSh0PWVuY29kZVVSSUNvbXBvbmVudCh0KSkucmVwbGFjZSgvJTNBL2ksXCI6XCIpLHQrPVwiQFwiKTt2YXIgZT10aGlzLnByb3RvY29sfHxcIlwiLHI9dGhpcy5wYXRobmFtZXx8XCJcIixpPXRoaXMuaGFzaHx8XCJcIixuPSExLG89XCJcIjt0aGlzLmhvc3Q/bj10K3RoaXMuaG9zdDp0aGlzLmhvc3RuYW1lJiYobj10Kyh0aGlzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpPT09LTE/dGhpcy5ob3N0bmFtZTpcIltcIit0aGlzLmhvc3RuYW1lK1wiXVwiKSx0aGlzLnBvcnQmJihuKz1cIjpcIit0aGlzLnBvcnQpKSx0aGlzLnF1ZXJ5JiZwdC5pc09iamVjdCh0aGlzLnF1ZXJ5KSYmT2JqZWN0LmtleXModGhpcy5xdWVyeSkubGVuZ3RoJiYobz1aYS5zdHJpbmdpZnkodGhpcy5xdWVyeSkpO3ZhciBzPXRoaXMuc2VhcmNofHxvJiZcIj9cIitvfHxcIlwiO3JldHVybiBlJiZlLnN1YnN0cigtMSkhPT1cIjpcIiYmKGUrPVwiOlwiKSx0aGlzLnNsYXNoZXN8fCghZXx8c2lbZV0pJiZuIT09ITE/KG49XCIvL1wiKyhufHxcIlwiKSxyJiZyLmNoYXJBdCgwKSE9PVwiL1wiJiYocj1cIi9cIityKSk6bnx8KG49XCJcIiksaSYmaS5jaGFyQXQoMCkhPT1cIiNcIiYmKGk9XCIjXCIraSkscyYmcy5jaGFyQXQoMCkhPT1cIj9cIiYmKHM9XCI/XCIrcyksZStuKyhyPXIucmVwbGFjZSgvWz8jXS9nLGZ1bmN0aW9uKGEpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoYSl9KSkrKHM9cy5yZXBsYWNlKFwiI1wiLFwiJTIzXCIpKStpfSxGZS5wcm90b3R5cGUucmVzb2x2ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5yZXNvbHZlT2JqZWN0KHhpKHQsITEsITApKS5mb3JtYXQoKX0sRmUucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24odCl7aWYocHQuaXNTdHJpbmcodCkpe3ZhciBlPW5ldyBGZTtlLnBhcnNlKHQsITEsITApLHQ9ZTt9Zm9yKHZhciByPW5ldyBGZSxpPU9iamVjdC5rZXlzKHRoaXMpLG49MDtuPGkubGVuZ3RoO24rKyl7dmFyIG89aVtuXTtyW29dPXRoaXNbb107fWlmKHIuaGFzaD10Lmhhc2gsdC5ocmVmPT09XCJcIilyZXR1cm4gci5ocmVmPXIuZm9ybWF0KCkscjtpZih0LnNsYXNoZXMmJiF0LnByb3RvY29sKXtmb3IodmFyIHM9T2JqZWN0LmtleXModCksYT0wO2E8cy5sZW5ndGg7YSsrKXt2YXIgdT1zW2FdO3UhPT1cInByb3RvY29sXCImJihyW3VdPXRbdV0pO31yZXR1cm4gc2lbci5wcm90b2NvbF0mJnIuaG9zdG5hbWUmJiFyLnBhdGhuYW1lJiYoci5wYXRoPXIucGF0aG5hbWU9XCIvXCIpLHIuaHJlZj1yLmZvcm1hdCgpLHJ9aWYodC5wcm90b2NvbCYmdC5wcm90b2NvbCE9PXIucHJvdG9jb2wpe2lmKCFzaVt0LnByb3RvY29sXSl7Zm9yKHZhciBjPU9iamVjdC5rZXlzKHQpLGg9MDtoPGMubGVuZ3RoO2grKyl7dmFyIGQ9Y1toXTtyW2RdPXRbZF07fXJldHVybiByLmhyZWY9ci5mb3JtYXQoKSxyfWlmKHIucHJvdG9jb2w9dC5wcm90b2NvbCx0Lmhvc3R8fFhhW3QucHJvdG9jb2xdKXIucGF0aG5hbWU9dC5wYXRobmFtZTtlbHNlIHtmb3IodmFyIGc9KHQucGF0aG5hbWV8fFwiXCIpLnNwbGl0KFwiL1wiKTtnLmxlbmd0aCYmISh0Lmhvc3Q9Zy5zaGlmdCgpKTspO3QuaG9zdHx8KHQuaG9zdD1cIlwiKSx0Lmhvc3RuYW1lfHwodC5ob3N0bmFtZT1cIlwiKSxnWzBdIT09XCJcIiYmZy51bnNoaWZ0KFwiXCIpLGcubGVuZ3RoPDImJmcudW5zaGlmdChcIlwiKSxyLnBhdGhuYW1lPWcuam9pbihcIi9cIik7fWlmKHIuc2VhcmNoPXQuc2VhcmNoLHIucXVlcnk9dC5xdWVyeSxyLmhvc3Q9dC5ob3N0fHxcIlwiLHIuYXV0aD10LmF1dGgsci5ob3N0bmFtZT10Lmhvc3RuYW1lfHx0Lmhvc3Qsci5wb3J0PXQucG9ydCxyLnBhdGhuYW1lfHxyLnNlYXJjaCl7dmFyIHk9ci5wYXRobmFtZXx8XCJcIix3PXIuc2VhcmNofHxcIlwiO3IucGF0aD15K3c7fXJldHVybiByLnNsYXNoZXM9ci5zbGFzaGVzfHx0LnNsYXNoZXMsci5ocmVmPXIuZm9ybWF0KCkscn12YXIgRT1yLnBhdGhuYW1lJiZyLnBhdGhuYW1lLmNoYXJBdCgwKT09PVwiL1wiLFM9dC5ob3N0fHx0LnBhdGhuYW1lJiZ0LnBhdGhuYW1lLmNoYXJBdCgwKT09PVwiL1wiLEk9U3x8RXx8ci5ob3N0JiZ0LnBhdGhuYW1lLEM9SSxSPXIucGF0aG5hbWUmJnIucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxVPShnPXQucGF0aG5hbWUmJnQucGF0aG5hbWUuc3BsaXQoXCIvXCIpfHxbXSxyLnByb3RvY29sJiYhc2lbci5wcm90b2NvbF0pO2lmKFUmJihyLmhvc3RuYW1lPVwiXCIsci5wb3J0PW51bGwsci5ob3N0JiYoUlswXT09PVwiXCI/UlswXT1yLmhvc3Q6Ui51bnNoaWZ0KHIuaG9zdCkpLHIuaG9zdD1cIlwiLHQucHJvdG9jb2wmJih0Lmhvc3RuYW1lPW51bGwsdC5wb3J0PW51bGwsdC5ob3N0JiYoZ1swXT09PVwiXCI/Z1swXT10Lmhvc3Q6Zy51bnNoaWZ0KHQuaG9zdCkpLHQuaG9zdD1udWxsKSxJPUkmJihnWzBdPT09XCJcInx8UlswXT09PVwiXCIpKSxTKXIuaG9zdD10Lmhvc3R8fHQuaG9zdD09PVwiXCI/dC5ob3N0OnIuaG9zdCxyLmhvc3RuYW1lPXQuaG9zdG5hbWV8fHQuaG9zdG5hbWU9PT1cIlwiP3QuaG9zdG5hbWU6ci5ob3N0bmFtZSxyLnNlYXJjaD10LnNlYXJjaCxyLnF1ZXJ5PXQucXVlcnksUj1nO2Vsc2UgaWYoZy5sZW5ndGgpUnx8KFI9W10pLFIucG9wKCksUj1SLmNvbmNhdChnKSxyLnNlYXJjaD10LnNlYXJjaCxyLnF1ZXJ5PXQucXVlcnk7ZWxzZSBpZighcHQuaXNOdWxsT3JVbmRlZmluZWQodC5zZWFyY2gpKXJldHVybiBVJiYoci5ob3N0bmFtZT1yLmhvc3Q9Ui5zaGlmdCgpLChRPSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpKSYmKHIuYXV0aD1RLnNoaWZ0KCksci5ob3N0PXIuaG9zdG5hbWU9US5zaGlmdCgpKSksci5zZWFyY2g9dC5zZWFyY2gsci5xdWVyeT10LnF1ZXJ5LHB0LmlzTnVsbChyLnBhdGhuYW1lKSYmcHQuaXNOdWxsKHIuc2VhcmNoKXx8KHIucGF0aD0oci5wYXRobmFtZT9yLnBhdGhuYW1lOlwiXCIpKyhyLnNlYXJjaD9yLnNlYXJjaDpcIlwiKSksci5ocmVmPXIuZm9ybWF0KCkscjtpZighUi5sZW5ndGgpcmV0dXJuIHIucGF0aG5hbWU9bnVsbCxyLnNlYXJjaD9yLnBhdGg9XCIvXCIrci5zZWFyY2g6ci5wYXRoPW51bGwsci5ocmVmPXIuZm9ybWF0KCkscjtmb3IodmFyIE49Ui5zbGljZSgtMSlbMF0sVz0oci5ob3N0fHx0Lmhvc3R8fFIubGVuZ3RoPjEpJiYoTj09PVwiLlwifHxOPT09XCIuLlwiKXx8Tj09PVwiXCIsSz0wLHo9Ui5sZW5ndGg7ej49MDt6LS0pKE49Ult6XSk9PT1cIi5cIj9SLnNwbGljZSh6LDEpOk49PT1cIi4uXCI/KFIuc3BsaWNlKHosMSksSysrKTpLJiYoUi5zcGxpY2UoeiwxKSxLLS0pO2lmKCFJJiYhQylmb3IoO0stLTtLKVIudW5zaGlmdChcIi4uXCIpOyFJfHxSWzBdPT09XCJcInx8UlswXSYmUlswXS5jaGFyQXQoMCk9PT1cIi9cInx8Ui51bnNoaWZ0KFwiXCIpLFcmJlIuam9pbihcIi9cIikuc3Vic3RyKC0xKSE9PVwiL1wiJiZSLnB1c2goXCJcIik7dmFyIFEsZGU9UlswXT09PVwiXCJ8fFJbMF0mJlJbMF0uY2hhckF0KDApPT09XCIvXCI7cmV0dXJuIFUmJihyLmhvc3RuYW1lPXIuaG9zdD1kZT9cIlwiOlIubGVuZ3RoP1Iuc2hpZnQoKTpcIlwiLChRPSEhKHIuaG9zdCYmci5ob3N0LmluZGV4T2YoXCJAXCIpPjApJiZyLmhvc3Quc3BsaXQoXCJAXCIpKSYmKHIuYXV0aD1RLnNoaWZ0KCksci5ob3N0PXIuaG9zdG5hbWU9US5zaGlmdCgpKSksKEk9SXx8ci5ob3N0JiZSLmxlbmd0aCkmJiFkZSYmUi51bnNoaWZ0KFwiXCIpLFIubGVuZ3RoP3IucGF0aG5hbWU9Ui5qb2luKFwiL1wiKTooci5wYXRobmFtZT1udWxsLHIucGF0aD1udWxsKSxwdC5pc051bGwoci5wYXRobmFtZSkmJnB0LmlzTnVsbChyLnNlYXJjaCl8fChyLnBhdGg9KHIucGF0aG5hbWU/ci5wYXRobmFtZTpcIlwiKSsoci5zZWFyY2g/ci5zZWFyY2g6XCJcIikpLHIuYXV0aD10LmF1dGh8fHIuYXV0aCxyLnNsYXNoZXM9ci5zbGFzaGVzfHx0LnNsYXNoZXMsci5ocmVmPXIuZm9ybWF0KCkscn0sRmUucHJvdG90eXBlLnBhcnNlSG9zdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaG9zdCxlPWhFLmV4ZWModCk7ZSYmKChlPWVbMF0pIT09XCI6XCImJih0aGlzLnBvcnQ9ZS5zdWJzdHIoMSkpLHQ9dC5zdWJzdHIoMCx0Lmxlbmd0aC1lLmxlbmd0aCkpLHQmJih0aGlzLmhvc3RuYW1lPXQpO307Wi5Vcmw7Wi5mb3JtYXQ7Wi5yZXNvbHZlO1oucmVzb2x2ZU9iamVjdDtlbD17fSx1Zz0hMTtmZz1iRSgpLHdFPXR5cGVvZiBEZW5vPFwidVwiP0Rlbm8uYnVpbGQub3M9PT1cIndpbmRvd3NcIj9cIndpbjMyXCI6RGVuby5idWlsZC5vczp2b2lkIDA7Wi5VUkw9dHlwZW9mIFVSTDxcInVcIj9VUkw6bnVsbDtaLnBhdGhUb0ZpbGVVUkw9a0U7Wi5maWxlVVJMVG9QYXRoPUJFO1ouVXJsO1ouZm9ybWF0O1oucmVzb2x2ZTtaLnJlc29sdmVPYmplY3Q7Wi5VUkw7X0U9OTIsbUU9NDcsdkU9OTcsRUU9MTIyLHJsPXdFPT09XCJ3aW4zMlwiLFNFPS9cXC8vZyxBRT0vJS9nLElFPS9cXFxcL2csVEU9L1xcbi9nLFJFPS9cXHIvZyxDRT0vXFx0L2c7eEU9dHlwZW9mIERlbm88XCJ1XCI/RGVuby5idWlsZC5vcz09PVwid2luZG93c1wiP1wid2luMzJcIjpEZW5vLmJ1aWxkLm9zOnZvaWQgMDtaLlVSTD10eXBlb2YgVVJMPFwidVwiP1VSTDpudWxsO1oucGF0aFRvRmlsZVVSTD1oZztaLmZpbGVVUkxUb1BhdGg9Y2c7TUU9Wi5VcmwsTEU9Wi5mb3JtYXQsVUU9Wi5yZXNvbHZlLE5FPVoucmVzb2x2ZU9iamVjdCxxRT1aLnBhcnNlLERFPVouVVJMLGpFPTkyLEZFPTQ3LFdFPTk3LCRFPTEyMixpbD14RT09PVwid2luMzJcIixIRT0vXFwvL2csVkU9LyUvZyx6RT0vXFxcXC9nLEtFPS9cXG4vZyxHRT0vXFxyL2csUUU9L1xcdC9nO30pO3ZhciBubD17fTtRdChubCx7U2VydmVyOigpPT5NZSxTb2NrZXQ6KCk9Pk1lLFN0cmVhbTooKT0+TWUsX2NyZWF0ZVNlcnZlckhhbmRsZTooKT0+TWUsX25vcm1hbGl6ZUFyZ3M6KCk9Pk1lLF9zZXRTaW11bHRhbmVvdXNBY2NlcHRzOigpPT5NZSxjb25uZWN0OigpPT5NZSxjcmVhdGVDb25uZWN0aW9uOigpPT5NZSxjcmVhdGVTZXJ2ZXI6KCk9Pk1lLGRlZmF1bHQ6KCk9PlhFLGlzSVA6KCk9Pk1lLGlzSVB2NDooKT0+TWUsaXNJUHY2OigpPT5NZX0pO2Z1bmN0aW9uIE1lKCl7dGhyb3cgbmV3IEVycm9yKFwiTm9kZS5qcyBuZXQgbW9kdWxlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSlNQTSBjb3JlIG91dHNpZGUgb2YgTm9kZS5qc1wiKX12YXIgWEUsc2w9d2UoKCk9Pnt2KCk7bSgpO18oKTtYRT17X2NyZWF0ZVNlcnZlckhhbmRsZTpNZSxfbm9ybWFsaXplQXJnczpNZSxfc2V0U2ltdWx0YW5lb3VzQWNjZXB0czpNZSxjb25uZWN0Ok1lLGNyZWF0ZUNvbm5lY3Rpb246TWUsY3JlYXRlU2VydmVyOk1lLGlzSVA6TWUsaXNJUHY0Ok1lLGlzSVB2NjpNZSxTZXJ2ZXI6TWUsU29ja2V0Ok1lLFN0cmVhbTpNZX07fSk7dmFyIG9sPU0oTWk9Pnt2KCk7bSgpO18oKTt2YXIgZ2c9TWkmJk1pLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIFpFPWdnKChzbCgpLFgobmwpKSksZVM9Z2cob3QoKSksdFM9KDAsIGVTLmRlZmF1bHQpKFwibXF0dGpzOnRjcFwiKSxyUz0odCxlKT0+e2UucG9ydD1lLnBvcnR8fDE4ODMsZS5ob3N0bmFtZT1lLmhvc3RuYW1lfHxlLmhvc3R8fFwibG9jYWxob3N0XCI7bGV0e3BvcnQ6cn09ZSxpPWUuaG9zdG5hbWU7cmV0dXJuIHRTKFwicG9ydCAlZCBhbmQgaG9zdCAlc1wiLHIsaSksWkUuZGVmYXVsdC5jcmVhdGVDb25uZWN0aW9uKHIsaSl9O01pLmRlZmF1bHQ9clM7fSk7dmFyIHlnPXt9O1F0KHlnLHtkZWZhdWx0OigpPT5pU30pO3ZhciBpUyxiZz13ZSgoKT0+e3YoKTttKCk7XygpO2lTPXt9O30pO3ZhciBsbD1NKExpPT57digpO20oKTtfKCk7dmFyIGFsPUxpJiZMaS5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KExpLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuUz1hbCgoYmcoKSxYKHlnKSkpLHNTPWFsKChzbCgpLFgobmwpKSksb1M9YWwob3QoKSksYVM9KDAsIG9TLmRlZmF1bHQpKFwibXF0dGpzOnRsc1wiKSxsUz0odCxlKT0+e2UucG9ydD1lLnBvcnR8fDg4ODMsZS5ob3N0PWUuaG9zdG5hbWV8fGUuaG9zdHx8XCJsb2NhbGhvc3RcIixzUy5kZWZhdWx0LmlzSVAoZS5ob3N0KT09PTAmJihlLnNlcnZlcm5hbWU9ZS5ob3N0KSxlLnJlamVjdFVuYXV0aG9yaXplZD1lLnJlamVjdFVuYXV0aG9yaXplZCE9PSExLGRlbGV0ZSBlLnBhdGgsYVMoXCJwb3J0ICVkIGhvc3QgJXMgcmVqZWN0VW5hdXRob3JpemVkICViXCIsZS5wb3J0LGUuaG9zdCxlLnJlamVjdFVuYXV0aG9yaXplZCk7bGV0IHI9blMuZGVmYXVsdC5jb25uZWN0KGUpO3Iub24oXCJzZWN1cmVDb25uZWN0XCIsKCk9PntlLnJlamVjdFVuYXV0aG9yaXplZCYmIXIuYXV0aG9yaXplZD9yLmVtaXQoXCJlcnJvclwiLG5ldyBFcnJvcihcIlRMUyBub3QgYXV0aG9yaXplZFwiKSk6ci5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsaSk7fSk7ZnVuY3Rpb24gaShuKXtlLnJlamVjdFVuYXV0aG9yaXplZCYmdC5lbWl0KFwiZXJyb3JcIixuKSxyLmVuZCgpO31yZXR1cm4gci5vbihcImVycm9yXCIsaSkscn07TGkuZGVmYXVsdD1sUzt9KTt2YXIgb3M9TShvaT0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvaSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtvaS5CdWZmZXJlZER1cGxleD1vaS53cml0ZXY9dm9pZCAwO3ZhciB1Uz1EdCgpLHdnPSh5ZSgpLFgoX2UpKTtmdW5jdGlvbiBfZyh0LGUpe2xldCByPW5ldyBBcnJheSh0Lmxlbmd0aCk7Zm9yKGxldCBpPTA7aTx0Lmxlbmd0aDtpKyspdHlwZW9mIHRbaV0uY2h1bms9PVwic3RyaW5nXCI/cltpXT13Zy5CdWZmZXIuZnJvbSh0W2ldLmNodW5rLFwidXRmOFwiKTpyW2ldPXRbaV0uY2h1bms7dGhpcy5fd3JpdGUod2cuQnVmZmVyLmNvbmNhdChyKSxcImJpbmFyeVwiLGUpO31vaS53cml0ZXY9X2c7dmFyIHVsPWNsYXNzIGV4dGVuZHMgdVMuRHVwbGV4e2NvbnN0cnVjdG9yKGUscixpKXtzdXBlcih7b2JqZWN0TW9kZTohMH0pLHRoaXMucHJveHk9cix0aGlzLnNvY2tldD1pLHRoaXMud3JpdGVRdWV1ZT1bXSxlLm9iamVjdE1vZGV8fCh0aGlzLl93cml0ZXY9X2cuYmluZCh0aGlzKSksdGhpcy5pc1NvY2tldE9wZW49ITEsdGhpcy5wcm94eS5vbihcImRhdGFcIixuPT57dGhpcy5wdXNoKG4pO30pO31fcmVhZChlKXt0aGlzLnByb3h5LnJlYWQoZSk7fV93cml0ZShlLHIsaSl7dGhpcy5pc1NvY2tldE9wZW4/dGhpcy53cml0ZVRvUHJveHkoZSxyLGkpOnRoaXMud3JpdGVRdWV1ZS5wdXNoKHtjaHVuazplLGVuY29kaW5nOnIsY2I6aX0pO31fZmluYWwoZSl7dGhpcy53cml0ZVF1ZXVlPVtdLHRoaXMucHJveHkuZW5kKGUpO31fZGVzdHJveShlLHIpe3RoaXMud3JpdGVRdWV1ZT1bXSx0aGlzLnByb3h5LmRlc3Ryb3koKSxyKGUpO31zb2NrZXRSZWFkeSgpe3RoaXMuZW1pdChcImNvbm5lY3RcIiksdGhpcy5pc1NvY2tldE9wZW49ITAsdGhpcy5wcm9jZXNzV3JpdGVRdWV1ZSgpO313cml0ZVRvUHJveHkoZSxyLGkpe3RoaXMucHJveHkud3JpdGUoZSxyKT09PSExP3RoaXMucHJveHkub25jZShcImRyYWluXCIsaSk6aSgpO31wcm9jZXNzV3JpdGVRdWV1ZSgpe2Zvcig7dGhpcy53cml0ZVF1ZXVlLmxlbmd0aD4wOyl7bGV0e2NodW5rOmUsZW5jb2Rpbmc6cixjYjppfT10aGlzLndyaXRlUXVldWUuc2hpZnQoKTt0aGlzLndyaXRlVG9Qcm94eShlLHIsaSk7fX19O29pLkJ1ZmZlcmVkRHVwbGV4PXVsO30pO3ZhciBobD1NKGNsPT57digpO20oKTtfKCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGNsLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBtZz0oeWUoKSxYKF9lKSksZlM9RHQoKSxjUz1vcygpLGd0LGZsLExlO2Z1bmN0aW9uIGhTKCl7bGV0IHQ9bmV3IGZTLlRyYW5zZm9ybTtyZXR1cm4gdC5fd3JpdGU9KGUscixpKT0+e2d0LnNlbmQoe2RhdGE6ZS5idWZmZXIsc3VjY2Vzcygpe2koKTt9LGZhaWwobil7aShuZXcgRXJyb3IobikpO319KTt9LHQuX2ZsdXNoPWU9PntndC5jbG9zZSh7c3VjY2Vzcygpe2UoKTt9fSk7fSx0fWZ1bmN0aW9uIGRTKHQpe3QuaG9zdG5hbWV8fCh0Lmhvc3RuYW1lPVwibG9jYWxob3N0XCIpLHQucGF0aHx8KHQucGF0aD1cIi9cIiksdC53c09wdGlvbnN8fCh0LndzT3B0aW9ucz17fSk7fWZ1bmN0aW9uIHBTKHQsZSl7bGV0IHI9dC5wcm90b2NvbD09PVwid3hzXCI/XCJ3c3NcIjpcIndzXCIsaT1gJHtyfTovLyR7dC5ob3N0bmFtZX0ke3QucGF0aH1gO3JldHVybiB0LnBvcnQmJnQucG9ydCE9PTgwJiZ0LnBvcnQhPT00NDMmJihpPWAke3J9Oi8vJHt0Lmhvc3RuYW1lfToke3QucG9ydH0ke3QucGF0aH1gKSx0eXBlb2YgdC50cmFuc2Zvcm1Xc1VybD09XCJmdW5jdGlvblwiJiYoaT10LnRyYW5zZm9ybVdzVXJsKGksdCxlKSksaX1mdW5jdGlvbiBnUygpe2d0Lm9uT3BlbigoKT0+e0xlLnNvY2tldFJlYWR5KCk7fSksZ3Qub25NZXNzYWdlKHQ9PntsZXR7ZGF0YTplfT10O2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9lPW1nLkJ1ZmZlci5mcm9tKGUpOmU9bWcuQnVmZmVyLmZyb20oZSxcInV0ZjhcIiksZmwucHVzaChlKTt9KSxndC5vbkNsb3NlKCgpPT57TGUuZW1pdChcImNsb3NlXCIpLExlLmVuZCgpLExlLmRlc3Ryb3koKTt9KSxndC5vbkVycm9yKHQ9PntsZXQgZT1uZXcgRXJyb3IodC5lcnJNc2cpO0xlLmRlc3Ryb3koZSk7fSk7fXZhciB5Uz0odCxlKT0+e2lmKGUuaG9zdG5hbWU9ZS5ob3N0bmFtZXx8ZS5ob3N0LCFlLmhvc3RuYW1lKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgaG9zdC4gU3BlY2lmeSBob3N0IG1hbnVhbGx5LlwiKTtsZXQgcj1lLnByb3RvY29sSWQ9PT1cIk1RSXNkcFwiJiZlLnByb3RvY29sVmVyc2lvbj09PTM/XCJtcXR0djMuMVwiOlwibXF0dFwiO2RTKGUpO2xldCBpPXBTKGUsdCk7Z3Q9d3guY29ubmVjdFNvY2tldCh7dXJsOmkscHJvdG9jb2xzOltyXX0pLGZsPWhTKCksTGU9bmV3IGNTLkJ1ZmZlcmVkRHVwbGV4KGUsZmwsZ3QpLExlLl9kZXN0cm95PShvLHMpPT57Z3QuY2xvc2Uoe3N1Y2Nlc3MoKXtzJiZzKG8pO319KTt9O2xldCBuPUxlLmRlc3Ryb3k7cmV0dXJuIExlLmRlc3Ryb3k9KG8scyk9PihMZS5kZXN0cm95PW4sc2V0VGltZW91dCgoKT0+e2d0LmNsb3NlKHtmYWlsKCl7TGUuX2Rlc3Ryb3kobyxzKTt9fSk7fSwwKSxMZSksZ1MoKSxMZX07Y2wuZGVmYXVsdD15Uzt9KTt2YXIgZ2w9TShwbD0+e3YoKTttKCk7XygpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShwbCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZGw9KHllKCksWChfZSkpLGJTPUR0KCksd1M9b3MoKSxrdCxhcyxhaSx2Zz0hMTtmdW5jdGlvbiBfUygpe2xldCB0PW5ldyBiUy5UcmFuc2Zvcm07cmV0dXJuIHQuX3dyaXRlPShlLHIsaSk9PntrdC5zZW5kU29ja2V0TWVzc2FnZSh7ZGF0YTplLmJ1ZmZlcixzdWNjZXNzKCl7aSgpO30sZmFpbCgpe2kobmV3IEVycm9yKTt9fSk7fSx0Ll9mbHVzaD1lPT57a3QuY2xvc2VTb2NrZXQoe3N1Y2Nlc3MoKXtlKCk7fX0pO30sdH1mdW5jdGlvbiBtUyh0KXt0Lmhvc3RuYW1lfHwodC5ob3N0bmFtZT1cImxvY2FsaG9zdFwiKSx0LnBhdGh8fCh0LnBhdGg9XCIvXCIpLHQud3NPcHRpb25zfHwodC53c09wdGlvbnM9e30pO31mdW5jdGlvbiB2Uyh0LGUpe2xldCByPXQucHJvdG9jb2w9PT1cImFsaXNcIj9cIndzc1wiOlwid3NcIixpPWAke3J9Oi8vJHt0Lmhvc3RuYW1lfSR7dC5wYXRofWA7cmV0dXJuIHQucG9ydCYmdC5wb3J0IT09ODAmJnQucG9ydCE9PTQ0MyYmKGk9YCR7cn06Ly8ke3QuaG9zdG5hbWV9OiR7dC5wb3J0fSR7dC5wYXRofWApLHR5cGVvZiB0LnRyYW5zZm9ybVdzVXJsPT1cImZ1bmN0aW9uXCImJihpPXQudHJhbnNmb3JtV3NVcmwoaSx0LGUpKSxpfWZ1bmN0aW9uIEVTKCl7dmd8fCh2Zz0hMCxrdC5vblNvY2tldE9wZW4oKCk9PnthaS5zb2NrZXRSZWFkeSgpO30pLGt0Lm9uU29ja2V0TWVzc2FnZSh0PT57aWYodHlwZW9mIHQuZGF0YT09XCJzdHJpbmdcIil7bGV0IGU9ZGwuQnVmZmVyLmZyb20odC5kYXRhLFwiYmFzZTY0XCIpO2FzLnB1c2goZSk7fWVsc2Uge2xldCBlPW5ldyBGaWxlUmVhZGVyO2UuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwoKT0+e2xldCByPWUucmVzdWx0O3IgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9yPWRsLkJ1ZmZlci5mcm9tKHIpOnI9ZGwuQnVmZmVyLmZyb20ocixcInV0ZjhcIiksYXMucHVzaChyKTt9KSxlLnJlYWRBc0FycmF5QnVmZmVyKHQuZGF0YSk7fX0pLGt0Lm9uU29ja2V0Q2xvc2UoKCk9PnthaS5lbmQoKSxhaS5kZXN0cm95KCk7fSksa3Qub25Tb2NrZXRFcnJvcih0PT57YWkuZGVzdHJveSh0KTt9KSk7fXZhciBTUz0odCxlKT0+e2lmKGUuaG9zdG5hbWU9ZS5ob3N0bmFtZXx8ZS5ob3N0LCFlLmhvc3RuYW1lKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBkZXRlcm1pbmUgaG9zdC4gU3BlY2lmeSBob3N0IG1hbnVhbGx5LlwiKTtsZXQgcj1lLnByb3RvY29sSWQ9PT1cIk1RSXNkcFwiJiZlLnByb3RvY29sVmVyc2lvbj09PTM/XCJtcXR0djMuMVwiOlwibXF0dFwiO21TKGUpO2xldCBpPXZTKGUsdCk7cmV0dXJuIGt0PWUubXksa3QuY29ubmVjdFNvY2tldCh7dXJsOmkscHJvdG9jb2xzOnJ9KSxhcz1fUygpLGFpPW5ldyB3Uy5CdWZmZXJlZER1cGxleChlLGFzLGt0KSxFUygpLGFpfTtwbC5kZWZhdWx0PVNTO30pO3ZhciBTZz1NKChQRCxFZyk9Pnt2KCk7bSgpO18oKTtFZy5leHBvcnRzPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwid3MgZG9lcyBub3Qgd29yayBpbiB0aGUgYnJvd3Nlci4gQnJvd3NlciBjbGllbnRzIG11c3QgdXNlIHRoZSBuYXRpdmUgV2ViU29ja2V0IG9iamVjdFwiKX07fSk7dmFyIF9sPU0oVWk9Pnt2KCk7bSgpO18oKTt2YXIgd2w9VWkmJlVpLl9faW1wb3J0RGVmYXVsdHx8ZnVuY3Rpb24odCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVWksXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIHlsPSh5ZSgpLFgoX2UpKSxBZz13bChTZygpKSxBUz13bChvdCgpKSxJUz1EdCgpLElnPXdsKFBpKCkpLGJsPW9zKCksS3Q9KDAsIEFTLmRlZmF1bHQpKFwibXF0dGpzOndzXCIpLFRTPVtcInJlamVjdFVuYXV0aG9yaXplZFwiLFwiY2FcIixcImNlcnRcIixcImtleVwiLFwicGZ4XCIsXCJwYXNzcGhyYXNlXCJdO2Z1bmN0aW9uIFRnKHQsZSl7bGV0IHI9YCR7dC5wcm90b2NvbH06Ly8ke3QuaG9zdG5hbWV9OiR7dC5wb3J0fSR7dC5wYXRofWA7cmV0dXJuIHR5cGVvZiB0LnRyYW5zZm9ybVdzVXJsPT1cImZ1bmN0aW9uXCImJihyPXQudHJhbnNmb3JtV3NVcmwocix0LGUpKSxyfWZ1bmN0aW9uIFJnKHQpe2xldCBlPXQ7cmV0dXJuIHQuaG9zdG5hbWV8fChlLmhvc3RuYW1lPVwibG9jYWxob3N0XCIpLHQucG9ydHx8KHQucHJvdG9jb2w9PT1cIndzc1wiP2UucG9ydD00NDM6ZS5wb3J0PTgwKSx0LnBhdGh8fChlLnBhdGg9XCIvXCIpLHQud3NPcHRpb25zfHwoZS53c09wdGlvbnM9e30pLCFJZy5kZWZhdWx0JiZ0LnByb3RvY29sPT09XCJ3c3NcIiYmVFMuZm9yRWFjaChyPT57T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJiFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodC53c09wdGlvbnMscikmJihlLndzT3B0aW9uc1tyXT10W3JdKTt9KSxlfWZ1bmN0aW9uIFJTKHQpe2xldCBlPVJnKHQpO2lmKGUuaG9zdG5hbWV8fChlLmhvc3RuYW1lPWUuaG9zdCksIWUuaG9zdG5hbWUpe2lmKHR5cGVvZiBkb2N1bWVudD5cInVcIil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZGV0ZXJtaW5lIGhvc3QuIFNwZWNpZnkgaG9zdCBtYW51YWxseS5cIik7bGV0IHI9bmV3IFVSTChkb2N1bWVudC5VUkwpO2UuaG9zdG5hbWU9ci5ob3N0bmFtZSxlLnBvcnR8fChlLnBvcnQ9TnVtYmVyKHIucG9ydCkpO31yZXR1cm4gZS5vYmplY3RNb2RlPT09dm9pZCAwJiYoZS5vYmplY3RNb2RlPSEoZS5iaW5hcnk9PT0hMHx8ZS5iaW5hcnk9PT12b2lkIDApKSxlfWZ1bmN0aW9uIENTKHQsZSxyKXtLdChcImNyZWF0ZVdlYlNvY2tldFwiKSxLdChgcHJvdG9jb2w6ICR7ci5wcm90b2NvbElkfSAke3IucHJvdG9jb2xWZXJzaW9ufWApO2xldCBpPXIucHJvdG9jb2xJZD09PVwiTVFJc2RwXCImJnIucHJvdG9jb2xWZXJzaW9uPT09Mz9cIm1xdHR2My4xXCI6XCJtcXR0XCI7S3QoYGNyZWF0aW5nIG5ldyBXZWJzb2NrZXQgZm9yIHVybDogJHtlfSBhbmQgcHJvdG9jb2w6ICR7aX1gKTtsZXQgbjtyZXR1cm4gci5jcmVhdGVXZWJzb2NrZXQ/bj1yLmNyZWF0ZVdlYnNvY2tldChlLFtpXSxyKTpuPW5ldyBBZy5kZWZhdWx0KGUsW2ldLHIud3NPcHRpb25zKSxufWZ1bmN0aW9uIEJTKHQsZSl7bGV0IHI9ZS5wcm90b2NvbElkPT09XCJNUUlzZHBcIiYmZS5wcm90b2NvbFZlcnNpb249PT0zP1wibXF0dHYzLjFcIjpcIm1xdHRcIixpPVRnKGUsdCksbjtyZXR1cm4gZS5jcmVhdGVXZWJzb2NrZXQ/bj1lLmNyZWF0ZVdlYnNvY2tldChpLFtyXSxlKTpuPW5ldyBXZWJTb2NrZXQoaSxbcl0pLG4uYmluYXJ5VHlwZT1cImFycmF5YnVmZmVyXCIsbn12YXIgUFM9KHQsZSk9PntLdChcInN0cmVhbUJ1aWxkZXJcIik7bGV0IHI9UmcoZSksaT1UZyhyLHQpLG49Q1ModCxpLHIpLG89QWcuZGVmYXVsdC5jcmVhdGVXZWJTb2NrZXRTdHJlYW0obixyLndzT3B0aW9ucyk7cmV0dXJuIG8udXJsPWksbi5vbihcImNsb3NlXCIsKCk9PntvLmRlc3Ryb3koKTt9KSxvfSxPUz0odCxlKT0+e0t0KFwiYnJvd3NlclN0cmVhbUJ1aWxkZXJcIik7bGV0IHIsbj1SUyhlKS5icm93c2VyQnVmZmVyU2l6ZXx8MTAyNCo1MTIsbz1lLmJyb3dzZXJCdWZmZXJUaW1lb3V0fHwxZTMscz0hZS5vYmplY3RNb2RlLGE9QlModCxlKSx1PWgoZSxFLFMpO2Uub2JqZWN0TW9kZXx8KHUuX3dyaXRldj1ibC53cml0ZXYuYmluZCh1KSksdS5vbihcImNsb3NlXCIsKCk9PnthLmNsb3NlKCk7fSk7bGV0IGM9dHlwZW9mIGEuYWRkRXZlbnRMaXN0ZW5lcjxcInVcIjthLnJlYWR5U3RhdGU9PT1hLk9QRU4/KHI9dSxyLnNvY2tldD1hKToocj1uZXcgYmwuQnVmZmVyZWREdXBsZXgoZSx1LGEpLGM/YS5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLGQpOmEub25vcGVuPWQpLGM/KGEuYWRkRXZlbnRMaXN0ZW5lcihcImNsb3NlXCIsZyksYS5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIix5KSxhLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsdykpOihhLm9uY2xvc2U9ZyxhLm9uZXJyb3I9eSxhLm9ubWVzc2FnZT13KTtmdW5jdGlvbiBoKEksQyxSKXtsZXQgVT1uZXcgSVMuVHJhbnNmb3JtKHtvYmplY3RNb2RlOkkub2JqZWN0TW9kZX0pO3JldHVybiBVLl93cml0ZT1DLFUuX2ZsdXNoPVIsVX1mdW5jdGlvbiBkKCl7S3QoXCJXZWJTb2NrZXQgb25PcGVuXCIpLHIgaW5zdGFuY2VvZiBibC5CdWZmZXJlZER1cGxleCYmci5zb2NrZXRSZWFkeSgpO31mdW5jdGlvbiBnKEkpe0t0KFwiV2ViU29ja2V0IG9uQ2xvc2VcIixJKSxyLmVuZCgpLHIuZGVzdHJveSgpO31mdW5jdGlvbiB5KEkpe0t0KFwiV2ViU29ja2V0IG9uRXJyb3JcIixJKTtsZXQgQz1uZXcgRXJyb3IoXCJXZWJTb2NrZXQgZXJyb3JcIik7Qy5ldmVudD1JLHIuZGVzdHJveShDKTt9ZnVuY3Rpb24gdyhJKXtsZXR7ZGF0YTpDfT1JO0MgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9DPXlsLkJ1ZmZlci5mcm9tKEMpOkM9eWwuQnVmZmVyLmZyb20oQyxcInV0ZjhcIiksdS5wdXNoKEMpO31mdW5jdGlvbiBFKEksQyxSKXtpZihhLmJ1ZmZlcmVkQW1vdW50Pm4pe3NldFRpbWVvdXQoRSxvLEksQyxSKTtyZXR1cm59cyYmdHlwZW9mIEk9PVwic3RyaW5nXCImJihJPXlsLkJ1ZmZlci5mcm9tKEksXCJ1dGY4XCIpKTt0cnl7YS5zZW5kKEkpO31jYXRjaChVKXtyZXR1cm4gUihVKX1SKCk7fWZ1bmN0aW9uIFMoSSl7YS5jbG9zZSgpLEkoKTt9cmV0dXJuIHJ9O1VpLmRlZmF1bHQ9SWcuZGVmYXVsdD9PUzpQUzt9KTt2YXIgUGc9TShScj0+e3YoKTttKCk7XygpO3ZhciBscz1SciYmUnIuX19pbXBvcnREZWZhdWx0fHxmdW5jdGlvbih0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19O09iamVjdC5kZWZpbmVQcm9wZXJ0eShScixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtSci5jb25uZWN0QXN5bmM9dm9pZCAwO3ZhciBrUz1scyhvdCgpKSx4Uz1scygocGcoKSxYKGRnKSkpLE1TPWxzKG5zKCkpLExTPWxzKFBpKCkpLENnPSgwLCBrUy5kZWZhdWx0KShcIm1xdHRqc1wiKSxSZT17fTtMUy5kZWZhdWx0PyhSZS53eD1obCgpLmRlZmF1bHQsUmUud3hzPWhsKCkuZGVmYXVsdCxSZS5hbGk9Z2woKS5kZWZhdWx0LFJlLmFsaXM9Z2woKS5kZWZhdWx0KTooUmUubXF0dD1vbCgpLmRlZmF1bHQsUmUudGNwPW9sKCkuZGVmYXVsdCxSZS5zc2w9bGwoKS5kZWZhdWx0LFJlLnRscz1SZS5zc2wsUmUubXF0dHM9bGwoKS5kZWZhdWx0KTtSZS53cz1fbCgpLmRlZmF1bHQ7UmUud3NzPV9sKCkuZGVmYXVsdDtmdW5jdGlvbiBVUyh0KXtsZXQgZTt0LmF1dGgmJihlPXQuYXV0aC5tYXRjaCgvXiguKyk6KC4rKSQvKSxlPyh0LnVzZXJuYW1lPWVbMV0sdC5wYXNzd29yZD1lWzJdKTp0LnVzZXJuYW1lPXQuYXV0aCk7fWZ1bmN0aW9uIEJnKHQsZSl7aWYoQ2coXCJjb25uZWN0aW5nIHRvIGFuIE1RVFQgYnJva2VyLi4uXCIpLHR5cGVvZiB0PT1cIm9iamVjdFwiJiYhZSYmKGU9dCx0PVwiXCIpLGU9ZXx8e30sdCYmdHlwZW9mIHQ9PVwic3RyaW5nXCIpe2xldCBuPXhTLmRlZmF1bHQucGFyc2UodCwhMCk7aWYobi5wb3J0IT1udWxsJiYobi5wb3J0PU51bWJlcihuLnBvcnQpKSxlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSxuKSxlKSxlLnByb3RvY29sPT09bnVsbCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHByb3RvY29sXCIpO2UucHJvdG9jb2w9ZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sXCJcIik7fWlmKFVTKGUpLGUucXVlcnkmJnR5cGVvZiBlLnF1ZXJ5LmNsaWVudElkPT1cInN0cmluZ1wiJiYoZS5jbGllbnRJZD1lLnF1ZXJ5LmNsaWVudElkKSxlLmNlcnQmJmUua2V5KWlmKGUucHJvdG9jb2wpe2lmKFtcIm1xdHRzXCIsXCJ3c3NcIixcInd4c1wiLFwiYWxpc1wiXS5pbmRleE9mKGUucHJvdG9jb2wpPT09LTEpc3dpdGNoKGUucHJvdG9jb2wpe2Nhc2VcIm1xdHRcIjplLnByb3RvY29sPVwibXF0dHNcIjticmVhaztjYXNlXCJ3c1wiOmUucHJvdG9jb2w9XCJ3c3NcIjticmVhaztjYXNlXCJ3eFwiOmUucHJvdG9jb2w9XCJ3eHNcIjticmVhaztjYXNlXCJhbGlcIjplLnByb3RvY29sPVwiYWxpc1wiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHByb3RvY29sIGZvciBzZWN1cmUgY29ubmVjdGlvbjogXCIke2UucHJvdG9jb2x9XCIhYCl9fWVsc2UgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBzZWN1cmUgcHJvdG9jb2wga2V5XCIpO2lmKCFSZVtlLnByb3RvY29sXSl7bGV0IG49W1wibXF0dHNcIixcIndzc1wiXS5pbmRleE9mKGUucHJvdG9jb2wpIT09LTE7ZS5wcm90b2NvbD1bXCJtcXR0XCIsXCJtcXR0c1wiLFwid3NcIixcIndzc1wiLFwid3hcIixcInd4c1wiLFwiYWxpXCIsXCJhbGlzXCJdLmZpbHRlcigobyxzKT0+biYmcyUyPT09MD8hMTp0eXBlb2YgUmVbb109PVwiZnVuY3Rpb25cIilbMF07fWlmKGUuY2xlYW49PT0hMSYmIWUuY2xpZW50SWQpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBjbGllbnRJZCBmb3IgdW5jbGVhbiBjbGllbnRzXCIpO2UucHJvdG9jb2wmJihlLmRlZmF1bHRQcm90b2NvbD1lLnByb3RvY29sKTtmdW5jdGlvbiByKG4pe3JldHVybiBlLnNlcnZlcnMmJigoIW4uX3JlY29ubmVjdENvdW50fHxuLl9yZWNvbm5lY3RDb3VudD09PWUuc2VydmVycy5sZW5ndGgpJiYobi5fcmVjb25uZWN0Q291bnQ9MCksZS5ob3N0PWUuc2VydmVyc1tuLl9yZWNvbm5lY3RDb3VudF0uaG9zdCxlLnBvcnQ9ZS5zZXJ2ZXJzW24uX3JlY29ubmVjdENvdW50XS5wb3J0LGUucHJvdG9jb2w9ZS5zZXJ2ZXJzW24uX3JlY29ubmVjdENvdW50XS5wcm90b2NvbD9lLnNlcnZlcnNbbi5fcmVjb25uZWN0Q291bnRdLnByb3RvY29sOmUuZGVmYXVsdFByb3RvY29sLGUuaG9zdG5hbWU9ZS5ob3N0LG4uX3JlY29ubmVjdENvdW50KyspLENnKFwiY2FsbGluZyBzdHJlYW1idWlsZGVyIGZvclwiLGUucHJvdG9jb2wpLFJlW2UucHJvdG9jb2xdKG4sZSl9bGV0IGk9bmV3IE1TLmRlZmF1bHQocixlKTtyZXR1cm4gaS5vbihcImVycm9yXCIsKCk9Pnt9KSxpfWZ1bmN0aW9uIE5TKHQsZSxyPSEwKXtyZXR1cm4gbmV3IFByb21pc2UoKGksbik9PntsZXQgbz1CZyh0LGUpLHM9e2Nvbm5lY3Q6dT0+e2EoKSxpKG8pO30sZW5kOigpPT57YSgpLGkobyk7fSxlcnJvcjp1PT57YSgpLG8uZW5kKCksbih1KTt9fTtyPT09ITEmJihzLmNsb3NlPSgpPT57cy5lcnJvcihuZXcgRXJyb3IoXCJDb3VsZG4ndCBjb25uZWN0IHRvIHNlcnZlclwiKSk7fSk7ZnVuY3Rpb24gYSgpe09iamVjdC5rZXlzKHMpLmZvckVhY2godT0+e28ub2ZmKHUsc1t1XSk7fSk7fU9iamVjdC5rZXlzKHMpLmZvckVhY2godT0+e28ub24odSxzW3VdKTt9KTt9KX1Sci5jb25uZWN0QXN5bmM9TlM7UnIuZGVmYXVsdD1CZzt9KTt2YXIgbWw9TShHPT57digpO20oKTtfKCk7dmFyIE9nPUcmJkcuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbih0LGUscixpKXtpPT09dm9pZCAwJiYoaT1yKTt2YXIgbj1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUscik7KCFufHwoXCJnZXRcImluIG4/IWUuX19lc01vZHVsZTpuLndyaXRhYmxlfHxuLmNvbmZpZ3VyYWJsZSkpJiYobj17ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZVtyXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLG4pO306ZnVuY3Rpb24odCxlLHIsaSl7aT09PXZvaWQgMCYmKGk9ciksdFtpXT1lW3JdO30pLHFTPUcmJkcuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbih0LGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KTt9OmZ1bmN0aW9uKHQsZSl7dC5kZWZhdWx0PWU7fSksRFM9RyYmRy5fX2ltcG9ydFN0YXJ8fGZ1bmN0aW9uKHQpe2lmKHQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgZT17fTtpZih0IT1udWxsKWZvcih2YXIgciBpbiB0KXIhPT1cImRlZmF1bHRcIiYmT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQscikmJk9nKGUsdCxyKTtyZXR1cm4gcVMoZSx0KSxlfSxrZz1HJiZHLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24odCxlKXtmb3IodmFyIHIgaW4gdClyIT09XCJkZWZhdWx0XCImJiFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKSYmT2coZSx0LHIpO30sTmk9RyYmRy5fX2ltcG9ydERlZmF1bHR8fGZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KEcsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Ry5SZWFzb25Db2Rlcz1HLlBpbmdUaW1lcj1HLlVuaXF1ZU1lc3NhZ2VJZFByb3ZpZGVyPUcuRGVmYXVsdE1lc3NhZ2VJZFByb3ZpZGVyPUcuU3RvcmU9Ry5NcXR0Q2xpZW50PUcuY29ubmVjdEFzeW5jPUcuY29ubmVjdD1HLkNsaWVudD12b2lkIDA7dmFyIHhnPU5pKG5zKCkpO0cuTXF0dENsaWVudD14Zy5kZWZhdWx0O3ZhciBqUz1OaShZbygpKTtHLkRlZmF1bHRNZXNzYWdlSWRQcm92aWRlcj1qUy5kZWZhdWx0O3ZhciBGUz1OaSgkcCgpKTtHLlVuaXF1ZU1lc3NhZ2VJZFByb3ZpZGVyPUZTLmRlZmF1bHQ7dmFyIFdTPU5pKFpvKCkpO0cuU3RvcmU9V1MuZGVmYXVsdDt2YXIgTWc9RFMoUGcoKSk7Ry5jb25uZWN0PU1nLmRlZmF1bHQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KEcsXCJjb25uZWN0QXN5bmNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTWcuY29ubmVjdEFzeW5jfX0pO3ZhciAkUz1OaShEYSgpKTtHLlBpbmdUaW1lcj0kUy5kZWZhdWx0O0cuQ2xpZW50PXhnLmRlZmF1bHQ7a2cobnMoKSxHKTtrZyhKcigpLEcpO3ZhciBIUz1BaSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShHLFwiUmVhc29uQ29kZXNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSFMuUmVhc29uQ29kZXN9fSk7fSk7dmFyIFFTPU0oV2U9Pnt2KCk7bSgpO18oKTt2YXIgTGc9V2UmJldlLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24odCxlLHIsaSl7aT09PXZvaWQgMCYmKGk9cik7dmFyIG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLHIpOyghbnx8KFwiZ2V0XCJpbiBuPyFlLl9fZXNNb2R1bGU6bi53cml0YWJsZXx8bi5jb25maWd1cmFibGUpKSYmKG49e2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGVbcl19fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsaSxuKTt9OmZ1bmN0aW9uKHQsZSxyLGkpe2k9PT12b2lkIDAmJihpPXIpLHRbaV09ZVtyXTt9KSxWUz1XZSYmV2UuX19zZXRNb2R1bGVEZWZhdWx0fHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbih0LGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiZGVmYXVsdFwiLHtlbnVtZXJhYmxlOiEwLHZhbHVlOmV9KTt9OmZ1bmN0aW9uKHQsZSl7dC5kZWZhdWx0PWU7fSkselM9V2UmJldlLl9faW1wb3J0U3Rhcnx8ZnVuY3Rpb24odCl7aWYodCYmdC5fX2VzTW9kdWxlKXJldHVybiB0O3ZhciBlPXt9O2lmKHQhPW51bGwpZm9yKHZhciByIGluIHQpciE9PVwiZGVmYXVsdFwiJiZPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxyKSYmTGcoZSx0LHIpO3JldHVybiBWUyhlLHQpLGV9LEtTPVdlJiZXZS5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByIGluIHQpciE9PVwiZGVmYXVsdFwiJiYhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUscikmJkxnKGUsdCxyKTt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShXZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgR1M9elMobWwoKSk7V2UuZGVmYXVsdD1HUztLUyhtbCgpLFdlKTt9KTt2YXIgbXF0dCA9IFFTKCk7XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG5AanNwbS9jb3JlL25vZGVsaWJzL2Jyb3dzZXIvYnVmZmVyLmpzOlxuICAoKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqKVxuKi9cblxuY2xhc3MgQ2xvdWRJbnRlcm9wQVBJIHtcbiAgICBjb25uZWN0UGFyYW1zO1xuICAgIF9zZXNzaW9uRGV0YWlscztcbiAgICBfbXF0dENsaWVudDtcbiAgICByZWNvbm5lY3RSZXRyeUxpbWl0ID0gMzA7XG4gICAgcmVjb25uZWN0UmV0cmllcyA9IDA7XG4gICAgY29udGV4dExpc3RlbmVyO1xuICAgIGNvbnN0cnVjdG9yKGNvbm5lY3RQYXJhbXMpIHtcbiAgICAgICAgdGhpcy5jb25uZWN0UGFyYW1zID0gY29ubmVjdFBhcmFtcztcbiAgICB9XG4gICAgZ2V0IHNlc3Npb25EZXRhaWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvbkRldGFpbHM7XG4gICAgfVxuICAgIGdldCBtcXR0Q2xpZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbXF0dENsaWVudDtcbiAgICB9XG4gICAgYXN5bmMgY29ubmVjdChwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyB1c2VySWQsIHBhc3N3b3JkLCBzb3VyY2VJZCwgcGxhdGZvcm1JZCB9ID0gcGFyYW1zO1xuICAgICAgICBsZXQgY29ubmVjdFJlc3BvbnNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29ubmVjdFJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgJHt0aGlzLmNvbm5lY3RQYXJhbXMudXJsfS9zZXNzaW9uc2AsIHtcbiAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgc291cmNlSWQsXG4gICAgICAgICAgICAgICAgcGxhdGZvcm1JZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY29ubmVjdFJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBDbG91ZCBJbnRlcm9wIHVybDogJHt0aGlzLmNvbm5lY3RQYXJhbXMudXJsfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBzZXNzaW9uUm9vdFRvcGljIH0gPSBjb25uZWN0UmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RXaWxsUGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICAgICAgc291cmNlSWQsXG4gICAgICAgICAgICAgICAgcGxhdGZvcm1JZCxcbiAgICAgICAgICAgICAgICBzZXNzaW9uSWQ6IGNvbm5lY3RSZXNwb25zZS5kYXRhLnNlc3Npb25JZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgY2xpZW50SWQ6IGNvbm5lY3RSZXNwb25zZS5kYXRhLnNlc3Npb25JZCxcbiAgICAgICAgICAgICAgICBjbGVhbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm90b2NvbFZlcnNpb246IDUsXG4gICAgICAgICAgICAgICAgd2lsbDoge1xuICAgICAgICAgICAgICAgICAgICB0b3BpYzogJ2ludGVyb3AvbGFzdHdpbGwnLFxuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkOiBCdWZmZXIuZnJvbShKU09OLnN0cmluZ2lmeShsYXN0V2lsbFBheWxvYWQpKSxcbiAgICAgICAgICAgICAgICAgICAgcW9zOiAwLFxuICAgICAgICAgICAgICAgICAgICByZXRhaW46IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcklkLFxuICAgICAgICAgICAgICAgIHBhc3N3b3JkXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fbXF0dENsaWVudCA9IGF3YWl0IG1xdHQuY29ubmVjdEFzeW5jKGNvbm5lY3RSZXNwb25zZS5kYXRhLm1xdHRVcmwsIGNsaWVudE9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbkRldGFpbHMgPSBjb25uZWN0UmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDbG91ZCBJbnRlcm9wIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgdG8gJHt0aGlzLmNvbm5lY3RQYXJhbXMudXJsfWApO1xuICAgICAgICAgICAgdGhpcy5fbXF0dENsaWVudC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDbG91ZCBJbnRlcm9wIEVycm9yOiAke2Vycm9yfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl9tcXR0Q2xpZW50LnN0cmVhbS5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDbG91ZCBJbnRlcm9wIENvbm5lY3Rpb24gRXJyb3I6ICR7ZXJyb3J9YCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX21xdHRDbGllbnQub24oJ3JlY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYENsb3VkIEludGVyb3AgYXR0ZW1wdGluZyByZWNvbm5lY3Rpb24uLi5gKTtcbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHJlY29ubmVjdFBlcmlvZCA9IDMwIHNlY29uZHNcbiAgICAgICAgICAgICAgICAvLyBBdHRlbXB0IHJlY29ubmVjdGlvbiAzMCB0aW1lcyBiZWZvcmUgZW5kaW5nIHNlc3Npb25cbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdFJldHJpZXMgKz0gMTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWNvbm5lY3RSZXRyaWVzID09PSB0aGlzLnJlY29ubmVjdFJldHJ5TGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBDbG91ZCBJbnRlcm9wIHJlYWNoZWQgbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cy4uLmApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIERvZXMgbm90IGZpcmUgb24gaW5pdGlhbCBjb25uZWN0aW9uLCBvbmx5IHN1Y2Nlc3NmdWwgcmVjb25uZWN0aW9uIGF0dGVtcHRzXG4gICAgICAgICAgICB0aGlzLl9tcXR0Q2xpZW50Lm9uKCdjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDbG91ZCBJbnRlcm9wIHN1Y2Nlc3NmdWxseSByZWNvbm5lY3RlZGApO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0UmV0cmllcyA9IDA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX21xdHRDbGllbnQub24oJ21lc3NhZ2UnLCAodG9waWMsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUNvbW1hbmQodG9waWMsIG1lc3NhZ2UsIHRoaXMuX3Nlc3Npb25EZXRhaWxzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gU3Vic2NyaWJlIHRvIGFsbCBjb250ZXh0IGdyb3Vwc1xuICAgICAgICAgICAgdGhpcy5fbXF0dENsaWVudC5zdWJzY3JpYmUoYCR7c2Vzc2lvblJvb3RUb3BpY30vY29udGV4dC1ncm91cHMvI2ApO1xuICAgICAgICAgICAgLy8gTGlzdGVuIG91dCBmb3IgZ2xvYmFsIGNvbW1hbmRzXG4gICAgICAgICAgICB0aGlzLl9tcXR0Q2xpZW50LnN1YnNjcmliZShgJHtzZXNzaW9uUm9vdFRvcGljfS9jb21tYW5kc2ApO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gY29ubmVjdCB0byBDbG91ZCBJbnRlcm9wIGF0ICR7dGhpcy5jb25uZWN0UGFyYW1zLnVybH1gLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zZXNzaW9uRGV0YWlscykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBkaXNjb25uZWN0UmVzcG9uc2UgPSBhd2FpdCBheGlvcy5kZWxldGUoYCR7dGhpcy5jb25uZWN0UGFyYW1zLnVybH0vc2Vzc2lvbnMvJHt0aGlzLl9zZXNzaW9uRGV0YWlscy5zZXNzaW9uSWR9YCk7XG4gICAgICAgICAgICBpZiAoZGlzY29ubmVjdFJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBDbG91ZCBJbnRlcm9wIGRpc2Nvbm5lY3Rpb24gZmFpbGVkYCwgZGlzY29ubmVjdFJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgQ2xvdWQgSW50ZXJvcCBlcnJvciBkdXJpbmcgZGlzY29ubmVjdGlvbmAsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX21xdHRDbGllbnQ/LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgdGhpcy5fbXF0dENsaWVudD8uZW5kKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbkRldGFpbHMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLl9tcXR0Q2xpZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RSZXRyaWVzID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzZXRDb250ZXh0KGNvbnRleHRHcm91cCwgY29udGV4dCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Nlc3Npb25EZXRhaWxzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB1c2VySWQsIHNvdXJjZUlkIH0gPSB0aGlzLmNvbm5lY3RQYXJhbXM7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgICBzb3VyY2VJZCxcbiAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgYXhpb3MucG9zdChgJHt0aGlzLmNvbm5lY3RQYXJhbXMudXJsfS9jb250ZXh0LWdyb3Vwcy8ke3RoaXMuX3Nlc3Npb25EZXRhaWxzLnNlc3Npb25JZH0vJHtjb250ZXh0R3JvdXB9YCwgcGF5bG9hZCk7XG4gICAgfVxuICAgIGFkZENvbnRleHRMaXN0ZW5lcihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmNvbnRleHRMaXN0ZW5lciA9IGNhbGxiYWNrO1xuICAgIH1cbiAgICBzdGFydEludGVudERpc2NvdmVyeShpbnRlbnROYW1lLCBjb250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgZW5kSW50ZW50RGlzY292ZXJ5KGRpc2NvdmVyeUlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgc2VuZEludGVudERldGFpbChkaXNjb3ZlcnlJZCwgaW50ZW50RGV0YWlsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgcmFpc2VJbnRlbnQodGFyZ2V0U2Vzc2lvbiwgaW50ZW50SW5zdGFuY2VJZCwgY29udGV4dCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICAgIGFkZEludGVudERldGFpbExpc3RlbmVyKGNhbGxiYWNrKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgaGFuZGxlQ29tbWFuZCh0b3BpYywgbWVzc2FnZSwgc2Vzc2lvbkRldGFpbHMpIHtcbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID09PSAwIHx8ICFzZXNzaW9uRGV0YWlscykge1xuICAgICAgICAgICAgLy8gSWdub3JlIGNsZWFuIHVwIG1lc3NhZ2VzXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWVzc2FnZUVudmVsb3BlID0gSlNPTi5wYXJzZShtZXNzYWdlLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAodG9waWMuc3RhcnRzV2l0aChgJHtzZXNzaW9uRGV0YWlscy5zZXNzaW9uUm9vdFRvcGljfS9jb250ZXh0LWdyb3Vwcy9gKSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VFbnZlbG9wZS5zb3VyY2Uuc2Vzc2lvbklkID09PSBzZXNzaW9uRGV0YWlscy5zZXNzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZXh0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNoYW5uZWxOYW1lOiBjb250ZXh0R3JvdXAsIHBheWxvYWQ6IGNvbnRleHQsIHNvdXJjZSB9ID0gbWVzc2FnZUVudmVsb3BlO1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dExpc3RlbmVyKGNvbnRleHRHcm91cCwgY29udGV4dCwgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xvdWRJbnRlcm9wT3ZlcnJpZGUoY29uZmlnKSB7XG4gICAgY29uc3QgY2xpZW50ID0gbmV3IENsb3VkSW50ZXJvcEFQSShjb25maWcpO1xuICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5jb25uZWN0KGNvbmZpZyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgIHJldHVybiAoQmFzZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNsYXNzIE5vT3BPdmVycmlkZSBleHRlbmRzIEJhc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiAoQmFzZSkgPT4ge1xuICAgICAgICByZXR1cm4gY2xhc3MgQ2xvdWRJbnRlcm9wT3ZlcnJpZGUgZXh0ZW5kcyBCYXNlIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICAgICAgY2xpZW50LmFkZENvbnRleHRMaXN0ZW5lcigoY29udGV4dEdyb3VwLCBjb250ZXh0LCBzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Q29udGV4dEdyb3VwcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh7IGlkIH0pID0+IGlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmluY2x1ZGVzKGNvbnRleHRHcm91cCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudC5zZXNzaW9uRGV0YWlscz8uc2Vzc2lvbklkICE9PSBzb3VyY2Uuc2Vzc2lvbklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlci5zZXRDb250ZXh0Rm9yR3JvdXAoeyBjb250ZXh0OiBjb250ZXh0IH0sIGNvbnRleHRHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFzeW5jIHNldENvbnRleHRGb3JHcm91cCh7IGNvbnRleHQgfSwgY29udGV4dEdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICBjbGllbnQuc2V0Q29udGV4dChjb250ZXh0R3JvdXBJZCwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgc3VwZXIuc2V0Q29udGV4dEZvckdyb3VwKHsgY29udGV4dCB9LCBjb250ZXh0R3JvdXBJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3luYyBjbG91ZFJlY29ubmVjdCgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGllbnQuY29ubmVjdChjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2V0IGNsb3VkQ29ubmVjdGlvblN0YXRlKCkge1xuICAgICAgICAgICAgICAgIGlmIChjbGllbnQubXF0dENsaWVudD8uY29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnY29ubmVjdGVkJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNsaWVudC5tcXR0Q2xpZW50Py5yZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZWNvbm5lY3RpbmcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Rpc2Nvbm5lY3RlZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgY2xvdWRJbnRlcm9wT3ZlcnJpZGUgfTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwiaW1wb3J0IHR5cGUgT3BlbkZpbiBmcm9tIFwiQG9wZW5maW4vY29yZVwiO1xuaW1wb3J0IHR5cGUgeyBDdXN0b21TZXR0aW5ncyB9IGZyb20gXCIuL3NoYXBlc1wiO1xuXG4vKipcbiAqIExvYWQgdGhlIGN1c3RvbVNldHRpbmdzIHNlY3Rpb24gZnJvbSB0aGUgYXBwbGljYXRpb24gbWFuaWZlc3QuXG4gKiBAcmV0dXJucyBUaGUgY3VzdG9tIHNldHRpbmdzIGZyb20gdGhlIG1hbmlmZXN0LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TWFuaWZlc3RDdXN0b21TZXR0aW5ncygpOiBQcm9taXNlPEN1c3RvbVNldHRpbmdzIHwgdW5kZWZpbmVkPiB7XG5cdGNvbnN0IGFwcCA9IGF3YWl0IGZpbi5BcHBsaWNhdGlvbi5nZXRDdXJyZW50KCk7XG5cdGNvbnN0IG1hbmlmZXN0OiBPcGVuRmluLk1hbmlmZXN0ICYgeyBjdXN0b21TZXR0aW5ncz86IEN1c3RvbVNldHRpbmdzIH0gPSBhd2FpdCBhcHAuZ2V0TWFuaWZlc3QoKTtcblx0cmV0dXJuIG1hbmlmZXN0LmN1c3RvbVNldHRpbmdzO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uYW1kTyA9IHt9OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGNsb3VkSW50ZXJvcE92ZXJyaWRlIH0gZnJvbSBcIkBvcGVuZmluL2Nsb3VkLWludGVyb3BcIjtcbmltcG9ydCB0eXBlIE9wZW5GaW4gZnJvbSBcIkBvcGVuZmluL2NvcmVcIjtcbmltcG9ydCB7IGdldE1hbmlmZXN0Q3VzdG9tU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xuXHRjb25zdCBjdXN0b21TZXR0aW5ncyA9IGF3YWl0IGdldE1hbmlmZXN0Q3VzdG9tU2V0dGluZ3MoKTtcblx0Y29uc3QgaW50ZXJvcE92ZXJyaWRlcyA9IFtdO1xuXG5cdGlmIChjdXN0b21TZXR0aW5ncz8uY2xvdWRJbnRlcm9wUHJvdmlkZXI/LmVuYWJsZWQpIHtcblx0XHRjb25zdCBpbml0aWFsaXplZENsb3VkSW50ZXJvcE92ZXJyaWRlID0gKGF3YWl0IGNsb3VkSW50ZXJvcE92ZXJyaWRlKFxuXHRcdFx0Y3VzdG9tU2V0dGluZ3M/LmNsb3VkSW50ZXJvcFByb3ZpZGVyPy5jb25uZWN0UGFyYW1zXG5cdFx0KSkgYXMgdW5rbm93biBhcyBPcGVuRmluLkNvbnN0cnVjdG9yT3ZlcnJpZGU8T3BlbkZpbi5JbnRlcm9wQnJva2VyPjtcblx0XHRpbnRlcm9wT3ZlcnJpZGVzLnB1c2goaW5pdGlhbGl6ZWRDbG91ZEludGVyb3BPdmVycmlkZSk7XG5cdH1cblx0ZmluLlBsYXRmb3JtLmluaXQoeyBpbnRlcm9wT3ZlcnJpZGU6IGludGVyb3BPdmVycmlkZXMgfSkuY2F0Y2goKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG59KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==