/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************!*\
  !*** ./client/src/app.ts ***!
  \***************************/
const defaultCommonOptions = {
    name: "test-child",
    url: "./preview.html",
    icon: undefined,
    autoShow: true,
    alwaysOnTop: false,
    opacity: 1,
    contextMenu: true,
    showTaskbarIcon: true,
    resizable: true,
    minimizable: true,
    maximizable: true,
    minWidth: 0,
    maxWidth: -1,
    minHeight: 0,
    maxHeight: -1,
    defaultCentered: false,
    defaultLeft: 100,
    defaultTop: 100,
    defaultWidth: 800,
    defaultHeight: 500,
    aspectRatio: 0,
    backgroundColor: undefined,
    frame: true,
    shadow: false
};
const defaultFramelessOptions = {
    shadow: false
};
const defaultResizeRegion = {
    size: 7,
    bottomRightCorner: 9
};
const defaultResizeRegionSides = {
    left: true,
    top: true,
    right: true,
    bottom: true
};
const defaultCornerRounding = {
    width: 0,
    height: 0
};
let selectedCommonOptions = { ...defaultCommonOptions };
let selectedFramelessOptions = { ...defaultFramelessOptions };
let selectedResizeRegion = { ...defaultResizeRegion };
let selectedResizeRegionSides = { ...defaultResizeRegionSides };
let selectedCornerRounding = { ...defaultCornerRounding };
let previewWindow;
document.addEventListener("DOMContentLoaded", async () => {
    try {
        await initDom();
    }
    catch (error) {
        console.error(error);
    }
});
async function initDom() {
    const btnPreview = document.querySelector("#btnPreview");
    btnPreview.addEventListener("click", async () => {
        if (previewWindow) {
            await previewWindow.removeAllListeners();
            await previewWindow.close(true);
            previewWindow = undefined;
        }
        const previewOptions = {
            ...finalizeWindowOptions(),
            saveWindowState: false
        };
        previewWindow = await fin.Window.create(previewOptions);
        await previewWindow.addListener("closed", () => {
            previewWindow = undefined;
        });
    });
    const btnClosePreview = document.querySelector("#btnClosePreview");
    btnClosePreview.addEventListener("click", async () => {
        if (previewWindow) {
            await previewWindow.removeAllListeners();
            await previewWindow.close(true);
            previewWindow = undefined;
        }
    });
    const btnReset = document.querySelector("#btnReset");
    btnReset.addEventListener("click", () => {
        selectedCommonOptions = { ...defaultCommonOptions };
        selectedFramelessOptions = { ...defaultFramelessOptions };
        selectedResizeRegion = { ...defaultResizeRegion };
        selectedResizeRegionSides = { ...defaultResizeRegionSides };
        selectedCornerRounding = { ...defaultCornerRounding };
        populateForm();
        updatePreview();
    });
    const btnCopy = document.querySelector("#btnCopy");
    btnCopy.addEventListener("click", async () => {
        await fin.Clipboard.writeText({ data: createPreview() });
    });
    populateForm();
    updatePreview();
}
function populateForm() {
    // Common options
    connectInput(selectedCommonOptions, "optionName", "name");
    connectInput(selectedCommonOptions, "optionUrl", "url");
    connectInput(selectedCommonOptions, "optionIcon", "icon");
    connectCheckbox(selectedCommonOptions, "optionAlwaysOnTop", "alwaysOnTop");
    connectRange(selectedCommonOptions, "optionOpacity", "opacity");
    connectCheckbox(selectedCommonOptions, "optionShowContextMenu", "contextMenu");
    connectCheckbox(selectedCommonOptions, "optionShowTaskbarIcon", "showTaskbarIcon");
    connectCheckbox(selectedCommonOptions, "optionResizable", "resizable", () => updateResizeState());
    connectCheckbox(selectedCommonOptions, "optionMinimizable", "minimizable");
    connectCheckbox(selectedCommonOptions, "optionMaximizable", "maximizable");
    connectRange(selectedCommonOptions, "optionMinWidth", "minWidth", () => updateResizeWidth());
    connectRange(selectedCommonOptions, "optionMaxWidth", "maxWidth", () => updateResizeWidth());
    connectRange(selectedCommonOptions, "optionMinHeight", "minHeight", () => updateResizeHeight());
    connectRange(selectedCommonOptions, "optionMaxHeight", "maxHeight", () => updateResizeHeight());
    connectCheckbox(selectedCommonOptions, "optionDefaultCentered", "defaultCentered", () => updateDefaultPosition());
    connectRange(selectedCommonOptions, "optionDefaultLeft", "defaultLeft");
    connectRange(selectedCommonOptions, "optionDefaultTop", "defaultTop");
    connectRange(selectedCommonOptions, "optionDefaultWidth", "defaultWidth");
    connectRange(selectedCommonOptions, "optionDefaultHeight", "defaultHeight");
    connectRange(selectedCommonOptions, "optionAspectRatio", "aspectRatio");
    connectColor(selectedCommonOptions, "optionBackgroundColor", "backgroundColor");
    connectCheckbox(selectedCommonOptions, "optionFrame", "frame", () => updateFramelessState());
    // Frameless options
    connectCheckbox(selectedFramelessOptions, "optionShadow", "shadow");
    connectRange(selectedResizeRegion, "optionEdgeResizeSize", "size");
    connectRange(selectedResizeRegion, "optionCornerResizeSize", "bottomRightCorner");
    connectCheckbox(selectedResizeRegionSides, "optionResizeRegionSideLeft", "left");
    connectCheckbox(selectedResizeRegionSides, "optionResizeRegionSideRight", "right");
    connectCheckbox(selectedResizeRegionSides, "optionResizeRegionSideTop", "top");
    connectCheckbox(selectedResizeRegionSides, "optionResizeRegionSideBottom", "bottom");
    connectRange(selectedCornerRounding, "optionCornerRoundingWidth", "width");
    connectRange(selectedCornerRounding, "optionCornerRoundingHeight", "height");
    updateResizeState();
    updateFramelessState();
}
function updateResizeState() {
    const resizable = selectedCommonOptions.resizable ?? defaultCommonOptions.resizable;
    const widthElem = document.querySelector("#resizeWidth");
    widthElem.style.display = resizable ? "flex" : "none";
    const heightElem = document.querySelector("#resizeHeight");
    heightElem.style.display = resizable ? "flex" : "none";
    if (!resizable) {
        delete selectedCommonOptions.minWidth;
        delete selectedCommonOptions.maxWidth;
        delete selectedCommonOptions.minHeight;
        delete selectedCommonOptions.maxHeight;
    }
}
function updateFramelessState() {
    const frame = selectedCommonOptions.frame ?? defaultCommonOptions.frame;
    const sectionFrameless = document.querySelector("#sectionFrameless");
    sectionFrameless.style.display = frame ? "none" : "flex";
}
function updateResizeWidth() {
    if (selectedCommonOptions.maxWidth !== -1 &&
        selectedCommonOptions.maxWidth <= selectedCommonOptions.minWidth) {
        selectedCommonOptions.maxWidth = selectedCommonOptions.minWidth + 50;
        const maxWidthElem = document.querySelector("#optionMaxWidth");
        maxWidthElem.valueAsNumber = selectedCommonOptions.maxWidth;
        const maxWidthValueElem = document.querySelector("#optionMaxWidthValue");
        maxWidthValueElem.textContent = selectedCommonOptions.maxWidth.toString();
    }
}
function updateResizeHeight() {
    if (selectedCommonOptions.maxHeight !== -1 &&
        selectedCommonOptions.maxHeight <= selectedCommonOptions.minHeight) {
        selectedCommonOptions.maxHeight = selectedCommonOptions.minHeight + 50;
        const maxHeightElem = document.querySelector("#optionMaxHeight");
        maxHeightElem.valueAsNumber = selectedCommonOptions.maxHeight;
        const maxHeightValueElem = document.querySelector("#optionMaxHeightValue");
        maxHeightValueElem.textContent = selectedCommonOptions.maxHeight.toString();
    }
}
function updateDefaultPosition() {
    const isCentered = selectedCommonOptions.defaultCentered ?? defaultCommonOptions.defaultCentered;
    const defaultPositionElem = document.querySelector("#defaultPosition");
    defaultPositionElem.style.display = isCentered ? "none" : "flex";
    const optionDefaultLeft = document.querySelector("#optionDefaultLeft");
    optionDefaultLeft.valueAsNumber = defaultCommonOptions.defaultLeft;
    const optionDefaultLeftValue = document.querySelector("#optionDefaultLeftValue");
    optionDefaultLeftValue.textContent = defaultCommonOptions.defaultLeft.toString();
    const optionDefaultTop = document.querySelector("#optionDefaultTop");
    optionDefaultTop.valueAsNumber = defaultCommonOptions.defaultTop;
    const optionDefaultTopValue = document.querySelector("#optionDefaultTopValue");
    optionDefaultTopValue.textContent = defaultCommonOptions.defaultTop.toString();
    if (isCentered) {
        delete selectedCommonOptions.defaultLeft;
        delete selectedCommonOptions.defaultTop;
    }
}
function setProperty(obj, key, value) {
    obj[key] = value;
}
function getProperty(obj, key) {
    return obj[key];
}
function connectInput(selectedValues, fieldId, property) {
    const option = document.querySelector(`#${fieldId}`);
    option.value = getProperty(selectedValues, property) ?? "";
    option.addEventListener("input", () => {
        setProperty(selectedValues, property, option.value === "" ? undefined : option.value);
        updatePreview();
    });
}
function connectCheckbox(selectedValues, fieldId, property, changed) {
    const option = document.querySelector(`#${fieldId}`);
    option.checked = getProperty(selectedValues, property);
    option.addEventListener("change", () => {
        setProperty(selectedValues, property, option.checked);
        if (changed) {
            changed();
        }
        updatePreview();
    });
}
function connectRange(selectedValues, fieldId, property, changed) {
    const option = document.querySelector(`#${fieldId}`);
    const optionValue = document.querySelector(`#${fieldId}Value`);
    option.valueAsNumber = getProperty(selectedValues, property);
    optionValue.textContent = getProperty(selectedValues, property);
    option.addEventListener("input", () => {
        setProperty(selectedValues, property, option.valueAsNumber);
        optionValue.textContent = option.valueAsNumber.toString();
        if (changed) {
            changed();
        }
        updatePreview();
    });
}
function connectColor(selectedValues, fieldId, property, changed) {
    const option = document.querySelector(`#${fieldId}`);
    const optionValue = document.querySelector(`#${fieldId}Value`);
    option.value = getProperty(selectedValues, property);
    optionValue.textContent = getProperty(selectedValues, property);
    option.addEventListener("input", () => {
        setProperty(selectedValues, property, option.value);
        optionValue.textContent = option.value;
        if (changed) {
            changed();
        }
        updatePreview();
    });
}
function finalizeWindowOptions() {
    const finalWindowOptions = {
        name: selectedCommonOptions.name,
        url: selectedCommonOptions.url,
        autoShow: selectedCommonOptions.autoShow
    };
    for (const prop of Object.keys(selectedCommonOptions)) {
        if (selectedCommonOptions[prop] !== defaultCommonOptions[prop]) {
            finalWindowOptions[prop] = selectedCommonOptions[prop];
        }
    }
    if (!(selectedCommonOptions.frame ?? true)) {
        for (const prop of Object.keys(selectedFramelessOptions)) {
            if (selectedFramelessOptions[prop] !== defaultCommonOptions[prop]) {
                finalWindowOptions[prop] = selectedFramelessOptions[prop];
            }
        }
        for (const prop of Object.keys(selectedResizeRegion)) {
            if (selectedResizeRegion[prop] !== defaultResizeRegion[prop]) {
                finalWindowOptions.resizeRegion = finalWindowOptions.resizeRegion ?? {};
                finalWindowOptions.resizeRegion[prop] = selectedResizeRegion[prop];
            }
        }
        for (const prop of Object.keys(selectedResizeRegionSides)) {
            if (selectedResizeRegionSides[prop] !== defaultResizeRegionSides[prop]) {
                finalWindowOptions.resizeRegion = finalWindowOptions.resizeRegion ?? {};
                finalWindowOptions.resizeRegion.sides = finalWindowOptions.resizeRegion.sides ?? {};
                finalWindowOptions.resizeRegion.sides[prop] = selectedResizeRegionSides[prop];
            }
        }
        for (const prop of Object.keys(selectedCornerRounding)) {
            if (selectedCornerRounding[prop] !== defaultCornerRounding[prop]) {
                finalWindowOptions.cornerRounding = finalWindowOptions.cornerRounding ?? {};
                finalWindowOptions.cornerRounding[prop] = selectedCornerRounding[prop];
            }
        }
    }
    return finalWindowOptions;
}
function updatePreview() {
    const previewElem = document.querySelector("#preview");
    previewElem.textContent = createPreview();
}
function createPreview() {
    return `await fin.Window.create(${JSON.stringify(finalizeWindowOptions(), undefined, "  ")});`;
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,