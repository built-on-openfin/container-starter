/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@finos/fdc3/dist/fdc3.esm.js":
/*!*******************************************************!*\
  !*** ../../node_modules/@finos/fdc3/dist/fdc3.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChannelError": () => (/* binding */ ChannelError),
/* harmony export */   "ContextTypes": () => (/* binding */ ContextTypes),
/* harmony export */   "Convert": () => (/* binding */ Convert),
/* harmony export */   "Intents": () => (/* binding */ Intents),
/* harmony export */   "OpenError": () => (/* binding */ OpenError),
/* harmony export */   "ResolveError": () => (/* binding */ ResolveError),
/* harmony export */   "addContextListener": () => (/* binding */ addContextListener),
/* harmony export */   "addIntentListener": () => (/* binding */ addIntentListener),
/* harmony export */   "broadcast": () => (/* binding */ broadcast),
/* harmony export */   "compareVersionNumbers": () => (/* binding */ compareVersionNumbers),
/* harmony export */   "fdc3Ready": () => (/* binding */ fdc3Ready),
/* harmony export */   "findIntent": () => (/* binding */ findIntent),
/* harmony export */   "findIntentsByContext": () => (/* binding */ findIntentsByContext),
/* harmony export */   "getCurrentChannel": () => (/* binding */ getCurrentChannel),
/* harmony export */   "getInfo": () => (/* binding */ getInfo),
/* harmony export */   "getOrCreateChannel": () => (/* binding */ getOrCreateChannel),
/* harmony export */   "getSystemChannels": () => (/* binding */ getSystemChannels),
/* harmony export */   "joinChannel": () => (/* binding */ joinChannel),
/* harmony export */   "leaveCurrentChannel": () => (/* binding */ leaveCurrentChannel),
/* harmony export */   "open": () => (/* binding */ open),
/* harmony export */   "raiseIntent": () => (/* binding */ raiseIntent),
/* harmony export */   "raiseIntentForContext": () => (/* binding */ raiseIntentForContext),
/* harmony export */   "versionIsAtLeast": () => (/* binding */ versionIsAtLeast)
/* harmony export */ });
/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright 2019 FINOS FDC3 contributors - see NOTICE file
 */
var OpenError;

(function (OpenError) {
  OpenError["AppNotFound"] = "AppNotFound";
  OpenError["ErrorOnLaunch"] = "ErrorOnLaunch";
  OpenError["AppTimeout"] = "AppTimeout";
  OpenError["ResolverUnavailable"] = "ResolverUnavailable";
})(OpenError || (OpenError = {}));

var ResolveError;

(function (ResolveError) {
  ResolveError["NoAppsFound"] = "NoAppsFound";
  ResolveError["ResolverUnavailable"] = "ResolverUnavailable";
  ResolveError["ResolverTimeout"] = "ResolverTimeout";
})(ResolveError || (ResolveError = {}));

var ChannelError;

(function (ChannelError) {
  ChannelError["NoChannelFound"] = "NoChannelFound";
  ChannelError["AccessDenied"] = "AccessDenied";
  ChannelError["CreationFailed"] = "CreationFailed";
})(ChannelError || (ChannelError = {}));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var DEFAULT_TIMEOUT = 5000;
var UnavailableError = /*#__PURE__*/new Error('FDC3 DesktopAgent not available at `window.fdc3`.');
var TimeoutError = /*#__PURE__*/new Error('Timed out waiting for `fdc3Ready` event.');
var UnexpectedError = /*#__PURE__*/new Error('`fdc3Ready` event fired, but `window.fdc3` not set to DesktopAgent.');

function rejectIfNoGlobal(f) {
  return window.fdc3 ? f() : Promise.reject(UnavailableError);
}

function throwIfNoGlobal(f) {
  if (!window.fdc3) {
    throw UnavailableError;
  }

  return f();
}

var fdc3Ready = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(waitForMs) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (waitForMs === void 0) {
              waitForMs = DEFAULT_TIMEOUT;
            }

            return _context.abrupt("return", new Promise(function (resolve, reject) {
              // if the global is already available resolve immediately
              if (window.fdc3) {
                resolve();
              } else {
                // if its not available setup a timeout to return a rejected promise
                var timeout = setTimeout(function () {
                  return window.fdc3 ? resolve() : reject(TimeoutError);
                }, waitForMs); // listen for the fdc3Ready event

                window.addEventListener('fdc3Ready', function () {
                  clearTimeout(timeout);
                  window.fdc3 ? resolve() : reject(UnexpectedError);
                }, {
                  once: true
                });
              }
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fdc3Ready(_x) {
    return _ref.apply(this, arguments);
  };
}();
function open(app, context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.open(app, context);
  });
}
function findIntent(intent, context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.findIntent(intent, context);
  });
}
function findIntentsByContext(context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.findIntentsByContext(context);
  });
}
function broadcast(context) {
  throwIfNoGlobal(function () {
    return window.fdc3.broadcast(context);
  });
}
function raiseIntent(intent, context, app) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.raiseIntent(intent, context, app);
  });
}
function raiseIntentForContext(context, app) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.raiseIntentForContext(context, app);
  });
}
function addIntentListener(intent, handler) {
  return throwIfNoGlobal(function () {
    return window.fdc3.addIntentListener(intent, handler);
  });
}
function addContextListener(contextTypeOrHandler, handler) {
  if (typeof contextTypeOrHandler !== 'function') {
    return throwIfNoGlobal(function () {
      return window.fdc3.addContextListener(contextTypeOrHandler, handler);
    });
  } else {
    return throwIfNoGlobal(function () {
      return window.fdc3.addContextListener(contextTypeOrHandler);
    });
  }
}
function getSystemChannels() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getSystemChannels();
  });
}
function joinChannel(channelId) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.joinChannel(channelId);
  });
}
function getOrCreateChannel(channelId) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getOrCreateChannel(channelId);
  });
}
function getCurrentChannel() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getCurrentChannel();
  });
}
function leaveCurrentChannel() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.leaveCurrentChannel();
  });
}
function getInfo() {
  return throwIfNoGlobal(function () {
    return window.fdc3.getInfo();
  });
}
/**
 * Compare numeric semver version number strings (in the form `1.2.3`).
 *
 * Returns `-1` if the first argument is a lower version number than the second,
 * `1` if the first argument is greater than the second, 0 if the arguments are
 * equal and `null` if an error occurred during the comparison.
 *
 * @param a
 * @param b
 */

var compareVersionNumbers = function compareVersionNumbers(a, b) {
  try {
    var aVerArr = a.split('.').map(Number);
    var bVerArr = b.split('.').map(Number);

    for (var index = 0; index < Math.max(aVerArr.length, bVerArr.length); index++) {
      /* If one version number has more digits and the other does not, and they are otherwise equal,
         assume the longer is greater. E.g. 1.1.1 > 1.1 */
      if (index === aVerArr.length || aVerArr[index] < bVerArr[index]) {
        return -1;
      } else if (index === bVerArr.length || aVerArr[index] > bVerArr[index]) {
        return 1;
      }
    }

    return 0;
  } catch (e) {
    console.error('Failed to compare version strings', e);
    return null;
  }
};
/**
 * Check if the FDC3 version in an ImplementationMetadata object is greater than
 * or equal to the supplied numeric semver version number string (in the form `1.2.3`).
 *
 * Returns a boolean or null if an error occurred while comparing the version numbers.
 *
 * @param metadata
 * @param version
 */

var versionIsAtLeast = function versionIsAtLeast(metadata, version) {
  var comparison = compareVersionNumbers(metadata.fdc3Version, version);
  return comparison === null ? null : comparison >= 0 ? true : false;
};

var ContextTypes;

(function (ContextTypes) {
  ContextTypes["Contact"] = "fdc3.contact";
  ContextTypes["ContactList"] = "fdc3.contactList";
  ContextTypes["Country"] = "fdc3.country";
  ContextTypes["Instrument"] = "fdc3.instrument";
  ContextTypes["Organization"] = "fdc3.organization";
  ContextTypes["Portfolio"] = "fdc3.portfolio";
  ContextTypes["Position"] = "fdc3.position";
})(ContextTypes || (ContextTypes = {}));

// To parse this data:
//
//   import { Convert, Context, Contact, ContactList, Instrument, InstrumentList, Country, Organization, Portfolio, Position } from "./file";
//
//   const context = Convert.toContext(json);
//   const contact = Convert.toContact(json);
//   const contactList = Convert.toContactList(json);
//   const instrument = Convert.toInstrument(json);
//   const instrumentList = Convert.toInstrumentList(json);
//   const country = Convert.toCountry(json);
//   const organization = Convert.toOrganization(json);
//   const portfolio = Convert.toPortfolio(json);
//   const position = Convert.toPosition(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
var Convert = /*#__PURE__*/function () {
  function Convert() {}

  Convert.toContext = function toContext(json) {
    return cast(JSON.parse(json), r('Context'));
  };

  Convert.contextToJson = function contextToJson(value) {
    return JSON.stringify(uncast(value, r('Context')), null, 2);
  };

  Convert.toContact = function toContact(json) {
    return cast(JSON.parse(json), r('Contact'));
  };

  Convert.contactToJson = function contactToJson(value) {
    return JSON.stringify(uncast(value, r('Contact')), null, 2);
  };

  Convert.toContactList = function toContactList(json) {
    return cast(JSON.parse(json), r('ContactList'));
  };

  Convert.contactListToJson = function contactListToJson(value) {
    return JSON.stringify(uncast(value, r('ContactList')), null, 2);
  };

  Convert.toInstrument = function toInstrument(json) {
    return cast(JSON.parse(json), r('Instrument'));
  };

  Convert.instrumentToJson = function instrumentToJson(value) {
    return JSON.stringify(uncast(value, r('Instrument')), null, 2);
  };

  Convert.toInstrumentList = function toInstrumentList(json) {
    return cast(JSON.parse(json), r('InstrumentList'));
  };

  Convert.instrumentListToJson = function instrumentListToJson(value) {
    return JSON.stringify(uncast(value, r('InstrumentList')), null, 2);
  };

  Convert.toCountry = function toCountry(json) {
    return cast(JSON.parse(json), r('Country'));
  };

  Convert.countryToJson = function countryToJson(value) {
    return JSON.stringify(uncast(value, r('Country')), null, 2);
  };

  Convert.toOrganization = function toOrganization(json) {
    return cast(JSON.parse(json), r('Organization'));
  };

  Convert.organizationToJson = function organizationToJson(value) {
    return JSON.stringify(uncast(value, r('Organization')), null, 2);
  };

  Convert.toPortfolio = function toPortfolio(json) {
    return cast(JSON.parse(json), r('Portfolio'));
  };

  Convert.portfolioToJson = function portfolioToJson(value) {
    return JSON.stringify(uncast(value, r('Portfolio')), null, 2);
  };

  Convert.toPosition = function toPosition(json) {
    return cast(JSON.parse(json), r('Position'));
  };

  Convert.positionToJson = function positionToJson(value) {
    return JSON.stringify(uncast(value, r('Position')), null, 2);
  };

  return Convert;
}();

function invalidValue(typ, val, key) {
  if (key === void 0) {
    key = '';
  }

  if (key) {
    throw Error("Invalid value for key \"" + key + "\". Expected type " + JSON.stringify(typ) + " but got " + JSON.stringify(val));
  }

  throw Error("Invalid value " + JSON.stringify(val) + " for type " + JSON.stringify(typ));
}

function jsonToJSProps(typ) {
  if (typ.jsonToJS === undefined) {
    var map = {};
    typ.props.forEach(function (p) {
      return map[p.json] = {
        key: p.js,
        typ: p.typ
      };
    });
    typ.jsonToJS = map;
  }

  return typ.jsonToJS;
}

function jsToJSONProps(typ) {
  if (typ.jsToJSON === undefined) {
    var map = {};
    typ.props.forEach(function (p) {
      return map[p.js] = {
        key: p.json,
        typ: p.typ
      };
    });
    typ.jsToJSON = map;
  }

  return typ.jsToJSON;
}

function transform(val, typ, getProps, key) {
  if (key === void 0) {
    key = '';
  }

  function transformPrimitive(typ, val) {
    if (typeof typ === typeof val) return val;
    return invalidValue(typ, val, key);
  }

  function transformUnion(typs, val) {
    // val must validate against one typ in typs
    var l = typs.length;

    for (var i = 0; i < l; i++) {
      var _typ = typs[i];

      try {
        return transform(val, _typ, getProps);
      } catch (_) {}
    }

    return invalidValue(typs, val);
  }

  function transformEnum(cases, val) {
    if (cases.indexOf(val) !== -1) return val;
    return invalidValue(cases, val);
  }

  function transformArray(typ, val) {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) return invalidValue('array', val);
    return val.map(function (el) {
      return transform(el, typ, getProps);
    });
  }

  function transformDate(val) {
    if (val === null) {
      return null;
    }

    var d = new Date(val);

    if (isNaN(d.valueOf())) {
      return invalidValue('Date', val);
    }

    return d;
  }

  function transformObject(props, additional, val) {
    if (val === null || typeof val !== 'object' || Array.isArray(val)) {
      return invalidValue('object', val);
    }

    var result = {};
    Object.getOwnPropertyNames(props).forEach(function (key) {
      var prop = props[key];
      var v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
      result[prop.key] = transform(v, prop.typ, getProps, prop.key);
    });
    Object.getOwnPropertyNames(val).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps, key);
      }
    });
    return result;
  }

  if (typ === 'any') return val;

  if (typ === null) {
    if (val === null) return val;
    return invalidValue(typ, val);
  }

  if (typ === false) return invalidValue(typ, val);

  while (typeof typ === 'object' && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }

  if (Array.isArray(typ)) return transformEnum(typ, val);

  if (typeof typ === 'object') {
    return typ.hasOwnProperty('unionMembers') ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty('arrayItems') ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty('props') ? transformObject(getProps(typ), typ.additional, val) : invalidValue(typ, val);
  } // Numbers can be parsed by Date but shouldn't be.


  if (typ === Date && typeof val !== 'number') return transformDate(val);
  return transformPrimitive(typ, val);
}

function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}

function a(typ) {
  return {
    arrayItems: typ
  };
}

function u() {
  for (var _len = arguments.length, typs = new Array(_len), _key = 0; _key < _len; _key++) {
    typs[_key] = arguments[_key];
  }

  return {
    unionMembers: typs
  };
}

function o(props, additional) {
  return {
    props: props,
    additional: additional
  };
}

function m(additional) {
  return {
    props: [],
    additional: additional
  };
}

function r(name) {
  return {
    ref: name
  };
}

var typeMap = {
  Context: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }], 'any'),
  ContactList: /*#__PURE__*/o([{
    json: 'contacts',
    js: 'contacts',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Contact'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Contact: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('ContactID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  ContactID: /*#__PURE__*/o([{
    json: 'email',
    js: 'email',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  InstrumentList: /*#__PURE__*/o([{
    json: 'instruments',
    js: 'instruments',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Instrument'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Instrument: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('InstrumentID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  InstrumentID: /*#__PURE__*/o([{
    json: 'BBG',
    js: 'BBG',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'CUSIP',
    js: 'CUSIP',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FIGI',
    js: 'FIGI',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ISIN',
    js: 'ISIN',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'PERMID',
    js: 'PERMID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'RIC',
    js: 'RIC',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'SEDOL',
    js: 'SEDOL',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ticker',
    js: 'ticker',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Country: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('CountryID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  CountryID: /*#__PURE__*/o([{
    json: 'ISOALPHA2',
    js: 'ISOALPHA2',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ISOALPHA3',
    js: 'ISOALPHA3',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Organization: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('OrganizationID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  OrganizationID: /*#__PURE__*/o([{
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'LEI',
    js: 'LEI',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'PERMID',
    js: 'PERMID',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Portfolio: /*#__PURE__*/o([{
    json: 'positions',
    js: 'positions',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Position'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Position: /*#__PURE__*/o([{
    json: 'holding',
    js: 'holding',
    typ: 3.14
  }, {
    json: 'instrument',
    js: 'instrument',
    typ: /*#__PURE__*/r('Instrument')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any')
};

var Intents;

(function (Intents) {
  Intents["StartCall"] = "StartCall";
  Intents["StartChat"] = "StartChat";
  Intents["ViewChart"] = "ViewChart";
  Intents["ViewContact"] = "ViewContact";
  Intents["ViewQuote"] = "ViewQuote";
  Intents["ViewNews"] = "ViewNews";
  Intents["ViewInstrument"] = "ViewInstrument";
  Intents["ViewAnalysis"] = "ViewAnalysis";
})(Intents || (Intents = {}));


//# sourceMappingURL=fdc3.esm.js.map


/***/ }),

/***/ "../../node_modules/@openfin/excel/openfin.excel.js":
/*!**********************************************************!*\
  !*** ../../node_modules/@openfin/excel/openfin.excel.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterError": () => (/* binding */ r),
/* harmony export */   "ApiError": () => (/* binding */ o),
/* harmony export */   "EventError": () => (/* binding */ s),
/* harmony export */   "ExcelCellBorderLineStyle": () => (/* binding */ a),
/* harmony export */   "ExcelCellHorizontalAlignment": () => (/* binding */ c),
/* harmony export */   "ExcelCellPattern": () => (/* binding */ d),
/* harmony export */   "ExcelCellVerticalAlignment": () => (/* binding */ h),
/* harmony export */   "ExcelFilterOperator": () => (/* binding */ l),
/* harmony export */   "InitializationError": () => (/* binding */ u),
/* harmony export */   "ParameterError": () => (/* binding */ p),
/* harmony export */   "disableLogging": () => (/* binding */ w),
/* harmony export */   "enableLogging": () => (/* binding */ y),
/* harmony export */   "getExcelApplication": () => (/* binding */ f)
/* harmony export */ });
var e={3885:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(4794);class s extends i.Base{async wrap(e){this.wire.sendAction("wrap-application").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.Application(this.wire,e)}wrapSync(e){this.wire.sendAction("wrap-application-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.Application(this.wire,e)}async _create(e){return void 0===e.waitForPageLoad&&(e.waitForPageLoad=!1),void 0===e.autoShow&&void 0===e.isPlatformController&&(e.autoShow=!0),await this.wire.sendAction("create-application",e),this.wrap({uuid:e.uuid})}create(e){return console.warn("Deprecation Warning: fin.Application.create is deprecated. Please use fin.Application.start"),this.wire.sendAction("application-create").catch((e=>{})),this._create(e)}async start(e){this.wire.sendAction("start-application").catch((e=>{}));const t=await this._create(e);return await this.wire.sendAction("run-application",{uuid:e.uuid}),t}async startManyManifests(e){return this.wire.sendAction("run-applications",{applications:e}).then((()=>{}))}getCurrent(){return this.wire.sendAction("get-current-application").catch((e=>{})),this.wrap({uuid:this.wire.me.uuid})}getCurrentSync(){return this.wire.sendAction("get-current-application-sync").catch((e=>{})),this.wrapSync({uuid:this.wire.me.uuid})}async startFromManifest(e,t){this.wire.sendAction("application-start-from-manifest").catch((e=>{}));const n=await this._createFromManifest(e);return await n._run(t),n}createFromManifest(e){return console.warn("Deprecation Warning: fin.Application.createFromManifest is deprecated. Please use fin.Application.startFromManifest"),this.wire.sendAction("application-create-from-manifest").catch((e=>{})),this._createFromManifest(e)}_createFromManifest(e){return this.wire.sendAction("get-application-manifest",{manifestUrl:e}).then((({payload:e})=>{const t=e.data.platform?e.data.platform.uuid:e.data.startup_app.uuid;return this.wrap({uuid:t})})).then((t=>(t._manifestUrl=e,t)))}}t.default=s},4794:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Application=void 0;const i=n(9659),r=n(4997),o=n(4169);class s extends i.EmitterBase{constructor(e,t){super(e,"application",t.uuid),this.identity=t,this.window=new r._Window(this.wire,{uuid:this.identity.uuid,name:this.identity.uuid})}windowListFromIdentityList(e){const t=[];return e.forEach((e=>{t.push(new r._Window(this.wire,{uuid:e.uuid,name:e.name}))})),t}isRunning(){return this.wire.sendAction("is-application-running",this.identity).then((({payload:e})=>e.data))}async quit(e=!1){await this._close(e),await this.wire.sendAction("destroy-application",{force:e,...this.identity})}_close(e=!1){return this.wire.sendAction("close-application",{force:e,...this.identity}).then((()=>{}))}close(e=!1){return console.warn("Deprecation Warning: Application.close is deprecated Please use Application.quit"),this.wire.sendAction("application-close",this.identity).catch((e=>{})),this._close(e)}getChildWindows(){return this.wire.sendAction("get-child-windows",this.identity).then((({payload:e})=>{const t=[];return e.data.forEach((e=>{t.push({uuid:this.identity.uuid,name:e})})),this.windowListFromIdentityList(t)}))}getManifest(){return this.wire.sendAction("get-application-manifest",this.identity).then((({payload:e})=>e.data))}getParentUuid(){return this.wire.sendAction("get-parent-application",this.identity).then((({payload:e})=>e.data))}getShortcuts(){return this.wire.sendAction("get-shortcuts",this.identity).then((({payload:e})=>e.data))}async getViews(){const{payload:e}=await this.wire.sendAction("application-get-views",this.identity);return e.data.map((e=>new o.View(this.wire,e)))}getZoomLevel(){return this.wire.sendAction("get-application-zoom-level",this.identity).then((({payload:e})=>e.data))}getWindow(){return this.wire.sendAction("application-get-window",this.identity).catch((e=>{})),Promise.resolve(this.window)}registerUser(e,t){return this.wire.sendAction("register-user",{userName:e,appName:t,...this.identity}).then((()=>{}))}removeTrayIcon(){return this.wire.sendAction("remove-tray-icon",this.identity).then((()=>{}))}restart(){return this.wire.sendAction("restart-application",this.identity).then((()=>{}))}run(){return console.warn("Deprecation Warning: Application.run is deprecated Please use fin.Application.start"),this.wire.sendAction("application-run",this.identity).catch((e=>{})),this._run()}_run(e={}){return this.wire.sendAction("run-application",{manifestUrl:this._manifestUrl,opts:e,...this.identity}).then((()=>{}))}scheduleRestart(){return this.wire.sendAction("relaunch-on-close",this.identity).then((()=>{}))}async sendApplicationLog(){const{payload:e}=await this.wire.sendAction("send-application-log",this.identity);return e.data}async setJumpList(e){await this.wire.sendAction("set-jump-list",{config:e,...this.identity})}setTrayIcon(e){return this.wire.sendAction("set-tray-icon",{enabledIcon:e,...this.identity}).then((()=>{}))}setShortcuts(e){return this.wire.sendAction("set-shortcuts",{data:e,...this.identity}).then((()=>{}))}async setShortcutQueryParams(e){await this.wire.sendAction("set-shortcut-query-args",{data:e,...this.identity})}setZoomLevel(e){return this.wire.sendAction("set-application-zoom-level",{level:e,...this.identity}).then((()=>{}))}async setAppLogUsername(e){await this.wire.sendAction("set-app-log-username",{data:e,...this.identity})}getTrayIconInfo(){return this.wire.sendAction("get-tray-icon-info",this.identity).then((({payload:e})=>e.data))}terminate(){return this.wire.sendAction("terminate-application",this.identity).then((()=>{}))}wait(){return this.wire.sendAction("wait-for-hung-application",this.identity).then((()=>{}))}getInfo(){return this.wire.sendAction("get-info",this.identity).then((({payload:e})=>e.data))}async getProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("application-get-process-info",this.identity);return e}async setFileDownloadLocation(e){await this.wire.sendAction("set-file-download-location",{downloadLocation:e,...this.identity})}}t.Application=s},7264:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(3885);r(n(4794),t),t.default=o.default},9659:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Reply=t.EmitterBase=t.Base=void 0;const s=n(3442),a=n(8068);class c{constructor(e){this.isNodeEnvironment=()=>"NodeEnvironment"===this.wire.environment.constructor.name,this.isOpenFinEnvironment=()=>"OpenFinEnvironment"===this.wire.environment.constructor.name,this.wire=e}get fin(){return a.getFin(this.wire)}get me(){return this.wire.me}}t.Base=c,t.EmitterBase=class extends c{constructor(e,t,...n){super(e),this.topic=t,i.set(this,void 0),this.eventNames=()=>this.hasEmitter()?this.getOrCreateEmitter().eventNames():[],this.emit=(e,t,...n)=>!!this.hasEmitter()&&this.getOrCreateEmitter().emit(e,t,...n),this.hasEmitter=()=>this.wire.eventAggregator.has(o(this,i)),this.getOrCreateEmitter=()=>this.wire.eventAggregator.getOrCreate(o(this,i)),this.listeners=e=>this.hasEmitter()?this.getOrCreateEmitter().listeners(e):[],this.listenerCount=e=>this.hasEmitter()?this.getOrCreateEmitter().listenerCount(e):0,this.registerEventListener=async(e,t={},n,i)=>{const r={...this.identity,timestamp:t.timestamp||Date.now(),topic:this.topic,type:e},o=this.getOrCreateEmitter();n(o);try{await this.wire.sendAction("subscribe-to-desktop-event",r)}catch(e){throw i(o),this.deleteEmitterIfNothingRegistered(o),e}},this.deregisterEventListener=async(e,t={})=>{if(this.hasEmitter()){const n={...this.identity,timestamp:t.timestamp||Date.now(),topic:this.topic,type:e};return await this.wire.sendAction("unsubscribe-to-desktop-event",n).catch((()=>null)),this.getOrCreateEmitter()}return Promise.resolve()},this.on=async(e,t,n)=>(await this.registerEventListener(e,n,(n=>{n.on(e,t)}),(n=>{n.removeListener(e,t)})),this),this.addListener=this.on,this.once=async(e,t,n)=>{const i=()=>this.deregisterEventListener(e);return await this.registerEventListener(e,n,(n=>{n.once(e,i),n.once(e,t)}),(n=>{n.removeListener(e,i),n.removeListener(e,t)})),this},this.prependListener=async(e,t,n)=>(await this.registerEventListener(e,n,(n=>{n.prependListener(e,t)}),(n=>{n.removeListener(e,t)})),this),this.prependOnceListener=async(e,t,n)=>{const i=()=>this.deregisterEventListener(e);return await this.registerEventListener(e,n,(n=>{n.prependOnceListener(e,t),n.once(e,i)}),(n=>{n.removeListener(e,t),n.removeListener(e,i)})),this},this.removeListener=async(e,t,n)=>{const i=await this.deregisterEventListener(e,n);return i&&(i.removeListener(e,t),this.deleteEmitterIfNothingRegistered(i)),this},this.deregisterAllListeners=async e=>{const t={...this.identity,type:e,topic:this.topic};if(this.hasEmitter()){const e=this.getOrCreateEmitter(),n=e.listenerCount(t.type),i=[];for(let e=0;e<n;e++)i.push(this.wire.sendAction("unsubscribe-to-desktop-event",t).catch((()=>null)));return await Promise.all(i),e}},this.removeAllListeners=async e=>{const t=async e=>{const t=await this.deregisterAllListeners(e);t&&(t.removeAllListeners(e),this.deleteEmitterIfNothingRegistered(t))};if(e)await t(e);else if(this.hasEmitter()){const e=this.getOrCreateEmitter().eventNames();await s.promiseMap(e,t)}return this},r(this,i,[t,...n]),this.listeners=e=>this.hasEmitter()?this.getOrCreateEmitter().listeners(e):[]}deleteEmitterIfNothingRegistered(e){0===e.eventNames().length&&this.wire.eventAggregator.delete(o(this,i))}},i=new WeakMap,t.Reply=class{}},3427:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659);class r extends i.Base{writeText(e){return this.wire.sendAction("clipboard-write-text",e).then((()=>{}))}readText(e){return this.wire.sendAction("clipboard-read-text",e).then((({payload:e})=>e.data))}writeHtml(e){return this.wire.sendAction("clipboard-write-html",e).then((()=>{}))}readHtml(e){return this.wire.sendAction("clipboard-read-html",e).then((({payload:e})=>e.data))}writeRtf(e){return this.wire.sendAction("clipboard-write-rtf",e).then((()=>{}))}readRtf(e){return this.wire.sendAction("clipboard-read-rtf",e).then((({payload:e})=>e.data))}write(e){return this.wire.sendAction("clipboard-write",e).then((()=>{}))}getAvailableFormats(e){return this.wire.sendAction("clipboard-read-formats",e).then((({payload:e})=>e.data))}}t.default=r},7813:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterMap=void 0;const i=n(6465);function r(e){return Buffer.from(e).toString("base64")}t.EmitterMap=class{constructor(){this.storage=new Map}hashKeys(e){return e.map(r).join("/")}getOrCreate(e){const t=this.hashKeys(e);return this.storage.has(t)||this.storage.set(t,new i.EventEmitter),this.storage.get(t)}has(e){return this.storage.has(this.hashKeys(e))}delete(e){const t=this.hashKeys(e);return this.storage.delete(t)}}},2734:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(7813);class r extends i.EmitterMap{constructor(){super(...arguments),this.dispatchEvent=e=>{if(function(e){return"process-desktop-event"===e.action}(e)){const{payload:t}=e,n=function(e){const{topic:t}=e;if("frame"===t){const{uuid:n,name:i}=e;return[t,n,i]}if("window"===t){const{uuid:n,name:i}=e;return[t,n,i]}if("application"===t){const{uuid:n}=e;return[t,n]}if("view"===t){const{uuid:n,name:i}=e;return[t,n,i]}return[t]}(t);if(this.has(n))return this.getOrCreate(n).emit(t.type,t),!0}return!1}}}t.default=r},7168:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(8298);class o extends i.Base{wrap(e){return this.wire.sendAction("external-application-wrap").catch((e=>{})),Promise.resolve(new r.ExternalApplication(this.wire,{uuid:e}))}wrapSync(e){return this.wire.sendAction("external-application-wrap-sync").catch((e=>{})),new r.ExternalApplication(this.wire,{uuid:e})}}t.default=o},8298:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExternalApplication=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t){super(e,"external-application",t.uuid),this.identity=t}getInfo(){return this.wire.sendAction("get-external-application-info",this.identity).then((({payload:e})=>e.data))}}t.ExternalApplication=r},9021:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(7168);t.default=o.default,r(n(8298),t)},6545:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(6465),r=n(3641),o=n(4997),s=n(7264),a=n(8347),c=n(3427),d=n(9021),h=n(6720),l=n(9211),u=n(4169),p=n(609),w=n(9641),y=n(8068),f=n(8706),g=n(7153);class m extends i.EventEmitter{constructor(e){super(),y.registerFin(e,this),this.wire=e,this.System=new r.default(e),this.Window=new o.default(e),this.Application=new s.default(e),this.InterApplicationBus=new a.default(e),this.Clipboard=new c.default(e),this.ExternalApplication=new d.default(e),this.Frame=new h.default(e),this.GlobalHotkey=new l.default(e),this.Platform=new p.default(e,this.InterApplicationBus.Channel),this.View=new u.default(e),this.Interop=new f.default(e),this.SnapshotSource=new g.default(e),this.me=w.getMe(e),e.on("disconnected",(()=>{this.emit("disconnected")}))}}t.default=m},1778:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(8161);class s extends i.Base{async wrap(e){this.wire.sendAction("frame-wrap").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Frame(this.wire,e)}wrapSync(e){this.wire.sendAction("frame-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Frame(this.wire,e)}getCurrent(){return this.wire.sendAction("frame-get-current").catch((e=>{})),Promise.resolve(new o._Frame(this.wire,this.wire.environment.getCurrentEntityIdentity()))}getCurrentSync(){return this.wire.sendAction("frame-get-current-sync").catch((e=>{})),new o._Frame(this.wire,this.wire.environment.getCurrentEntityIdentity())}}t.default=s},8161:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._Frame=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t){super(e,"frame",t.uuid,t.name),this.identity=t}getInfo(){return this.wire.sendAction("get-frame-info",this.identity).then((({payload:e})=>e.data))}getParentWindow(){return this.wire.sendAction("get-parent-window",this.identity).then((({payload:e})=>e.data))}}t._Frame=r},6720:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1778);t.default=o.default,r(n(8161),t)},9211:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659);class r extends i.EmitterBase{constructor(e){super(e,"global-hotkey")}async register(e,t){await this.on(e,t),await this.wire.sendAction("global-hotkey-register",{hotkey:e})}async unregister(e){await this.removeAllListeners(e),await this.wire.sendAction("global-hotkey-unregister",{hotkey:e})}async unregisterAll(){await Promise.all(this.eventNames().filter((e=>!("registered"===e||"unregistered"===e))).map((e=>this.removeAllListeners(e)))),await this.wire.sendAction("global-hotkey-unregister-all",{})}async isRegistered(e){const{payload:{data:t}}=await this.wire.sendAction("global-hotkey-is-registered",{hotkey:e});return t}}t.default=r},7539:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChannelBase=t.ProtectedItems=void 0;const n=e=>(t,n,i)=>{const r=e(t,n,i);return void 0===r?n:r};t.ProtectedItems=class{constructor(e,t){this.providerIdentity=e,this.wire=t}};class i{constructor(){this.subscriptions=new Map}static defaultAction(e){throw new Error(`No action registered at target for ${e}`)}async processAction(e,t,n){try{const r=this.subscriptions.has(e)?this.subscriptions.get(e):(t,n)=>{var r;return(null!==(r=this.defaultAction)&&void 0!==r?r:i.defaultAction)(e,t,n)},o=this.preAction?await this.preAction(e,t,n):t,s=await r(o,n);return this.postAction?await this.postAction(e,s,n):s}catch(t){if(this.errorMiddleware)return this.errorMiddleware(e,t,n);throw t}}beforeAction(e){if(this.preAction)throw new Error("Already registered beforeAction middleware");this.preAction=n(e)}onError(e){if(this.errorMiddleware)throw new Error("Already registered error middleware");this.errorMiddleware=e}afterAction(e){if(this.postAction)throw new Error("Already registered afterAction middleware");this.postAction=n(e)}remove(e){this.subscriptions.delete(e)}setDefaultAction(e){if(this.defaultAction)throw new Error("default action can only be set once");this.defaultAction=e}register(e,t){if(this.subscriptions.has(e))throw new Error(`Subscription already registered for action: ${e}. Unsubscribe before adding new subscription`);return this.subscriptions.set(e,t),!0}}t.ChannelBase=i},8378:function(e,t,n){var i,r,o,s=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},a=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const c=n(7539),d=new Map;class h extends c.ChannelBase{constructor(e,t,n){super(),i.set(this,void 0),r.set(this,void 0),this.processAction=(e,t,n)=>super.processAction(e,t,n),o.set(this,(()=>{d.delete(this.endpointId),a(this,r).close()})),s(this,i,new c.ProtectedItems(e,t)),this.disconnectListener=()=>{},this.endpointId=e.endpointId,s(this,r,n),d.set(this.endpointId,this),n.receive(this.processAction)}static closeChannelByEndpointId(e){const t=d.get(e);t&&a(t,o).call(t)}static handleProviderDisconnect(e,t){e.disconnectListener(t),a(e,o).call(e)}get providerIdentity(){return a(this,i).providerIdentity}async dispatch(e,t){if(a(this,r).isEndpointConnected(this.providerIdentity.channelId))return a(this,r).send(this.providerIdentity.channelId,e,t);throw new Error("The client you are trying to dispatch from is disconnected from the target provider.")}onDisconnection(e){this.disconnectListener=t=>{try{e(t)}catch(e){throw new Error(`Error while calling the onDisconnection callback: ${e.message}`)}finally{this.disconnectListener=()=>{}}}}async disconnect(){const e=a(this,i),{channelName:t,uuid:n,name:r}=e.providerIdentity;await e.wire.sendAction("disconnect-from-channel",{channelName:t,uuid:n,name:r,endpointId:this.endpointId}),a(this,o).call(this)}}t.default=h,i=new WeakMap,r=new WeakMap,o=new WeakMap},6711:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectionManager=void 0;const a=n(3917),c=n(9659),d=n(1046),h=n(3870),l=n(569),u=n(2942),p=n(3749),w=n(3037),y=n(7113);class f extends c.Base{constructor(e){super(e),i.set(this,void 0),r.set(this,void 0),this.removeChannelFromProviderMap=e=>{this.providerMap.delete(e)},this.onmessage=e=>"process-channel-connection"===e.action&&(this.processChannelConnection(e),!0),this.providerMap=new Map,this.protocolManager=new w.ProtocolManager(this.isNodeEnvironment()?["classic"]:["rtc","classic"]),o(this,i,new p.MessageReceiver(e)),o(this,r,new l.RTCICEManager(e)),e.registerMessageHandler(this.onmessage.bind(this))}static getProtocolOptionsFromStrings(e){return e.map((e=>{switch(e){case"rtc":return h.RTCInfo;case"classic":return d.ClassicInfo;default:return a.exhaustiveCheck(e,["rtc","classic"])}}))}createProvider(e,t){const n=Object.assign(this.wire.environment.getDefaultChannelOptions().create,e||{}),r=this.protocolManager.getProviderProtocols(null==n?void 0:n.protocols),o=r.map((e=>{switch(e){case"rtc":return new h.RTCStrategy;case"classic":return new d.ClassicStrategy(this.wire,s(this,i),t.channelId,t);default:return a.exhaustiveCheck(e,["rtc","classic"])}}));let c;if(2===o.length){const[e,t]=o;c=y.default.combine(e,t)}else{if(1!==o.length)throw new Error("failed to combine strategies");[c]=o}const l=new u.ChannelProvider(t,this.wire,c),p=t.channelId;return this.providerMap.set(p,{provider:l,strategy:c,supportedProtocols:f.getProtocolOptionsFromStrings(r)}),u.ChannelProvider.setProviderRemoval(l,this.removeChannelFromProviderMap.bind(this)),l}async createClientOffer(e){const t=this.protocolManager.getClientProtocols(null==e?void 0:e.protocols);let n;return{offer:{supportedProtocols:await Promise.all(t.map((async e=>{switch(e){case"rtc":{const{rtcClient:e,channels:t,offer:i,rtcConnectionId:o,channelsOpened:a}=await s(this,r).startClientOffer();return n={rtcClient:e,channels:t,channelsOpened:a},{type:"rtc",version:h.RTCInfo.version,payload:{offer:i,rtcConnectionId:o}}}case"classic":return{type:"classic",version:d.ClassicInfo.version};default:return a.exhaustiveCheck(e,["rtc","classic"])}}))),maxProtocols:2},rtc:n}}async createClientStrategy(e,t){var n;t.endpointId||(t.endpointId=this.wire.environment.getNextMessageId(),s(this,i).checkForPreviousClientConnection(t.channelId));const o=null!==(n=t.answer)&&void 0!==n?n:{supportedProtocols:[{type:"classic",version:1}]},a=(await Promise.all(o.supportedProtocols.map((async n=>"rtc"===n.type&&e?(await s(this,r).finishClientOffer(e.rtcClient,n.payload.answer,e.channelsOpened),new h.RTCStrategy):"classic"===n.type?new d.ClassicStrategy(this.wire,s(this,i),t.endpointId,t):null)))).filter((e=>null!==e));let c;if(e&&!a.some((e=>e instanceof h.RTCStrategy))&&e&&e.rtcClient.close(),a.length>=2)c=y.default.combine(a[0],a[1]);else{if(!a.length)throw new Error("No compatible protocols");[c]=a}const l={endpointIdentity:t,rtc:e};return c.addEndpoint(t.channelId,l),c}async processChannelConnection(e){const{clientIdentity:t,providerIdentity:n,ackToSender:i,payload:o,offer:a}=e.payload;t.endpointId?t.isLocalEndpointId=!1:(t.endpointId=this.wire.environment.getNextMessageId(),t.isLocalEndpointId=!0);const c=n.channelId,l=this.providerMap.get(c);if(!l)return i.payload.success=!1,i.payload.reason=`Channel "${n.channelName}" has been destroyed.`,this.wire.sendRaw(i);const{provider:p,strategy:w,supportedProtocols:y}=l;try{if(!(p instanceof u.ChannelProvider))throw Error("Cannot connect to a channel client");const e=null!=a?a:{supportedProtocols:[{type:"classic",version:1}],maxProtocols:1},n=this.protocolManager.getCompatibleProtocols(y,e);if(!n.length)throw new Error("This provider does not support any of the offered protocols.");const c=await p.processConnection(t,o);i.payload.payload=i.payload.payload||{};let l={supportedProtocols:[],endpointPayloadPromise:Promise.resolve({endpointIdentity:t})};return l=await n.reduce((async(e,t)=>{const n=await e;if("rtc"===t.type){const{answer:e,rtcClient:i,channels:o}=await s(this,r).createProviderAnswer(t.payload.rtcConnectionId,t.payload.offer);n.supportedProtocols.push({type:"rtc",version:h.RTCInfo.version,payload:{answer:e}}),n.endpointPayloadPromise=n.endpointPayloadPromise.then((e=>o.then((t=>({...e,rtc:{rtcClient:i,channels:t}})))))}else n.supportedProtocols.push({type:"classic",version:d.ClassicInfo.version});return n}),Promise.resolve(l)),l.endpointPayloadPromise.then((e=>w.addEndpoint(t.endpointId,e))),i.payload.payload.result=c,i.payload.payload.answer=l,this.wire.sendRaw(i)}catch(e){return i.payload.success=!1,i.payload.reason=e.message,this.wire.sendRaw(i)}}}t.ConnectionManager=f,i=new WeakMap,r=new WeakMap},7722:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Channel=void 0;const s=n(8378),a=n(2942),c=n(9659),d=n(6711),h=()=>{};class l extends c.EmitterBase{constructor(e){super(e,"channel"),i.set(this,void 0),r(this,i,new d.ConnectionManager(e))}async getAllChannels(){return this.wire.sendAction("get-all-channels").then((({payload:e})=>e.data))}async onChannelConnect(e){await this.on("connected",e)}async onChannelDisconnect(e){await this.on("disconnected",e)}async connect(e,t){if(!e||"string"!=typeof e)throw new Error("Please provide a channelName string to connect to a channel.");const n=Object.assign(this.wire.environment.getDefaultChannelOptions().connect,t||{});let r=h,a=h;const c=new Promise((t=>{r=t,a=i=>{e===i.channelName&&(this.removeListener("connected",a),this.connect(e,n).then((e=>{t(e)})))},this.on("connected",a)}));try{const{offer:t,rtc:c}=await o(this,i).createClientOffer(n),d=await this.wire.sendAction("connect-to-channel",{channelName:e,...n,offer:t}),{payload:{data:h}}=d;r&&r(),this.removeListener("connected",a);const l=await o(this,i).createClientStrategy(c,h),u=new s.default(h,this.wire,l);return l.onEndpointDisconnect(h.channelId,(async()=>{try{await u.disconnect()}catch(e){console.warn(`Something went wrong during disconnect for client with uuid: ${h.uuid} / name: ${h.name} / endpointId: ${h.endpointId}.`)}finally{s.default.handleProviderDisconnect(u,h)}})),this.on("disconnected",(t=>{t.channelName===e&&s.default.handleProviderDisconnect(u,t)})),u}catch(t){const i="internal-nack";if({wait:!0,...n}.wait&&t.message&&t.message.includes(i))return console.warn(`Channel not found for channelName: ${e}, waiting for channel connection.`),c;throw t.message===i?new Error(`No channel found for channelName: ${e}`):new Error(t)}}async create(e,t){if(!e)throw new Error("Please provide a channelName to create a channel");const{payload:{data:n}}=await this.wire.sendAction("create-channel",{channelName:e}),r=o(this,i).createProvider(t,n);return this.on("client-disconnected",(t=>{t.channelName===e&&a.ChannelProvider.handleClientDisconnection(r,t)})),r}}t.Channel=l,i=new WeakMap},3749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MessageReceiver=void 0;const i=n(8378),r=n(9659);class o extends r.Base{constructor(e){super(e),this.onmessage=e=>"process-channel-message"===e.action&&(this.processChannelMessage(e),!0),this.endpointMap=new Map,this.latestEndpointIdByChannelId=new Map,e.registerMessageHandler(this.onmessage.bind(this))}async processChannelMessage(e){var t,n;const{senderIdentity:i,providerIdentity:r,action:o,ackToSender:s,payload:a,intendedTargetIdentity:c}=e.payload,d=null!==(n=null!==(t=c.channelId)&&void 0!==t?t:c.endpointId)&&void 0!==n?n:this.latestEndpointIdByChannelId.get(r.channelId),h=this.endpointMap.get(d);if(!h)return s.payload.success=!1,s.payload.reason=`Client connection with identity uuid: ${this.wire.me.uuid} / name: ${this.wire.me.name} / endpointId: ${d} no longer connected.`,this.wire.sendRaw(s);try{const e=await h(o,a,i);return s.payload.payload=s.payload.payload||{},s.payload.payload.result=e,this.wire.sendRaw(s)}catch(e){return s.payload.success=!1,s.payload.reason=e.message,this.wire.sendRaw(s)}}addEndpoint(e,t,n){this.endpointMap.set(n,e),t!==n&&this.latestEndpointIdByChannelId.set(t,n)}removeEndpoint(e,t){this.endpointMap.delete(t),this.latestEndpointIdByChannelId.get(e)===t&&this.latestEndpointIdByChannelId.delete(e)}checkForPreviousClientConnection(e){const t=this.latestEndpointIdByChannelId.get(e);t&&(i.default.closeChannelByEndpointId(t),console.warn("You have created a second connection to an older provider. First connection has been removed from the clientMap"),console.warn("If the provider calls publish(), you may receive multiple messages."))}}t.MessageReceiver=o},1046:function(e,t){var n,i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ClassicInfo=t.ClassicStrategy=void 0,t.ClassicStrategy=class{constructor(e,t,s,a){this.messageReceiver=t,this.endpointId=s,this.providerIdentity=a,n.set(this,void 0),i.set(this,new Map),this.send=async(e,t,r)=>{const s=o(this,i).get(e);if(!s)throw new Error(`Could not locate routing info for endpoint ${e}`);const a={...s};return a.isLocalEndpointId&&delete a.endpointId,delete a.isLocalEndpointId,(await o(this,n).sendAction("send-channel-message",{...a,providerIdentity:this.providerIdentity,action:t,payload:r}).catch((e=>{throw new Error(e.message)}))).payload.data.result},this.close=async()=>{this.messageReceiver.removeEndpoint(this.providerIdentity.channelId,this.endpointId),r(this,i,new Map)},r(this,n,e)}onEndpointDisconnect(e,t){}receive(e){this.messageReceiver.addEndpoint(e,this.providerIdentity.channelId,this.endpointId)}async closeEndpoint(e){o(this,i).delete(e)}isEndpointConnected(e){return o(this,i).has(e)}addEndpoint(e,t){o(this,i).set(e,t.endpointIdentity)}isValidEndpointPayload(e){var t,n;return"string"==typeof(null===(t=null==e?void 0:e.endpointIdentity)||void 0===t?void 0:t.endpointId)||"string"==typeof(null===(n=null==e?void 0:e.endpointIdentity)||void 0===n?void 0:n.channelId)}},n=new WeakMap,i=new WeakMap,t.ClassicInfo={version:5,minimumVersion:0,type:"classic"}},7113:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.primary=e,this.secondary=t}static combine(e,t){return new n(e,t)}onEndpointDisconnect(e,t){this.primary.onEndpointDisconnect(e,(()=>{this.secondary.isEndpointConnected(e)||t()})),this.secondary.onEndpointDisconnect(e,(()=>{this.primary.isEndpointConnected(e)||t()}))}isValidEndpointPayload(e){return this.primary.isValidEndpointPayload(e)||this.secondary.isValidEndpointPayload(e)}async closeEndpoint(e){await this.primary.closeEndpoint(e),await this.secondary.closeEndpoint(e)}isEndpointConnected(e){return this.primary.isEndpointConnected(e)||this.secondary.isEndpointConnected(e)}async addEndpoint(e,t){this.primary.isValidEndpointPayload(t)&&await this.primary.addEndpoint(e,t),this.secondary.isValidEndpointPayload(t)&&await this.secondary.addEndpoint(e,t)}receive(e){this.primary.receive(e),this.secondary.receive(e)}send(e,t,n){return this.primary.isEndpointConnected(e)?this.primary.send(e,t,n):this.secondary.send(e,t,n)}async close(){await Promise.all([this.primary.close(),this.secondary.close()])}}t.default=n},3037:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProtocolManager=void 0,t.ProtocolManager=class{constructor(e){this.ProtocolsInPreferenceOrder=e,this.DefaultClientProtocols=["classic"],this.DefaultProviderProtocols=["classic"],this.getClientProtocols=e=>{const t=e?this.ProtocolsInPreferenceOrder.filter((t=>e.includes(t))):this.DefaultClientProtocols;if(!t.length)throw new Error(`No valid protocols were passed in. Accepted values are: ${this.ProtocolsInPreferenceOrder.join(", ")}.`);return t},this.getProviderProtocols=e=>{const t=e?this.ProtocolsInPreferenceOrder.filter((t=>e.includes(t))):this.DefaultProviderProtocols;if(!t.length)throw new Error(`No valid protocols were passed in. Accepted values are: ${this.ProtocolsInPreferenceOrder.join(", ")}.`);return t},this.getCompatibleProtocols=(e,t)=>t.supportedProtocols.filter((t=>e.some((e=>{var n;return e.type===t.type&&t.version>=e.minimumVersion&&e.version>=(null!==(n=t.minimumVersion)&&void 0!==n?n:0)})))).slice(0,t.maxProtocols)}}},8776:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},s=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.RTCEndpoint=void 0;const a=n(2366);t.RTCEndpoint=class{constructor(e,t){this.rtc=e,this.endpointIdentity=t,this.responseMap=new Map,i.set(this,null),r.set(this,void 0),this.connectionStateChangeHandler=e=>{"connected"!==this.rtc.rtcClient.connectionState&&(this.rtc.rtcClient.removeEventListener("connectionstatechange",this.connectionStateChangeHandler),this.close(),o(this,r)&&o(this,r).call(this))},this.send=async(e,t)=>{const n=`message-${Math.random()}`,i=new Promise(((e,t)=>{this.responseMap.set(n,{resolve:e,reject:t})}));return this.rtc.channels.request.send(JSON.stringify({action:e,payload:t,messageId:n})),i},this.close=()=>{this.responseMap.forEach((e=>e.reject("Connection has closed."))),this.responseMap=new Map,this.rtc.channels.request.close(),this.rtc.channels.response.close(),this.rtc.rtcClient.close()},this.rtc.channels.response.addEventListener("message",(e=>{var t;const{messageId:n,payload:i,success:r,error:o}=JSON.parse(e.data),{resolve:s,reject:a}=null!==(t=this.responseMap.get(n))&&void 0!==t?t:{};s&&a?(this.responseMap.delete(n),r?s(i):a(o)):(console.log("Could not find id in responseMap."),console.log(e))})),this.rtc.channels.request.addEventListener("message",(async e=>{const{messageId:n,action:r,payload:s}=JSON.parse(e.data);if(o(this,i))try{const e=await o(this,i).call(this,r,s,t);this.rtc.channels.response.send(JSON.stringify({messageId:n,payload:e,success:!0}))}catch(e){"open"===this.rtc.channels.response.readyState&&this.rtc.channels.response.send(JSON.stringify({messageId:n,error:a.errorToPOJO(e),success:!1}))}else"open"===this.rtc.channels.response.readyState&&this.rtc.channels.response.send(JSON.stringify({messageId:n,success:!1,error:"Connection not ready."}))})),this.rtc.rtcClient.addEventListener("connectionstatechange",this.connectionStateChangeHandler),Object.values(this.rtc.channels).forEach((e=>{e.onclose=e=>{[...this.responseMap.values()].forEach((e=>e.reject(new Error("RTCDataChannel closed unexpectedly, this is most commonly caused by message size. Note: RTC Channels have a message size limit of ~255kB.")))),this.close(),o(this,r)&&o(this,r).call(this)}}))}onDisconnect(e){if(o(this,r))throw new Error("RTCEndpoint disconnectListener cannot be set twice.");s(this,r,e)}receive(e){if(o(this,i))throw new Error("You have already set a listener for this RTC Endpoint.");s(this,i,e)}get connected(){return"connected"===this.rtc.rtcClient.connectionState}},i=new WeakMap,r=new WeakMap},569:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RTCICEManager=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e){super(e,"channel"),this.ensureChannelOpened=e=>new Promise(((t,n)=>{if("open"===e.readyState)t();else if("connecting"===e.readyState){const n=()=>{e.removeEventListener("open",n),t()};e.addEventListener("open",n)}else n(new Error("This Channel has already closed"))}))}static createDataChannelPromise(e,t){let n;const i=new Promise((e=>{n=e})),r=i=>{const o=()=>{i.channel.removeEventListener("open",o),n(i.channel)};i.channel.label===e&&(i.channel.addEventListener("open",o),t.removeEventListener("datachannel",r))};return t.addEventListener("datachannel",r),i}async listenForProviderIce(e,t){await this.on(this.createProviderEventName(e),t,{timestamp:Date.now()})}async raiseProviderIce(e,t){await this.wire.environment.raiseEvent(this.createRouteString(this.createProviderEventName(e)),t)}async listenForClientIce(e,t){await this.on(this.createClientEventName(e),t,{timestamp:Date.now()})}async raiseClientIce(e,t){await this.wire.environment.raiseEvent(this.createRouteString(this.createClientEventName(e)),t)}cleanupIceListeners(e){this.removeAllListeners(this.createClientEventName(e)),this.removeAllListeners(this.createProviderEventName(e))}createClientEventName(e){return`ice-client-${e}`}createProviderEventName(e){return`ice-provider-${e}`}createRouteString(e){return`channel/${e}`}createRtcPeer(){return this.wire.environment.getRtcPeer()}async startClientOffer(){const e=Math.random().toString(),t=this.createRtcPeer();t.addEventListener("icecandidate",(async t=>{var n;t.candidate&&await this.raiseClientIce(e,{candidate:null===(n=t.candidate)||void 0===n?void 0:n.toJSON()})})),await this.listenForProviderIce(e,(async e=>{await t.addIceCandidate(e.candidate)}));const n={request:t.createDataChannel("request"),response:t.createDataChannel("response")},i=await t.createOffer();await t.setLocalDescription(i);const r=Promise.all([n.request,n.response].map(this.ensureChannelOpened)).then((()=>{}));return{rtcClient:t,channels:n,offer:i,rtcConnectionId:e,channelsOpened:r}}async finishClientOffer(e,t,n){return await e.setRemoteDescription(t),await n,!0}async createProviderAnswer(e,t){const n=this.createRtcPeer(),i=r.createDataChannelPromise("request",n),o=r.createDataChannelPromise("response",n);n.addEventListener("icecandidate",(async t=>{var n;t.candidate&&await this.raiseProviderIce(e,{candidate:null===(n=t.candidate)||void 0===n?void 0:n.toJSON()})})),await this.listenForClientIce(e,(async e=>{await n.addIceCandidate(e.candidate)})),await n.setRemoteDescription(t);const s=await n.createAnswer();await n.setLocalDescription(s);const a=Promise.all([i,o]).then((([t,n])=>(this.cleanupIceListeners(e),{request:t,response:n})));return{rtcClient:n,answer:s,channels:a}}}t.RTCICEManager=r},3870:function(e,t,n){var i,r,o,s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},a=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.RTCInfo=t.RTCStrategy=void 0;const c=n(8776);t.RTCStrategy=class{constructor(){i.set(this,null),r.set(this,new Map),o.set(this,!0),this.send=async(e,t,n)=>this.getEndpointById(e).send(t,n),this.close=async()=>{s(this,o)&&(s(this,r).forEach((e=>e.close())),a(this,r,new Map)),a(this,o,!1)}}onEndpointDisconnect(e,t){this.getEndpointById(e).onDisconnect(t)}receive(e){if(s(this,i))throw new Error("You have already set a listener for this RTC Strategy");a(this,i,e),s(this,r).forEach((e=>e.receive(s(this,i))))}getEndpointById(e){const t=s(this,r).get(e);if(!t)throw new Error(`Client with endpoint id ${e} is not connected`);return t}get connected(){return s(this,o)}isEndpointConnected(e){return s(this,r).has(e)}addEndpoint(e,t){if(!s(this,o))return void console.warn("Adding endpoint to disconnected RTC Strategy");const n=new c.RTCEndpoint(t.rtc,t.endpointIdentity);s(this,i)&&n.receive(s(this,i)),s(this,r).set(e,n)}async closeEndpoint(e){s(this,r).delete(e)}isValidEndpointPayload(e){const t=e=>"object"==typeof e&&null!==e;return t(e)&&t(e.endpointIdentity)&&t(e.rtc)&&"string"==typeof e.endpointIdentity.endpointId}},i=new WeakMap,r=new WeakMap,o=new WeakMap,t.RTCInfo={version:1,minimumVersion:0,type:"rtc"}},2942:function(e,t,n){var i=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ChannelProvider=void 0;const o=n(7539),s=n(2300);let a=(()=>{var e,t,n,a,c;class d extends o.ChannelBase{constructor(h,l,u){super(),e.set(this,void 0),t.set(this,void 0),n.set(this,void 0),a.set(this,(t=>{const o=this.connections.filter((e=>e.endpointId!==t.endpointId));r(this,n).closeEndpoint(t.endpointId),i(this,e,o)})),this.processAction=async(e,t,n)=>(d.clientIsMultiRuntime(n)&&!s.runtimeUuidMeetsMinimumRuntimeVersion(n.runtimeUuid,"18.87.56.0")?this.handleMultiRuntimeLegacyClient(n):this.checkForClientConnection(n),super.processAction(e,t,n)),c.set(this,(()=>{r(this,n).close();const e=d.removalMap.get(this);e&&e()})),i(this,t,new o.ProtectedItems(h,l)),this.connectListener=()=>{},this.disconnectListener=()=>{},i(this,e,[]),i(this,n,u),u.receive(this.processAction)}get connections(){return[...r(this,e)]}static handleClientDisconnection(e,t){const n=e.connections.find((e=>e.endpointId===t.endpointId));n?r(e,a).call(e,n):e.connections.filter((e=>e.uuid===t.uuid&&e.name===t.name)).forEach(r(e,a)),e.disconnectListener(t)}static setProviderRemoval(e,t){d.removalMap.set(e,t)}dispatch(e,t,i){var o;const s=null!==(o=e.endpointId)&&void 0!==o?o:this.getEndpointIdForOpenFinId(e,t);return s&&r(this,n).isEndpointConnected(s)?r(this,n).send(s,t,i):Promise.reject(new Error(`Client connection with identity uuid: ${e.uuid} / name: ${e.name} / endpointId: ${s} no longer connected.`))}async processConnection(t,n){return r(this,e).push(t),this.connectListener(t,n)}publish(e,t){return this.connections.map((i=>r(this,n).send(i.endpointId,e,t)))}onConnection(e){this.connectListener=e}onDisconnection(e){this.disconnectListener=e}async destroy(){const n=r(this,t),{channelName:o}=n.providerIdentity;i(this,e,[]),await n.wire.sendAction("destroy-channel",{channelName:o}),r(this,c).call(this)}checkForClientConnection(e){if(!this.isClientConnected(e))throw new Error(`This action was sent from a client that is not connected to the provider.\n                    Client Identity: {uuid: ${e.uuid}, name: ${e.name}, endpointId: ${e.endpointId}}`)}isClientConnected(e){return d.clientIdentityIncludesEndpointId(e)?this.connections.some((t=>t.endpointId===e.endpointId&&t.uuid===e.uuid&&t.name===e.name)):this.isLegacyClientConnected(e)}isLegacyClientConnected(e){return this.connections.some((t=>t.uuid===e.uuid&&t.name===e.name))}handleMultiRuntimeLegacyClient(e){if(!this.isLegacyClientConnected(e))throw new Error(`This action was sent from a client that is not connected to the provider. Client Identity:\n                    {uuid: ${e.uuid}, name: ${e.name}, endpointId: ${e.endpointId}}`)}getEndpointIdForOpenFinId(e,n){var i;const o=this.connections.filter((t=>t.name===e.name&&t.uuid===e.uuid));if(o.length>=2){const i=r(this,t),{uuid:o,name:s}=e,a=null==i?void 0:i.providerIdentity.uuid,c=null==i?void 0:i.providerIdentity.name;console.warn(`WARNING: Dispatch call may have unintended results. The "to" argument of your dispatch call is missing the\n                "endpointId" parameter. The identity you are dispatching to ({uuid: ${o}, name: ${s}})\n                has multiple channelClients for this channel. Your dispatched action: (${n}) from the provider:\n                ({uuid: ${a}, name: ${c}}) will only be processed by the most recently-created client.`)}return null===(i=o.pop())||void 0===i?void 0:i.endpointId}static clientIdentityIncludesEndpointId(e){return void 0!==e.endpointId}static clientIsMultiRuntime(e){return void 0!==e.runtimeUuid}}return e=new WeakMap,t=new WeakMap,n=new WeakMap,a=new WeakMap,c=new WeakMap,d.removalMap=new WeakMap,d})();t.ChannelProvider=a},8347:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InterAppPayload=void 0;const i=n(6465),r=n(9659),o=n(3127),s=n(7722),a=n(4999);class c extends r.Base{constructor(e){super(e),this.events={subscriberAdded:"subscriber-added",subscriberRemoved:"subscriber-removed"},this.refCounter=new o.default,this.Channel=new s.Channel(e),this.emitter=new i.EventEmitter,e.registerMessageHandler(this.onmessage.bind(this)),this.on=this.emitter.on.bind(this.emitter),this.removeAllListeners=this.emitter.removeAllListeners.bind(this.emitter)}publish(e,t){return this.wire.sendAction("publish-message",{topic:e,message:t,sourceWindowName:this.me.name}).then((()=>{}))}async send(e,t,n){const i=a.validateIdentity(e);if(i)throw new Error(i);await this.wire.sendAction("send-message",{destinationUuid:e.uuid,destinationWindowName:e.name,topic:t,message:n,sourceWindowName:this.me.name})}subscribe(e,t,n){const i=this.createSubscriptionKey(e.uuid,e.name||"*",t);return this.emitter.on(i,n),this.refCounter.actOnFirst(i,(()=>this.wire.sendAction("subscribe",{sourceUuid:e.uuid,sourceWindowName:e.name||"*",topic:t,destinationWindowName:this.me.name})),(()=>Promise.resolve()))}unsubscribe(e,t,n){const i=e.name||"*",r=this.createSubscriptionKey(e.uuid,i,t);return this.emitter.removeListener(r,n),this.refCounter.actOnLast(r,(()=>this.wire.sendAction("unsubscribe",{sourceUuid:e.uuid,sourceWindowName:i,topic:t,destinationWindowName:this.me.name})),(()=>new Promise((e=>e)).then((()=>{}))))}processMessage(e){const{payload:{message:t,sourceWindowName:n,sourceUuid:i,topic:r}}=e,o=[this.createSubscriptionKey(i,n,r),this.createSubscriptionKey(i,"*",r),this.createSubscriptionKey("*","*",r)],s={uuid:i,name:n};o.forEach((e=>{this.emitter.emit(e,t,s)}))}emitSubscriverEvent(e,t){const{payload:{targetName:n,uuid:i,topic:r}}=t,o={name:n,uuid:i,topic:r};this.emitter.emit(e,o)}createSubscriptionKey(e,t,n){const i=t||"*";if(!(e&&i&&n))throw new Error("Missing uuid, name, or topic string");return function(...e){return e.map((e=>Buffer.from(`${e}`).toString("base64"))).join("/")}(e,i,n)}onmessage(e){const{action:t}=e;switch(t){case"process-message":this.processMessage(e);break;case this.events.subscriberAdded:this.emitSubscriverEvent(this.events.subscriberAdded,e);break;case this.events.subscriberRemoved:this.emitSubscriverEvent(this.events.subscriberRemoved,e)}return!0}}t.default=c,t.InterAppPayload=class{}},2977:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(2057),o=n(7138),s=(e,...t)=>new e(...t);class a extends i.Base{async init(e,t=s){this.wire.sendAction("interop-init").catch((e=>{}));const n=await this.fin.InterApplicationBus.Channel.create(`interop-broker-${e}`),i=await this.fin.Application.getCurrentSync().getInfo();return t(r.InteropBroker,this.wire,n,i.initialOptions.interopBrokerConfiguration||{})}connectSync(e,t){return this.wire.sendAction("interop-connect-sync").catch((e=>{})),new o.InteropClient(this.wire,e,t)}}t.default=a},2057:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InteropBroker=void 0;const i=n(9659),r=n(7115),o=n(1787);let s=[{id:"green",displayMetadata:{color:"#00CC88",name:"green"}},{id:"purple",displayMetadata:{color:"#8C61FF",name:"purple"}},{id:"orange",displayMetadata:{color:"#FF8C4C",name:"orange"}},{id:"red",displayMetadata:{color:"#FF5E60",name:"red"}},{id:"pink",displayMetadata:{color:"#FF8FB8",name:"pink"}},{id:"yellow",displayMetadata:{color:"#E9FF8F",name:"yellow"}}];class a extends i.Base{constructor(e,t,n){super(e),this.channel=t,this.interopClients=new Map,this.contextGroupsById=new Map,n.contextGroups&&(s=n.contextGroups),this.intentClientMap=new Map,this.lastContextMap=new Map,this.sessionContextGroupMap=new Map,this.setContextGroupMap(),this.wireChannel(t)}setContext({context:e},t){this.wire.sendAction("interop-broker-set-context").catch((e=>{}));const n=this.getClientState(t);if(!n||!n.contextGroupId)throw n?new Error("You must join a context group before you can set context."):new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);{const{contextGroupId:t}=n;if(!this.contextGroupsById.has(t))throw new Error(`Client has a context group that isn't in the context group mapping: ${t}.`);const i=a.checkContextIntegrity(e);if(!1===i.isValid)throw new Error(`Failed to set Context - bad Context. Reason: ${i.reason}. Context: ${JSON.stringify(e)}`);const r=this.contextGroupsById.get(t),o=e.type;r.set(o,e),this.lastContextMap.set(t,o),Array.from(this.interopClients.values()).filter((e=>e.contextGroupId===t)).forEach((t=>{for(const[,n]of t.contextHandlers)a.isContextTypeCompatible(o,n.contextType)&&this.invokeContextHandler(t.clientIdentity,n.handlerId,e)}))}}getCurrentContext(e,t){var n;this.wire.sendAction("interop-broker-get-current-context").catch((e=>{}));const i=this.getClientState(t);if(!(null==i?void 0:i.contextGroupId))throw new Error("You must be a member of a context group to call getCurrentContext");const{contextGroupId:r}=i,o=this.contextGroupsById.get(r),s=this.lastContextMap.get(r),a=null!==(n=null==e?void 0:e.contextType)&&void 0!==n?n:s;return o&&a?o.get(a):void 0}async joinContextGroup({contextGroupId:e,target:t},n){if(this.wire.sendAction("interop-broker-join-context-group").catch((e=>{})),t){a.hasEndpointId(t)&&await this.addClientToContextGroup({contextGroupId:e},t);const n=this.channel.connections.filter((e=>e.uuid===t.uuid&&e.name===t.name));if(!n.length)throw new Error(`Given Identity ${t.uuid} ${t.name} is not connected to the Interop Broker.`);n.length>1&&console.warn(`More than one connection found for identity ${t.uuid} ${t.name}`);const i=[];for(const t of n)i.push(this.addClientToContextGroup({contextGroupId:e},t));await Promise.all(i)}else await this.addClientToContextGroup({contextGroupId:e},n)}async addClientToContextGroup({contextGroupId:e},t){this.wire.sendAction("interop-broker-add-client-to-context-group").catch((e=>{}));const n=this.getClientState(t);if(!n)throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);if(!this.getContextGroups().find((t=>t.id===e)))throw new Error(`Attempting to join a context group that does not exist: ${e}. You may only join existing context groups.`);if(n.contextGroupId!==e){n.contextGroupId=e,await a.setCurrentContextGroupInClientOptions(t,e);const i=this.contextGroupsById.get(e);for(const[,e]of n.contextHandlers){const{contextType:n,handlerId:r}=e;if(void 0===n)i.forEach(((e,n)=>{this.invokeContextHandler(t,r,e)}));else if(i.has(n)){const e=i.get(n);e&&this.invokeContextHandler(t,r,e)}}}}async removeFromContextGroup({target:e},t){if(this.wire.sendAction("interop-broker-remove-from-context-group").catch((e=>{})),e){a.hasEndpointId(e)&&await this.removeClientFromContextGroup(e);const t=this.channel.connections.filter((t=>t.uuid===e.uuid&&t.name===e.name));if(!t.length)throw new Error(`No connection found for given Identity ${e.uuid} ${e.name}`);t.length>1&&console.warn(`More than one connection found for identity ${e.uuid} ${e.name}`);const n=[];for(const e of t)n.push(this.removeClientFromContextGroup(e));await Promise.all(n)}else await this.removeClientFromContextGroup(t)}async removeClientFromContextGroup(e){this.wire.sendAction("interop-broker-remove-client-from-context-group").catch((e=>{}));const t=this.getClientState(e);t&&(t.contextGroupId=void 0),await a.setCurrentContextGroupInClientOptions(e,null)}getContextGroups(){return this.wire.sendAction("interop-broker-get-context-groups").catch((e=>{})),s.map((e=>({...e})))}getInfoForContextGroup({contextGroupId:e}){return this.wire.sendAction("interop-broker-get-info-for-context-group").catch((e=>{})),this.getContextGroups().find((t=>t.id===e))}getAllClientsInContextGroup({contextGroupId:e}){return this.wire.sendAction("interop-broker-get-all-clients-in-context-group").catch((e=>{})),Array.from(this.interopClients.values()).filter((t=>t.contextGroupId===e)).map((e=>e.clientIdentity))}async handleFiredIntent(e,t){const n=o.generateOverrideWarning("interopClient.fireIntent","fdc3.raiseIntent","InteropBroker.handleFiredIntent",t);throw console.warn(n),new Error(o.BROKER_ERRORS.fireIntent)}async setIntentTarget(e,t){this.wire.sendAction("interop-broker-set-intent-target").catch((e=>{}));const n=this.intentClientMap.get(t.name),i=`intent-handler-${e.name}`;if(n){const t=n.get(i);if(t){if(t.pendingIntents.push(e),t.clientIdentity&&t.isReady){const{clientIdentity:e,pendingIntents:n}=t;try{const r=n[n.length-1];await this.channel.dispatch(e,i,r),t.pendingIntents=[]}catch(n){console.error(`Error invoking intent handler for client ${e.uuid}/${e.name}/${e.endpointId}`),t.isReady=!1}}}else n.set(i,{isReady:!1,pendingIntents:[e]})}else{this.intentClientMap.set(t.name,new Map);const n=this.intentClientMap.get(t.name);n&&n.set(i,{isReady:!1,pendingIntents:[e]})}}async handleInfoForIntent(e,t){const n=o.generateOverrideWarning("interopClient.getInfoForIntent","fdc3.findIntent","InteropBroker.handleInfoForIntent",t);throw console.warn(n),new Error(o.BROKER_ERRORS.getInfoForIntent)}async handleInfoForIntentsByContext(e,t){const n=o.generateOverrideWarning("interopClient.getInfoForIntentsByContext","fdc3.findIntentsByContext","InteropBroker.handleInfoForIntentsByContext",t);throw console.warn(n),new Error(o.BROKER_ERRORS.getInfoForIntentsByContext)}async handleFiredIntentForContext(e,t){const n=o.generateOverrideWarning("interopClient.fireIntentForContext","fdc3.raiseIntentForContext","InteropBroker.handleFiredIntentForContext",t);throw console.warn(n),new Error(o.BROKER_ERRORS.fireIntentForContext)}decorateSnapshot(e){return{...e,interopSnapshotDetails:{contextGroupStates:this.getContextGroupStates()}}}applySnapshot(e,t){var n;const i=null===(n=null==e?void 0:e.interopSnapshotDetails)||void 0===n?void 0:n.contextGroupStates;i&&((null==t?void 0:t.closeExistingWindows)||this.updateExistingClients(i),this.rehydrateContextGroupStates(i))}updateExistingClients(e){this.interopClients.forEach((t=>{const{clientIdentity:n,contextGroupId:i,contextHandlers:r}=t;if(i){const t=e[i];for(const[,e]of Object.entries(t))r.forEach((t=>{const{handlerId:i,contextType:r}=t;a.isContextTypeCompatible(e.type,r)&&this.invokeContextHandler(n,i,e)}))}}))}getContextGroupStates(){return a.toObject(this.contextGroupsById)}rehydrateContextGroupStates(e){const t=Object.entries(e);for(const[e,n]of t){const t=Object.entries(n);for(const[n,i]of t)this.contextGroupsById.has(e)?this.contextGroupsById.get(e).set(n,i):console.warn(`Attempting to set a context group that isn't in the context group mapping. Skipping context group rehydration for: ${e}`)}}contextHandlerRegistered({contextType:e,handlerId:t},n){const i={contextType:e,handlerId:t},r=this.getClientState(n);if(null==r||r.contextHandlers.set(t,i),r&&r.contextGroupId){const{contextGroupId:i}=r,o=this.contextGroupsById.get(i);if(void 0===e)o.forEach(((e,i)=>{this.invokeContextHandler(n,t,e)}));else if(o.has(e)){const i=o.get(e);i&&this.invokeContextHandler(n,t,i)}}}async intentHandlerRegistered(e,t){const{handlerId:n}=e,i=this.intentClientMap.get(t.name),r=null==i?void 0:i.get(n);if(i)if(r){const{pendingIntents:e}=r;r.clientIdentity=t,r.isReady=!0;try{if(e.length>0){const i=e[e.length-1];await this.channel.dispatch(t,n,i),r.pendingIntents=[]}}catch(e){console.error(`Error invoking intent handler: ${n} for client ${t.uuid}/${t.name}/${t.endpointId}`)}}else i.set(n,{isReady:!0,pendingIntents:[],clientIdentity:t});else{this.intentClientMap.set(t.name,new Map);const e=this.intentClientMap.get(t.name);e&&e.set(n,{isReady:!0,pendingIntents:[],clientIdentity:t})}}invokeContextHandler(e,t,n){this.channel.dispatch(e,t,n).catch((i=>{console.error(`Error invoking context handler ${t} for context type ${n.type} in client ${e.uuid}/${e.name}/${e.endpointId}`,i)}))}removeContextHandler({handlerId:e},t){const n=this.getClientState(t);n&&n.contextHandlers.delete(e)}handleJoinSessionContextGroup({sessionContextGroupId:e},t){try{if(!e)throw new Error("Failed to join session context group: must specify group id.");const n=this.sessionContextGroupMap.get(e);if(n)n.registerNewClient(t);else{const n=new r.default(this.channel,e);n.registerNewClient(t),this.sessionContextGroupMap.set(e,n)}return{hasConflict:this.contextGroupsById.has(e)}}catch(e){throw new Error(e)}}getClientState(e){return this.interopClients.get(e.endpointId)}static toObject(e){const t=Object.fromEntries(e),n={};return Object.entries(t).forEach((([e,t])=>{const i=Object.fromEntries(t);n[e]=i})),n}static checkContextIntegrity(e){if(!e)return{isValid:!1,reason:"No context supplied"};if("object"!=typeof e)return{isValid:!1,reason:"Context must be an Object"};if(!e.type)return{isValid:!1,reason:"Context must have a type property"};if(e.id&&"object"!=typeof e.id)return{isValid:!1,reason:"Context id must be an Object populated with key-value identifiers (if set)"};if(e.id){const{id:t}=e,n=Object.keys(t);let i=!1;if(!n.length)return{isValid:!1,reason:"Context id must have at least one key-value identifier"};if(n.forEach((e=>{"string"==typeof e&&"string"==typeof t[e]||(i=!0)})),i)return{isValid:!1,reason:"Context id key-value identifiers must be of type string"}}return e.name&&"string"!=typeof e.name?{isValid:!1,reason:"Context name must be of string type (if set)"}:{isValid:!0}}static hasEndpointId(e){return void 0!==e.endpointId}static isContextTypeCompatible(e,t){return void 0===t||e===t}setContextGroupMap(){for(const e of this.getContextGroups())this.contextGroupsById.set(e.id,new Map)}static async setCurrentContextGroupInClientOptions(e,t){const n=await fin.System.getEntityInfo(e.uuid,e.name);let i;"view"===n.entityType?i=await fin.View.wrap(e):"window"===n.entityType&&(i=await fin.Window.wrap(e)),i?await i.updateOptions({interop:{currentContextGroup:t}}):console.warn(`Setting Current Context Group: Entity with identity ${e.uuid}, ${e.name} is not a window or view. It is a ${n.entityType} instead.`)}wireChannel(e){e.onConnection(((e,t)=>{if(!this.isConnectionAuthorized(e,t))throw new Error(`Connection not authorized for ${e.uuid}, ${e.name}`);if(!e.endpointId)throw new Error("Version too old to be compatible with Interop. Please upgrade your runtime to a more recent version.");const n={contextGroupId:void 0,contextHandlers:new Map,clientIdentity:e};(null==t?void 0:t.currentContextGroup)&&this.contextGroupsById.has(t.currentContextGroup)&&(n.contextGroupId=null==t?void 0:t.currentContextGroup),this.interopClients.set(e.endpointId,n)})),e.onDisconnection((e=>{this.interopClients.delete(e.endpointId);const t=this.intentClientMap.get(e.name);t&&e.uuid===fin.me.identity.uuid&&t.forEach((e=>{e.isReady=!1})),this.sessionContextGroupMap.forEach((t=>{t.onDisconnection(e)}))})),e.beforeAction(((e,t,n)=>{if(!this.isActionAuthorized(e,t,n))throw new Error(`Action (${e}) not authorized for ${n.uuid}, ${n.name}`);console.log(e,t,n)})),e.afterAction(console.log),e.register("setContext",this.setContext.bind(this)),e.register("fireIntent",this.handleFiredIntent.bind(this)),e.register("getCurrentContext",this.getCurrentContext.bind(this)),e.register("getInfoForIntent",this.handleInfoForIntent.bind(this)),e.register("getInfoForIntentsByContext",this.handleInfoForIntentsByContext.bind(this)),e.register("fireIntentForContext",this.handleFiredIntentForContext.bind(this)),e.register("getContextGroups",this.getContextGroups.bind(this)),e.register("joinContextGroup",this.joinContextGroup.bind(this)),e.register("removeFromContextGroup",this.removeFromContextGroup.bind(this)),e.register("getAllClientsInContextGroup",this.getAllClientsInContextGroup.bind(this)),e.register("getInfoForContextGroup",this.getInfoForContextGroup.bind(this)),e.register("contextHandlerRegistered",this.contextHandlerRegistered.bind(this)),e.register("intentHandlerRegistered",this.intentHandlerRegistered.bind(this)),e.register("removeContextHandler",this.removeContextHandler.bind(this)),e.register("sessionContextGroup:createIfNeeded",this.handleJoinSessionContextGroup.bind(this))}async isConnectionAuthorized(e,t){return this.wire.sendAction("interop-broker-is-connection-authorized").catch((e=>{})),!0}async isActionAuthorized(e,t,n){return this.wire.sendAction("interop-broker-is-action-authorized").catch((e=>{})),!0}}t.InteropBroker=a},7138:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.InteropClient=void 0;const a=n(9659),c=n(822),d=n(1787);class h extends a.Base{constructor(e,t,n){super(e),i.set(this,void 0),r.set(this,void 0),o(this,r,new Map),o(this,i,this.wire.environment.whenReady().then((()=>this.fin.InterApplicationBus.Channel.connect(`interop-broker-${t}`,{payload:n}))))}async setContext(e){return this.wire.sendAction("interop-client-set-context").catch((e=>{})),(await s(this,i)).dispatch("setContext",{context:e})}async addContextHandler(e,t){this.wire.sendAction("interop-client-add-context-handler").catch((e=>{}));const n=await s(this,i);let r;t?(r=`invokeContextHandler-${t}-${d.generateId()}`,console.warn(`Warning: By providing a contextType (${t}), you are using the experimental addContextHandler. To avoid issues, make sure you are adding your context handlers at the top level in your application.`)):r="invokeContextHandler";const o=d.wrapContextHandler(e,r);return n.register(r,o),await n.dispatch("contextHandlerRegistered",{handlerId:r,contextType:t}),{unsubscribe:async()=>{n.remove(r),await n.dispatch("removeContextHandler",{handlerId:r})}}}async getContextGroups(){return this.wire.sendAction("interop-client-get-context-groups").catch((e=>{})),(await s(this,i)).dispatch("getContextGroups")}async joinContextGroup(e,t){this.wire.sendAction("interop-client-join-context-group").catch((e=>{}));const n=await s(this,i);if(!e)throw new Error("No contextGroupId specified for joinContextGroup.");return n.dispatch("joinContextGroup",{contextGroupId:e,target:t})}async removeFromContextGroup(e){return this.wire.sendAction("interop-client-remove-from-context-group").catch((e=>{})),(await s(this,i)).dispatch("removeFromContextGroup",{target:e})}async getAllClientsInContextGroup(e){this.wire.sendAction("interop-client-get-all-clients-in-context-group").catch((e=>{}));const t=await s(this,i);if(!e)throw new Error("No contextGroupId specified for getAllClientsInContextGroup.");return t.dispatch("getAllClientsInContextGroup",{contextGroupId:e})}async getInfoForContextGroup(e){this.wire.sendAction("interop-client-get-info-for-context-group").catch((e=>{}));const t=await s(this,i);if(!e)throw new Error("No contextGroupId specified for getInfoForContextGroup.");return t.dispatch("getInfoForContextGroup",{contextGroupId:e})}async fireIntent(e){return this.wire.sendAction("interop-client-fire-intent").catch((e=>{})),(await s(this,i)).dispatch("fireIntent",e)}async registerIntentHandler(e,t){this.wire.sendAction("interop-client-register-intent-handler").catch((e=>{}));const n=await s(this,i),r=`intent-handler-${t}`,o=this.wrapIntentHandler(e,r);try{await n.register(r,o),await n.dispatch("intentHandlerRegistered",{handlerId:r})}catch(e){throw new Error("Unable to register intent handler")}return{unsubscribe:async()=>{n.remove(r)}}}async getCurrentContext(e){return this.wire.sendAction("interop-client-get-current-context").catch((e=>{})),(await s(this,i)).dispatch("getCurrentContext",{contextType:e})}async getInfoForIntent(e){return this.wire.sendAction("interop-client-get-info-for-intent").catch((e=>{})),(await s(this,i)).dispatch("getInfoForIntent",e)}async getInfoForIntentsByContext(e){return this.wire.sendAction("interop-client-get-info-for-intents-by-context").catch((e=>{})),(await s(this,i)).dispatch("getInfoForIntentsByContext",e)}async fireIntentForContext(e){return this.wire.sendAction("interop-client-fire-intent-for-context").catch((e=>{})),(await s(this,i)).dispatch("fireIntentForContext",e)}async joinSessionContextGroup(e){try{const t=s(this,r).get(e);if(t)return t.getUserInstance();const n=await s(this,i),{hasConflict:o}=await n.dispatch("sessionContextGroup:createIfNeeded",{sessionContextGroupId:e});o&&console.warn(`A (non-session) context group with the name "${e}" already exists. If you are trying to join a Context Group, call joinContextGroup instead.`);const a=new c.default(this.wire,s(this,i),e);return s(this,r).set(e,a),a.getUserInstance()}catch(t){throw console.error(`Error thrown trying to create Session Context Group with id "${e}": ${t}`),t}}wrapIntentHandler(e,t){return async n=>{try{await e(n)}catch(e){throw console.error(`Error thrown by handler ${t}: ${e}`),e}}}}t.InteropClient=h,i=new WeakMap,r=new WeakMap},7115:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(8706);t.default=class{constructor(e,t){this.provider=e,this.id=t,this.lastContext=void 0,this.contextGroupMap=new Map,this.clients=new Map,this.registerListeners()}registerListeners(){this.provider.register(`sessionContextGroup:getContext-${this.id}`,this.getCurrentContext.bind(this)),this.provider.register(`sessionContextGroup:setContext-${this.id}`,this.setContext.bind(this)),this.provider.register(`sessionContextGroup:handlerAdded-${this.id}`,this.handlerAdded.bind(this)),this.provider.register(`sessionContextGroup:handlerRemoved-${this.id}`,this.handlerRemoved.bind(this))}getCurrentContext(e){return e.type?this.contextGroupMap.get(e.type):this.lastContext}setContext(e,t){const{context:n}=e,r=i.InteropBroker.checkContextIntegrity(n);if(!1===r.isValid)throw new Error(`Failed to set Context - bad Context. Reason: ${r.reason}. Context: ${JSON.stringify(n)}`);if(!this.getClientState(t))throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Session Client State Map`);this.contextGroupMap.set(n.type,n),this.lastContext=n,Array.from(this.clients.values()).forEach((e=>{var t;null===(t=e.contextHandlers.get(n.type))||void 0===t||t.forEach((t=>{this.provider.dispatch(e.clientIdentity,t,n)})),e.globalHandler&&this.provider.dispatch(e.clientIdentity,e.globalHandler,n)}))}getClientState(e){return this.clients.get(e.endpointId)}handlerAdded(e,t){const{handlerId:n,contextType:i}=e,r=this.getClientState(t);if(!r)throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);if(i){const e=r.contextHandlers.get(i)||[];r.contextHandlers.set(i,[...e,n]);const o=this.contextGroupMap.get(i);o&&this.provider.dispatch(t,n,o)}else r.globalHandler=n,[...this.contextGroupMap.keys()].forEach((e=>{const i=this.contextGroupMap.get(e);i&&this.provider.dispatch(t,n,i)}))}handlerRemoved(e,t){const{handlerId:n}=e,i=this.clients.get(t.endpointId);i?(Array.from(i.contextHandlers).forEach((([,e])=>{const t=e.indexOf(n);t>-1&&e.splice(t,1)})),i.globalHandler===n&&(i.globalHandler=void 0)):console.warn(`Trying to remove a handler from a client that isn't mapped. handlerId: ${n}. clientIdentity: ${t}`)}registerNewClient(e){if(!this.clients.has(e.endpointId)){const t={contextHandlers:new Map,clientIdentity:e,globalHandler:void 0};this.clients.set(e.endpointId,t)}}onDisconnection(e){this.clients.delete(e.endpointId)}}},822:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const s=n(9659),a=n(1787);class c extends s.Base{constructor(e,t,n){super(e),i.set(this,void 0),this.id=n,r(this,i,t)}async setContext(e){return this.wire.sendAction("interop-session-context-group-set-context").catch((e=>{})),(await o(this,i)).dispatch(`sessionContextGroup:setContext-${this.id}`,{sessionContextGroupId:this.id,context:e})}async getCurrentContext(e){return this.wire.sendAction("interop-session-context-group-get-context").catch((e=>{})),(await o(this,i)).dispatch(`sessionContextGroup:getContext-${this.id}`,{sessionContextGroupId:this.id,type:e})}async addContextHandler(e,t){this.wire.sendAction("interop-session-context-group-add-handler").catch((e=>{}));const n=await o(this,i);let r;return r=t?`sessionContextHandler:invoke-${this.id}-${t}-${a.generateId()}`:`sessionContextHandler:invoke-${this.id}`,n.register(r,a.wrapContextHandler(e,r)),n.dispatch(`sessionContextGroup:handlerAdded-${this.id}`,{handlerId:r,contextType:t}),{unsubscribe:await this.createUnsubscribeCb(r)}}async createUnsubscribeCb(e){const t=await o(this,i);return async()=>{t.remove(e),await t.dispatch(`sessionContextGroup:handlerRemoved-${this.id}`,{handlerId:e})}}getUserInstance(){return{id:this.id,setContext:a.wrapInTryCatch(this.setContext.bind(this),"Failed to set context: "),getCurrentContext:a.wrapInTryCatch(this.getCurrentContext.bind(this),"Failed to get context: "),addContextHandler:a.wrapInTryCatch(this.addContextHandler.bind(this),"Failed to add context handler: ")}}}t.default=c,i=new WeakMap},8706:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2977);t.default=o.default,r(n(7138),t),r(n(2057),t)},1787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BROKER_ERRORS=t.generateOverrideWarning=t.generateOverrideError=t.wrapContextHandler=t.wrapInTryCatch=t.generateId=void 0,t.generateId=()=>`${Math.random()}${Date.now()}`,t.wrapInTryCatch=(e,t)=>(...n)=>{try{return e(...n)}catch(e){throw new Error((t||"")+e)}},t.wrapContextHandler=(e,t)=>async n=>{try{await e(n)}catch(e){throw console.error(`Error thrown by handler ${t} for context type ${n.type}: ${e}`),e}},t.generateOverrideError=(e,t)=>`You have tried to to use ${e} but ${t} has not been overridden in the Interop Broker. Please override this function. Refer to our documentation for more info.`,t.generateOverrideWarning=(e,t,n,i)=>{const{uuid:r,name:o}=i;return`Entity with identity: ${r}/${o} has called ${e} or ${t} but ${n} has not been overridden.`},t.BROKER_ERRORS={fireIntent:t.generateOverrideError("fireIntent","handleFiredIntent"),fireIntentForContext:t.generateOverrideError("fireIntentForContext","handleFiredIntentForContext"),getInfoForIntent:t.generateOverrideError("getInfoForIntent","handleInfoForIntent"),getInfoForIntentsByContext:t.generateOverrideError("getInfoForIntentsByContext","handleInfoForIntentsByContext")}},9641:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getMe=t.getBaseMe=void 0;const i=n(4169),r=n(6720),o=n(4997);function s(e,t,n){return{isView:"view"===e,isWindow:"window"===e,isFrame:"iframe"===e,isExternal:"external connection"===e,uuid:t,name:n,entityType:e}}t.getBaseMe=s,t.getMe=function(e){const{uuid:t,name:n,entityType:a}=e.me,c={setContext(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},addContextHandler(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getContextGroups(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},joinContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},removeFromContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getAllClientsInContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getInfoForContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")}};switch(a){case"view":return Object.assign(new i.View(e,{uuid:t,name:n}),s(a,t,n),{interop:c});case"window":return Object.assign(new o._Window(e,{uuid:t,name:n}),s(a,t,n),{interop:c});case"iframe":return Object.assign(new r._Frame(e,{uuid:t,name:n}),s(a,t,n),{interop:c});default:return{...s(a,t,n)}}}},7283:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(6394),o=n(9872);class s extends i.Base{constructor(e,t){super(e),this._channel=t,this._initializer=(...e)=>this.wire.environment.getProviderInitializer().then((t=>t(this.wire.environment)(...e))),this.Layout=new r.LayoutModule(this.wire)}async init(e){const t=null==e?void 0:e.overrideCallback,n=await this.fin.Interop.init(this.fin.me.uuid,null==e?void 0:e.interopOverride);return window.interopBroker=n,this._initializer(t,n)}async wrap(e){return this.wire.sendAction("platform-wrap").catch((e=>{})),new o.Platform({uuid:e.uuid},this._channel)}wrapSync(e){return this.wire.sendAction("platform-wrap-sync").catch((e=>{})),new o.Platform({uuid:e.uuid},this._channel)}async getCurrent(){return this.wire.sendAction("platform-get-current").catch((e=>{})),this.wrap({uuid:this.wire.me.uuid})}getCurrentSync(){return this.wire.sendAction("platform-get-current-sync").catch((e=>{})),this.wrapSync({uuid:this.wire.me.uuid})}start(e){return this.wire.sendAction("platform-start").catch((e=>{})),new Promise((async(t,n)=>{try{const{uuid:n}=e,i=await this.fin.Application._create({...e,isPlatformController:!0});i.once("platform-api-ready",(()=>t(this.wrapSync({uuid:n})))),i._run({uuid:n})}catch(e){n(e)}}))}startFromManifest(e,t){return this.wire.sendAction("platform-start-from-manifest").catch((e=>{})),new Promise((async(n,i)=>{try{const i=await this.fin.Application._createFromManifest(e);i.once("platform-api-ready",(()=>n(this.wrapSync({uuid:i.identity.uuid})))),i._run(t)}catch(e){i(e)}}))}}t.default=s},9872:function(e,t,n){var i,r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Platform=void 0;const o=n(9659),s=n(4999),a=new Map;class c extends o.EmitterBase{constructor(e,t){super(t.wire,"application",e.uuid),this.getClient=e=>{this.wire.sendAction("platform-get-client",this.identity).catch((e=>{}));const t=e||this.identity,{uuid:n}=t;if(!a.has(n)){const e=r(this,i).call(this,n);a.set(n,e)}return a.get(n)},i.set(this,(async e=>{try{const t=`custom-frame-${e}`,n=await this._channel.connect(t,{wait:!1});return n.onDisconnection((()=>{a.delete(e)})),n}catch(t){throw a.delete(e),new Error("The targeted Platform is not currently running. Listen for application-started event for the given Uuid.")}})),this.launchLegacyManifest=this.launchContentManifest;const n=s.validateIdentity(e);if(n)throw new Error(n);this._channel=t,this.identity={uuid:e.uuid},this.Layout=this.fin.Platform.Layout,this.Application=this.fin.Application.wrapSync(this.identity)}async createView(e,t,n){this.wire.sendAction("platform-create-view",this.identity).catch((e=>{}));const i=await this.getClient(),r=await i.dispatch("create-view",{target:t,opts:e,targetView:n});if(!r||s.validateIdentity(r.identity))throw new Error(`When overwriting the createView call, please return an object that has a valid 'identity' property: ${JSON.stringify(r)}`);return this.fin.View.wrapSync(r.identity)}async createWindow(e){this.wire.sendAction("platform-create-window",this.identity).catch((e=>{}));const t=await this.getClient();e.reason||(e.reason="api-call");const n=await t.dispatch("create-view-container",e);if(!n||s.validateIdentity(n.identity))throw new Error(`When overwriting the createWindow call, please return an object that has a valid 'identity' property: ${JSON.stringify(n)}`);const{identity:i}=n,r=this.fin.Window.wrapSync(i);return r.name=i.name,r.uuid=i.uuid,r}async quit(){return this.wire.sendAction("platform-quit",this.identity).catch((e=>{})),(await this.getClient()).dispatch("quit")}async closeView(e){this.wire.sendAction("platform-close-view",this.identity).catch((e=>{}));const t=await this.getClient();await t.dispatch("close-view",{view:e})}async reparentView(e,t){var n;console.warn("Platform.reparentView has been deprecated, please use Platform.createView"),this.wire.sendAction("platform-reparent-view",this.identity).catch((e=>{}));const i={...e,uuid:null!==(n=e.uuid)&&void 0!==n?n:this.identity.uuid},r=await this.fin.View.wrap(i),o=await r.getOptions();return this.createView(o,t)}async getSnapshot(){return this.wire.sendAction("platform-get-snapshot",this.identity).catch((e=>{})),(await this.getClient()).dispatch("get-snapshot")}async applySnapshot(e,t){this.wire.sendAction("platform-apply-snapshot",this.identity).catch((e=>{}));const n="Requested snapshot must be a valid Snapshot object, or a url or filepath to such an object.";let i;if("string"==typeof e)try{i=(await this._channel.wire.sendAction("get-application-manifest",{manifestUrl:e})).payload.data}catch(e){throw new Error(`${n}: ${e}`)}else i=e;if(!i.windows)throw new Error(n);const r=await this.getClient();return await r.dispatch("apply-snapshot",{snapshot:i,options:t}),this}async fetchManifest(e){return(await this.getClient()).dispatch("platform-fetch-manifest",{manifestUrl:e})}async launchContentManifest(e){this.wire.sendAction("platform-launch-content-manifest",this.identity).catch((e=>{}));const t=await this.getClient(),n=await this.fetchManifest(e);return t.dispatch("launch-into-platform",{manifest:n}),this}async setWindowContext(e={},t){if(this.wire.sendAction("platform-set-window-context",this.identity).catch((e=>{})),!e)throw new Error("Please provide a serializable object or string to set the context.");const n=await this.getClient(),{entityType:i}=t?await this.fin.System.getEntityInfo(t.uuid,t.name):this.fin.me;await n.dispatch("set-window-context",{context:e,entityType:i,target:t||{uuid:this.fin.me.uuid,name:this.fin.me.name}})}async getWindowContext(e){this.wire.sendAction("platform-get-window-context",this.identity).catch((e=>{}));const t=await this.getClient(),{entityType:n}=e?await this.fin.System.getEntityInfo(e.uuid,e.name):this.fin.me;return t.dispatch("get-window-context",{target:e||{uuid:this.fin.me.uuid,name:this.fin.me.name},entityType:n})}}t.Platform=c,i=new WeakMap},4386:(e,t)=>{function n(e){switch(e){case"columns":case"grid":case"rows":case"tabs":return!0;default:return!1}}Object.defineProperty(t,"__esModule",{value:!0}),t.isValidPresetType=void 0,t.isValidPresetType=n,t.default={isValidPresetType:n}},609:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(7283);t.default=o.default,r(n(9872),t)},4210:function(e,t,n){var i,r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.LayoutModule=void 0;const s=n(8111),a=n(9659);class c extends a.Base{constructor(){super(...arguments),i.set(this,void 0),this.init=async(e={})=>{if(this.wire.sendAction("layout-init").catch((e=>{})),!this.fin.me.isWindow)throw new Error("Layout.init can only be called from a Window context.");if(r(this,i))throw new Error("Layout for this window already initialized, please use Layout.replace call to replace the layout.");const t=await this.wire.environment.getManagerConstructor();o(this,i,new t);let{layout:n,containerId:s}=e;n&&console.warn("We recommend using a layout in window options.\n                This layout has not been sanitized and unexpected behavior can occur."),n=n||(await this.fin.Window.getCurrentSync().getOptions()).layout,s=s||"layout-container";const a=document.getElementById(s);return await r(this,i).initManager(),await r(this,i).createLayout(n,a),Object.assign(this.getCurrentSync(),{layoutManager:r(this,i)})}}async wrap(e){return this.wire.sendAction("layout-wrap").catch((e=>{})),new s.Layout(e,this.wire)}wrapSync(e){return this.wire.sendAction("layout-wrap-sync").catch((e=>{})),new s.Layout(e,this.wire)}async getCurrent(){if(this.wire.sendAction("layout-get-current").catch((e=>{})),!this.fin.me.isWindow)throw new Error("You are not in a Window context.  Only Windows can have a Layout.");const{uuid:e,name:t}=this.fin.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("layout-get-current-sync").catch((e=>{})),!this.fin.me.isWindow)throw new Error("You are not in a Window context.  Only Windows can have a Layout.");const{uuid:e,name:t}=this.fin.me;return this.wrapSync({uuid:e,name:t})}}t.LayoutModule=c,i=new WeakMap},8111:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Layout=void 0;const i=n(4999),r=n(4386),o=n(9659);class s extends o.Base{constructor(e,t){super(t),this.replace=async e=>{this.wire.sendAction("layout-replace").catch((e=>{}));const t=await this.platform.getClient();await t.dispatch("replace-layout",{target:this.identity,opts:{layout:e}})},this.replaceView=async(e,t)=>{this.wire.sendAction("layout-replace-view").catch((e=>{}));const n=await this.platform.getClient();await n.dispatch("replace-view",{target:this.identity,opts:{viewToReplace:e,newView:t}})},this.applyPreset=async e=>{this.wire.sendAction("layout-apply-preset").catch((e=>{}));const t=await this.platform.getClient(),{presetType:n}=e;if(!n||!r.isValidPresetType(n))throw new Error("Cannot apply preset layout, please include an applicable presetType property in the PresetLayoutOptions.");await t.dispatch("apply-preset-layout",{target:this.identity,opts:{presetType:n}})};const n=i.validateIdentity(e);if(n)throw new Error(n);this.identity=e,this.platform=this.fin.Platform.wrapSync({uuid:e.uuid}),e.uuid===this.fin.me.uuid&&e.name===this.fin.me.name&&(this.init=this.fin.Platform.Layout.init)}async getConfig(){return this.wire.sendAction("layout-get-config").catch((e=>{})),(await this.platform.getClient()).dispatch("get-frame-snapshot",{target:this.identity})}}t.Layout=s},6394:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(4210),t),r(n(8111),t)},1746:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(2878),o=n(6215);class s extends i.Base{async init(e){if(this.wire.sendAction("snapshot-source-init").catch((e=>{})),"object"!=typeof e||"function"!=typeof e.getSnapshot||"function"!=typeof e.applySnapshot)throw new Error("you must pass in a valid SnapshotProvider");const t=await this.fin.InterApplicationBus.Channel.create(o.getSnapshotSourceChannelName(fin.me.identity));t.register("get-snapshot",(async()=>({snapshot:await e.getSnapshot()}))),t.register("apply-snapshot",(({snapshot:t})=>e.applySnapshot(t)))}wrapSync(e){return this.wire.sendAction("snapshot-source-wrap-sync").catch((e=>{})),new r.SnapshotSource(this.wire,e)}async wrap(e){return this.wire.sendAction("snapshot-source-wrap").catch((e=>{})),this.wrapSync(e)}}t.default=s},2878:function(e,t,n){var i,r,o,s,a,c=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},d=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.SnapshotSource=void 0;const h=n(9659),l=n(6215),u=new Map;class p extends h.Base{constructor(e,t){super(e),i.set(this,void 0),r.set(this,(()=>(u.has(this.identity.uuid)||u.set(this.identity.uuid,{eventFired:null,clientPromise:null}),u.get(this.identity.uuid)))),o.set(this,(()=>(d(this,r).call(this).clientPromise||(d(this,r).call(this).clientPromise=d(this,s).call(this)),d(this,r).call(this).clientPromise))),s.set(this,(async()=>{const e=l.getSnapshotSourceChannelName(this.identity);try{d(this,r).call(this).eventFired||await d(this,a).call(this);const t=await this.fin.InterApplicationBus.Channel.connect(e,{wait:!1});return t.onDisconnection((()=>{d(this,r).call(this).clientPromise=null,d(this,r).call(this).eventFired=null})),t}catch(e){throw d(this,r).call(this).clientPromise=null,new Error("The targeted SnapshotSource is not currently initialized. Await this object's ready() method.")}})),a.set(this,(async()=>{const e=l.getSnapshotSourceChannelName(this.identity);let t,n;const i=new Promise(((e,i)=>{t=e,n=i}));d(this,r).call(this).eventFired=i;const o=async i=>{try{i.channelName===e&&(t(),await this.fin.InterApplicationBus.Channel.removeListener("connected",o))}catch(e){n(e)}};await this.fin.InterApplicationBus.Channel.on("connected",o)})),c(this,i,t)}get identity(){return d(this,i)}async ready(){this.wire.sendAction("snapshot-source-ready").catch((e=>{}));try{await d(this,o).call(this)}catch(e){await d(this,r).call(this).eventFired}}async getSnapshot(){this.wire.sendAction("snapshot-source-get-snapshot").catch((e=>{}));const e=await d(this,o).call(this),t=await e.dispatch("get-snapshot");return(await t).snapshot}async applySnapshot(e){return this.wire.sendAction("snapshot-source-apply-snapshot").catch((e=>{})),(await d(this,o).call(this)).dispatch("apply-snapshot",{snapshot:e})}}t.SnapshotSource=p,i=new WeakMap,r=new WeakMap,o=new WeakMap,s=new WeakMap,a=new WeakMap},7153:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1746);t.default=o.default,r(n(2878),t)},6215:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getSnapshotSourceChannelName=void 0,t.getSnapshotSourceChannelName=e=>`snapshot-source-provider-${e.uuid}`},3641:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(5007),o=n(4997);class s extends i.EmitterBase{constructor(e){super(e,"system")}sendExternalProcessRequest(e,t){return new Promise(((n,i)=>{const r="external-process-exited";let s,a,c,d;"function"==typeof t.listener&&(c=e=>{const n=e||{};a={topic:"exited",uuid:n.processUuid||"",exitCode:n.exitCode||0},s===e.processUuid&&(t.listener(a),d.removeListener(r,c))},this.wire.me.name||(this.wire.me.name=this.wire.me.uuid),d=new o._Window(this.wire,this.wire.me),d.on(r,c)),this.wire.sendAction(e,t).then((({payload:e})=>{s=e.data.uuid,n(e.data),a&&s===a.uuid&&(t.listener(a),d.removeListener(r,c))})).catch((e=>{d&&d.removeListener(r,c),i(e)}))}))}getVersion(){return this.wire.sendAction("get-version").then((({payload:e})=>e.data))}clearCache(e){return this.wire.sendAction("clear-cache",e).then((()=>{}))}deleteCacheOnExit(){return this.wire.sendAction("delete-cache-request").then((()=>{}))}exit(){return this.wire.sendAction("exit-desktop").then((()=>{}))}async fetchManifest(e){const{payload:{data:t}}=await this.wire.sendAction("fetch-manifest",{manifestUrl:e});return t}flushCookieStore(){return this.wire.sendAction("flush-cookie-store").then((()=>{}))}getAllWindows(){return this.wire.sendAction("get-all-windows").then((({payload:e})=>e.data))}getAllApplications(){return this.wire.sendAction("get-all-applications").then((({payload:e})=>e.data))}getCommandLineArguments(){return this.wire.sendAction("get-command-line-arguments").then((({payload:e})=>e.data))}async getCrashReporterState(){const{payload:{data:{diagnosticMode:e,isRunning:t}}}=await this.wire.sendAction("get-crash-reporter-state");return console.warn("diagnosticMode property is deprecated. It will be removed in a future version"),{diagnosticMode:e,diagnosticsMode:e,isRunning:t}}async startCrashReporter(e){const t=e,n={...t,diagnosticMode:t.diagnosticsMode||t.diagnosticMode},{payload:{data:{diagnosticMode:i,isRunning:r}}}=await this.wire.sendAction("start-crash-reporter",n);return{diagnosticMode:i,diagnosticsMode:i,isRunning:r}}getUniqueUserId(){return this.wire.sendAction("get-unique-user-id").then((({payload:e})=>e.data))}getEntityInfo(e,t){return this.wire.sendAction("get-entity-info",{uuid:e,name:t}).then((({payload:e})=>e.data))}getEnvironmentVariable(e){return this.wire.sendAction("get-environment-variable",{environmentVariables:e}).then((({payload:e})=>e.data))}getFocusedWindow(){return this.wire.sendAction("get-focused-window").then((({payload:e})=>e.data))}async isAppCertified(e){const{payload:{data:{certifiedInfo:t}}}=await this.wire.sendAction("is-app-certified",{manifestUrl:e});return t}getInstalledRuntimes(){return this.wire.sendAction("get-installed-runtimes").then((({payload:e})=>e.data.runtimes))}async getInstalledApps(){const{payload:{data:{installedApps:e}}}=await this.wire.sendAction("get-installed-apps");return e}getLog(e){return this.wire.sendAction("view-log",e).then((({payload:e})=>e.data))}getMachineId(){return this.wire.sendAction("get-machine-id").then((({payload:e})=>e.data))}getMinLogLevel(){return this.wire.sendAction("get-min-log-level").then((({payload:e})=>e.data))}getLogList(){return this.wire.sendAction("list-logs").then((({payload:e})=>e.data))}getMonitorInfo(){return this.wire.sendAction("get-monitor-info").then((({payload:e})=>e.data))}getMousePosition(){return this.wire.sendAction("get-mouse-position").then((({payload:e})=>e.data))}getProcessList(){return console.warn("System.getProcessList has been deprecated. Please consider using our new process APIs: Window.getProcessInfo, View.getProcessInfo, Application.getProcessInfo, System.getAllProcessInfo"),this.wire.sendAction("process-snapshot").then((({payload:e})=>e.data))}async getAllProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("get-all-process-info",this.identity);return e}getProxySettings(){return this.wire.sendAction("get-proxy-settings").then((({payload:e})=>e.data))}getRuntimeInfo(){return this.wire.sendAction("get-runtime-info").then((({payload:e})=>e.data))}getRvmInfo(){return this.wire.sendAction("get-rvm-info").then((({payload:e})=>e.data))}getHostSpecs(){return this.wire.sendAction("get-host-specs").then((({payload:e})=>e.data))}launchExternalProcess(e){return this.sendExternalProcessRequest("launch-external-process",e)}monitorExternalProcess(e){return this.sendExternalProcessRequest("monitor-external-process",e)}log(e,t){return this.wire.sendAction("write-to-log",{level:e,message:t}).then((()=>{}))}openUrlWithBrowser(e){return this.wire.sendAction("open-url-with-browser",{url:e}).then((()=>{}))}releaseExternalProcess(e){return this.wire.sendAction("release-external-process",{uuid:e}).then((()=>{}))}showDeveloperTools(e){return this.wire.sendAction("show-developer-tools",e).then((()=>{}))}terminateExternalProcess(e){return this.wire.sendAction("terminate-external-process",e).then((()=>{}))}updateProxySettings(e){return this.wire.sendAction("update-proxy",e).then((()=>{}))}downloadAsset(e,t){return new Promise(((n,i)=>{if("NodeEnvironment"===this.wire.environment.constructor.name)return void i(new r.NotSupportedError("downloadAsset only supported in an OpenFin Render process"));const o=this.wire.environment.getNextMessageId().toString(),s=`asset-download-progress-${o}`,a=`asset-download-error-${o}`,c=`asset-download-complete-${o}`,d=e=>{const n={downloadedBytes:e.downloadedBytes,totalBytes:e.totalBytes};t(n)},h=()=>{this.removeListener(s,d)};this.on(s,d),this.once(a,((e,t)=>{const n=t||e;h(),i(new r.RuntimeError(n))})),this.once(c,(()=>{h(),n()}));const l=Object.assign(e,{downloadId:o});this.wire.sendAction("download-asset",l).catch((e=>{h(),i(e)}))}))}downloadRuntime(e,t){return new Promise(((n,i)=>{if("NodeEnvironment"===this.wire.environment.constructor.name)return void i(new r.NotSupportedError("downloadRuntime only supported in an OpenFin Render process"));const o=this.wire.environment.getNextMessageId().toString(),s=`runtime-download-progress-${o}`,a=`runtime-download-error-${o}`,c=`runtime-download-complete-${o}`,d=e=>{const n={downloadedBytes:e.downloadedBytes,totalBytes:e.totalBytes};t(n)},h=()=>{this.removeListener(s,d)};this.on(s,d),this.once(a,((e,t)=>{const n=t||e;h(),i(new r.RuntimeError(n))})),this.once(c,(()=>{h(),n()}));const l=Object.assign(e,{downloadId:o});this.wire.sendAction("download-runtime",l).catch((e=>{h(),i(e)}))}))}downloadPreloadScripts(e){return this.wire.sendAction("download-preload-scripts",{scripts:e}).then((({payload:e})=>e.data))}getAllExternalApplications(){return this.wire.sendAction("get-all-external-applications").then((({payload:e})=>e.data))}getAppAssetInfo(e){return this.wire.sendAction("get-app-asset-info",e).then((({payload:e})=>e.data))}getCookies(e){const t=this.wire.environment.getUrl(),n=Object.assign(e,{url:t});return this.wire.sendAction("get-cookies",n).then((({payload:e})=>e.data))}setMinLogLevel(e){return this.wire.sendAction("set-min-log-level",{level:e}).then((()=>{}))}resolveUuid(e){return this.wire.sendAction("resolve-uuid",{entityKey:e}).then((({payload:e})=>e.data))}executeOnRemote(e,t){return t.requestingIdentity=e,this.wire.ferryAction(t)}readRegistryValue(e,t,n){return this.wire.sendAction("read-registry-value",{rootKey:e,subkey:t,value:n}).then((({payload:e})=>e.data))}registerExternalConnection(e){return this.wire.sendAction("register-external-connection",{uuid:e}).then((({payload:e})=>e.data))}async getServiceConfiguration(e){if("string"!=typeof e.name)throw new Error("Must provide an object with a `name` property having a string value");const{name:t}=e;return this.wire.sendAction("get-service-configuration",{name:t}).then((({payload:e})=>e.data))}async getSystemAppConfig(e){if("string"!=typeof e)throw new Error("Must provide a string value for name of system app");return this.wire.sendAction("get-system-app-configuration",{name:e}).then((({payload:e})=>e.data))}runRvmHealthCheck(){return this.wire.sendAction("run-rvm-health-check").then((({payload:e})=>e.data))}async launchManifest(e,t){return(await this.wire.sendAction("launch-manifest",{manifestUrl:e,opts:t})).payload.data.manifest}async queryPermissionForCurrentContext(e){const t={uuid:this.wire.me.uuid,name:this.wire.me.name};return(await this.wire.sendAction("query-permission-for-current-context",{apiName:e,identity:t})).payload.data}async enableNativeWindowIntegrationProvider(e){const{payload:t}=await this.wire.sendAction("enable-native-window-integration-provider",{permissions:e});return t.data}async registerUsage({data:e,type:t}){await this.wire.sendAction("register-usage",{data:e,type:t})}}t.default=s},240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(4169);class s extends i.Base{async create(e){const{uuid:t}=this.wire.me;if(!e.name||"string"!=typeof e.name)throw new Error("Please provide a name property as a string in order to create a View.");return this.wire.environment.childViews?await this.wire.environment.createChildContent({entityType:"view",options:{...e,uuid:t}}):await this.wire.sendAction("create-view",{...e,uuid:t}),this.wrapSync({uuid:t,name:e.name})}async wrap(e){this.wire.sendAction("view-wrap");const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.View(this.wire,e)}wrapSync(e){this.wire.sendAction("view-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.View(this.wire,e)}getCurrent(){if(this.wire.sendAction("view-get-current").catch((e=>{})),!this.wire.me.isView)throw new Error("You are not in a View context");const{uuid:e,name:t}=this.wire.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("view-get-current-sync").catch((e=>{})),!this.wire.me.isView)throw new Error("You are not in a View context");const{uuid:e,name:t}=this.wire.me;return this.wrapSync({uuid:e,name:t})}}t.default=s},3163:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;const i=n(4636),r=n(4997);class o extends i.WebContents{constructor(e,t){super(e,t,"view"),this.identity=t,this.attach=async e=>{await this.wire.sendAction("attach-view",{target:e,...this.identity})},this.destroy=async()=>{await this.wire.sendAction("destroy-view",{...this.identity})},this.show=async()=>{await this.wire.sendAction("show-view",{...this.identity})},this.hide=async()=>{await this.wire.sendAction("hide-view",{...this.identity})},this.setBounds=async e=>{await this.wire.sendAction("set-view-bounds",{bounds:e,...this.identity})},this.getBounds=async()=>(await this.wire.sendAction("get-view-bounds",{...this.identity})).payload.data,this.getInfo=async()=>(await this.wire.sendAction("get-view-info",{...this.identity})).payload.data,this.getParentLayout=async()=>(this.wire.sendAction("view-get-parent-layout",{...this.identity}).catch((e=>{})),(await this.getCurrentWindow()).getLayout()),this.getOptions=async()=>this.wire.sendAction("get-view-options",{...this.identity}).then((({payload:e})=>e.data)),this.updateOptions=async e=>this.wire.sendAction("update-view-options",{options:e,...this.identity}).then((()=>{})),this.getCurrentWindow=async()=>{const{payload:{data:e}}=await this.wire.sendAction("get-view-window",{...this.identity});return new r._Window(this.wire,e)}}async focus({emitSynthFocused:e}={emitSynthFocused:!0}){const t=await this.getCurrentWindow();await t.focusedWebViewWasChanged(),await super.focus({emitSynthFocused:e})}}t.View=o},4169:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(240);t.default=o.default,r(n(3163),t)},4636:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WebContents=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t,n){super(e,n,t.uuid,t.name),this.entityType=n}capturePage(e){return this.wire.sendAction("capture-page",{options:e,...this.identity}).then((({payload:e})=>e.data))}executeJavaScript(e){return this.wire.sendAction("execute-javascript-in-window",{...this.identity,code:e}).then((({payload:e})=>e.data))}getZoomLevel(){return this.wire.sendAction("get-zoom-level",this.identity).then((({payload:e})=>e.data))}setZoomLevel(e){return this.wire.sendAction("set-zoom-level",{...this.identity,level:e}).then((()=>{}))}navigate(e){return this.wire.sendAction("navigate-window",{...this.identity,url:e}).then((()=>{}))}navigateBack(){return this.wire.sendAction("navigate-window-back",{...this.identity}).then((()=>{}))}async navigateForward(){await this.wire.sendAction("navigate-window-forward",{...this.identity})}stopNavigation(){return this.wire.sendAction("stop-window-navigation",{...this.identity}).then((()=>{}))}reload(e=!1){return this.wire.sendAction("reload-window",{ignoreCache:e,...this.identity}).then((()=>{}))}print(e){return this.wire.sendAction("print",{...this.identity,options:e}).then((()=>{}))}findInPage(e,t){return this.wire.sendAction("find-in-page",{...this.identity,searchTerm:e,options:t}).then((({payload:e})=>e.data))}stopFindInPage(e){return this.wire.sendAction("stop-find-in-page",{...this.identity,action:e}).then((()=>{}))}getPrinters(){return this.wire.sendAction("get-printers",{...this.identity}).then((({payload:e})=>e.data))}async focus({emitSynthFocused:e}={emitSynthFocused:!0}){await this.wire.sendAction("focus-window",{emitSynthFocused:e,...this.identity})}async showDeveloperTools(){await this.wire.sendAction("show-developer-tools",this.identity)}async getProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("get-process-info",this.identity);return e}async getSharedWorkers(){return this.wire.sendAction("get-shared-workers",this.identity).then((({payload:e})=>e.data))}async inspectSharedWorker(){await this.wire.sendAction("inspect-shared-worker",{...this.identity})}async inspectSharedWorkerById(e){await this.wire.sendAction("inspect-shared-worker-by-id",{...this.identity,workerId:e})}async inspectServiceWorker(){await this.wire.sendAction("inspect-service-worker",{...this.identity})}}t.WebContents=r},2163:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(5047);class s extends i.Base{async wrap(e){this.wire.sendAction("window-wrap").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Window(this.wire,e)}wrapSync(e){this.wire.sendAction("window-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Window(this.wire,e)}create(e){return this.wire.sendAction("create-window").catch((e=>{})),new o._Window(this.wire,{uuid:this.me.uuid,name:e.name}).createWindow(e)}getCurrent(){if(this.wire.sendAction("get-current-window").catch((e=>{})),!this.wire.me.isWindow)throw new Error("You are not in a Window context");const{uuid:e,name:t}=this.wire.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("get-current-window-sync").catch((e=>{})),!this.wire.me.isWindow)throw new Error("You are not in a Window context");const{uuid:e,name:t}=this.wire.me;return this.wrapSync({uuid:e,name:t})}}t.default=s},5047:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._Window=void 0;const i=n(7264),r=n(4636),o=n(4169);class s extends r.WebContents{constructor(e,t){super(e,t,"window"),this.identity=t}createWindow(e){return this.wire.sendAction("window-create-window",this.identity).catch((e=>{})),new Promise(((t,n)=>{const i="fire-constructor-callback",r=new Promise((e=>{this.on(i,(function t(n){let r;const{success:o}=n,s=n.data,{message:a}=s;r=o?{httpResponseCode:s.httpResponseCode,apiInjected:s.apiInjected}:{message:s.message,networkErrorCode:s.networkErrorCode,stack:s.stack},this.removeListener(i,t),e({message:a,cbPayload:r,success:o})}))}));void 0===e.waitForPageLoad&&(e.waitForPageLoad=!1),void 0===e.autoShow&&(e.autoShow=!0);const o=this.wire.environment.createChildContent({entityType:"window",options:e});Promise.all([r,o]).then((e=>{const i=e[0];i.success?t(this):n(i);try{this.getWebWindow().fin.__internal_.openerSuccessCBCalled()}catch(e){}})).catch(n)}))}getAllFrames(){return this.wire.sendAction("get-all-frames",this.identity).then((({payload:e})=>e.data))}getBounds(){return this.wire.sendAction("get-window-bounds",this.identity).then((({payload:e})=>e.data))}center(){return this.wire.sendAction("center-window",this.identity).then((()=>{}))}blur(){return this.wire.sendAction("blur-window",this.identity).then((()=>{}))}bringToFront(){return this.wire.sendAction("bring-window-to-front",this.identity).then((()=>{}))}animate(e,t){return this.wire.sendAction("animate-window",{transitions:e,options:t,...this.identity}).then((()=>{}))}hide(){return this.wire.sendAction("hide-window",this.identity).then((()=>{}))}close(e=!1){return this.wire.sendAction("close-window",{force:e,...this.identity}).then((()=>{Object.setPrototypeOf(this,null)}))}focusedWebViewWasChanged(){return this.wire.sendAction("focused-webview-changed",this.identity).then((()=>{}))}getNativeId(){return this.wire.sendAction("get-window-native-id",this.identity).then((({payload:e})=>e.data))}async getCurrentViews(){const{payload:e}=await this.wire.sendAction("window-get-views",this.identity);return e.data.map((e=>new o.View(this.wire,e)))}disableFrame(){return console.warn("Function is deprecated; use disableUserMovement instead."),this.wire.sendAction("disable-window-frame",this.identity).then((()=>{}))}disableUserMovement(){return this.wire.sendAction("disable-window-frame",this.identity).then((()=>{}))}enableFrame(){return console.warn("Function is deprecated; use enableUserMovement instead."),this.wire.sendAction("enable-window-frame",this.identity).then((()=>{}))}enableUserMovement(){return this.wire.sendAction("enable-window-frame",this.identity).then((()=>{}))}flash(){return this.wire.sendAction("flash-window",this.identity).then((()=>{}))}stopFlashing(){return this.wire.sendAction("stop-flash-window",this.identity).then((()=>{}))}getInfo(){return this.wire.sendAction("get-window-info",this.identity).then((({payload:e})=>e.data))}async getLayout(){if(this.wire.sendAction("window-get-layout",this.identity).catch((e=>{})),!(await this.getOptions()).layout)throw new Error("Window does not have a Layout");return this.fin.Platform.Layout.wrap(this.identity)}getOptions(){return this.wire.sendAction("get-window-options",this.identity).then((({payload:e})=>e.data))}getParentApplication(){return this.wire.sendAction("window-get-parent-application",this.identity).catch((e=>{})),Promise.resolve(new i.Application(this.wire,this.identity))}getParentWindow(){return this.wire.sendAction("window-get-parent-window",this.identity).catch((e=>{})),Promise.resolve(new i.Application(this.wire,this.identity)).then((e=>e.getWindow()))}async getSnapshot(e){const t={area:e,...this.identity};return console.warn("Window.getSnapshot has been deprecated, please use Window.capturePage"),(await this.wire.sendAction("get-window-snapshot",t)).payload.data}getState(){return this.wire.sendAction("get-window-state",this.identity).then((({payload:e})=>e.data))}getWebWindow(){return this.wire.sendAction("window-get-web-window",this.identity).catch((e=>{})),this.wire.environment.getWebWindow(this.identity)}isMainWindow(){return this.wire.sendAction("window-is-main-window",this.identity).catch((e=>{})),this.me.uuid===this.me.name}isShowing(){return this.wire.sendAction("is-window-showing",this.identity).then((({payload:e})=>e.data))}maximize(){return this.wire.sendAction("maximize-window",this.identity).then((()=>{}))}minimize(){return this.wire.sendAction("minimize-window",this.identity).then((()=>{}))}moveBy(e,t){return this.wire.sendAction("move-window-by",{deltaLeft:e,deltaTop:t,...this.identity}).then((()=>{}))}moveTo(e,t){return this.wire.sendAction("move-window",{left:e,top:t,...this.identity}).then((()=>{}))}resizeBy(e,t,n){return this.wire.sendAction("resize-window-by",{deltaWidth:Math.floor(e),deltaHeight:Math.floor(t),anchor:n,...this.identity}).then((()=>{}))}resizeTo(e,t,n){return this.wire.sendAction("resize-window",{width:Math.floor(e),height:Math.floor(t),anchor:n,...this.identity}).then((()=>{}))}restore(){return this.wire.sendAction("restore-window",this.identity).then((()=>{}))}setAsForeground(){return this.wire.sendAction("set-foreground-window",this.identity).then((()=>{}))}setBounds(e){return this.wire.sendAction("set-window-bounds",{...e,...this.identity}).then((()=>{}))}show(e=!1){return this.wire.sendAction("show-window",{force:e,...this.identity}).then((()=>{}))}showAt(e,t,n=!1){return this.wire.sendAction("show-at-window",{force:n,left:Math.floor(e),top:Math.floor(t),...this.identity}).then((()=>{}))}updateOptions(e){return this.wire.sendAction("update-window-options",{options:e,...this.identity}).then((()=>{}))}authenticate(e,t){return this.wire.sendAction("window-authenticate",{userName:e,password:t,...this.identity}).then((()=>{}))}async showPopupMenu(e){const{payload:t}=await this.wire.sendAction("show-popup-menu",{options:e,...this.identity});return t.data}async closePopupMenu(){return this.wire.sendAction("close-popup-menu",{...this.identity}).then((()=>{}))}}t._Window=s},4997:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2163);t.default=o.default,r(n(5047),t)},1681:(e,t,n)=>{var i;t.H=void 0;const r=n(6465),o=n(6545),s=n(9298);class a extends r.EventEmitter{connect(e){throw new Error("You are not running in OpenFin.")}connectSync(){throw new Error("You are not running in OpenFin.")}send(e){throw new Error("You are not running in OpenFin.")}shutdown(){throw new Error("You are not running in OpenFin.")}constructor(){super()}}class c{constructor(){this.childViews=!0}getDefaultChannelOptions(){throw new Error("Method not implemented.")}getRtcPeer(){throw new Error("Method not implemented.")}getManagerConstructor(){throw new Error("Method not implemented.")}getProviderInitializer(){throw new Error("Method not implemented.")}writeToken(e,t){throw new Error("Method not implemented.")}retrievePort(e){throw new Error("Method not implemented.")}getNextMessageId(){throw new Error("Method not implemented.")}getRandomId(){throw new Error("Method not implemented.")}createChildContent(e){throw new Error("Method not implemented.")}getWebWindow(e){throw new Error("Method not implemented.")}getCurrentEntityIdentity(){throw new Error("Method not implemented.")}getCurrentEntityType(){return"unknown"}raiseEvent(e,t){throw new Error("Method not implemented.")}getUrl(){throw new Error("Method not implemented.")}whenReady(){throw new Error("Method not implemented.")}}t.H="undefined"!=typeof window&&(null===(i=window)||void 0===i?void 0:i.fin)||(()=>{const e=new c,t=new s.default(a,e,{uuid:"",name:""});return new o.default(t)})()},8068:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFin=t.registerFin=void 0;const n=new WeakMap;t.registerFin=function(e,t){n.set(e,t)},t.getFin=function(e){const t=n.get(e);if(!t)throw new Error("Could not locate fin api for given transport");return t}},5007:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RuntimeError=t.NotSupportedError=t.NotImplementedError=t.NoAckError=t.DuplicateCorrelationError=t.UnexpectedActionError=t.DisconnectedError=void 0;class n extends Error{constructor(e){super(`Expected websocket state OPEN but found ${e}`),this.readyState=e}}t.DisconnectedError=n;class i extends Error{}t.UnexpectedActionError=i;class r extends Error{}t.DuplicateCorrelationError=r;class o extends Error{}t.NoAckError=o;class s extends Error{}t.NotImplementedError=s;class a extends Error{}t.NotSupportedError=a;class c extends Error{constructor(e){const t=e.payload||e,{reason:n,error:i}=t;super(n),this.name="RuntimeError",(null==i?void 0:i.stack)&&(this.stack=i.stack)}}t.RuntimeError=c},9298:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const s=n(6465),a=n(8624),c=n(5007),d=n(2734),h=n(9641);class l extends s.EventEmitter{constructor(e,t,n){super(),this.wireListeners=new Map,this.topicRefMap=new Map,this.eventAggregator=new d.default,this.messageHandlers=[this.eventAggregator.dispatchEvent],i.set(this,void 0),this.connectSync=()=>{o(this,i).connectSync()},this.getPort=()=>{if("NodeEnvironment"!==this.environment.constructor.name)throw new c.NotImplementedError("Not Implemented");return o(this,i).wire.url.split(":").slice(-1)[0]},r(this,i,new e(this.onmessage.bind(this))),this.environment=t,this.sendRaw=o(this,i).send.bind(o(this,i)),this.registerMessageHandler(this.handleMessage.bind(this)),o(this,i).on("disconnected",(()=>{for(const[,{reject:e}]of this.wireListeners)e("Remote connection has closed");this.wireListeners.clear(),this.emit("disconnected")}));const{uuid:s,name:a}=n,l=this.environment.getCurrentEntityType();this.me=h.getBaseMe(l,s,a)}shutdown(){return o(this,i).shutdown()}async connect(e){if(a.isExistingConnectConfig(e))return this.connectByPort(e);if(a.isNewConnectConfig(e)){const t=await this.environment.retrievePort(e);return this.connectByPort({...e,address:`ws://localhost:${t}`})}}async connectByPort(e){const{address:t,uuid:n}=e,r={...e,type:"file-token"},s=o(this,i);await s.connect(t);const a=await this.sendAction("request-external-authorization",{uuid:n,type:"file-token"},!0);if("external-authorization-response"!==a.action)throw new c.UnexpectedActionError(a.action);const{token:d}=a.payload;await this.environment.writeToken(a.payload.file,a.payload.token);const h=await this.sendAction("request-authorization",r,!0);if("authorization-response"!==h.action)throw new c.UnexpectedActionError(h.action);if(!0!==h.payload.success)throw new c.RuntimeError(h.payload);return d}sendAction(e,t={},n=!1){return new Promise(((r,s)=>{const a=this.environment.getNextMessageId(),c={action:e,payload:t,messageId:a},d=o(this,i);return this.addWireListener(a,r,s,n),d.send(c).catch(s)}))}ferryAction(e){return new Promise(((t,n)=>{const r=this.environment.getNextMessageId();e.messageId=r;const s=e=>{t(e.payload)};return o(this,i).send(e).then((()=>this.addWireListener(r,s,n,!1))).catch(n)}))}registerMessageHandler(e){this.messageHandlers.push(e)}addWireListener(e,t,n,i){i?this.uncorrelatedListener=t:this.wireListeners.has(e)?n(new c.DuplicateCorrelationError(String(e))):this.wireListeners.set(e,{resolve:t,reject:n})}onmessage(e){for(const t of this.messageHandlers)t.call(null,e)}handleMessage(e){const t=e.correlationId||NaN;if("correlationId"in e){if(!this.wireListeners.has(t))return!1;{const{resolve:n,reject:i}=this.wireListeners.get(t);"ack"!==e.action?i(new c.NoAckError(e.action)):"payload"in e?e.payload.success?n.call(null,e):i(new c.RuntimeError(e.payload)):i(new c.RuntimeError(e)),this.wireListeners.delete(t)}}else this.uncorrelatedListener&&this.uncorrelatedListener.call(null,e),this.uncorrelatedListener=()=>{};return!0}}i=new WeakMap,t.default=l},8624:(e,t)=>{function n(e){return"string"==typeof e.manifestUrl}function i(e){return r(e)&&"string"==typeof e.address}function r(e){return"string"==typeof e.uuid}function o(e){return e.runtime&&"string"==typeof e.runtime.version}function s(e){return r(e)&&o(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.isInternalConnectConfig=t.isPortDiscoveryConfig=t.isNewConnectConfig=t.isExistingConnectConfig=t.isExternalConfig=void 0,t.isExternalConfig=n,t.isExistingConnectConfig=i,t.isNewConnectConfig=s,t.isPortDiscoveryConfig=function(e){return n(e)&&o(e)||s(e)},t.isInternalConnectConfig=function(e){return i(e)||s(e)}},2366:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.errorToPOJO=void 0,t.errorToPOJO=function(e){return{stack:e.stack,message:e.message,toString:e.toString}}},3917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustiveCheck=void 0,t.exhaustiveCheck=function(e,t){throw new Error(`Unsupported value: ${e}${t?`\n Supported values are: ${t.join("")}`:""}`)}},3442:(e,t)=>{async function n(e){const t=[];for(const n of e){const e=await n();t.push(e)}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.promiseMapSerial=t.serial=t.promiseMap=t.promisify=void 0,t.promisify=function(e){return(...t)=>new Promise(((n,i)=>{e(...t,((e,t)=>e?i(e):n(t)))}))},t.promiseMap=async function(e,t){return Promise.all(e.map(t))},t.serial=n,t.promiseMapSerial=async function(e,t){return n(e.map(((e,n,i)=>()=>t(e,n,i))))}},3127:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.topicRefMap=new Map}incRefCount(e){const t=this.topicRefMap.get(e);let n;if(t){const i=t+1;n=i,this.topicRefMap.set(e,i)}else this.topicRefMap.set(e,1),n=1;return n}decRefCount(e){const t=this.topicRefMap.get(e);let n;if(t){const i=t-1;this.topicRefMap.set(e,i),n=i}else n=-1;return n}actOnFirst(e,t,n){return 1===this.incRefCount(e)?t():n()}actOnLast(e,t,n){return 0===this.decRefCount(e)?t():n()}}},2300:(e,t)=>{function n(e){return[...e.split(".").reverse().entries()].reduce(((e,[t,n])=>e+ +n*1e4**t),0)}function i(e,t){return n(e)>=n(t)}function r(e){return e.split("/")[0]}Object.defineProperty(t,"__esModule",{value:!0}),t.runtimeUuidMeetsMinimumRuntimeVersion=t.parseRuntimeUuid=t.meetsMinimumRuntimeVersion=void 0,t.meetsMinimumRuntimeVersion=i,t.parseRuntimeUuid=r,t.runtimeUuidMeetsMinimumRuntimeVersion=function(e,t){return i(r(e),t)}},4999:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateIdentity=void 0,t.validateIdentity=function(e){let t;return"object"==typeof e&&"string"==typeof e.uuid||(t="Not a valid identity object"),t}},6465:e=>{var t,n="object"==typeof Reflect?Reflect:null,i=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var r=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,i){function r(n){e.removeListener(t,o),i(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}y(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,{once:!0})}(e,r)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function d(e,t,n,i){var r,o,s,d;if(a(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=i?[n,s]:[s,n]:i?s.unshift(n):s.push(n),(r=c(e))>0&&s.length>r&&!s.warned){s.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=s.length,d=h,console&&console.warn&&console.warn(d)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=h.bind(i);return r.listener=n,i.wrapFn=r,r}function u(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):w(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function w(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function y(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(o){i.once&&e.removeEventListener(t,r),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var d=c.length,h=w(c,d);for(n=0;n<d;++n)i(h[n],this,t)}return!0},o.prototype.addListener=function(e,t){return d(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return d(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,l(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,l(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,i,r,o,s;if(a(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return u(this,e,!0)},o.prototype.rawListeners=function(e){return u(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var i={};(()=>{n.d(i,{dq:()=>a,MS:()=>s,xQ:()=>c,sO:()=>fe,Zu:()=>ge,I3:()=>me,$U:()=>ve,i0:()=>Ce,cX:()=>d,_W:()=>h,U$:()=>w,U7:()=>y,rd:()=>pe});var e,t,r,o=n(1681);class s extends Error{constructor(e="An unexpected error has occurred",t){var n;super(e),t&&(this.innerError=t&&t),this.stack=null===(n=this.stack)||void 0===n?void 0:n.replace(/^(\w*Error)/,`${this.constructor.name}`)}}class a extends s{constructor(e="Failed to execute adapter function",t){super(e,t)}}class c extends s{constructor(e="Failed to raise event",t){super(e,t)}}class d extends s{constructor(e="Failed to initialize adapter",t){super(e,t)}}class h extends s{constructor(e="Invalid parameter value",t){super(e,t)}}!function(e){e.ActivateWorkbook="ActivateWorkbook",e.ActivateWorksheet="ActivateWorksheet",e.AddWorksheet="AddWorksheet",e.CalculateWorkbook="CalculateWorkbook",e.CalculateWorksheet="CalculateWorksheet",e.ClearAllCells="ClearAllCells",e.ClearAllCellValues="ClearAllCellValues",e.ClearAllCellFormatting="ClearAllCellFormatting",e.ClearCellValues="ClearCellValues",e.ClearCellFormatting="ClearCellFormatting",e.ClearCells="ClearCells",e.CloseWorkbook="CloseWorkbook",e.CreateWorkbook="CreateWorkbook",e.DeleteWorksheet="DeleteWorksheet",e.DeregisterEvent="DeregisterEvent",e.EventFired="EventFired",e.GetCalculationMode="GetCalculationMode",e.GetCells="GetCells",e.GetWorkbookById="GetWorkbookById",e.GetWorkbookName="GetWorkbookName",e.GetWorkbooks="GetWorkbooks",e.GetWorksheetById="GetWorksheetById",e.GetWorksheetByName="GetWorksheetByName",e.GetWorksheetName="GetWorksheetName",e.GetWorksheets="GetWorksheets",e.LogMessage="LogMessage",e.OpenWorkbook="OpenWorkbook",e.ProtectWorksheet="ProtectWorksheet",e.RegisterEvent="RegisterEvent",e.SaveWorkbook="SaveWorkbook",e.SaveWorkbookAs="SaveWorkbookAs",e.SetCellValues="SetCellValues",e.SetCellFormatting="SetCellFormatting",e.SetCellName="SetCellName",e.SetWorksheetName="SetWorksheetName",e.FilterCells="FilterCells",e.QuitApplication="QuitApplication"}(e||(e={})),function(e){e.Activate="Activate",e.AddWorksheet="AddWorksheet",e.Change="Change",e.Close="Close",e.Deactivate="Deactivate",e.DeleteWorksheet="DeleteWorksheet"}(t||(t={})),function(e){e.Workbook="Workbook",e.Worksheet="Worksheet"}(r||(r={}));const l="1.3.0";let u=!1;const p="[@openfin/excel]",w=()=>{u=!1},y=()=>{u=!0,g("v1.3.0")},f=(e,t)=>{u&&(e.innerError?console.error(t?`${p} ${t}`:p,e,"\n\n(inner)",e.innerError):console.error(t?`${p} ${t}`:p,e))},g=(...e)=>{u&&console.log(p,...e)},m=(...e)=>{u&&console.warn(p,...e)};o.H||Object.assign(window,{fin:{}}),Object.assign(o.H,{Integrations:{Excel:{enableLogging:y,disableLogging:w}}});const v=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),C=new Map,I=(t,n)=>async()=>{g(`Worksheet: Activate (${n})`);try{await t.dispatch(e.ActivateWorksheet,n)}catch(e){throw new a}},x=(t,n)=>async()=>{g(`Worksheet: Calculate (${n})`);try{await t.dispatch(e.CalculateWorksheet,n)}catch(e){throw new a}},A=(t,n)=>async()=>{g(`Worksheet: Clear all cell values (${n})`);try{await t.dispatch(e.ClearAllCellValues,n)}catch(e){throw new a}},b=(t,n)=>async()=>{g(`Worksheet: Clear all cell formatting (${n})`);try{await t.dispatch(e.ClearAllCellFormatting,n)}catch(e){throw new a}},E=(t,n)=>async()=>{g(`Worksheet: Clear all cells (${n})`);try{await t.dispatch(e.ClearAllCells,n)}catch(e){throw new a}},P=(t,n)=>async i=>{g(`Worksheet: Clear cell values; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCellValues,r)}catch(e){throw new a}},k=(t,n)=>async i=>{g(`Worksheet: Clear cell formatting; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCellFormatting,r)}catch(e){throw new a}},M=(t,n)=>async i=>{g(`Worksheet: Clear cells; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCells,r)}catch(e){throw new a}},_=(e,t)=>(n,i,r=1e3)=>{if(Number.isNaN(r)||r<=0)throw new s("Update interval must be a positive number");const o=v();g(`Worksheet: Create data stream; streamId:${o}; cellRange:${n}; updateInterval:${r} (${t})`);const a={close:()=>{g(`Closed stream (${o})`),(e=>{var t;try{const n=C.get(e);if(!n)throw new s(`Unable to find registered data stream with id ${e}`);void 0!==(null!==(t=n.timer)&&void 0!==t?t:void 0)&&T(e),C.delete(e)}catch(e){throw f(e),e}})(o)},cellRange:n,id:o,start:()=>{g(`Started streaming (${o})`),B(o,i,e,t)},stop:()=>{g(`Stopped streaming (${o})`),T(o)},updateInterval:r,worksheetId:t};return C.set(o,{dataStream:a}),a},S=(e,t,n,i)=>{const o={eventTarget:r.Worksheet,objectId:t};return{objectId:t,activate:I(e,t),addEventListener:n(e,o),calculate:x(e,t),clearAllCellFormatting:b(e,t),clearAllCells:E(e,t),clearAllCellValues:A(e,t),clearCellFormatting:k(e,t),clearCells:M(e,t),clearCellValues:P(e,t),createDataStream:_(e,t),delete:O(e,t),filterCells:W(e,t),getCells:F(e,t),getName:L(e,t),protect:R(e,t),removeEventListener:i(e),setCellFormatting:$(e,t),setCellName:G(e,t),setCellValues:j(e,t),setName:N(e,t)}},O=(t,n)=>async()=>{g(`Worksheet: Delete (${n})`);try{await t.dispatch(e.DeleteWorksheet,n)}catch(e){throw new a}},W=(t,n)=>async(i,r,o,s,c,d=!0)=>{g(`Worksheet: Filter cells; cellRange:${i} (${n})`,{columnIndex:r,filterOperator:o,criteria1:s,criteria2:c,visibleDropDown:d});const h={cellRange:i,criteria1:s,criteria2:c,columnIndex:r,filterOperator:o,objectId:n,visibleDropDown:d};try{await t.dispatch(e.FilterCells,h)}catch(e){throw new a}},F=(t,n)=>async i=>{g(`Worksheet: Get cells; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};let o=[];try{o=await t.dispatch(e.GetCells,r),g(`${i}:`,o)}catch(e){throw new a}return o},L=(t,n)=>async()=>{g(`Worksheet: Get name (${n})`);try{return await t.dispatch(e.GetWorksheetName,n)}catch(e){throw new a}},R=(t,n)=>async()=>{g(`Worksheet: Protect (${n})`);try{await t.dispatch(e.ProtectWorksheet,n)}catch(e){throw new a}},$=(t,n)=>async(i,r)=>{g(`Worksheet: Set cell formatting; cellRange:${i} (${n})`,r);const o={cellRange:i,formatting:r,objectId:n};try{await t.dispatch(e.SetCellFormatting,o)}catch(e){throw new a}},G=(t,n)=>async(i,r)=>{const o=r.trim();let s;if(!o)throw s=new h("Cell range name cannot be an empty string"),f(s),s;if(o.length>255)throw s=new h("Cell range name must be 255 characters or less"),f(s),s;if(/[^a-z0-9_.?\\"']/.test(o))throw s=new h("Cell range name contains invalid characters"),f(s),s;if(/^\d|\d$/.test(o))throw s=new h("Cell range name must not start or end with a number"),f(s),s;g(`Worksheet: Set cell name; cellRange:${i}; newCellRangeName:${o} (${n})`);const c={cellRange:i,name:o,objectId:n};try{await t.dispatch(e.SetCellName,c)}catch(e){throw new a}},j=(t,n)=>async(i,r)=>{g(`Worksheet: Set cell values; cellRange:${i} (${n})`,r);const o={cellRange:i,objectId:n,valuesMap:r};try{await t.dispatch(e.SetCellValues,o)}catch(e){throw new a}},N=(t,n)=>async i=>{const r=i.trim();let o;if(!r)throw o=new h("Worksheet name cannot be an empty string"),f(o),o;if(r.length>31)throw o=new h("Worksheet name must be 31 characters or less"),f(o),o;g(`Worksheet: Set name; newWorksheetName:${r} (${n})`);const s={newWorksheetName:r,objectId:n};try{return await t.dispatch(e.SetWorksheetName,s)}catch(e){throw new a}},B=(e,t,n,i)=>{var r;try{const o=C.get(e);if(!o)throw new s(`Unable to find registered data stream with id ${e}`);void 0!==(null!==(r=o.timer)&&void 0!==r?r:void 0)&&T(e);const{cellRange:a,updateInterval:c}=o.dataStream,d=async()=>{const r=await t();try{await j(n,i)(a,[[r]])}catch(t){m(`Unable to update cell range for stream with id ${e}: ${null==t?void 0:t.message}`)}},h=window.setInterval(d,c);o.timer=h}catch(e){throw f(e),e}},T=e=>{var t;try{const n=C.get(e);if(!n)throw new s(`Unable to find registered data stream with id ${e}`);if(void 0===(null!==(t=n.timer)&&void 0!==t?t:void 0))return;window.clearInterval(n.timer),n.timer=void 0}catch(e){throw f(e),e}},D=new Map,V=(n,i)=>async(r,o)=>{if(!i||!i.eventTarget||!i.objectId){const e=new c("Event registration missing required values");throw f(e),e}const s=Object.keys(t).find((e=>e.toLowerCase()===r.toLowerCase()));if(!s){const e=new c(`Unsupported event name: ${r}`);throw f(e),e}i.eventName=t[s],g("Registering event",i);try{const t=await n.dispatch(e.RegisterEvent,i);D.set(t,o)}catch(e){throw new a(void 0,e)}},H=t=>async n=>{let i;for(const[e,t]of D)if(t===n){i=e;break}if(!i)throw new c;g("Deregistering event:",i);try{await t.dispatch(e.DeregisterEvent,i),D.delete(i)}catch(e){throw new a}},U=(t,n)=>async()=>{g(`Workbook: Activate (${n})`);try{return await t.dispatch(e.ActivateWorkbook,n)}catch(e){throw new a}},z=(t,n,i,r)=>async()=>{let o;g(`Workbook: Add worksheet (${n})`);try{o=await t.dispatch(e.AddWorksheet,n)}catch(e){throw new a}return S(t,o,i,r)},q=(t,n)=>async()=>{g(`Workbook: Calculate (${n})`);try{await t.dispatch(e.CalculateWorkbook,n)}catch(e){throw new a}},J=(t,n)=>async()=>{g(`Workbook: Close (${n})`);try{return await t.dispatch(e.CloseWorkbook,n)}catch(e){throw new a}},K=(e,t,n,i)=>{const o={eventTarget:r.Workbook,objectId:t};return{objectId:t,activate:U(e,t),addWorksheet:z(e,t,n,i),addEventListener:n(e,o),calculate:q(e,t),close:J(e,t),getCalculationMode:Y(e,t),getName:Q(e,t),getWorksheetByName:Z(e,t,n,i),getWorksheets:X(e,t,n,i),removeEventListener:i(e),save:ee(e,t),saveAs:te(e,t)}},Y=(t,n)=>async()=>{g("Workbook: Get calculation mode");try{return await t.dispatch(e.GetCalculationMode,n)}catch(e){throw new a}},Q=(t,n)=>async()=>{g(`Workbook: Get name (${n})`);try{return await t.dispatch(e.GetWorkbookName,n)}catch(e){throw new a}},Z=(t,n,i,r)=>async o=>{let s;g(`Workbook: Get worksheet by name: ${o} (${n})`);try{if(s=await t.dispatch(e.GetWorksheetByName,{objectId:n,worksheetName:o}),null===s)return null}catch(e){throw new a}return S(t,s,i,r)},X=(t,n,i,r)=>async()=>{let o;g(`Workbook: Get worksheets (${n})`);try{o=await t.dispatch(e.GetWorksheets,n)}catch(e){throw new a}return o.map((e=>S(t,e,i,r)))},ee=(t,n)=>async()=>{g(`Workbook: Save (${n})`);try{return await t.dispatch(e.SaveWorkbook,n)}catch(e){throw new a}},te=(t,n)=>async i=>{g(`Workbook: Save as; filePath:${i} (${n})`);try{return await t.dispatch(e.SaveWorkbookAs,{filePath:i,objectId:n})}catch(e){throw new a}},ne=t=>async()=>{let n;g("Application: Create workbook");try{n=await t.dispatch(e.CreateWorkbook)}catch(e){throw new a}return K(t,n,V,H)},ie=t=>async n=>{let i;g(`Application: Get workbook; id:${n}`);try{i=await t.dispatch(e.GetWorkbookById,n)}catch(e){throw new a}return K(t,i,V,H)},re=t=>async()=>{let n;g("Application: Get workbooks");try{n=await t.dispatch(e.GetWorkbooks)}catch(e){throw new a}return n.map((e=>K(t,e,V,H)))},oe=t=>async n=>{g(`Application: Get worksheet; id:${n}`);try{n=await t.dispatch(e.GetWorksheetById,n)}catch(e){throw new a}return S(t,n,V,H)},se=t=>async n=>{let i;g(`Application: Open workbook; filePath:${n}`);try{i=await t.dispatch(e.OpenWorkbook,n)}catch(e){throw new a}return K(t,i,V,H)},ae=t=>async(n=!0)=>{g(`Application: Quit; displayAlerts:${n}`);try{return await t.dispatch(e.QuitApplication,n)}catch(e){throw new a}};var ce;!function(e){e[e.Info=1]="Info",e[e.Warn=2]="Warn",e[e.Error=3]="Error"}(ce||(ce={}));const de="excel-adapter",he=v();let le,ue;const pe=async()=>{try{if(!le||!await(async e=>(await o.H.InterApplicationBus.Channel.getAllChannels()).some((t=>t.channelName===e)))(he)){await(async()=>{var e;const t=null===(e=(await o.H.Application.getCurrentSync().getManifest()).appAssets)||void 0===e?void 0:e.find((e=>e.alias===de));if(t)return void m("Detected adapter package in app manifest appAssets",t);if(await ye())return void g("Using existing adapter package");const n={alias:de,src:"https://cdn.openfin.co/release/integrations/excel/1.3.0/OpenFin.Excel.zip",target:"OpenFin.Excel.exe",version:l};g("Downloading adapter package",n);try{await o.H.System.downloadAsset(n,(()=>{}))}catch(e){throw f("Unable to download adapter package"),e}})();const e=await o.H.System.getRuntimeInfo(),t=o.H.Application.me.uuid,n=e.version,i=e.securityRealm;g("Initializing adapter",{appId:t,channelName:he,runtimeVersion:n,securityRealm:i}),le=await o.H.System.launchExternalProcess({alias:de,arguments:`${t} ${n} ${i} ${he}`}),g(`Adapter running with uuid ${le.uuid}`)}const i=o.H.InterApplicationBus.Channel.connect(he,{payload:{version:l}}),s=new Promise((e=>{setTimeout(e,2e4)})).then((()=>{throw new Error("Connection to adapter timed out")}));ue=await Promise.race([i,s]),g(`Connected to adapter on channel ${he}`),ue.register(e.LogMessage,we),ue.register(e.EventFired,(n=ue,e=>{const{eventRegistrationId:i}=e,o=D.get(i);if(!o)throw new c(`No registered event listener found for id: ${i}`);g("Event payload received",e),((e,n,i)=>{var o,s;switch(i.eventTarget){case r.Workbook:switch(null===(o=i.eventName)||void 0===o?void 0:o.toUpperCase()){case t.Activate.toUpperCase():case t.Close.toUpperCase():case t.Deactivate.toUpperCase():return e();case t.AddWorksheet.toUpperCase():case t.DeleteWorksheet.toUpperCase():return e(S(n,i.worksheetObjectId,V,H));default:throw new c(`Unexpected workbook event: ${i.eventName}`)}case r.Worksheet:switch(null===(s=i.eventName)||void 0===s?void 0:s.toUpperCase()){case t.Activate.toUpperCase():return e();case t.Change.toUpperCase():return e(i.changedCells);case t.Deactivate.toUpperCase():return e();default:throw new c(`Unexpected worksheet event: ${i.eventName}`)}default:throw new c(`Unexpected event target: ${i.eventTarget}`)}})(o,n,e)}))}catch(e){const t=new d(void 0,e);throw f(t),t}var n;return{adapter:{channelName:he,version:l},createWorkbook:ne(ue),getWorkbookById:ie(ue),getWorkbooks:re(ue),getWorksheetById:oe(ue),openWorkbook:se(ue),quit:ae(ue)}},we=e=>{const{message:t,type:n}=e,i="[adapter]";switch(n){case ce.Error:f(t,i);break;case ce.Info:g(i,t);break;case ce.Warn:m(i,t)}},ye=async()=>{try{const e=await o.H.System.getAppAssetInfo({alias:de});return e&&e.version===l}catch(e){return!1}};var fe,ge,me,ve,Ce;!function(e){e.Continuous="Continuous",e.Dash="Dash",e.DashDot="DashDot",e.DashDotDot="DashDotDot",e.Dot="Dot",e.Double="Double",e.SlantDashDot="SlantDashDot",e.None="None"}(fe||(fe={})),function(e){e.Center="Center",e.CenterAcrossSelection="CenterAcrossSelection",e.Distributed="Distributed",e.Fill="Fill",e.General="General",e.Justify="Justify",e.Left="Left",e.Right="Right"}(ge||(ge={})),function(e){e.Automatic="Automatic",e.Checker="Checker",e.CrissCross="CrissCross",e.Down="Down",e.Gray16="Gray16",e.Gray25="Gray25",e.Gray50="Gray50",e.Gray75="Gray75",e.Gray8="Gray8",e.Grid="Grid",e.Horizontal="Horizontal",e.LightDown="LightDown",e.LightHorizontal="LightHorizontal",e.LightUp="LightUp",e.LightVertical="LightVertical",e.LinearGradient="LinearGradient",e.None="None",e.RectangularGradient="RectangularGradient",e.SemiGray75="SemiGray75",e.Solid="Solid",e.Up="Up",e.Vertical="Vertical"}(me||(me={})),function(e){e.Bottom="Bottom",e.Center="Center",e.Distributed="Distributed",e.Justify="Justify",e.Top="Top"}(ve||(ve={})),function(e){e.And="And",e.Or="Or",e.Top10Items="Top10Items",e.Bottom10Items="Bottom10Items",e.Top10Percent="Top10Percent",e.Bottom10Percent="Bottom10Percent",e.FilterValues="FilterValues"}(Ce||(Ce={}))})();var r=i.dq,o=i.MS,s=i.xQ,a=i.sO,c=i.Zu,d=i.I3,h=i.$U,l=i.i0,u=i.cX,p=i._W,w=i.U$,y=i.U7,f=i.rd;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*****************************!*\
  !*** ./client/src/excel.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _finos_fdc3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @finos/fdc3 */ "../../node_modules/@finos/fdc3/dist/fdc3.esm.js");
/* harmony import */ var _openfin_excel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openfin/excel */ "../../node_modules/@openfin/excel/openfin.excel.js");


const KNOWN_INSTRUMENTS = ["TSLA", "MSFT", "AAPL"];
let excel;
let openWorkbooks;
let selectedWorkbookIndex;
let openWorksheets;
let selectedWorksheetIndex;
document.addEventListener("DOMContentLoaded", async () => {
    try {
        await init();
    }
    catch (error) {
        console.error(error);
    }
});
async function init() {
    try {
        const resultsContainer = document.querySelector("#results-container");
        resultsContainer.style.display = "none";
        excel = await (0,_openfin_excel__WEBPACK_IMPORTED_MODULE_1__.getExcelApplication)();
        await populateWorkbooks();
        const refreshWorkbookButton = document.querySelector("#workbook-refresh");
        refreshWorkbookButton.addEventListener("click", async () => populateWorkbooks());
        const refreshWorksheetButton = document.querySelector("#worksheet-refresh");
        refreshWorksheetButton.addEventListener("click", async () => populateWorksheets());
        const openWorkbooksSelect = document.querySelector("#workbooks");
        openWorkbooksSelect.addEventListener("change", async (e) => selectWorkbook(e.target.value));
        const openWorksheetsSelect = document.querySelector("#worksheets");
        openWorksheetsSelect.addEventListener("change", async (e) => selectWorksheet(e.target.value));
    }
    catch (err) {
        showError(err);
    }
}
function showError(err) {
    const errDom = document.querySelector("#error");
    errDom.innerHTML = err.message;
}
async function populateWorkbooks() {
    if (excel) {
        selectedWorkbookIndex = undefined;
        const refreshButton = document.querySelector("#workbook-refresh");
        refreshButton.disabled = true;
        const select = document.querySelector("#workbooks");
        select.disabled = true;
        select.innerHTML = "";
        openWorkbooks = [];
        try {
            const workbooks = await excel.getWorkbooks();
            for (const book of workbooks) {
                const name = await book.getName();
                openWorkbooks.push({
                    book,
                    name
                });
            }
            const optionEmpty = document.createElement("option");
            optionEmpty.innerHTML = "----Select workbook----";
            optionEmpty.value = "";
            optionEmpty.selected = true;
            optionEmpty.disabled = true;
            select.append(optionEmpty);
            for (const openWorkbook of openWorkbooks) {
                const option = document.createElement("option");
                option.innerHTML = openWorkbook.name;
                option.value = openWorkbook.name;
                select.append(option);
            }
        }
        catch (err) {
            console.error(err);
            showError(err);
        }
        finally {
            select.disabled = false;
            refreshButton.disabled = false;
        }
    }
}
async function selectWorkbook(name) {
    const newWorkbookIndex = openWorkbooks.findIndex((w) => w.name === name);
    if (newWorkbookIndex !== selectedWorkbookIndex) {
        selectedWorkbookIndex = newWorkbookIndex;
        if (newWorkbookIndex >= 0) {
            await openWorkbooks[selectedWorkbookIndex].book.activate();
        }
    }
    await populateWorksheets();
}
async function populateWorksheets() {
    if (excel) {
        selectedWorksheetIndex = undefined;
        const refreshButton = document.querySelector("#worksheet-refresh");
        refreshButton.disabled = true;
        const select = document.querySelector("#worksheets");
        select.disabled = true;
        select.innerHTML = "";
        openWorksheets = [];
        const workbook = openWorkbooks[selectedWorkbookIndex];
        if (workbook) {
            try {
                const sheets = await workbook.book.getWorksheets();
                for (const sheet of sheets) {
                    const name = await sheet.getName();
                    openWorksheets.push({
                        sheet,
                        name
                    });
                }
                const optionEmpty = document.createElement("option");
                optionEmpty.innerHTML = "----Select worksheet----";
                optionEmpty.value = "";
                optionEmpty.selected = true;
                optionEmpty.disabled = true;
                select.append(optionEmpty);
                for (const openWorksheet of openWorksheets) {
                    const option = document.createElement("option");
                    option.innerHTML = openWorksheet.name;
                    option.value = openWorksheet.name;
                    select.append(option);
                }
            }
            catch (err) {
                console.error(err);
                showError(err);
            }
            finally {
                select.disabled = false;
                refreshButton.disabled = false;
            }
        }
    }
}
async function selectWorksheet(name) {
    const newWorksheetIndex = openWorksheets.findIndex((w) => w.name === name);
    if (newWorksheetIndex !== selectedWorksheetIndex) {
        const oldWorksheet = openWorksheets[selectedWorksheetIndex];
        if (oldWorksheet) {
            await oldWorksheet.sheet.removeEventListener(handleCellChange);
        }
        selectedWorksheetIndex = newWorksheetIndex;
        if (selectedWorksheetIndex >= 0) {
            await openWorksheets[selectedWorksheetIndex].sheet.activate();
            await openWorksheets[selectedWorksheetIndex].sheet.addEventListener("change", handleCellChange);
            const resultsContainer = document.querySelector("#results-container");
            resultsContainer.style.display = "flex";
        }
    }
}
async function handleCellChange(cells) {
    const cellContainer = document.querySelector("#cell-changes-container");
    cellContainer.innerHTML = JSON.stringify(cells, undefined, "  ");
    for (const cell of cells) {
        if (KNOWN_INSTRUMENTS.includes(cell.value)) {
            await broadcastInstrument(cell.value);
        }
    }
}
async function broadcastInstrument(instrument) {
    const broadcastElement = document.querySelector("#broadcast-instrument");
    if (window.fdc3) {
        try {
            const fdcInstrument = {
                type: "fdc3.instrument",
                id: {
                    ticker: instrument
                }
            };
            const channel = await (0,_finos_fdc3__WEBPACK_IMPORTED_MODULE_0__.getCurrentChannel)();
            channel.broadcast(fdcInstrument);
            broadcastElement.value = instrument;
        }
        catch (err) {
            broadcastElement.value = err.message;
        }
    }
    else {
        broadcastElement.textContent = "No FD3 Channel available";
    }
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEJBQThCOztBQUUvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DOztBQUVyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsb0NBQW9DOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixhQUFhO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLE1BQU07QUFDTixlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLFdBQVc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQ0FBcUMsY0FBYztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0I7O0FBRWxCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnQkFBZ0I7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsK0NBQStDLFFBQVE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsK0NBQStDLFFBQVE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixjQUFjOztBQUUvQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixrREFBa0Q7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLG9DQUFvQzs7QUFFckM7QUFDQTtBQUNBLGNBQWMsaUhBQWlIO0FBQy9IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsT0FBTztBQUMzQjs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxJQUFJOzs7QUFHSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0VBQXNFLGFBQWE7QUFDbkY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNB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YUFBYSxDQUFDLENBQUM7WUFFakMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUNwQztRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ2IsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7U0FDckM7S0FDRDtTQUFNO1FBQ04sZ0JBQWdCLENBQUMsV0FBVyxHQUFHLDBCQUEwQixDQUFDO0tBQzFEO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ludGVncmF0aW9uLWV4Y2VsLy4uLy4uL25vZGVfbW9kdWxlcy9AZmlub3MvZmRjMy9kaXN0L2ZkYzMuZXNtLmpzIiwid2VicGFjazovL2ludGVncmF0aW9uLWV4Y2VsLy4uLy4uL25vZGVfbW9kdWxlcy9Ab3BlbmZpbi9leGNlbC9vcGVuZmluLmV4Y2VsLmpzIiwid2VicGFjazovL2ludGVncmF0aW9uLWV4Y2VsL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ludGVncmF0aW9uLWV4Y2VsL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9pbnRlZ3JhdGlvbi1leGNlbC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ludGVncmF0aW9uLWV4Y2VsL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vaW50ZWdyYXRpb24tZXhjZWwvLi9jbGllbnQvc3JjL2V4Y2VsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxyXG4gKiBDb3B5cmlnaHQgMjAxOSBGSU5PUyBGREMzIGNvbnRyaWJ1dG9ycyAtIHNlZSBOT1RJQ0UgZmlsZVxyXG4gKi9cbnZhciBPcGVuRXJyb3I7XG5cbihmdW5jdGlvbiAoT3BlbkVycm9yKSB7XG4gIE9wZW5FcnJvcltcIkFwcE5vdEZvdW5kXCJdID0gXCJBcHBOb3RGb3VuZFwiO1xuICBPcGVuRXJyb3JbXCJFcnJvck9uTGF1bmNoXCJdID0gXCJFcnJvck9uTGF1bmNoXCI7XG4gIE9wZW5FcnJvcltcIkFwcFRpbWVvdXRcIl0gPSBcIkFwcFRpbWVvdXRcIjtcbiAgT3BlbkVycm9yW1wiUmVzb2x2ZXJVbmF2YWlsYWJsZVwiXSA9IFwiUmVzb2x2ZXJVbmF2YWlsYWJsZVwiO1xufSkoT3BlbkVycm9yIHx8IChPcGVuRXJyb3IgPSB7fSkpO1xuXG52YXIgUmVzb2x2ZUVycm9yO1xuXG4oZnVuY3Rpb24gKFJlc29sdmVFcnJvcikge1xuICBSZXNvbHZlRXJyb3JbXCJOb0FwcHNGb3VuZFwiXSA9IFwiTm9BcHBzRm91bmRcIjtcbiAgUmVzb2x2ZUVycm9yW1wiUmVzb2x2ZXJVbmF2YWlsYWJsZVwiXSA9IFwiUmVzb2x2ZXJVbmF2YWlsYWJsZVwiO1xuICBSZXNvbHZlRXJyb3JbXCJSZXNvbHZlclRpbWVvdXRcIl0gPSBcIlJlc29sdmVyVGltZW91dFwiO1xufSkoUmVzb2x2ZUVycm9yIHx8IChSZXNvbHZlRXJyb3IgPSB7fSkpO1xuXG52YXIgQ2hhbm5lbEVycm9yO1xuXG4oZnVuY3Rpb24gKENoYW5uZWxFcnJvcikge1xuICBDaGFubmVsRXJyb3JbXCJOb0NoYW5uZWxGb3VuZFwiXSA9IFwiTm9DaGFubmVsRm91bmRcIjtcbiAgQ2hhbm5lbEVycm9yW1wiQWNjZXNzRGVuaWVkXCJdID0gXCJBY2Nlc3NEZW5pZWRcIjtcbiAgQ2hhbm5lbEVycm9yW1wiQ3JlYXRpb25GYWlsZWRcIl0gPSBcIkNyZWF0aW9uRmFpbGVkXCI7XG59KShDaGFubmVsRXJyb3IgfHwgKENoYW5uZWxFcnJvciA9IHt9KSk7XG5cbmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIHJ1bnRpbWVfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQkMTsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gSUUgOCBoYXMgYSBicm9rZW4gT2JqZWN0LmRlZmluZVByb3BlcnR5IHRoYXQgb25seSB3b3JrcyBvbiBET00gb2JqZWN0cy5cbiAgICBkZWZpbmUoe30sIFwiXCIpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBkZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsdWUpIHtcbiAgICAgIHJldHVybiBvYmpba2V5XSA9IHZhbHVlO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgaWYgKFByb21pc2VJbXBsID09PSB2b2lkIDApIFByb21pc2VJbXBsID0gUHJvbWlzZTtcblxuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSxcbiAgICAgIFByb21pc2VJbXBsXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQkMSkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkJDE7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCQxO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKTtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQkMTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQkMSwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQkMTtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZCQxO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkJDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQkMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICAgbW9kdWxlLmV4cG9ydHMgXG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG59KTtcblxudmFyIERFRkFVTFRfVElNRU9VVCA9IDUwMDA7XG52YXIgVW5hdmFpbGFibGVFcnJvciA9IC8qI19fUFVSRV9fKi9uZXcgRXJyb3IoJ0ZEQzMgRGVza3RvcEFnZW50IG5vdCBhdmFpbGFibGUgYXQgYHdpbmRvdy5mZGMzYC4nKTtcbnZhciBUaW1lb3V0RXJyb3IgPSAvKiNfX1BVUkVfXyovbmV3IEVycm9yKCdUaW1lZCBvdXQgd2FpdGluZyBmb3IgYGZkYzNSZWFkeWAgZXZlbnQuJyk7XG52YXIgVW5leHBlY3RlZEVycm9yID0gLyojX19QVVJFX18qL25ldyBFcnJvcignYGZkYzNSZWFkeWAgZXZlbnQgZmlyZWQsIGJ1dCBgd2luZG93LmZkYzNgIG5vdCBzZXQgdG8gRGVza3RvcEFnZW50LicpO1xuXG5mdW5jdGlvbiByZWplY3RJZk5vR2xvYmFsKGYpIHtcbiAgcmV0dXJuIHdpbmRvdy5mZGMzID8gZigpIDogUHJvbWlzZS5yZWplY3QoVW5hdmFpbGFibGVFcnJvcik7XG59XG5cbmZ1bmN0aW9uIHRocm93SWZOb0dsb2JhbChmKSB7XG4gIGlmICghd2luZG93LmZkYzMpIHtcbiAgICB0aHJvdyBVbmF2YWlsYWJsZUVycm9yO1xuICB9XG5cbiAgcmV0dXJuIGYoKTtcbn1cblxudmFyIGZkYzNSZWFkeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIHZhciBfcmVmID0gLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcnVudGltZV8xLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh3YWl0Rm9yTXMpIHtcbiAgICByZXR1cm4gcnVudGltZV8xLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAod2FpdEZvck1zID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgd2FpdEZvck1zID0gREVGQVVMVF9USU1FT1VUO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIGdsb2JhbCBpcyBhbHJlYWR5IGF2YWlsYWJsZSByZXNvbHZlIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgIGlmICh3aW5kb3cuZmRjMykge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBpdHMgbm90IGF2YWlsYWJsZSBzZXR1cCBhIHRpbWVvdXQgdG8gcmV0dXJuIGEgcmVqZWN0ZWQgcHJvbWlzZVxuICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmZkYzMgPyByZXNvbHZlKCkgOiByZWplY3QoVGltZW91dEVycm9yKTtcbiAgICAgICAgICAgICAgICB9LCB3YWl0Rm9yTXMpOyAvLyBsaXN0ZW4gZm9yIHRoZSBmZGMzUmVhZHkgZXZlbnRcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmZGMzUmVhZHknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgICB3aW5kb3cuZmRjMyA/IHJlc29sdmUoKSA6IHJlamVjdChVbmV4cGVjdGVkRXJyb3IpO1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgIG9uY2U6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfY2FsbGVlKTtcbiAgfSkpO1xuXG4gIHJldHVybiBmdW5jdGlvbiBmZGMzUmVhZHkoX3gpIHtcbiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSgpO1xuZnVuY3Rpb24gb3BlbihhcHAsIGNvbnRleHQpIHtcbiAgcmV0dXJuIHJlamVjdElmTm9HbG9iYWwoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW5kb3cuZmRjMy5vcGVuKGFwcCwgY29udGV4dCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZmluZEludGVudChpbnRlbnQsIGNvbnRleHQpIHtcbiAgcmV0dXJuIHJlamVjdElmTm9HbG9iYWwoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW5kb3cuZmRjMy5maW5kSW50ZW50KGludGVudCwgY29udGV4dCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZmluZEludGVudHNCeUNvbnRleHQoY29udGV4dCkge1xuICByZXR1cm4gcmVqZWN0SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmZpbmRJbnRlbnRzQnlDb250ZXh0KGNvbnRleHQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGJyb2FkY2FzdChjb250ZXh0KSB7XG4gIHRocm93SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmJyb2FkY2FzdChjb250ZXh0KTtcbiAgfSk7XG59XG5mdW5jdGlvbiByYWlzZUludGVudChpbnRlbnQsIGNvbnRleHQsIGFwcCkge1xuICByZXR1cm4gcmVqZWN0SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLnJhaXNlSW50ZW50KGludGVudCwgY29udGV4dCwgYXBwKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByYWlzZUludGVudEZvckNvbnRleHQoY29udGV4dCwgYXBwKSB7XG4gIHJldHVybiByZWplY3RJZk5vR2xvYmFsKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gd2luZG93LmZkYzMucmFpc2VJbnRlbnRGb3JDb250ZXh0KGNvbnRleHQsIGFwcCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gYWRkSW50ZW50TGlzdGVuZXIoaW50ZW50LCBoYW5kbGVyKSB7XG4gIHJldHVybiB0aHJvd0lmTm9HbG9iYWwoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW5kb3cuZmRjMy5hZGRJbnRlbnRMaXN0ZW5lcihpbnRlbnQsIGhhbmRsZXIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGFkZENvbnRleHRMaXN0ZW5lcihjb250ZXh0VHlwZU9ySGFuZGxlciwgaGFuZGxlcikge1xuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlT3JIYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHRocm93SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gd2luZG93LmZkYzMuYWRkQ29udGV4dExpc3RlbmVyKGNvbnRleHRUeXBlT3JIYW5kbGVyLCBoYW5kbGVyKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdGhyb3dJZk5vR2xvYmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB3aW5kb3cuZmRjMy5hZGRDb250ZXh0TGlzdGVuZXIoY29udGV4dFR5cGVPckhhbmRsZXIpO1xuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTeXN0ZW1DaGFubmVscygpIHtcbiAgcmV0dXJuIHJlamVjdElmTm9HbG9iYWwoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW5kb3cuZmRjMy5nZXRTeXN0ZW1DaGFubmVscygpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGpvaW5DaGFubmVsKGNoYW5uZWxJZCkge1xuICByZXR1cm4gcmVqZWN0SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmpvaW5DaGFubmVsKGNoYW5uZWxJZCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVDaGFubmVsKGNoYW5uZWxJZCkge1xuICByZXR1cm4gcmVqZWN0SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmdldE9yQ3JlYXRlQ2hhbm5lbChjaGFubmVsSWQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRDaGFubmVsKCkge1xuICByZXR1cm4gcmVqZWN0SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmdldEN1cnJlbnRDaGFubmVsKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gbGVhdmVDdXJyZW50Q2hhbm5lbCgpIHtcbiAgcmV0dXJuIHJlamVjdElmTm9HbG9iYWwoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB3aW5kb3cuZmRjMy5sZWF2ZUN1cnJlbnRDaGFubmVsKCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0SW5mbygpIHtcbiAgcmV0dXJuIHRocm93SWZOb0dsb2JhbChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5mZGMzLmdldEluZm8oKTtcbiAgfSk7XG59XG4vKipcclxuICogQ29tcGFyZSBudW1lcmljIHNlbXZlciB2ZXJzaW9uIG51bWJlciBzdHJpbmdzIChpbiB0aGUgZm9ybSBgMS4yLjNgKS5cclxuICpcclxuICogUmV0dXJucyBgLTFgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIGxvd2VyIHZlcnNpb24gbnVtYmVyIHRoYW4gdGhlIHNlY29uZCxcclxuICogYDFgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBncmVhdGVyIHRoYW4gdGhlIHNlY29uZCwgMCBpZiB0aGUgYXJndW1lbnRzIGFyZVxyXG4gKiBlcXVhbCBhbmQgYG51bGxgIGlmIGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyB0aGUgY29tcGFyaXNvbi5cclxuICpcclxuICogQHBhcmFtIGFcclxuICogQHBhcmFtIGJcclxuICovXG5cbnZhciBjb21wYXJlVmVyc2lvbk51bWJlcnMgPSBmdW5jdGlvbiBjb21wYXJlVmVyc2lvbk51bWJlcnMoYSwgYikge1xuICB0cnkge1xuICAgIHZhciBhVmVyQXJyID0gYS5zcGxpdCgnLicpLm1hcChOdW1iZXIpO1xuICAgIHZhciBiVmVyQXJyID0gYi5zcGxpdCgnLicpLm1hcChOdW1iZXIpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IE1hdGgubWF4KGFWZXJBcnIubGVuZ3RoLCBiVmVyQXJyLmxlbmd0aCk7IGluZGV4KyspIHtcbiAgICAgIC8qIElmIG9uZSB2ZXJzaW9uIG51bWJlciBoYXMgbW9yZSBkaWdpdHMgYW5kIHRoZSBvdGhlciBkb2VzIG5vdCwgYW5kIHRoZXkgYXJlIG90aGVyd2lzZSBlcXVhbCxcclxuICAgICAgICAgYXNzdW1lIHRoZSBsb25nZXIgaXMgZ3JlYXRlci4gRS5nLiAxLjEuMSA+IDEuMSAqL1xuICAgICAgaWYgKGluZGV4ID09PSBhVmVyQXJyLmxlbmd0aCB8fCBhVmVyQXJyW2luZGV4XSA8IGJWZXJBcnJbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGJWZXJBcnIubGVuZ3RoIHx8IGFWZXJBcnJbaW5kZXhdID4gYlZlckFycltpbmRleF0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY29tcGFyZSB2ZXJzaW9uIHN0cmluZ3MnLCBlKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGUgRkRDMyB2ZXJzaW9uIGluIGFuIEltcGxlbWVudGF0aW9uTWV0YWRhdGEgb2JqZWN0IGlzIGdyZWF0ZXIgdGhhblxyXG4gKiBvciBlcXVhbCB0byB0aGUgc3VwcGxpZWQgbnVtZXJpYyBzZW12ZXIgdmVyc2lvbiBudW1iZXIgc3RyaW5nIChpbiB0aGUgZm9ybSBgMS4yLjNgKS5cclxuICpcclxuICogUmV0dXJucyBhIGJvb2xlYW4gb3IgbnVsbCBpZiBhbiBlcnJvciBvY2N1cnJlZCB3aGlsZSBjb21wYXJpbmcgdGhlIHZlcnNpb24gbnVtYmVycy5cclxuICpcclxuICogQHBhcmFtIG1ldGFkYXRhXHJcbiAqIEBwYXJhbSB2ZXJzaW9uXHJcbiAqL1xuXG52YXIgdmVyc2lvbklzQXRMZWFzdCA9IGZ1bmN0aW9uIHZlcnNpb25Jc0F0TGVhc3QobWV0YWRhdGEsIHZlcnNpb24pIHtcbiAgdmFyIGNvbXBhcmlzb24gPSBjb21wYXJlVmVyc2lvbk51bWJlcnMobWV0YWRhdGEuZmRjM1ZlcnNpb24sIHZlcnNpb24pO1xuICByZXR1cm4gY29tcGFyaXNvbiA9PT0gbnVsbCA/IG51bGwgOiBjb21wYXJpc29uID49IDAgPyB0cnVlIDogZmFsc2U7XG59O1xuXG52YXIgQ29udGV4dFR5cGVzO1xuXG4oZnVuY3Rpb24gKENvbnRleHRUeXBlcykge1xuICBDb250ZXh0VHlwZXNbXCJDb250YWN0XCJdID0gXCJmZGMzLmNvbnRhY3RcIjtcbiAgQ29udGV4dFR5cGVzW1wiQ29udGFjdExpc3RcIl0gPSBcImZkYzMuY29udGFjdExpc3RcIjtcbiAgQ29udGV4dFR5cGVzW1wiQ291bnRyeVwiXSA9IFwiZmRjMy5jb3VudHJ5XCI7XG4gIENvbnRleHRUeXBlc1tcIkluc3RydW1lbnRcIl0gPSBcImZkYzMuaW5zdHJ1bWVudFwiO1xuICBDb250ZXh0VHlwZXNbXCJPcmdhbml6YXRpb25cIl0gPSBcImZkYzMub3JnYW5pemF0aW9uXCI7XG4gIENvbnRleHRUeXBlc1tcIlBvcnRmb2xpb1wiXSA9IFwiZmRjMy5wb3J0Zm9saW9cIjtcbiAgQ29udGV4dFR5cGVzW1wiUG9zaXRpb25cIl0gPSBcImZkYzMucG9zaXRpb25cIjtcbn0pKENvbnRleHRUeXBlcyB8fCAoQ29udGV4dFR5cGVzID0ge30pKTtcblxuLy8gVG8gcGFyc2UgdGhpcyBkYXRhOlxuLy9cbi8vICAgaW1wb3J0IHsgQ29udmVydCwgQ29udGV4dCwgQ29udGFjdCwgQ29udGFjdExpc3QsIEluc3RydW1lbnQsIEluc3RydW1lbnRMaXN0LCBDb3VudHJ5LCBPcmdhbml6YXRpb24sIFBvcnRmb2xpbywgUG9zaXRpb24gfSBmcm9tIFwiLi9maWxlXCI7XG4vL1xuLy8gICBjb25zdCBjb250ZXh0ID0gQ29udmVydC50b0NvbnRleHQoanNvbik7XG4vLyAgIGNvbnN0IGNvbnRhY3QgPSBDb252ZXJ0LnRvQ29udGFjdChqc29uKTtcbi8vICAgY29uc3QgY29udGFjdExpc3QgPSBDb252ZXJ0LnRvQ29udGFjdExpc3QoanNvbik7XG4vLyAgIGNvbnN0IGluc3RydW1lbnQgPSBDb252ZXJ0LnRvSW5zdHJ1bWVudChqc29uKTtcbi8vICAgY29uc3QgaW5zdHJ1bWVudExpc3QgPSBDb252ZXJ0LnRvSW5zdHJ1bWVudExpc3QoanNvbik7XG4vLyAgIGNvbnN0IGNvdW50cnkgPSBDb252ZXJ0LnRvQ291bnRyeShqc29uKTtcbi8vICAgY29uc3Qgb3JnYW5pemF0aW9uID0gQ29udmVydC50b09yZ2FuaXphdGlvbihqc29uKTtcbi8vICAgY29uc3QgcG9ydGZvbGlvID0gQ29udmVydC50b1BvcnRmb2xpbyhqc29uKTtcbi8vICAgY29uc3QgcG9zaXRpb24gPSBDb252ZXJ0LnRvUG9zaXRpb24oanNvbik7XG4vL1xuLy8gVGhlc2UgZnVuY3Rpb25zIHdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIEpTT04gZG9lc24ndFxuLy8gbWF0Y2ggdGhlIGV4cGVjdGVkIGludGVyZmFjZSwgZXZlbiBpZiB0aGUgSlNPTiBpcyB2YWxpZC5cbi8vIENvbnZlcnRzIEpTT04gc3RyaW5ncyB0by9mcm9tIHlvdXIgdHlwZXNcbi8vIGFuZCBhc3NlcnRzIHRoZSByZXN1bHRzIG9mIEpTT04ucGFyc2UgYXQgcnVudGltZVxudmFyIENvbnZlcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb252ZXJ0KCkge31cblxuICBDb252ZXJ0LnRvQ29udGV4dCA9IGZ1bmN0aW9uIHRvQ29udGV4dChqc29uKSB7XG4gICAgcmV0dXJuIGNhc3QoSlNPTi5wYXJzZShqc29uKSwgcignQ29udGV4dCcpKTtcbiAgfTtcblxuICBDb252ZXJ0LmNvbnRleHRUb0pzb24gPSBmdW5jdGlvbiBjb250ZXh0VG9Kc29uKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHVuY2FzdCh2YWx1ZSwgcignQ29udGV4dCcpKSwgbnVsbCwgMik7XG4gIH07XG5cbiAgQ29udmVydC50b0NvbnRhY3QgPSBmdW5jdGlvbiB0b0NvbnRhY3QoanNvbikge1xuICAgIHJldHVybiBjYXN0KEpTT04ucGFyc2UoanNvbiksIHIoJ0NvbnRhY3QnKSk7XG4gIH07XG5cbiAgQ29udmVydC5jb250YWN0VG9Kc29uID0gZnVuY3Rpb24gY29udGFjdFRvSnNvbih2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmNhc3QodmFsdWUsIHIoJ0NvbnRhY3QnKSksIG51bGwsIDIpO1xuICB9O1xuXG4gIENvbnZlcnQudG9Db250YWN0TGlzdCA9IGZ1bmN0aW9uIHRvQ29udGFjdExpc3QoanNvbikge1xuICAgIHJldHVybiBjYXN0KEpTT04ucGFyc2UoanNvbiksIHIoJ0NvbnRhY3RMaXN0JykpO1xuICB9O1xuXG4gIENvbnZlcnQuY29udGFjdExpc3RUb0pzb24gPSBmdW5jdGlvbiBjb250YWN0TGlzdFRvSnNvbih2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmNhc3QodmFsdWUsIHIoJ0NvbnRhY3RMaXN0JykpLCBudWxsLCAyKTtcbiAgfTtcblxuICBDb252ZXJ0LnRvSW5zdHJ1bWVudCA9IGZ1bmN0aW9uIHRvSW5zdHJ1bWVudChqc29uKSB7XG4gICAgcmV0dXJuIGNhc3QoSlNPTi5wYXJzZShqc29uKSwgcignSW5zdHJ1bWVudCcpKTtcbiAgfTtcblxuICBDb252ZXJ0Lmluc3RydW1lbnRUb0pzb24gPSBmdW5jdGlvbiBpbnN0cnVtZW50VG9Kc29uKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHVuY2FzdCh2YWx1ZSwgcignSW5zdHJ1bWVudCcpKSwgbnVsbCwgMik7XG4gIH07XG5cbiAgQ29udmVydC50b0luc3RydW1lbnRMaXN0ID0gZnVuY3Rpb24gdG9JbnN0cnVtZW50TGlzdChqc29uKSB7XG4gICAgcmV0dXJuIGNhc3QoSlNPTi5wYXJzZShqc29uKSwgcignSW5zdHJ1bWVudExpc3QnKSk7XG4gIH07XG5cbiAgQ29udmVydC5pbnN0cnVtZW50TGlzdFRvSnNvbiA9IGZ1bmN0aW9uIGluc3RydW1lbnRMaXN0VG9Kc29uKHZhbHVlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHVuY2FzdCh2YWx1ZSwgcignSW5zdHJ1bWVudExpc3QnKSksIG51bGwsIDIpO1xuICB9O1xuXG4gIENvbnZlcnQudG9Db3VudHJ5ID0gZnVuY3Rpb24gdG9Db3VudHJ5KGpzb24pIHtcbiAgICByZXR1cm4gY2FzdChKU09OLnBhcnNlKGpzb24pLCByKCdDb3VudHJ5JykpO1xuICB9O1xuXG4gIENvbnZlcnQuY291bnRyeVRvSnNvbiA9IGZ1bmN0aW9uIGNvdW50cnlUb0pzb24odmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodW5jYXN0KHZhbHVlLCByKCdDb3VudHJ5JykpLCBudWxsLCAyKTtcbiAgfTtcblxuICBDb252ZXJ0LnRvT3JnYW5pemF0aW9uID0gZnVuY3Rpb24gdG9Pcmdhbml6YXRpb24oanNvbikge1xuICAgIHJldHVybiBjYXN0KEpTT04ucGFyc2UoanNvbiksIHIoJ09yZ2FuaXphdGlvbicpKTtcbiAgfTtcblxuICBDb252ZXJ0Lm9yZ2FuaXphdGlvblRvSnNvbiA9IGZ1bmN0aW9uIG9yZ2FuaXphdGlvblRvSnNvbih2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmNhc3QodmFsdWUsIHIoJ09yZ2FuaXphdGlvbicpKSwgbnVsbCwgMik7XG4gIH07XG5cbiAgQ29udmVydC50b1BvcnRmb2xpbyA9IGZ1bmN0aW9uIHRvUG9ydGZvbGlvKGpzb24pIHtcbiAgICByZXR1cm4gY2FzdChKU09OLnBhcnNlKGpzb24pLCByKCdQb3J0Zm9saW8nKSk7XG4gIH07XG5cbiAgQ29udmVydC5wb3J0Zm9saW9Ub0pzb24gPSBmdW5jdGlvbiBwb3J0Zm9saW9Ub0pzb24odmFsdWUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodW5jYXN0KHZhbHVlLCByKCdQb3J0Zm9saW8nKSksIG51bGwsIDIpO1xuICB9O1xuXG4gIENvbnZlcnQudG9Qb3NpdGlvbiA9IGZ1bmN0aW9uIHRvUG9zaXRpb24oanNvbikge1xuICAgIHJldHVybiBjYXN0KEpTT04ucGFyc2UoanNvbiksIHIoJ1Bvc2l0aW9uJykpO1xuICB9O1xuXG4gIENvbnZlcnQucG9zaXRpb25Ub0pzb24gPSBmdW5jdGlvbiBwb3NpdGlvblRvSnNvbih2YWx1ZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh1bmNhc3QodmFsdWUsIHIoJ1Bvc2l0aW9uJykpLCBudWxsLCAyKTtcbiAgfTtcblxuICByZXR1cm4gQ29udmVydDtcbn0oKTtcblxuZnVuY3Rpb24gaW52YWxpZFZhbHVlKHR5cCwgdmFsLCBrZXkpIHtcbiAgaWYgKGtleSA9PT0gdm9pZCAwKSB7XG4gICAga2V5ID0gJyc7XG4gIH1cblxuICBpZiAoa2V5KSB7XG4gICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBFeHBlY3RlZCB0eXBlIFwiICsgSlNPTi5zdHJpbmdpZnkodHlwKSArIFwiIGJ1dCBnb3QgXCIgKyBKU09OLnN0cmluZ2lmeSh2YWwpKTtcbiAgfVxuXG4gIHRocm93IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBcIiArIEpTT04uc3RyaW5naWZ5KHZhbCkgKyBcIiBmb3IgdHlwZSBcIiArIEpTT04uc3RyaW5naWZ5KHR5cCkpO1xufVxuXG5mdW5jdGlvbiBqc29uVG9KU1Byb3BzKHR5cCkge1xuICBpZiAodHlwLmpzb25Ub0pTID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgbWFwID0ge307XG4gICAgdHlwLnByb3BzLmZvckVhY2goZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBtYXBbcC5qc29uXSA9IHtcbiAgICAgICAga2V5OiBwLmpzLFxuICAgICAgICB0eXA6IHAudHlwXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHR5cC5qc29uVG9KUyA9IG1hcDtcbiAgfVxuXG4gIHJldHVybiB0eXAuanNvblRvSlM7XG59XG5cbmZ1bmN0aW9uIGpzVG9KU09OUHJvcHModHlwKSB7XG4gIGlmICh0eXAuanNUb0pTT04gPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBtYXAgPSB7fTtcbiAgICB0eXAucHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIG1hcFtwLmpzXSA9IHtcbiAgICAgICAga2V5OiBwLmpzb24sXG4gICAgICAgIHR5cDogcC50eXBcbiAgICAgIH07XG4gICAgfSk7XG4gICAgdHlwLmpzVG9KU09OID0gbWFwO1xuICB9XG5cbiAgcmV0dXJuIHR5cC5qc1RvSlNPTjtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHZhbCwgdHlwLCBnZXRQcm9wcywga2V5KSB7XG4gIGlmIChrZXkgPT09IHZvaWQgMCkge1xuICAgIGtleSA9ICcnO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUHJpbWl0aXZlKHR5cCwgdmFsKSB7XG4gICAgaWYgKHR5cGVvZiB0eXAgPT09IHR5cGVvZiB2YWwpIHJldHVybiB2YWw7XG4gICAgcmV0dXJuIGludmFsaWRWYWx1ZSh0eXAsIHZhbCwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVVuaW9uKHR5cHMsIHZhbCkge1xuICAgIC8vIHZhbCBtdXN0IHZhbGlkYXRlIGFnYWluc3Qgb25lIHR5cCBpbiB0eXBzXG4gICAgdmFyIGwgPSB0eXBzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgX3R5cCA9IHR5cHNbaV07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm0odmFsLCBfdHlwLCBnZXRQcm9wcyk7XG4gICAgICB9IGNhdGNoIChfKSB7fVxuICAgIH1cblxuICAgIHJldHVybiBpbnZhbGlkVmFsdWUodHlwcywgdmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybUVudW0oY2FzZXMsIHZhbCkge1xuICAgIGlmIChjYXNlcy5pbmRleE9mKHZhbCkgIT09IC0xKSByZXR1cm4gdmFsO1xuICAgIHJldHVybiBpbnZhbGlkVmFsdWUoY2FzZXMsIHZhbCk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1BcnJheSh0eXAsIHZhbCkge1xuICAgIC8vIHZhbCBtdXN0IGJlIGFuIGFycmF5IHdpdGggbm8gaW52YWxpZCBlbGVtZW50c1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWwpKSByZXR1cm4gaW52YWxpZFZhbHVlKCdhcnJheScsIHZhbCk7XG4gICAgcmV0dXJuIHZhbC5tYXAoZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKGVsLCB0eXAsIGdldFByb3BzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybURhdGUodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGQgPSBuZXcgRGF0ZSh2YWwpO1xuXG4gICAgaWYgKGlzTmFOKGQudmFsdWVPZigpKSkge1xuICAgICAgcmV0dXJuIGludmFsaWRWYWx1ZSgnRGF0ZScsIHZhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQ7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1PYmplY3QocHJvcHMsIGFkZGl0aW9uYWwsIHZhbCkge1xuICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXR1cm4gaW52YWxpZFZhbHVlKCdvYmplY3QnLCB2YWwpO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9wcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BzW2tleV07XG4gICAgICB2YXIgdiA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSkgPyB2YWxba2V5XSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlc3VsdFtwcm9wLmtleV0gPSB0cmFuc2Zvcm0odiwgcHJvcC50eXAsIGdldFByb3BzLCBwcm9wLmtleSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJhbnNmb3JtKHZhbFtrZXldLCBhZGRpdGlvbmFsLCBnZXRQcm9wcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHR5cCA9PT0gJ2FueScpIHJldHVybiB2YWw7XG5cbiAgaWYgKHR5cCA9PT0gbnVsbCkge1xuICAgIGlmICh2YWwgPT09IG51bGwpIHJldHVybiB2YWw7XG4gICAgcmV0dXJuIGludmFsaWRWYWx1ZSh0eXAsIHZhbCk7XG4gIH1cblxuICBpZiAodHlwID09PSBmYWxzZSkgcmV0dXJuIGludmFsaWRWYWx1ZSh0eXAsIHZhbCk7XG5cbiAgd2hpbGUgKHR5cGVvZiB0eXAgPT09ICdvYmplY3QnICYmIHR5cC5yZWYgIT09IHVuZGVmaW5lZCkge1xuICAgIHR5cCA9IHR5cGVNYXBbdHlwLnJlZl07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0eXApKSByZXR1cm4gdHJhbnNmb3JtRW51bSh0eXAsIHZhbCk7XG5cbiAgaWYgKHR5cGVvZiB0eXAgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHR5cC5oYXNPd25Qcm9wZXJ0eSgndW5pb25NZW1iZXJzJykgPyB0cmFuc2Zvcm1Vbmlvbih0eXAudW5pb25NZW1iZXJzLCB2YWwpIDogdHlwLmhhc093blByb3BlcnR5KCdhcnJheUl0ZW1zJykgPyB0cmFuc2Zvcm1BcnJheSh0eXAuYXJyYXlJdGVtcywgdmFsKSA6IHR5cC5oYXNPd25Qcm9wZXJ0eSgncHJvcHMnKSA/IHRyYW5zZm9ybU9iamVjdChnZXRQcm9wcyh0eXApLCB0eXAuYWRkaXRpb25hbCwgdmFsKSA6IGludmFsaWRWYWx1ZSh0eXAsIHZhbCk7XG4gIH0gLy8gTnVtYmVycyBjYW4gYmUgcGFyc2VkIGJ5IERhdGUgYnV0IHNob3VsZG4ndCBiZS5cblxuXG4gIGlmICh0eXAgPT09IERhdGUgJiYgdHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHJldHVybiB0cmFuc2Zvcm1EYXRlKHZhbCk7XG4gIHJldHVybiB0cmFuc2Zvcm1QcmltaXRpdmUodHlwLCB2YWwpO1xufVxuXG5mdW5jdGlvbiBjYXN0KHZhbCwgdHlwKSB7XG4gIHJldHVybiB0cmFuc2Zvcm0odmFsLCB0eXAsIGpzb25Ub0pTUHJvcHMpO1xufVxuXG5mdW5jdGlvbiB1bmNhc3QodmFsLCB0eXApIHtcbiAgcmV0dXJuIHRyYW5zZm9ybSh2YWwsIHR5cCwganNUb0pTT05Qcm9wcyk7XG59XG5cbmZ1bmN0aW9uIGEodHlwKSB7XG4gIHJldHVybiB7XG4gICAgYXJyYXlJdGVtczogdHlwXG4gIH07XG59XG5cbmZ1bmN0aW9uIHUoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB0eXBzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHR5cHNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHVuaW9uTWVtYmVyczogdHlwc1xuICB9O1xufVxuXG5mdW5jdGlvbiBvKHByb3BzLCBhZGRpdGlvbmFsKSB7XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IHByb3BzLFxuICAgIGFkZGl0aW9uYWw6IGFkZGl0aW9uYWxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbShhZGRpdGlvbmFsKSB7XG4gIHJldHVybiB7XG4gICAgcHJvcHM6IFtdLFxuICAgIGFkZGl0aW9uYWw6IGFkZGl0aW9uYWxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcihuYW1lKSB7XG4gIHJldHVybiB7XG4gICAgcmVmOiBuYW1lXG4gIH07XG59XG5cbnZhciB0eXBlTWFwID0ge1xuICBDb250ZXh0OiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdpZCcsXG4gICAganM6ICdpZCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsIC8qI19fUFVSRV9fKi9tKCcnKSlcbiAgfSwge1xuICAgIGpzb246ICduYW1lJyxcbiAgICBqczogJ25hbWUnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfSwge1xuICAgIGpzb246ICd0eXBlJyxcbiAgICBqczogJ3R5cGUnLFxuICAgIHR5cDogJydcbiAgfV0sICdhbnknKSxcbiAgQ29udGFjdExpc3Q6IC8qI19fUFVSRV9fKi9vKFt7XG4gICAganNvbjogJ2NvbnRhY3RzJyxcbiAgICBqczogJ2NvbnRhY3RzJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi9hKCAvKiNfX1BVUkVfXyovcignQ29udGFjdCcpKVxuICB9LCB7XG4gICAganNvbjogJ3R5cGUnLFxuICAgIGpzOiAndHlwZScsXG4gICAgdHlwOiAnJ1xuICB9LCB7XG4gICAganNvbjogJ2lkJyxcbiAgICBqczogJ2lkJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgLyojX19QVVJFX18qL20oJycpKVxuICB9LCB7XG4gICAganNvbjogJ25hbWUnLFxuICAgIGpzOiAnbmFtZScsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9XSwgJ2FueScpLFxuICBDb250YWN0OiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdpZCcsXG4gICAganM6ICdpZCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovcignQ29udGFjdElEJylcbiAgfSwge1xuICAgIGpzb246ICd0eXBlJyxcbiAgICBqczogJ3R5cGUnLFxuICAgIHR5cDogJydcbiAgfSwge1xuICAgIGpzb246ICduYW1lJyxcbiAgICBqczogJ25hbWUnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfV0sICdhbnknKSxcbiAgQ29udGFjdElEOiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdlbWFpbCcsXG4gICAganM6ICdlbWFpbCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9LCB7XG4gICAganNvbjogJ0ZEU19JRCcsXG4gICAganM6ICdGRFNfSUQnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfV0sICcnKSxcbiAgSW5zdHJ1bWVudExpc3Q6IC8qI19fUFVSRV9fKi9vKFt7XG4gICAganNvbjogJ2luc3RydW1lbnRzJyxcbiAgICBqczogJ2luc3RydW1lbnRzJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi9hKCAvKiNfX1BVUkVfXyovcignSW5zdHJ1bWVudCcpKVxuICB9LCB7XG4gICAganNvbjogJ3R5cGUnLFxuICAgIGpzOiAndHlwZScsXG4gICAgdHlwOiAnJ1xuICB9LCB7XG4gICAganNvbjogJ2lkJyxcbiAgICBqczogJ2lkJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgLyojX19QVVJFX18qL20oJycpKVxuICB9LCB7XG4gICAganNvbjogJ25hbWUnLFxuICAgIGpzOiAnbmFtZScsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9XSwgJ2FueScpLFxuICBJbnN0cnVtZW50OiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdpZCcsXG4gICAganM6ICdpZCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovcignSW5zdHJ1bWVudElEJylcbiAgfSwge1xuICAgIGpzb246ICd0eXBlJyxcbiAgICBqczogJ3R5cGUnLFxuICAgIHR5cDogJydcbiAgfSwge1xuICAgIGpzb246ICduYW1lJyxcbiAgICBqczogJ25hbWUnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfV0sICdhbnknKSxcbiAgSW5zdHJ1bWVudElEOiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdCQkcnLFxuICAgIGpzOiAnQkJHJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH0sIHtcbiAgICBqc29uOiAnQ1VTSVAnLFxuICAgIGpzOiAnQ1VTSVAnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfSwge1xuICAgIGpzb246ICdGRFNfSUQnLFxuICAgIGpzOiAnRkRTX0lEJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH0sIHtcbiAgICBqc29uOiAnRklHSScsXG4gICAganM6ICdGSUdJJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH0sIHtcbiAgICBqc29uOiAnSVNJTicsXG4gICAganM6ICdJU0lOJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH0sIHtcbiAgICBqc29uOiAnUEVSTUlEJyxcbiAgICBqczogJ1BFUk1JRCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9LCB7XG4gICAganNvbjogJ1JJQycsXG4gICAganM6ICdSSUMnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfSwge1xuICAgIGpzb246ICdTRURPTCcsXG4gICAganM6ICdTRURPTCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9LCB7XG4gICAganNvbjogJ3RpY2tlcicsXG4gICAganM6ICd0aWNrZXInLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfV0sICcnKSxcbiAgQ291bnRyeTogLyojX19QVVJFX18qL28oW3tcbiAgICBqc29uOiAnaWQnLFxuICAgIGpzOiAnaWQnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3IoJ0NvdW50cnlJRCcpXG4gIH0sIHtcbiAgICBqc29uOiAndHlwZScsXG4gICAganM6ICd0eXBlJyxcbiAgICB0eXA6ICcnXG4gIH0sIHtcbiAgICBqc29uOiAnbmFtZScsXG4gICAganM6ICduYW1lJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH1dLCAnYW55JyksXG4gIENvdW50cnlJRDogLyojX19QVVJFX18qL28oW3tcbiAgICBqc29uOiAnSVNPQUxQSEEyJyxcbiAgICBqczogJ0lTT0FMUEhBMicsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9LCB7XG4gICAganNvbjogJ0lTT0FMUEhBMycsXG4gICAganM6ICdJU09BTFBIQTMnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfV0sICcnKSxcbiAgT3JnYW5pemF0aW9uOiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdpZCcsXG4gICAganM6ICdpZCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovcignT3JnYW5pemF0aW9uSUQnKVxuICB9LCB7XG4gICAganNvbjogJ3R5cGUnLFxuICAgIGpzOiAndHlwZScsXG4gICAgdHlwOiAnJ1xuICB9LCB7XG4gICAganNvbjogJ25hbWUnLFxuICAgIGpzOiAnbmFtZScsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9XSwgJ2FueScpLFxuICBPcmdhbml6YXRpb25JRDogLyojX19QVVJFX18qL28oW3tcbiAgICBqc29uOiAnRkRTX0lEJyxcbiAgICBqczogJ0ZEU19JRCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovdSh1bmRlZmluZWQsICcnKVxuICB9LCB7XG4gICAganNvbjogJ0xFSScsXG4gICAganM6ICdMRUknLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAnJylcbiAgfSwge1xuICAgIGpzb246ICdQRVJNSUQnLFxuICAgIGpzOiAnUEVSTUlEJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH1dLCAnJyksXG4gIFBvcnRmb2xpbzogLyojX19QVVJFX18qL28oW3tcbiAgICBqc29uOiAncG9zaXRpb25zJyxcbiAgICBqczogJ3Bvc2l0aW9ucycsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovYSggLyojX19QVVJFX18qL3IoJ1Bvc2l0aW9uJykpXG4gIH0sIHtcbiAgICBqc29uOiAndHlwZScsXG4gICAganM6ICd0eXBlJyxcbiAgICB0eXA6ICcnXG4gIH0sIHtcbiAgICBqc29uOiAnaWQnLFxuICAgIGpzOiAnaWQnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAvKiNfX1BVUkVfXyovbSgnJykpXG4gIH0sIHtcbiAgICBqc29uOiAnbmFtZScsXG4gICAganM6ICduYW1lJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH1dLCAnYW55JyksXG4gIFBvc2l0aW9uOiAvKiNfX1BVUkVfXyovbyhbe1xuICAgIGpzb246ICdob2xkaW5nJyxcbiAgICBqczogJ2hvbGRpbmcnLFxuICAgIHR5cDogMy4xNFxuICB9LCB7XG4gICAganNvbjogJ2luc3RydW1lbnQnLFxuICAgIGpzOiAnaW5zdHJ1bWVudCcsXG4gICAgdHlwOiAvKiNfX1BVUkVfXyovcignSW5zdHJ1bWVudCcpXG4gIH0sIHtcbiAgICBqc29uOiAndHlwZScsXG4gICAganM6ICd0eXBlJyxcbiAgICB0eXA6ICcnXG4gIH0sIHtcbiAgICBqc29uOiAnaWQnLFxuICAgIGpzOiAnaWQnLFxuICAgIHR5cDogLyojX19QVVJFX18qL3UodW5kZWZpbmVkLCAvKiNfX1BVUkVfXyovbSgnJykpXG4gIH0sIHtcbiAgICBqc29uOiAnbmFtZScsXG4gICAganM6ICduYW1lJyxcbiAgICB0eXA6IC8qI19fUFVSRV9fKi91KHVuZGVmaW5lZCwgJycpXG4gIH1dLCAnYW55Jylcbn07XG5cbnZhciBJbnRlbnRzO1xuXG4oZnVuY3Rpb24gKEludGVudHMpIHtcbiAgSW50ZW50c1tcIlN0YXJ0Q2FsbFwiXSA9IFwiU3RhcnRDYWxsXCI7XG4gIEludGVudHNbXCJTdGFydENoYXRcIl0gPSBcIlN0YXJ0Q2hhdFwiO1xuICBJbnRlbnRzW1wiVmlld0NoYXJ0XCJdID0gXCJWaWV3Q2hhcnRcIjtcbiAgSW50ZW50c1tcIlZpZXdDb250YWN0XCJdID0gXCJWaWV3Q29udGFjdFwiO1xuICBJbnRlbnRzW1wiVmlld1F1b3RlXCJdID0gXCJWaWV3UXVvdGVcIjtcbiAgSW50ZW50c1tcIlZpZXdOZXdzXCJdID0gXCJWaWV3TmV3c1wiO1xuICBJbnRlbnRzW1wiVmlld0luc3RydW1lbnRcIl0gPSBcIlZpZXdJbnN0cnVtZW50XCI7XG4gIEludGVudHNbXCJWaWV3QW5hbHlzaXNcIl0gPSBcIlZpZXdBbmFseXNpc1wiO1xufSkoSW50ZW50cyB8fCAoSW50ZW50cyA9IHt9KSk7XG5cbmV4cG9ydCB7IENoYW5uZWxFcnJvciwgQ29udGV4dFR5cGVzLCBDb252ZXJ0LCBJbnRlbnRzLCBPcGVuRXJyb3IsIFJlc29sdmVFcnJvciwgYWRkQ29udGV4dExpc3RlbmVyLCBhZGRJbnRlbnRMaXN0ZW5lciwgYnJvYWRjYXN0LCBjb21wYXJlVmVyc2lvbk51bWJlcnMsIGZkYzNSZWFkeSwgZmluZEludGVudCwgZmluZEludGVudHNCeUNvbnRleHQsIGdldEN1cnJlbnRDaGFubmVsLCBnZXRJbmZvLCBnZXRPckNyZWF0ZUNoYW5uZWwsIGdldFN5c3RlbUNoYW5uZWxzLCBqb2luQ2hhbm5lbCwgbGVhdmVDdXJyZW50Q2hhbm5lbCwgb3BlbiwgcmFpc2VJbnRlbnQsIHJhaXNlSW50ZW50Rm9yQ29udGV4dCwgdmVyc2lvbklzQXRMZWFzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmRjMy5lc20uanMubWFwXG4iLCJ2YXIgZT17Mzg4NTooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgaT1uKDk2NTkpLHI9big0OTk5KSxvPW4oNDc5NCk7Y2xhc3MgcyBleHRlbmRzIGkuQmFzZXthc3luYyB3cmFwKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwid3JhcC1hcHBsaWNhdGlvblwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PXIudmFsaWRhdGVJZGVudGl0eShlKTtpZih0KXRocm93IG5ldyBFcnJvcih0KTtyZXR1cm4gbmV3IG8uQXBwbGljYXRpb24odGhpcy53aXJlLGUpfXdyYXBTeW5jKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwid3JhcC1hcHBsaWNhdGlvbi1zeW5jXCIpLmNhdGNoKChlPT57fSkpO2NvbnN0IHQ9ci52YWxpZGF0ZUlkZW50aXR5KGUpO2lmKHQpdGhyb3cgbmV3IEVycm9yKHQpO3JldHVybiBuZXcgby5BcHBsaWNhdGlvbih0aGlzLndpcmUsZSl9YXN5bmMgX2NyZWF0ZShlKXtyZXR1cm4gdm9pZCAwPT09ZS53YWl0Rm9yUGFnZUxvYWQmJihlLndhaXRGb3JQYWdlTG9hZD0hMSksdm9pZCAwPT09ZS5hdXRvU2hvdyYmdm9pZCAwPT09ZS5pc1BsYXRmb3JtQ29udHJvbGxlciYmKGUuYXV0b1Nob3c9ITApLGF3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiY3JlYXRlLWFwcGxpY2F0aW9uXCIsZSksdGhpcy53cmFwKHt1dWlkOmUudXVpZH0pfWNyZWF0ZShlKXtyZXR1cm4gY29uc29sZS53YXJuKFwiRGVwcmVjYXRpb24gV2FybmluZzogZmluLkFwcGxpY2F0aW9uLmNyZWF0ZSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpbi5BcHBsaWNhdGlvbi5zdGFydFwiKSx0aGlzLndpcmUuc2VuZEFjdGlvbihcImFwcGxpY2F0aW9uLWNyZWF0ZVwiKS5jYXRjaCgoZT0+e30pKSx0aGlzLl9jcmVhdGUoZSl9YXN5bmMgc3RhcnQoZSl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzdGFydC1hcHBsaWNhdGlvblwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PWF3YWl0IHRoaXMuX2NyZWF0ZShlKTtyZXR1cm4gYXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJydW4tYXBwbGljYXRpb25cIix7dXVpZDplLnV1aWR9KSx0fWFzeW5jIHN0YXJ0TWFueU1hbmlmZXN0cyhlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJydW4tYXBwbGljYXRpb25zXCIse2FwcGxpY2F0aW9uczplfSkudGhlbigoKCk9Pnt9KSl9Z2V0Q3VycmVudCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1jdXJyZW50LWFwcGxpY2F0aW9uXCIpLmNhdGNoKChlPT57fSkpLHRoaXMud3JhcCh7dXVpZDp0aGlzLndpcmUubWUudXVpZH0pfWdldEN1cnJlbnRTeW5jKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWN1cnJlbnQtYXBwbGljYXRpb24tc3luY1wiKS5jYXRjaCgoZT0+e30pKSx0aGlzLndyYXBTeW5jKHt1dWlkOnRoaXMud2lyZS5tZS51dWlkfSl9YXN5bmMgc3RhcnRGcm9tTWFuaWZlc3QoZSx0KXt0aGlzLndpcmUuc2VuZEFjdGlvbihcImFwcGxpY2F0aW9uLXN0YXJ0LWZyb20tbWFuaWZlc3RcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj1hd2FpdCB0aGlzLl9jcmVhdGVGcm9tTWFuaWZlc3QoZSk7cmV0dXJuIGF3YWl0IG4uX3J1bih0KSxufWNyZWF0ZUZyb21NYW5pZmVzdChlKXtyZXR1cm4gY29uc29sZS53YXJuKFwiRGVwcmVjYXRpb24gV2FybmluZzogZmluLkFwcGxpY2F0aW9uLmNyZWF0ZUZyb21NYW5pZmVzdCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGZpbi5BcHBsaWNhdGlvbi5zdGFydEZyb21NYW5pZmVzdFwiKSx0aGlzLndpcmUuc2VuZEFjdGlvbihcImFwcGxpY2F0aW9uLWNyZWF0ZS1mcm9tLW1hbmlmZXN0XCIpLmNhdGNoKChlPT57fSkpLHRoaXMuX2NyZWF0ZUZyb21NYW5pZmVzdChlKX1fY3JlYXRlRnJvbU1hbmlmZXN0KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1hcHBsaWNhdGlvbi1tYW5pZmVzdFwiLHttYW5pZmVzdFVybDplfSkudGhlbigoKHtwYXlsb2FkOmV9KT0+e2NvbnN0IHQ9ZS5kYXRhLnBsYXRmb3JtP2UuZGF0YS5wbGF0Zm9ybS51dWlkOmUuZGF0YS5zdGFydHVwX2FwcC51dWlkO3JldHVybiB0aGlzLndyYXAoe3V1aWQ6dH0pfSkpLnRoZW4oKHQ9Pih0Ll9tYW5pZmVzdFVybD1lLHQpKSl9fXQuZGVmYXVsdD1zfSw0Nzk0OihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkFwcGxpY2F0aW9uPXZvaWQgMDtjb25zdCBpPW4oOTY1OSkscj1uKDQ5OTcpLG89big0MTY5KTtjbGFzcyBzIGV4dGVuZHMgaS5FbWl0dGVyQmFzZXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsXCJhcHBsaWNhdGlvblwiLHQudXVpZCksdGhpcy5pZGVudGl0eT10LHRoaXMud2luZG93PW5ldyByLl9XaW5kb3codGhpcy53aXJlLHt1dWlkOnRoaXMuaWRlbnRpdHkudXVpZCxuYW1lOnRoaXMuaWRlbnRpdHkudXVpZH0pfXdpbmRvd0xpc3RGcm9tSWRlbnRpdHlMaXN0KGUpe2NvbnN0IHQ9W107cmV0dXJuIGUuZm9yRWFjaCgoZT0+e3QucHVzaChuZXcgci5fV2luZG93KHRoaXMud2lyZSx7dXVpZDplLnV1aWQsbmFtZTplLm5hbWV9KSl9KSksdH1pc1J1bm5pbmcoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpcy1hcHBsaWNhdGlvbi1ydW5uaW5nXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9YXN5bmMgcXVpdChlPSExKXthd2FpdCB0aGlzLl9jbG9zZShlKSxhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImRlc3Ryb3ktYXBwbGljYXRpb25cIix7Zm9yY2U6ZSwuLi50aGlzLmlkZW50aXR5fSl9X2Nsb3NlKGU9ITEpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsb3NlLWFwcGxpY2F0aW9uXCIse2ZvcmNlOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfWNsb3NlKGU9ITEpe3JldHVybiBjb25zb2xlLndhcm4oXCJEZXByZWNhdGlvbiBXYXJuaW5nOiBBcHBsaWNhdGlvbi5jbG9zZSBpcyBkZXByZWNhdGVkIFBsZWFzZSB1c2UgQXBwbGljYXRpb24ucXVpdFwiKSx0aGlzLndpcmUuc2VuZEFjdGlvbihcImFwcGxpY2F0aW9uLWNsb3NlXCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksdGhpcy5fY2xvc2UoZSl9Z2V0Q2hpbGRXaW5kb3dzKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWNoaWxkLXdpbmRvd3NcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT57Y29uc3QgdD1bXTtyZXR1cm4gZS5kYXRhLmZvckVhY2goKGU9Pnt0LnB1c2goe3V1aWQ6dGhpcy5pZGVudGl0eS51dWlkLG5hbWU6ZX0pfSkpLHRoaXMud2luZG93TGlzdEZyb21JZGVudGl0eUxpc3QodCl9KSl9Z2V0TWFuaWZlc3QoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtYXBwbGljYXRpb24tbWFuaWZlc3RcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRQYXJlbnRVdWlkKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXBhcmVudC1hcHBsaWNhdGlvblwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldFNob3J0Y3V0cygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1zaG9ydGN1dHNcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBnZXRWaWV3cygpe2NvbnN0e3BheWxvYWQ6ZX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJhcHBsaWNhdGlvbi1nZXQtdmlld3NcIix0aGlzLmlkZW50aXR5KTtyZXR1cm4gZS5kYXRhLm1hcCgoZT0+bmV3IG8uVmlldyh0aGlzLndpcmUsZSkpKX1nZXRab29tTGV2ZWwoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtYXBwbGljYXRpb24tem9vbS1sZXZlbFwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldFdpbmRvdygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImFwcGxpY2F0aW9uLWdldC13aW5kb3dcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKSxQcm9taXNlLnJlc29sdmUodGhpcy53aW5kb3cpfXJlZ2lzdGVyVXNlcihlLHQpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInJlZ2lzdGVyLXVzZXJcIix7dXNlck5hbWU6ZSxhcHBOYW1lOnQsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXJlbW92ZVRyYXlJY29uKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicmVtb3ZlLXRyYXktaWNvblwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfXJlc3RhcnQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZXN0YXJ0LWFwcGxpY2F0aW9uXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKCk9Pnt9KSl9cnVuKCl7cmV0dXJuIGNvbnNvbGUud2FybihcIkRlcHJlY2F0aW9uIFdhcm5pbmc6IEFwcGxpY2F0aW9uLnJ1biBpcyBkZXByZWNhdGVkIFBsZWFzZSB1c2UgZmluLkFwcGxpY2F0aW9uLnN0YXJ0XCIpLHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiYXBwbGljYXRpb24tcnVuXCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksdGhpcy5fcnVuKCl9X3J1bihlPXt9KXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJydW4tYXBwbGljYXRpb25cIix7bWFuaWZlc3RVcmw6dGhpcy5fbWFuaWZlc3RVcmwsb3B0czplLC4uLnRoaXMuaWRlbnRpdHl9KS50aGVuKCgoKT0+e30pKX1zY2hlZHVsZVJlc3RhcnQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZWxhdW5jaC1vbi1jbG9zZVwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfWFzeW5jIHNlbmRBcHBsaWNhdGlvbkxvZygpe2NvbnN0e3BheWxvYWQ6ZX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZW5kLWFwcGxpY2F0aW9uLWxvZ1wiLHRoaXMuaWRlbnRpdHkpO3JldHVybiBlLmRhdGF9YXN5bmMgc2V0SnVtcExpc3QoZSl7YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtanVtcC1saXN0XCIse2NvbmZpZzplLC4uLnRoaXMuaWRlbnRpdHl9KX1zZXRUcmF5SWNvbihlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtdHJheS1pY29uXCIse2VuYWJsZWRJY29uOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXNldFNob3J0Y3V0cyhlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtc2hvcnRjdXRzXCIse2RhdGE6ZSwuLi50aGlzLmlkZW50aXR5fSkudGhlbigoKCk9Pnt9KSl9YXN5bmMgc2V0U2hvcnRjdXRRdWVyeVBhcmFtcyhlKXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNldC1zaG9ydGN1dC1xdWVyeS1hcmdzXCIse2RhdGE6ZSwuLi50aGlzLmlkZW50aXR5fSl9c2V0Wm9vbUxldmVsKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNldC1hcHBsaWNhdGlvbi16b29tLWxldmVsXCIse2xldmVsOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfWFzeW5jIHNldEFwcExvZ1VzZXJuYW1lKGUpe2F3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwic2V0LWFwcC1sb2ctdXNlcm5hbWVcIix7ZGF0YTplLC4uLnRoaXMuaWRlbnRpdHl9KX1nZXRUcmF5SWNvbkluZm8oKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtdHJheS1pY29uLWluZm9cIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX10ZXJtaW5hdGUoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJ0ZXJtaW5hdGUtYXBwbGljYXRpb25cIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX13YWl0KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwid2FpdC1mb3ItaHVuZy1hcHBsaWNhdGlvblwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfWdldEluZm8oKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtaW5mb1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWFzeW5jIGdldFByb2Nlc3NJbmZvKCl7Y29uc3R7cGF5bG9hZDp7ZGF0YTplfX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJhcHBsaWNhdGlvbi1nZXQtcHJvY2Vzcy1pbmZvXCIsdGhpcy5pZGVudGl0eSk7cmV0dXJuIGV9YXN5bmMgc2V0RmlsZURvd25sb2FkTG9jYXRpb24oZSl7YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtZmlsZS1kb3dubG9hZC1sb2NhdGlvblwiLHtkb3dubG9hZExvY2F0aW9uOmUsLi4udGhpcy5pZGVudGl0eX0pfX10LkFwcGxpY2F0aW9uPXN9LDcyNjQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQsbixpKXt2b2lkIDA9PT1pJiYoaT1uKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0W25dfX0pfTpmdW5jdGlvbihlLHQsbixpKXt2b2lkIDA9PT1pJiYoaT1uKSxlW2ldPXRbbl19KSxyPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiBlKVwiZGVmYXVsdFwiPT09bnx8dC5oYXNPd25Qcm9wZXJ0eShuKXx8aSh0LGUsbil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IG89bigzODg1KTtyKG4oNDc5NCksdCksdC5kZWZhdWx0PW8uZGVmYXVsdH0sOTY1OTpmdW5jdGlvbihlLHQsbil7dmFyIGkscj10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXR8fGZ1bmN0aW9uKGUsdCxuKXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuc2V0KGUsbiksbn0sbz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXR8fGZ1bmN0aW9uKGUsdCl7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LmdldChlKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SZXBseT10LkVtaXR0ZXJCYXNlPXQuQmFzZT12b2lkIDA7Y29uc3Qgcz1uKDM0NDIpLGE9big4MDY4KTtjbGFzcyBje2NvbnN0cnVjdG9yKGUpe3RoaXMuaXNOb2RlRW52aXJvbm1lbnQ9KCk9PlwiTm9kZUVudmlyb25tZW50XCI9PT10aGlzLndpcmUuZW52aXJvbm1lbnQuY29uc3RydWN0b3IubmFtZSx0aGlzLmlzT3BlbkZpbkVudmlyb25tZW50PSgpPT5cIk9wZW5GaW5FbnZpcm9ubWVudFwiPT09dGhpcy53aXJlLmVudmlyb25tZW50LmNvbnN0cnVjdG9yLm5hbWUsdGhpcy53aXJlPWV9Z2V0IGZpbigpe3JldHVybiBhLmdldEZpbih0aGlzLndpcmUpfWdldCBtZSgpe3JldHVybiB0aGlzLndpcmUubWV9fXQuQmFzZT1jLHQuRW1pdHRlckJhc2U9Y2xhc3MgZXh0ZW5kcyBje2NvbnN0cnVjdG9yKGUsdCwuLi5uKXtzdXBlcihlKSx0aGlzLnRvcGljPXQsaS5zZXQodGhpcyx2b2lkIDApLHRoaXMuZXZlbnROYW1lcz0oKT0+dGhpcy5oYXNFbWl0dGVyKCk/dGhpcy5nZXRPckNyZWF0ZUVtaXR0ZXIoKS5ldmVudE5hbWVzKCk6W10sdGhpcy5lbWl0PShlLHQsLi4ubik9PiEhdGhpcy5oYXNFbWl0dGVyKCkmJnRoaXMuZ2V0T3JDcmVhdGVFbWl0dGVyKCkuZW1pdChlLHQsLi4ubiksdGhpcy5oYXNFbWl0dGVyPSgpPT50aGlzLndpcmUuZXZlbnRBZ2dyZWdhdG9yLmhhcyhvKHRoaXMsaSkpLHRoaXMuZ2V0T3JDcmVhdGVFbWl0dGVyPSgpPT50aGlzLndpcmUuZXZlbnRBZ2dyZWdhdG9yLmdldE9yQ3JlYXRlKG8odGhpcyxpKSksdGhpcy5saXN0ZW5lcnM9ZT0+dGhpcy5oYXNFbWl0dGVyKCk/dGhpcy5nZXRPckNyZWF0ZUVtaXR0ZXIoKS5saXN0ZW5lcnMoZSk6W10sdGhpcy5saXN0ZW5lckNvdW50PWU9PnRoaXMuaGFzRW1pdHRlcigpP3RoaXMuZ2V0T3JDcmVhdGVFbWl0dGVyKCkubGlzdGVuZXJDb3VudChlKTowLHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVyPWFzeW5jKGUsdD17fSxuLGkpPT57Y29uc3Qgcj17Li4udGhpcy5pZGVudGl0eSx0aW1lc3RhbXA6dC50aW1lc3RhbXB8fERhdGUubm93KCksdG9waWM6dGhpcy50b3BpYyx0eXBlOmV9LG89dGhpcy5nZXRPckNyZWF0ZUVtaXR0ZXIoKTtuKG8pO3RyeXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInN1YnNjcmliZS10by1kZXNrdG9wLWV2ZW50XCIscil9Y2F0Y2goZSl7dGhyb3cgaShvKSx0aGlzLmRlbGV0ZUVtaXR0ZXJJZk5vdGhpbmdSZWdpc3RlcmVkKG8pLGV9fSx0aGlzLmRlcmVnaXN0ZXJFdmVudExpc3RlbmVyPWFzeW5jKGUsdD17fSk9PntpZih0aGlzLmhhc0VtaXR0ZXIoKSl7Y29uc3Qgbj17Li4udGhpcy5pZGVudGl0eSx0aW1lc3RhbXA6dC50aW1lc3RhbXB8fERhdGUubm93KCksdG9waWM6dGhpcy50b3BpYyx0eXBlOmV9O3JldHVybiBhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInVuc3Vic2NyaWJlLXRvLWRlc2t0b3AtZXZlbnRcIixuKS5jYXRjaCgoKCk9Pm51bGwpKSx0aGlzLmdldE9yQ3JlYXRlRW1pdHRlcigpfXJldHVybiBQcm9taXNlLnJlc29sdmUoKX0sdGhpcy5vbj1hc3luYyhlLHQsbik9Pihhd2FpdCB0aGlzLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihlLG4sKG49PntuLm9uKGUsdCl9KSwobj0+e24ucmVtb3ZlTGlzdGVuZXIoZSx0KX0pKSx0aGlzKSx0aGlzLmFkZExpc3RlbmVyPXRoaXMub24sdGhpcy5vbmNlPWFzeW5jKGUsdCxuKT0+e2NvbnN0IGk9KCk9PnRoaXMuZGVyZWdpc3RlckV2ZW50TGlzdGVuZXIoZSk7cmV0dXJuIGF3YWl0IHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVyKGUsbiwobj0+e24ub25jZShlLGkpLG4ub25jZShlLHQpfSksKG49PntuLnJlbW92ZUxpc3RlbmVyKGUsaSksbi5yZW1vdmVMaXN0ZW5lcihlLHQpfSkpLHRoaXN9LHRoaXMucHJlcGVuZExpc3RlbmVyPWFzeW5jKGUsdCxuKT0+KGF3YWl0IHRoaXMucmVnaXN0ZXJFdmVudExpc3RlbmVyKGUsbiwobj0+e24ucHJlcGVuZExpc3RlbmVyKGUsdCl9KSwobj0+e24ucmVtb3ZlTGlzdGVuZXIoZSx0KX0pKSx0aGlzKSx0aGlzLnByZXBlbmRPbmNlTGlzdGVuZXI9YXN5bmMoZSx0LG4pPT57Y29uc3QgaT0oKT0+dGhpcy5kZXJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihlKTtyZXR1cm4gYXdhaXQgdGhpcy5yZWdpc3RlckV2ZW50TGlzdGVuZXIoZSxuLChuPT57bi5wcmVwZW5kT25jZUxpc3RlbmVyKGUsdCksbi5vbmNlKGUsaSl9KSwobj0+e24ucmVtb3ZlTGlzdGVuZXIoZSx0KSxuLnJlbW92ZUxpc3RlbmVyKGUsaSl9KSksdGhpc30sdGhpcy5yZW1vdmVMaXN0ZW5lcj1hc3luYyhlLHQsbik9Pntjb25zdCBpPWF3YWl0IHRoaXMuZGVyZWdpc3RlckV2ZW50TGlzdGVuZXIoZSxuKTtyZXR1cm4gaSYmKGkucmVtb3ZlTGlzdGVuZXIoZSx0KSx0aGlzLmRlbGV0ZUVtaXR0ZXJJZk5vdGhpbmdSZWdpc3RlcmVkKGkpKSx0aGlzfSx0aGlzLmRlcmVnaXN0ZXJBbGxMaXN0ZW5lcnM9YXN5bmMgZT0+e2NvbnN0IHQ9ey4uLnRoaXMuaWRlbnRpdHksdHlwZTplLHRvcGljOnRoaXMudG9waWN9O2lmKHRoaXMuaGFzRW1pdHRlcigpKXtjb25zdCBlPXRoaXMuZ2V0T3JDcmVhdGVFbWl0dGVyKCksbj1lLmxpc3RlbmVyQ291bnQodC50eXBlKSxpPVtdO2ZvcihsZXQgZT0wO2U8bjtlKyspaS5wdXNoKHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidW5zdWJzY3JpYmUtdG8tZGVza3RvcC1ldmVudFwiLHQpLmNhdGNoKCgoKT0+bnVsbCkpKTtyZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoaSksZX19LHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzPWFzeW5jIGU9Pntjb25zdCB0PWFzeW5jIGU9Pntjb25zdCB0PWF3YWl0IHRoaXMuZGVyZWdpc3RlckFsbExpc3RlbmVycyhlKTt0JiYodC5yZW1vdmVBbGxMaXN0ZW5lcnMoZSksdGhpcy5kZWxldGVFbWl0dGVySWZOb3RoaW5nUmVnaXN0ZXJlZCh0KSl9O2lmKGUpYXdhaXQgdChlKTtlbHNlIGlmKHRoaXMuaGFzRW1pdHRlcigpKXtjb25zdCBlPXRoaXMuZ2V0T3JDcmVhdGVFbWl0dGVyKCkuZXZlbnROYW1lcygpO2F3YWl0IHMucHJvbWlzZU1hcChlLHQpfXJldHVybiB0aGlzfSxyKHRoaXMsaSxbdCwuLi5uXSksdGhpcy5saXN0ZW5lcnM9ZT0+dGhpcy5oYXNFbWl0dGVyKCk/dGhpcy5nZXRPckNyZWF0ZUVtaXR0ZXIoKS5saXN0ZW5lcnMoZSk6W119ZGVsZXRlRW1pdHRlcklmTm90aGluZ1JlZ2lzdGVyZWQoZSl7MD09PWUuZXZlbnROYW1lcygpLmxlbmd0aCYmdGhpcy53aXJlLmV2ZW50QWdncmVnYXRvci5kZWxldGUobyh0aGlzLGkpKX19LGk9bmV3IFdlYWtNYXAsdC5SZXBseT1jbGFzc3t9fSwzNDI3OihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBpPW4oOTY1OSk7Y2xhc3MgciBleHRlbmRzIGkuQmFzZXt3cml0ZVRleHQoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiY2xpcGJvYXJkLXdyaXRlLXRleHRcIixlKS50aGVuKCgoKT0+e30pKX1yZWFkVGV4dChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJjbGlwYm9hcmQtcmVhZC10ZXh0XCIsZSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9d3JpdGVIdG1sKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsaXBib2FyZC13cml0ZS1odG1sXCIsZSkudGhlbigoKCk9Pnt9KSl9cmVhZEh0bWwoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiY2xpcGJvYXJkLXJlYWQtaHRtbFwiLGUpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfXdyaXRlUnRmKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsaXBib2FyZC13cml0ZS1ydGZcIixlKS50aGVuKCgoKT0+e30pKX1yZWFkUnRmKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsaXBib2FyZC1yZWFkLXJ0ZlwiLGUpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfXdyaXRlKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsaXBib2FyZC13cml0ZVwiLGUpLnRoZW4oKCgpPT57fSkpfWdldEF2YWlsYWJsZUZvcm1hdHMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiY2xpcGJvYXJkLXJlYWQtZm9ybWF0c1wiLGUpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfX10LmRlZmF1bHQ9cn0sNzgxMzooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5FbWl0dGVyTWFwPXZvaWQgMDtjb25zdCBpPW4oNjQ2NSk7ZnVuY3Rpb24gcihlKXtyZXR1cm4gQnVmZmVyLmZyb20oZSkudG9TdHJpbmcoXCJiYXNlNjRcIil9dC5FbWl0dGVyTWFwPWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5zdG9yYWdlPW5ldyBNYXB9aGFzaEtleXMoZSl7cmV0dXJuIGUubWFwKHIpLmpvaW4oXCIvXCIpfWdldE9yQ3JlYXRlKGUpe2NvbnN0IHQ9dGhpcy5oYXNoS2V5cyhlKTtyZXR1cm4gdGhpcy5zdG9yYWdlLmhhcyh0KXx8dGhpcy5zdG9yYWdlLnNldCh0LG5ldyBpLkV2ZW50RW1pdHRlciksdGhpcy5zdG9yYWdlLmdldCh0KX1oYXMoZSl7cmV0dXJuIHRoaXMuc3RvcmFnZS5oYXModGhpcy5oYXNoS2V5cyhlKSl9ZGVsZXRlKGUpe2NvbnN0IHQ9dGhpcy5oYXNoS2V5cyhlKTtyZXR1cm4gdGhpcy5zdG9yYWdlLmRlbGV0ZSh0KX19fSwyNzM0OihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBpPW4oNzgxMyk7Y2xhc3MgciBleHRlbmRzIGkuRW1pdHRlck1hcHtjb25zdHJ1Y3Rvcigpe3N1cGVyKC4uLmFyZ3VtZW50cyksdGhpcy5kaXNwYXRjaEV2ZW50PWU9PntpZihmdW5jdGlvbihlKXtyZXR1cm5cInByb2Nlc3MtZGVza3RvcC1ldmVudFwiPT09ZS5hY3Rpb259KGUpKXtjb25zdHtwYXlsb2FkOnR9PWUsbj1mdW5jdGlvbihlKXtjb25zdHt0b3BpYzp0fT1lO2lmKFwiZnJhbWVcIj09PXQpe2NvbnN0e3V1aWQ6bixuYW1lOml9PWU7cmV0dXJuW3QsbixpXX1pZihcIndpbmRvd1wiPT09dCl7Y29uc3R7dXVpZDpuLG5hbWU6aX09ZTtyZXR1cm5bdCxuLGldfWlmKFwiYXBwbGljYXRpb25cIj09PXQpe2NvbnN0e3V1aWQ6bn09ZTtyZXR1cm5bdCxuXX1pZihcInZpZXdcIj09PXQpe2NvbnN0e3V1aWQ6bixuYW1lOml9PWU7cmV0dXJuW3QsbixpXX1yZXR1cm5bdF19KHQpO2lmKHRoaXMuaGFzKG4pKXJldHVybiB0aGlzLmdldE9yQ3JlYXRlKG4pLmVtaXQodC50eXBlLHQpLCEwfXJldHVybiExfX19dC5kZWZhdWx0PXJ9LDcxNjg6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGk9big5NjU5KSxyPW4oODI5OCk7Y2xhc3MgbyBleHRlbmRzIGkuQmFzZXt3cmFwKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImV4dGVybmFsLWFwcGxpY2F0aW9uLXdyYXBcIikuY2F0Y2goKGU9Pnt9KSksUHJvbWlzZS5yZXNvbHZlKG5ldyByLkV4dGVybmFsQXBwbGljYXRpb24odGhpcy53aXJlLHt1dWlkOmV9KSl9d3JhcFN5bmMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZXh0ZXJuYWwtYXBwbGljYXRpb24td3JhcC1zeW5jXCIpLmNhdGNoKChlPT57fSkpLG5ldyByLkV4dGVybmFsQXBwbGljYXRpb24odGhpcy53aXJlLHt1dWlkOmV9KX19dC5kZWZhdWx0PW99LDgyOTg6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuRXh0ZXJuYWxBcHBsaWNhdGlvbj12b2lkIDA7Y29uc3QgaT1uKDk2NTkpO2NsYXNzIHIgZXh0ZW5kcyBpLkVtaXR0ZXJCYXNle2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSxcImV4dGVybmFsLWFwcGxpY2F0aW9uXCIsdC51dWlkKSx0aGlzLmlkZW50aXR5PXR9Z2V0SW5mbygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1leHRlcm5hbC1hcHBsaWNhdGlvbi1pbmZvXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9fXQuRXh0ZXJuYWxBcHBsaWNhdGlvbj1yfSw5MDIxOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzJiZ0aGlzLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24oZSx0LG4saSl7dm9pZCAwPT09aSYmKGk9biksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsaSx7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtuXX19KX06ZnVuY3Rpb24oZSx0LG4saSl7dm9pZCAwPT09aSYmKGk9biksZVtpXT10W25dfSkscj10aGlzJiZ0aGlzLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gZSlcImRlZmF1bHRcIj09PW58fHQuaGFzT3duUHJvcGVydHkobil8fGkodCxlLG4pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBvPW4oNzE2OCk7dC5kZWZhdWx0PW8uZGVmYXVsdCxyKG4oODI5OCksdCl9LDY1NDU6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGk9big2NDY1KSxyPW4oMzY0MSksbz1uKDQ5OTcpLHM9big3MjY0KSxhPW4oODM0NyksYz1uKDM0MjcpLGQ9big5MDIxKSxoPW4oNjcyMCksbD1uKDkyMTEpLHU9big0MTY5KSxwPW4oNjA5KSx3PW4oOTY0MSkseT1uKDgwNjgpLGY9big4NzA2KSxnPW4oNzE1Myk7Y2xhc3MgbSBleHRlbmRzIGkuRXZlbnRFbWl0dGVye2NvbnN0cnVjdG9yKGUpe3N1cGVyKCkseS5yZWdpc3RlckZpbihlLHRoaXMpLHRoaXMud2lyZT1lLHRoaXMuU3lzdGVtPW5ldyByLmRlZmF1bHQoZSksdGhpcy5XaW5kb3c9bmV3IG8uZGVmYXVsdChlKSx0aGlzLkFwcGxpY2F0aW9uPW5ldyBzLmRlZmF1bHQoZSksdGhpcy5JbnRlckFwcGxpY2F0aW9uQnVzPW5ldyBhLmRlZmF1bHQoZSksdGhpcy5DbGlwYm9hcmQ9bmV3IGMuZGVmYXVsdChlKSx0aGlzLkV4dGVybmFsQXBwbGljYXRpb249bmV3IGQuZGVmYXVsdChlKSx0aGlzLkZyYW1lPW5ldyBoLmRlZmF1bHQoZSksdGhpcy5HbG9iYWxIb3RrZXk9bmV3IGwuZGVmYXVsdChlKSx0aGlzLlBsYXRmb3JtPW5ldyBwLmRlZmF1bHQoZSx0aGlzLkludGVyQXBwbGljYXRpb25CdXMuQ2hhbm5lbCksdGhpcy5WaWV3PW5ldyB1LmRlZmF1bHQoZSksdGhpcy5JbnRlcm9wPW5ldyBmLmRlZmF1bHQoZSksdGhpcy5TbmFwc2hvdFNvdXJjZT1uZXcgZy5kZWZhdWx0KGUpLHRoaXMubWU9dy5nZXRNZShlKSxlLm9uKFwiZGlzY29ubmVjdGVkXCIsKCgpPT57dGhpcy5lbWl0KFwiZGlzY29ubmVjdGVkXCIpfSkpfX10LmRlZmF1bHQ9bX0sMTc3ODooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgaT1uKDk2NTkpLHI9big0OTk5KSxvPW4oODE2MSk7Y2xhc3MgcyBleHRlbmRzIGkuQmFzZXthc3luYyB3cmFwKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwiZnJhbWUtd3JhcFwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PXIudmFsaWRhdGVJZGVudGl0eShlKTtpZih0KXRocm93IG5ldyBFcnJvcih0KTtyZXR1cm4gbmV3IG8uX0ZyYW1lKHRoaXMud2lyZSxlKX13cmFwU3luYyhlKXt0aGlzLndpcmUuc2VuZEFjdGlvbihcImZyYW1lLXdyYXAtc3luY1wiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PXIudmFsaWRhdGVJZGVudGl0eShlKTtpZih0KXRocm93IG5ldyBFcnJvcih0KTtyZXR1cm4gbmV3IG8uX0ZyYW1lKHRoaXMud2lyZSxlKX1nZXRDdXJyZW50KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZnJhbWUtZ2V0LWN1cnJlbnRcIikuY2F0Y2goKGU9Pnt9KSksUHJvbWlzZS5yZXNvbHZlKG5ldyBvLl9GcmFtZSh0aGlzLndpcmUsdGhpcy53aXJlLmVudmlyb25tZW50LmdldEN1cnJlbnRFbnRpdHlJZGVudGl0eSgpKSl9Z2V0Q3VycmVudFN5bmMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJmcmFtZS1nZXQtY3VycmVudC1zeW5jXCIpLmNhdGNoKChlPT57fSkpLG5ldyBvLl9GcmFtZSh0aGlzLndpcmUsdGhpcy53aXJlLmVudmlyb25tZW50LmdldEN1cnJlbnRFbnRpdHlJZGVudGl0eSgpKX19dC5kZWZhdWx0PXN9LDgxNjE6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuX0ZyYW1lPXZvaWQgMDtjb25zdCBpPW4oOTY1OSk7Y2xhc3MgciBleHRlbmRzIGkuRW1pdHRlckJhc2V7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLFwiZnJhbWVcIix0LnV1aWQsdC5uYW1lKSx0aGlzLmlkZW50aXR5PXR9Z2V0SW5mbygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1mcmFtZS1pbmZvXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0UGFyZW50V2luZG93KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXBhcmVudC13aW5kb3dcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX19dC5fRnJhbWU9cn0sNjcyMDpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9OmZ1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLGVbaV09dFtuXX0pLHI9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIGUpXCJkZWZhdWx0XCI9PT1ufHx0Lmhhc093blByb3BlcnR5KG4pfHxpKHQsZSxuKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbz1uKDE3NzgpO3QuZGVmYXVsdD1vLmRlZmF1bHQscihuKDgxNjEpLHQpfSw5MjExOihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBpPW4oOTY1OSk7Y2xhc3MgciBleHRlbmRzIGkuRW1pdHRlckJhc2V7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSxcImdsb2JhbC1ob3RrZXlcIil9YXN5bmMgcmVnaXN0ZXIoZSx0KXthd2FpdCB0aGlzLm9uKGUsdCksYXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnbG9iYWwtaG90a2V5LXJlZ2lzdGVyXCIse2hvdGtleTplfSl9YXN5bmMgdW5yZWdpc3RlcihlKXthd2FpdCB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhlKSxhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdsb2JhbC1ob3RrZXktdW5yZWdpc3RlclwiLHtob3RrZXk6ZX0pfWFzeW5jIHVucmVnaXN0ZXJBbGwoKXthd2FpdCBQcm9taXNlLmFsbCh0aGlzLmV2ZW50TmFtZXMoKS5maWx0ZXIoKGU9PiEoXCJyZWdpc3RlcmVkXCI9PT1lfHxcInVucmVnaXN0ZXJlZFwiPT09ZSkpKS5tYXAoKGU9PnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGUpKSkpLGF3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2xvYmFsLWhvdGtleS11bnJlZ2lzdGVyLWFsbFwiLHt9KX1hc3luYyBpc1JlZ2lzdGVyZWQoZSl7Y29uc3R7cGF5bG9hZDp7ZGF0YTp0fX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnbG9iYWwtaG90a2V5LWlzLXJlZ2lzdGVyZWRcIix7aG90a2V5OmV9KTtyZXR1cm4gdH19dC5kZWZhdWx0PXJ9LDc1Mzk6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkNoYW5uZWxCYXNlPXQuUHJvdGVjdGVkSXRlbXM9dm9pZCAwO2NvbnN0IG49ZT0+KHQsbixpKT0+e2NvbnN0IHI9ZSh0LG4saSk7cmV0dXJuIHZvaWQgMD09PXI/bjpyfTt0LlByb3RlY3RlZEl0ZW1zPWNsYXNze2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5wcm92aWRlcklkZW50aXR5PWUsdGhpcy53aXJlPXR9fTtjbGFzcyBpe2NvbnN0cnVjdG9yKCl7dGhpcy5zdWJzY3JpcHRpb25zPW5ldyBNYXB9c3RhdGljIGRlZmF1bHRBY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGBObyBhY3Rpb24gcmVnaXN0ZXJlZCBhdCB0YXJnZXQgZm9yICR7ZX1gKX1hc3luYyBwcm9jZXNzQWN0aW9uKGUsdCxuKXt0cnl7Y29uc3Qgcj10aGlzLnN1YnNjcmlwdGlvbnMuaGFzKGUpP3RoaXMuc3Vic2NyaXB0aW9ucy5nZXQoZSk6KHQsbik9Pnt2YXIgcjtyZXR1cm4obnVsbCE9PShyPXRoaXMuZGVmYXVsdEFjdGlvbikmJnZvaWQgMCE9PXI/cjppLmRlZmF1bHRBY3Rpb24pKGUsdCxuKX0sbz10aGlzLnByZUFjdGlvbj9hd2FpdCB0aGlzLnByZUFjdGlvbihlLHQsbik6dCxzPWF3YWl0IHIobyxuKTtyZXR1cm4gdGhpcy5wb3N0QWN0aW9uP2F3YWl0IHRoaXMucG9zdEFjdGlvbihlLHMsbik6c31jYXRjaCh0KXtpZih0aGlzLmVycm9yTWlkZGxld2FyZSlyZXR1cm4gdGhpcy5lcnJvck1pZGRsZXdhcmUoZSx0LG4pO3Rocm93IHR9fWJlZm9yZUFjdGlvbihlKXtpZih0aGlzLnByZUFjdGlvbil0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IHJlZ2lzdGVyZWQgYmVmb3JlQWN0aW9uIG1pZGRsZXdhcmVcIik7dGhpcy5wcmVBY3Rpb249bihlKX1vbkVycm9yKGUpe2lmKHRoaXMuZXJyb3JNaWRkbGV3YXJlKXRocm93IG5ldyBFcnJvcihcIkFscmVhZHkgcmVnaXN0ZXJlZCBlcnJvciBtaWRkbGV3YXJlXCIpO3RoaXMuZXJyb3JNaWRkbGV3YXJlPWV9YWZ0ZXJBY3Rpb24oZSl7aWYodGhpcy5wb3N0QWN0aW9uKXRocm93IG5ldyBFcnJvcihcIkFscmVhZHkgcmVnaXN0ZXJlZCBhZnRlckFjdGlvbiBtaWRkbGV3YXJlXCIpO3RoaXMucG9zdEFjdGlvbj1uKGUpfXJlbW92ZShlKXt0aGlzLnN1YnNjcmlwdGlvbnMuZGVsZXRlKGUpfXNldERlZmF1bHRBY3Rpb24oZSl7aWYodGhpcy5kZWZhdWx0QWN0aW9uKXRocm93IG5ldyBFcnJvcihcImRlZmF1bHQgYWN0aW9uIGNhbiBvbmx5IGJlIHNldCBvbmNlXCIpO3RoaXMuZGVmYXVsdEFjdGlvbj1lfXJlZ2lzdGVyKGUsdCl7aWYodGhpcy5zdWJzY3JpcHRpb25zLmhhcyhlKSl0aHJvdyBuZXcgRXJyb3IoYFN1YnNjcmlwdGlvbiBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIGFjdGlvbjogJHtlfS4gVW5zdWJzY3JpYmUgYmVmb3JlIGFkZGluZyBuZXcgc3Vic2NyaXB0aW9uYCk7cmV0dXJuIHRoaXMuc3Vic2NyaXB0aW9ucy5zZXQoZSx0KSwhMH19dC5DaGFubmVsQmFzZT1pfSw4Mzc4OmZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyLG8scz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXR8fGZ1bmN0aW9uKGUsdCxuKXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuc2V0KGUsbiksbn0sYT10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXR8fGZ1bmN0aW9uKGUsdCl7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LmdldChlKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgYz1uKDc1MzkpLGQ9bmV3IE1hcDtjbGFzcyBoIGV4dGVuZHMgYy5DaGFubmVsQmFzZXtjb25zdHJ1Y3RvcihlLHQsbil7c3VwZXIoKSxpLnNldCh0aGlzLHZvaWQgMCksci5zZXQodGhpcyx2b2lkIDApLHRoaXMucHJvY2Vzc0FjdGlvbj0oZSx0LG4pPT5zdXBlci5wcm9jZXNzQWN0aW9uKGUsdCxuKSxvLnNldCh0aGlzLCgoKT0+e2QuZGVsZXRlKHRoaXMuZW5kcG9pbnRJZCksYSh0aGlzLHIpLmNsb3NlKCl9KSkscyh0aGlzLGksbmV3IGMuUHJvdGVjdGVkSXRlbXMoZSx0KSksdGhpcy5kaXNjb25uZWN0TGlzdGVuZXI9KCk9Pnt9LHRoaXMuZW5kcG9pbnRJZD1lLmVuZHBvaW50SWQscyh0aGlzLHIsbiksZC5zZXQodGhpcy5lbmRwb2ludElkLHRoaXMpLG4ucmVjZWl2ZSh0aGlzLnByb2Nlc3NBY3Rpb24pfXN0YXRpYyBjbG9zZUNoYW5uZWxCeUVuZHBvaW50SWQoZSl7Y29uc3QgdD1kLmdldChlKTt0JiZhKHQsbykuY2FsbCh0KX1zdGF0aWMgaGFuZGxlUHJvdmlkZXJEaXNjb25uZWN0KGUsdCl7ZS5kaXNjb25uZWN0TGlzdGVuZXIodCksYShlLG8pLmNhbGwoZSl9Z2V0IHByb3ZpZGVySWRlbnRpdHkoKXtyZXR1cm4gYSh0aGlzLGkpLnByb3ZpZGVySWRlbnRpdHl9YXN5bmMgZGlzcGF0Y2goZSx0KXtpZihhKHRoaXMscikuaXNFbmRwb2ludENvbm5lY3RlZCh0aGlzLnByb3ZpZGVySWRlbnRpdHkuY2hhbm5lbElkKSlyZXR1cm4gYSh0aGlzLHIpLnNlbmQodGhpcy5wcm92aWRlcklkZW50aXR5LmNoYW5uZWxJZCxlLHQpO3Rocm93IG5ldyBFcnJvcihcIlRoZSBjbGllbnQgeW91IGFyZSB0cnlpbmcgdG8gZGlzcGF0Y2ggZnJvbSBpcyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgdGFyZ2V0IHByb3ZpZGVyLlwiKX1vbkRpc2Nvbm5lY3Rpb24oZSl7dGhpcy5kaXNjb25uZWN0TGlzdGVuZXI9dD0+e3RyeXtlKHQpfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcihgRXJyb3Igd2hpbGUgY2FsbGluZyB0aGUgb25EaXNjb25uZWN0aW9uIGNhbGxiYWNrOiAke2UubWVzc2FnZX1gKX1maW5hbGx5e3RoaXMuZGlzY29ubmVjdExpc3RlbmVyPSgpPT57fX19fWFzeW5jIGRpc2Nvbm5lY3QoKXtjb25zdCBlPWEodGhpcyxpKSx7Y2hhbm5lbE5hbWU6dCx1dWlkOm4sbmFtZTpyfT1lLnByb3ZpZGVySWRlbnRpdHk7YXdhaXQgZS53aXJlLnNlbmRBY3Rpb24oXCJkaXNjb25uZWN0LWZyb20tY2hhbm5lbFwiLHtjaGFubmVsTmFtZTp0LHV1aWQ6bixuYW1lOnIsZW5kcG9pbnRJZDp0aGlzLmVuZHBvaW50SWR9KSxhKHRoaXMsbykuY2FsbCh0aGlzKX19dC5kZWZhdWx0PWgsaT1uZXcgV2Vha01hcCxyPW5ldyBXZWFrTWFwLG89bmV3IFdlYWtNYXB9LDY3MTE6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHIsbz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXR8fGZ1bmN0aW9uKGUsdCxuKXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuc2V0KGUsbiksbn0scz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXR8fGZ1bmN0aW9uKGUsdCl7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LmdldChlKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5Db25uZWN0aW9uTWFuYWdlcj12b2lkIDA7Y29uc3QgYT1uKDM5MTcpLGM9big5NjU5KSxkPW4oMTA0NiksaD1uKDM4NzApLGw9big1NjkpLHU9bigyOTQyKSxwPW4oMzc0OSksdz1uKDMwMzcpLHk9big3MTEzKTtjbGFzcyBmIGV4dGVuZHMgYy5CYXNle2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLGkuc2V0KHRoaXMsdm9pZCAwKSxyLnNldCh0aGlzLHZvaWQgMCksdGhpcy5yZW1vdmVDaGFubmVsRnJvbVByb3ZpZGVyTWFwPWU9Pnt0aGlzLnByb3ZpZGVyTWFwLmRlbGV0ZShlKX0sdGhpcy5vbm1lc3NhZ2U9ZT0+XCJwcm9jZXNzLWNoYW5uZWwtY29ubmVjdGlvblwiPT09ZS5hY3Rpb24mJih0aGlzLnByb2Nlc3NDaGFubmVsQ29ubmVjdGlvbihlKSwhMCksdGhpcy5wcm92aWRlck1hcD1uZXcgTWFwLHRoaXMucHJvdG9jb2xNYW5hZ2VyPW5ldyB3LlByb3RvY29sTWFuYWdlcih0aGlzLmlzTm9kZUVudmlyb25tZW50KCk/W1wiY2xhc3NpY1wiXTpbXCJydGNcIixcImNsYXNzaWNcIl0pLG8odGhpcyxpLG5ldyBwLk1lc3NhZ2VSZWNlaXZlcihlKSksbyh0aGlzLHIsbmV3IGwuUlRDSUNFTWFuYWdlcihlKSksZS5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKHRoaXMub25tZXNzYWdlLmJpbmQodGhpcykpfXN0YXRpYyBnZXRQcm90b2NvbE9wdGlvbnNGcm9tU3RyaW5ncyhlKXtyZXR1cm4gZS5tYXAoKGU9Pntzd2l0Y2goZSl7Y2FzZVwicnRjXCI6cmV0dXJuIGguUlRDSW5mbztjYXNlXCJjbGFzc2ljXCI6cmV0dXJuIGQuQ2xhc3NpY0luZm87ZGVmYXVsdDpyZXR1cm4gYS5leGhhdXN0aXZlQ2hlY2soZSxbXCJydGNcIixcImNsYXNzaWNcIl0pfX0pKX1jcmVhdGVQcm92aWRlcihlLHQpe2NvbnN0IG49T2JqZWN0LmFzc2lnbih0aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0RGVmYXVsdENoYW5uZWxPcHRpb25zKCkuY3JlYXRlLGV8fHt9KSxyPXRoaXMucHJvdG9jb2xNYW5hZ2VyLmdldFByb3ZpZGVyUHJvdG9jb2xzKG51bGw9PW4/dm9pZCAwOm4ucHJvdG9jb2xzKSxvPXIubWFwKChlPT57c3dpdGNoKGUpe2Nhc2VcInJ0Y1wiOnJldHVybiBuZXcgaC5SVENTdHJhdGVneTtjYXNlXCJjbGFzc2ljXCI6cmV0dXJuIG5ldyBkLkNsYXNzaWNTdHJhdGVneSh0aGlzLndpcmUscyh0aGlzLGkpLHQuY2hhbm5lbElkLHQpO2RlZmF1bHQ6cmV0dXJuIGEuZXhoYXVzdGl2ZUNoZWNrKGUsW1wicnRjXCIsXCJjbGFzc2ljXCJdKX19KSk7bGV0IGM7aWYoMj09PW8ubGVuZ3RoKXtjb25zdFtlLHRdPW87Yz15LmRlZmF1bHQuY29tYmluZShlLHQpfWVsc2V7aWYoMSE9PW8ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcImZhaWxlZCB0byBjb21iaW5lIHN0cmF0ZWdpZXNcIik7W2NdPW99Y29uc3QgbD1uZXcgdS5DaGFubmVsUHJvdmlkZXIodCx0aGlzLndpcmUsYykscD10LmNoYW5uZWxJZDtyZXR1cm4gdGhpcy5wcm92aWRlck1hcC5zZXQocCx7cHJvdmlkZXI6bCxzdHJhdGVneTpjLHN1cHBvcnRlZFByb3RvY29sczpmLmdldFByb3RvY29sT3B0aW9uc0Zyb21TdHJpbmdzKHIpfSksdS5DaGFubmVsUHJvdmlkZXIuc2V0UHJvdmlkZXJSZW1vdmFsKGwsdGhpcy5yZW1vdmVDaGFubmVsRnJvbVByb3ZpZGVyTWFwLmJpbmQodGhpcykpLGx9YXN5bmMgY3JlYXRlQ2xpZW50T2ZmZXIoZSl7Y29uc3QgdD10aGlzLnByb3RvY29sTWFuYWdlci5nZXRDbGllbnRQcm90b2NvbHMobnVsbD09ZT92b2lkIDA6ZS5wcm90b2NvbHMpO2xldCBuO3JldHVybntvZmZlcjp7c3VwcG9ydGVkUHJvdG9jb2xzOmF3YWl0IFByb21pc2UuYWxsKHQubWFwKChhc3luYyBlPT57c3dpdGNoKGUpe2Nhc2VcInJ0Y1wiOntjb25zdHtydGNDbGllbnQ6ZSxjaGFubmVsczp0LG9mZmVyOmkscnRjQ29ubmVjdGlvbklkOm8sY2hhbm5lbHNPcGVuZWQ6YX09YXdhaXQgcyh0aGlzLHIpLnN0YXJ0Q2xpZW50T2ZmZXIoKTtyZXR1cm4gbj17cnRjQ2xpZW50OmUsY2hhbm5lbHM6dCxjaGFubmVsc09wZW5lZDphfSx7dHlwZTpcInJ0Y1wiLHZlcnNpb246aC5SVENJbmZvLnZlcnNpb24scGF5bG9hZDp7b2ZmZXI6aSxydGNDb25uZWN0aW9uSWQ6b319fWNhc2VcImNsYXNzaWNcIjpyZXR1cm57dHlwZTpcImNsYXNzaWNcIix2ZXJzaW9uOmQuQ2xhc3NpY0luZm8udmVyc2lvbn07ZGVmYXVsdDpyZXR1cm4gYS5leGhhdXN0aXZlQ2hlY2soZSxbXCJydGNcIixcImNsYXNzaWNcIl0pfX0pKSksbWF4UHJvdG9jb2xzOjJ9LHJ0YzpufX1hc3luYyBjcmVhdGVDbGllbnRTdHJhdGVneShlLHQpe3ZhciBuO3QuZW5kcG9pbnRJZHx8KHQuZW5kcG9pbnRJZD10aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0TmV4dE1lc3NhZ2VJZCgpLHModGhpcyxpKS5jaGVja0ZvclByZXZpb3VzQ2xpZW50Q29ubmVjdGlvbih0LmNoYW5uZWxJZCkpO2NvbnN0IG89bnVsbCE9PShuPXQuYW5zd2VyKSYmdm9pZCAwIT09bj9uOntzdXBwb3J0ZWRQcm90b2NvbHM6W3t0eXBlOlwiY2xhc3NpY1wiLHZlcnNpb246MX1dfSxhPShhd2FpdCBQcm9taXNlLmFsbChvLnN1cHBvcnRlZFByb3RvY29scy5tYXAoKGFzeW5jIG49PlwicnRjXCI9PT1uLnR5cGUmJmU/KGF3YWl0IHModGhpcyxyKS5maW5pc2hDbGllbnRPZmZlcihlLnJ0Y0NsaWVudCxuLnBheWxvYWQuYW5zd2VyLGUuY2hhbm5lbHNPcGVuZWQpLG5ldyBoLlJUQ1N0cmF0ZWd5KTpcImNsYXNzaWNcIj09PW4udHlwZT9uZXcgZC5DbGFzc2ljU3RyYXRlZ3kodGhpcy53aXJlLHModGhpcyxpKSx0LmVuZHBvaW50SWQsdCk6bnVsbCkpKSkuZmlsdGVyKChlPT5udWxsIT09ZSkpO2xldCBjO2lmKGUmJiFhLnNvbWUoKGU9PmUgaW5zdGFuY2VvZiBoLlJUQ1N0cmF0ZWd5KSkmJmUmJmUucnRjQ2xpZW50LmNsb3NlKCksYS5sZW5ndGg+PTIpYz15LmRlZmF1bHQuY29tYmluZShhWzBdLGFbMV0pO2Vsc2V7aWYoIWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk5vIGNvbXBhdGlibGUgcHJvdG9jb2xzXCIpO1tjXT1hfWNvbnN0IGw9e2VuZHBvaW50SWRlbnRpdHk6dCxydGM6ZX07cmV0dXJuIGMuYWRkRW5kcG9pbnQodC5jaGFubmVsSWQsbCksY31hc3luYyBwcm9jZXNzQ2hhbm5lbENvbm5lY3Rpb24oZSl7Y29uc3R7Y2xpZW50SWRlbnRpdHk6dCxwcm92aWRlcklkZW50aXR5Om4sYWNrVG9TZW5kZXI6aSxwYXlsb2FkOm8sb2ZmZXI6YX09ZS5wYXlsb2FkO3QuZW5kcG9pbnRJZD90LmlzTG9jYWxFbmRwb2ludElkPSExOih0LmVuZHBvaW50SWQ9dGhpcy53aXJlLmVudmlyb25tZW50LmdldE5leHRNZXNzYWdlSWQoKSx0LmlzTG9jYWxFbmRwb2ludElkPSEwKTtjb25zdCBjPW4uY2hhbm5lbElkLGw9dGhpcy5wcm92aWRlck1hcC5nZXQoYyk7aWYoIWwpcmV0dXJuIGkucGF5bG9hZC5zdWNjZXNzPSExLGkucGF5bG9hZC5yZWFzb249YENoYW5uZWwgXCIke24uY2hhbm5lbE5hbWV9XCIgaGFzIGJlZW4gZGVzdHJveWVkLmAsdGhpcy53aXJlLnNlbmRSYXcoaSk7Y29uc3R7cHJvdmlkZXI6cCxzdHJhdGVneTp3LHN1cHBvcnRlZFByb3RvY29sczp5fT1sO3RyeXtpZighKHAgaW5zdGFuY2VvZiB1LkNoYW5uZWxQcm92aWRlcikpdGhyb3cgRXJyb3IoXCJDYW5ub3QgY29ubmVjdCB0byBhIGNoYW5uZWwgY2xpZW50XCIpO2NvbnN0IGU9bnVsbCE9YT9hOntzdXBwb3J0ZWRQcm90b2NvbHM6W3t0eXBlOlwiY2xhc3NpY1wiLHZlcnNpb246MX1dLG1heFByb3RvY29sczoxfSxuPXRoaXMucHJvdG9jb2xNYW5hZ2VyLmdldENvbXBhdGlibGVQcm90b2NvbHMoeSxlKTtpZighbi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiVGhpcyBwcm92aWRlciBkb2VzIG5vdCBzdXBwb3J0IGFueSBvZiB0aGUgb2ZmZXJlZCBwcm90b2NvbHMuXCIpO2NvbnN0IGM9YXdhaXQgcC5wcm9jZXNzQ29ubmVjdGlvbih0LG8pO2kucGF5bG9hZC5wYXlsb2FkPWkucGF5bG9hZC5wYXlsb2FkfHx7fTtsZXQgbD17c3VwcG9ydGVkUHJvdG9jb2xzOltdLGVuZHBvaW50UGF5bG9hZFByb21pc2U6UHJvbWlzZS5yZXNvbHZlKHtlbmRwb2ludElkZW50aXR5OnR9KX07cmV0dXJuIGw9YXdhaXQgbi5yZWR1Y2UoKGFzeW5jKGUsdCk9Pntjb25zdCBuPWF3YWl0IGU7aWYoXCJydGNcIj09PXQudHlwZSl7Y29uc3R7YW5zd2VyOmUscnRjQ2xpZW50OmksY2hhbm5lbHM6b309YXdhaXQgcyh0aGlzLHIpLmNyZWF0ZVByb3ZpZGVyQW5zd2VyKHQucGF5bG9hZC5ydGNDb25uZWN0aW9uSWQsdC5wYXlsb2FkLm9mZmVyKTtuLnN1cHBvcnRlZFByb3RvY29scy5wdXNoKHt0eXBlOlwicnRjXCIsdmVyc2lvbjpoLlJUQ0luZm8udmVyc2lvbixwYXlsb2FkOnthbnN3ZXI6ZX19KSxuLmVuZHBvaW50UGF5bG9hZFByb21pc2U9bi5lbmRwb2ludFBheWxvYWRQcm9taXNlLnRoZW4oKGU9Pm8udGhlbigodD0+KHsuLi5lLHJ0Yzp7cnRjQ2xpZW50OmksY2hhbm5lbHM6dH19KSkpKSl9ZWxzZSBuLnN1cHBvcnRlZFByb3RvY29scy5wdXNoKHt0eXBlOlwiY2xhc3NpY1wiLHZlcnNpb246ZC5DbGFzc2ljSW5mby52ZXJzaW9ufSk7cmV0dXJuIG59KSxQcm9taXNlLnJlc29sdmUobCkpLGwuZW5kcG9pbnRQYXlsb2FkUHJvbWlzZS50aGVuKChlPT53LmFkZEVuZHBvaW50KHQuZW5kcG9pbnRJZCxlKSkpLGkucGF5bG9hZC5wYXlsb2FkLnJlc3VsdD1jLGkucGF5bG9hZC5wYXlsb2FkLmFuc3dlcj1sLHRoaXMud2lyZS5zZW5kUmF3KGkpfWNhdGNoKGUpe3JldHVybiBpLnBheWxvYWQuc3VjY2Vzcz0hMSxpLnBheWxvYWQucmVhc29uPWUubWVzc2FnZSx0aGlzLndpcmUuc2VuZFJhdyhpKX19fXQuQ29ubmVjdGlvbk1hbmFnZXI9ZixpPW5ldyBXZWFrTWFwLHI9bmV3IFdlYWtNYXB9LDc3MjI6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHI9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59LG89dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ2hhbm5lbD12b2lkIDA7Y29uc3Qgcz1uKDgzNzgpLGE9bigyOTQyKSxjPW4oOTY1OSksZD1uKDY3MTEpLGg9KCk9Pnt9O2NsYXNzIGwgZXh0ZW5kcyBjLkVtaXR0ZXJCYXNle2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsXCJjaGFubmVsXCIpLGkuc2V0KHRoaXMsdm9pZCAwKSxyKHRoaXMsaSxuZXcgZC5Db25uZWN0aW9uTWFuYWdlcihlKSl9YXN5bmMgZ2V0QWxsQ2hhbm5lbHMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtYWxsLWNoYW5uZWxzXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWFzeW5jIG9uQ2hhbm5lbENvbm5lY3QoZSl7YXdhaXQgdGhpcy5vbihcImNvbm5lY3RlZFwiLGUpfWFzeW5jIG9uQ2hhbm5lbERpc2Nvbm5lY3QoZSl7YXdhaXQgdGhpcy5vbihcImRpc2Nvbm5lY3RlZFwiLGUpfWFzeW5jIGNvbm5lY3QoZSx0KXtpZighZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYSBjaGFubmVsTmFtZSBzdHJpbmcgdG8gY29ubmVjdCB0byBhIGNoYW5uZWwuXCIpO2NvbnN0IG49T2JqZWN0LmFzc2lnbih0aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0RGVmYXVsdENoYW5uZWxPcHRpb25zKCkuY29ubmVjdCx0fHx7fSk7bGV0IHI9aCxhPWg7Y29uc3QgYz1uZXcgUHJvbWlzZSgodD0+e3I9dCxhPWk9PntlPT09aS5jaGFubmVsTmFtZSYmKHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJjb25uZWN0ZWRcIixhKSx0aGlzLmNvbm5lY3QoZSxuKS50aGVuKChlPT57dChlKX0pKSl9LHRoaXMub24oXCJjb25uZWN0ZWRcIixhKX0pKTt0cnl7Y29uc3R7b2ZmZXI6dCxydGM6Y309YXdhaXQgbyh0aGlzLGkpLmNyZWF0ZUNsaWVudE9mZmVyKG4pLGQ9YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJjb25uZWN0LXRvLWNoYW5uZWxcIix7Y2hhbm5lbE5hbWU6ZSwuLi5uLG9mZmVyOnR9KSx7cGF5bG9hZDp7ZGF0YTpofX09ZDtyJiZyKCksdGhpcy5yZW1vdmVMaXN0ZW5lcihcImNvbm5lY3RlZFwiLGEpO2NvbnN0IGw9YXdhaXQgbyh0aGlzLGkpLmNyZWF0ZUNsaWVudFN0cmF0ZWd5KGMsaCksdT1uZXcgcy5kZWZhdWx0KGgsdGhpcy53aXJlLGwpO3JldHVybiBsLm9uRW5kcG9pbnREaXNjb25uZWN0KGguY2hhbm5lbElkLChhc3luYygpPT57dHJ5e2F3YWl0IHUuZGlzY29ubmVjdCgpfWNhdGNoKGUpe2NvbnNvbGUud2FybihgU29tZXRoaW5nIHdlbnQgd3JvbmcgZHVyaW5nIGRpc2Nvbm5lY3QgZm9yIGNsaWVudCB3aXRoIHV1aWQ6ICR7aC51dWlkfSAvIG5hbWU6ICR7aC5uYW1lfSAvIGVuZHBvaW50SWQ6ICR7aC5lbmRwb2ludElkfS5gKX1maW5hbGx5e3MuZGVmYXVsdC5oYW5kbGVQcm92aWRlckRpc2Nvbm5lY3QodSxoKX19KSksdGhpcy5vbihcImRpc2Nvbm5lY3RlZFwiLCh0PT57dC5jaGFubmVsTmFtZT09PWUmJnMuZGVmYXVsdC5oYW5kbGVQcm92aWRlckRpc2Nvbm5lY3QodSx0KX0pKSx1fWNhdGNoKHQpe2NvbnN0IGk9XCJpbnRlcm5hbC1uYWNrXCI7aWYoe3dhaXQ6ITAsLi4ubn0ud2FpdCYmdC5tZXNzYWdlJiZ0Lm1lc3NhZ2UuaW5jbHVkZXMoaSkpcmV0dXJuIGNvbnNvbGUud2FybihgQ2hhbm5lbCBub3QgZm91bmQgZm9yIGNoYW5uZWxOYW1lOiAke2V9LCB3YWl0aW5nIGZvciBjaGFubmVsIGNvbm5lY3Rpb24uYCksYzt0aHJvdyB0Lm1lc3NhZ2U9PT1pP25ldyBFcnJvcihgTm8gY2hhbm5lbCBmb3VuZCBmb3IgY2hhbm5lbE5hbWU6ICR7ZX1gKTpuZXcgRXJyb3IodCl9fWFzeW5jIGNyZWF0ZShlLHQpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgY2hhbm5lbE5hbWUgdG8gY3JlYXRlIGEgY2hhbm5lbFwiKTtjb25zdHtwYXlsb2FkOntkYXRhOm59fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNyZWF0ZS1jaGFubmVsXCIse2NoYW5uZWxOYW1lOmV9KSxyPW8odGhpcyxpKS5jcmVhdGVQcm92aWRlcih0LG4pO3JldHVybiB0aGlzLm9uKFwiY2xpZW50LWRpc2Nvbm5lY3RlZFwiLCh0PT57dC5jaGFubmVsTmFtZT09PWUmJmEuQ2hhbm5lbFByb3ZpZGVyLmhhbmRsZUNsaWVudERpc2Nvbm5lY3Rpb24ocix0KX0pKSxyfX10LkNoYW5uZWw9bCxpPW5ldyBXZWFrTWFwfSwzNzQ5OihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0Lk1lc3NhZ2VSZWNlaXZlcj12b2lkIDA7Y29uc3QgaT1uKDgzNzgpLHI9big5NjU5KTtjbGFzcyBvIGV4dGVuZHMgci5CYXNle2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpLHRoaXMub25tZXNzYWdlPWU9PlwicHJvY2Vzcy1jaGFubmVsLW1lc3NhZ2VcIj09PWUuYWN0aW9uJiYodGhpcy5wcm9jZXNzQ2hhbm5lbE1lc3NhZ2UoZSksITApLHRoaXMuZW5kcG9pbnRNYXA9bmV3IE1hcCx0aGlzLmxhdGVzdEVuZHBvaW50SWRCeUNoYW5uZWxJZD1uZXcgTWFwLGUucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcih0aGlzLm9ubWVzc2FnZS5iaW5kKHRoaXMpKX1hc3luYyBwcm9jZXNzQ2hhbm5lbE1lc3NhZ2UoZSl7dmFyIHQsbjtjb25zdHtzZW5kZXJJZGVudGl0eTppLHByb3ZpZGVySWRlbnRpdHk6cixhY3Rpb246byxhY2tUb1NlbmRlcjpzLHBheWxvYWQ6YSxpbnRlbmRlZFRhcmdldElkZW50aXR5OmN9PWUucGF5bG9hZCxkPW51bGwhPT0obj1udWxsIT09KHQ9Yy5jaGFubmVsSWQpJiZ2b2lkIDAhPT10P3Q6Yy5lbmRwb2ludElkKSYmdm9pZCAwIT09bj9uOnRoaXMubGF0ZXN0RW5kcG9pbnRJZEJ5Q2hhbm5lbElkLmdldChyLmNoYW5uZWxJZCksaD10aGlzLmVuZHBvaW50TWFwLmdldChkKTtpZighaClyZXR1cm4gcy5wYXlsb2FkLnN1Y2Nlc3M9ITEscy5wYXlsb2FkLnJlYXNvbj1gQ2xpZW50IGNvbm5lY3Rpb24gd2l0aCBpZGVudGl0eSB1dWlkOiAke3RoaXMud2lyZS5tZS51dWlkfSAvIG5hbWU6ICR7dGhpcy53aXJlLm1lLm5hbWV9IC8gZW5kcG9pbnRJZDogJHtkfSBubyBsb25nZXIgY29ubmVjdGVkLmAsdGhpcy53aXJlLnNlbmRSYXcocyk7dHJ5e2NvbnN0IGU9YXdhaXQgaChvLGEsaSk7cmV0dXJuIHMucGF5bG9hZC5wYXlsb2FkPXMucGF5bG9hZC5wYXlsb2FkfHx7fSxzLnBheWxvYWQucGF5bG9hZC5yZXN1bHQ9ZSx0aGlzLndpcmUuc2VuZFJhdyhzKX1jYXRjaChlKXtyZXR1cm4gcy5wYXlsb2FkLnN1Y2Nlc3M9ITEscy5wYXlsb2FkLnJlYXNvbj1lLm1lc3NhZ2UsdGhpcy53aXJlLnNlbmRSYXcocyl9fWFkZEVuZHBvaW50KGUsdCxuKXt0aGlzLmVuZHBvaW50TWFwLnNldChuLGUpLHQhPT1uJiZ0aGlzLmxhdGVzdEVuZHBvaW50SWRCeUNoYW5uZWxJZC5zZXQodCxuKX1yZW1vdmVFbmRwb2ludChlLHQpe3RoaXMuZW5kcG9pbnRNYXAuZGVsZXRlKHQpLHRoaXMubGF0ZXN0RW5kcG9pbnRJZEJ5Q2hhbm5lbElkLmdldChlKT09PXQmJnRoaXMubGF0ZXN0RW5kcG9pbnRJZEJ5Q2hhbm5lbElkLmRlbGV0ZShlKX1jaGVja0ZvclByZXZpb3VzQ2xpZW50Q29ubmVjdGlvbihlKXtjb25zdCB0PXRoaXMubGF0ZXN0RW5kcG9pbnRJZEJ5Q2hhbm5lbElkLmdldChlKTt0JiYoaS5kZWZhdWx0LmNsb3NlQ2hhbm5lbEJ5RW5kcG9pbnRJZCh0KSxjb25zb2xlLndhcm4oXCJZb3UgaGF2ZSBjcmVhdGVkIGEgc2Vjb25kIGNvbm5lY3Rpb24gdG8gYW4gb2xkZXIgcHJvdmlkZXIuIEZpcnN0IGNvbm5lY3Rpb24gaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIHRoZSBjbGllbnRNYXBcIiksY29uc29sZS53YXJuKFwiSWYgdGhlIHByb3ZpZGVyIGNhbGxzIHB1Ymxpc2goKSwgeW91IG1heSByZWNlaXZlIG11bHRpcGxlIG1lc3NhZ2VzLlwiKSl9fXQuTWVzc2FnZVJlY2VpdmVyPW99LDEwNDY6ZnVuY3Rpb24oZSx0KXt2YXIgbixpLHI9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59LG89dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ2xhc3NpY0luZm89dC5DbGFzc2ljU3RyYXRlZ3k9dm9pZCAwLHQuQ2xhc3NpY1N0cmF0ZWd5PWNsYXNze2NvbnN0cnVjdG9yKGUsdCxzLGEpe3RoaXMubWVzc2FnZVJlY2VpdmVyPXQsdGhpcy5lbmRwb2ludElkPXMsdGhpcy5wcm92aWRlcklkZW50aXR5PWEsbi5zZXQodGhpcyx2b2lkIDApLGkuc2V0KHRoaXMsbmV3IE1hcCksdGhpcy5zZW5kPWFzeW5jKGUsdCxyKT0+e2NvbnN0IHM9byh0aGlzLGkpLmdldChlKTtpZighcyl0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBsb2NhdGUgcm91dGluZyBpbmZvIGZvciBlbmRwb2ludCAke2V9YCk7Y29uc3QgYT17Li4uc307cmV0dXJuIGEuaXNMb2NhbEVuZHBvaW50SWQmJmRlbGV0ZSBhLmVuZHBvaW50SWQsZGVsZXRlIGEuaXNMb2NhbEVuZHBvaW50SWQsKGF3YWl0IG8odGhpcyxuKS5zZW5kQWN0aW9uKFwic2VuZC1jaGFubmVsLW1lc3NhZ2VcIix7Li4uYSxwcm92aWRlcklkZW50aXR5OnRoaXMucHJvdmlkZXJJZGVudGl0eSxhY3Rpb246dCxwYXlsb2FkOnJ9KS5jYXRjaCgoZT0+e3Rocm93IG5ldyBFcnJvcihlLm1lc3NhZ2UpfSkpKS5wYXlsb2FkLmRhdGEucmVzdWx0fSx0aGlzLmNsb3NlPWFzeW5jKCk9Pnt0aGlzLm1lc3NhZ2VSZWNlaXZlci5yZW1vdmVFbmRwb2ludCh0aGlzLnByb3ZpZGVySWRlbnRpdHkuY2hhbm5lbElkLHRoaXMuZW5kcG9pbnRJZCkscih0aGlzLGksbmV3IE1hcCl9LHIodGhpcyxuLGUpfW9uRW5kcG9pbnREaXNjb25uZWN0KGUsdCl7fXJlY2VpdmUoZSl7dGhpcy5tZXNzYWdlUmVjZWl2ZXIuYWRkRW5kcG9pbnQoZSx0aGlzLnByb3ZpZGVySWRlbnRpdHkuY2hhbm5lbElkLHRoaXMuZW5kcG9pbnRJZCl9YXN5bmMgY2xvc2VFbmRwb2ludChlKXtvKHRoaXMsaSkuZGVsZXRlKGUpfWlzRW5kcG9pbnRDb25uZWN0ZWQoZSl7cmV0dXJuIG8odGhpcyxpKS5oYXMoZSl9YWRkRW5kcG9pbnQoZSx0KXtvKHRoaXMsaSkuc2V0KGUsdC5lbmRwb2ludElkZW50aXR5KX1pc1ZhbGlkRW5kcG9pbnRQYXlsb2FkKGUpe3ZhciB0LG47cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mKG51bGw9PT0odD1udWxsPT1lP3ZvaWQgMDplLmVuZHBvaW50SWRlbnRpdHkpfHx2b2lkIDA9PT10P3ZvaWQgMDp0LmVuZHBvaW50SWQpfHxcInN0cmluZ1wiPT10eXBlb2YobnVsbD09PShuPW51bGw9PWU/dm9pZCAwOmUuZW5kcG9pbnRJZGVudGl0eSl8fHZvaWQgMD09PW4/dm9pZCAwOm4uY2hhbm5lbElkKX19LG49bmV3IFdlYWtNYXAsaT1uZXcgV2Vha01hcCx0LkNsYXNzaWNJbmZvPXt2ZXJzaW9uOjUsbWluaW11bVZlcnNpb246MCx0eXBlOlwiY2xhc3NpY1wifX0sNzExMzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NsYXNzIG57Y29uc3RydWN0b3IoZSx0KXt0aGlzLnByaW1hcnk9ZSx0aGlzLnNlY29uZGFyeT10fXN0YXRpYyBjb21iaW5lKGUsdCl7cmV0dXJuIG5ldyBuKGUsdCl9b25FbmRwb2ludERpc2Nvbm5lY3QoZSx0KXt0aGlzLnByaW1hcnkub25FbmRwb2ludERpc2Nvbm5lY3QoZSwoKCk9Pnt0aGlzLnNlY29uZGFyeS5pc0VuZHBvaW50Q29ubmVjdGVkKGUpfHx0KCl9KSksdGhpcy5zZWNvbmRhcnkub25FbmRwb2ludERpc2Nvbm5lY3QoZSwoKCk9Pnt0aGlzLnByaW1hcnkuaXNFbmRwb2ludENvbm5lY3RlZChlKXx8dCgpfSkpfWlzVmFsaWRFbmRwb2ludFBheWxvYWQoZSl7cmV0dXJuIHRoaXMucHJpbWFyeS5pc1ZhbGlkRW5kcG9pbnRQYXlsb2FkKGUpfHx0aGlzLnNlY29uZGFyeS5pc1ZhbGlkRW5kcG9pbnRQYXlsb2FkKGUpfWFzeW5jIGNsb3NlRW5kcG9pbnQoZSl7YXdhaXQgdGhpcy5wcmltYXJ5LmNsb3NlRW5kcG9pbnQoZSksYXdhaXQgdGhpcy5zZWNvbmRhcnkuY2xvc2VFbmRwb2ludChlKX1pc0VuZHBvaW50Q29ubmVjdGVkKGUpe3JldHVybiB0aGlzLnByaW1hcnkuaXNFbmRwb2ludENvbm5lY3RlZChlKXx8dGhpcy5zZWNvbmRhcnkuaXNFbmRwb2ludENvbm5lY3RlZChlKX1hc3luYyBhZGRFbmRwb2ludChlLHQpe3RoaXMucHJpbWFyeS5pc1ZhbGlkRW5kcG9pbnRQYXlsb2FkKHQpJiZhd2FpdCB0aGlzLnByaW1hcnkuYWRkRW5kcG9pbnQoZSx0KSx0aGlzLnNlY29uZGFyeS5pc1ZhbGlkRW5kcG9pbnRQYXlsb2FkKHQpJiZhd2FpdCB0aGlzLnNlY29uZGFyeS5hZGRFbmRwb2ludChlLHQpfXJlY2VpdmUoZSl7dGhpcy5wcmltYXJ5LnJlY2VpdmUoZSksdGhpcy5zZWNvbmRhcnkucmVjZWl2ZShlKX1zZW5kKGUsdCxuKXtyZXR1cm4gdGhpcy5wcmltYXJ5LmlzRW5kcG9pbnRDb25uZWN0ZWQoZSk/dGhpcy5wcmltYXJ5LnNlbmQoZSx0LG4pOnRoaXMuc2Vjb25kYXJ5LnNlbmQoZSx0LG4pfWFzeW5jIGNsb3NlKCl7YXdhaXQgUHJvbWlzZS5hbGwoW3RoaXMucHJpbWFyeS5jbG9zZSgpLHRoaXMuc2Vjb25kYXJ5LmNsb3NlKCldKX19dC5kZWZhdWx0PW59LDMwMzc6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlByb3RvY29sTWFuYWdlcj12b2lkIDAsdC5Qcm90b2NvbE1hbmFnZXI9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5Qcm90b2NvbHNJblByZWZlcmVuY2VPcmRlcj1lLHRoaXMuRGVmYXVsdENsaWVudFByb3RvY29scz1bXCJjbGFzc2ljXCJdLHRoaXMuRGVmYXVsdFByb3ZpZGVyUHJvdG9jb2xzPVtcImNsYXNzaWNcIl0sdGhpcy5nZXRDbGllbnRQcm90b2NvbHM9ZT0+e2NvbnN0IHQ9ZT90aGlzLlByb3RvY29sc0luUHJlZmVyZW5jZU9yZGVyLmZpbHRlcigodD0+ZS5pbmNsdWRlcyh0KSkpOnRoaXMuRGVmYXVsdENsaWVudFByb3RvY29scztpZighdC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKGBObyB2YWxpZCBwcm90b2NvbHMgd2VyZSBwYXNzZWQgaW4uIEFjY2VwdGVkIHZhbHVlcyBhcmU6ICR7dGhpcy5Qcm90b2NvbHNJblByZWZlcmVuY2VPcmRlci5qb2luKFwiLCBcIil9LmApO3JldHVybiB0fSx0aGlzLmdldFByb3ZpZGVyUHJvdG9jb2xzPWU9Pntjb25zdCB0PWU/dGhpcy5Qcm90b2NvbHNJblByZWZlcmVuY2VPcmRlci5maWx0ZXIoKHQ9PmUuaW5jbHVkZXModCkpKTp0aGlzLkRlZmF1bHRQcm92aWRlclByb3RvY29scztpZighdC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKGBObyB2YWxpZCBwcm90b2NvbHMgd2VyZSBwYXNzZWQgaW4uIEFjY2VwdGVkIHZhbHVlcyBhcmU6ICR7dGhpcy5Qcm90b2NvbHNJblByZWZlcmVuY2VPcmRlci5qb2luKFwiLCBcIil9LmApO3JldHVybiB0fSx0aGlzLmdldENvbXBhdGlibGVQcm90b2NvbHM9KGUsdCk9PnQuc3VwcG9ydGVkUHJvdG9jb2xzLmZpbHRlcigodD0+ZS5zb21lKChlPT57dmFyIG47cmV0dXJuIGUudHlwZT09PXQudHlwZSYmdC52ZXJzaW9uPj1lLm1pbmltdW1WZXJzaW9uJiZlLnZlcnNpb24+PShudWxsIT09KG49dC5taW5pbXVtVmVyc2lvbikmJnZvaWQgMCE9PW4/bjowKX0pKSkpLnNsaWNlKDAsdC5tYXhQcm90b2NvbHMpfX19LDg3NzY6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHIsbz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXR8fGZ1bmN0aW9uKGUsdCl7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LmdldChlKX0scz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXR8fGZ1bmN0aW9uKGUsdCxuKXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuc2V0KGUsbiksbn07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SVENFbmRwb2ludD12b2lkIDA7Y29uc3QgYT1uKDIzNjYpO3QuUlRDRW5kcG9pbnQ9Y2xhc3N7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnJ0Yz1lLHRoaXMuZW5kcG9pbnRJZGVudGl0eT10LHRoaXMucmVzcG9uc2VNYXA9bmV3IE1hcCxpLnNldCh0aGlzLG51bGwpLHIuc2V0KHRoaXMsdm9pZCAwKSx0aGlzLmNvbm5lY3Rpb25TdGF0ZUNoYW5nZUhhbmRsZXI9ZT0+e1wiY29ubmVjdGVkXCIhPT10aGlzLnJ0Yy5ydGNDbGllbnQuY29ubmVjdGlvblN0YXRlJiYodGhpcy5ydGMucnRjQ2xpZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIix0aGlzLmNvbm5lY3Rpb25TdGF0ZUNoYW5nZUhhbmRsZXIpLHRoaXMuY2xvc2UoKSxvKHRoaXMscikmJm8odGhpcyxyKS5jYWxsKHRoaXMpKX0sdGhpcy5zZW5kPWFzeW5jKGUsdCk9Pntjb25zdCBuPWBtZXNzYWdlLSR7TWF0aC5yYW5kb20oKX1gLGk9bmV3IFByb21pc2UoKChlLHQpPT57dGhpcy5yZXNwb25zZU1hcC5zZXQobix7cmVzb2x2ZTplLHJlamVjdDp0fSl9KSk7cmV0dXJuIHRoaXMucnRjLmNoYW5uZWxzLnJlcXVlc3Quc2VuZChKU09OLnN0cmluZ2lmeSh7YWN0aW9uOmUscGF5bG9hZDp0LG1lc3NhZ2VJZDpufSkpLGl9LHRoaXMuY2xvc2U9KCk9Pnt0aGlzLnJlc3BvbnNlTWFwLmZvckVhY2goKGU9PmUucmVqZWN0KFwiQ29ubmVjdGlvbiBoYXMgY2xvc2VkLlwiKSkpLHRoaXMucmVzcG9uc2VNYXA9bmV3IE1hcCx0aGlzLnJ0Yy5jaGFubmVscy5yZXF1ZXN0LmNsb3NlKCksdGhpcy5ydGMuY2hhbm5lbHMucmVzcG9uc2UuY2xvc2UoKSx0aGlzLnJ0Yy5ydGNDbGllbnQuY2xvc2UoKX0sdGhpcy5ydGMuY2hhbm5lbHMucmVzcG9uc2UuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwoZT0+e3ZhciB0O2NvbnN0e21lc3NhZ2VJZDpuLHBheWxvYWQ6aSxzdWNjZXNzOnIsZXJyb3I6b309SlNPTi5wYXJzZShlLmRhdGEpLHtyZXNvbHZlOnMscmVqZWN0OmF9PW51bGwhPT0odD10aGlzLnJlc3BvbnNlTWFwLmdldChuKSkmJnZvaWQgMCE9PXQ/dDp7fTtzJiZhPyh0aGlzLnJlc3BvbnNlTWFwLmRlbGV0ZShuKSxyP3MoaSk6YShvKSk6KGNvbnNvbGUubG9nKFwiQ291bGQgbm90IGZpbmQgaWQgaW4gcmVzcG9uc2VNYXAuXCIpLGNvbnNvbGUubG9nKGUpKX0pKSx0aGlzLnJ0Yy5jaGFubmVscy5yZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsKGFzeW5jIGU9Pntjb25zdHttZXNzYWdlSWQ6bixhY3Rpb246cixwYXlsb2FkOnN9PUpTT04ucGFyc2UoZS5kYXRhKTtpZihvKHRoaXMsaSkpdHJ5e2NvbnN0IGU9YXdhaXQgbyh0aGlzLGkpLmNhbGwodGhpcyxyLHMsdCk7dGhpcy5ydGMuY2hhbm5lbHMucmVzcG9uc2Uuc2VuZChKU09OLnN0cmluZ2lmeSh7bWVzc2FnZUlkOm4scGF5bG9hZDplLHN1Y2Nlc3M6ITB9KSl9Y2F0Y2goZSl7XCJvcGVuXCI9PT10aGlzLnJ0Yy5jaGFubmVscy5yZXNwb25zZS5yZWFkeVN0YXRlJiZ0aGlzLnJ0Yy5jaGFubmVscy5yZXNwb25zZS5zZW5kKEpTT04uc3RyaW5naWZ5KHttZXNzYWdlSWQ6bixlcnJvcjphLmVycm9yVG9QT0pPKGUpLHN1Y2Nlc3M6ITF9KSl9ZWxzZVwib3BlblwiPT09dGhpcy5ydGMuY2hhbm5lbHMucmVzcG9uc2UucmVhZHlTdGF0ZSYmdGhpcy5ydGMuY2hhbm5lbHMucmVzcG9uc2Uuc2VuZChKU09OLnN0cmluZ2lmeSh7bWVzc2FnZUlkOm4sc3VjY2VzczohMSxlcnJvcjpcIkNvbm5lY3Rpb24gbm90IHJlYWR5LlwifSkpfSkpLHRoaXMucnRjLnJ0Y0NsaWVudC5hZGRFdmVudExpc3RlbmVyKFwiY29ubmVjdGlvbnN0YXRlY2hhbmdlXCIsdGhpcy5jb25uZWN0aW9uU3RhdGVDaGFuZ2VIYW5kbGVyKSxPYmplY3QudmFsdWVzKHRoaXMucnRjLmNoYW5uZWxzKS5mb3JFYWNoKChlPT57ZS5vbmNsb3NlPWU9PntbLi4udGhpcy5yZXNwb25zZU1hcC52YWx1ZXMoKV0uZm9yRWFjaCgoZT0+ZS5yZWplY3QobmV3IEVycm9yKFwiUlRDRGF0YUNoYW5uZWwgY2xvc2VkIHVuZXhwZWN0ZWRseSwgdGhpcyBpcyBtb3N0IGNvbW1vbmx5IGNhdXNlZCBieSBtZXNzYWdlIHNpemUuIE5vdGU6IFJUQyBDaGFubmVscyBoYXZlIGEgbWVzc2FnZSBzaXplIGxpbWl0IG9mIH4yNTVrQi5cIikpKSksdGhpcy5jbG9zZSgpLG8odGhpcyxyKSYmbyh0aGlzLHIpLmNhbGwodGhpcyl9fSkpfW9uRGlzY29ubmVjdChlKXtpZihvKHRoaXMscikpdGhyb3cgbmV3IEVycm9yKFwiUlRDRW5kcG9pbnQgZGlzY29ubmVjdExpc3RlbmVyIGNhbm5vdCBiZSBzZXQgdHdpY2UuXCIpO3ModGhpcyxyLGUpfXJlY2VpdmUoZSl7aWYobyh0aGlzLGkpKXRocm93IG5ldyBFcnJvcihcIllvdSBoYXZlIGFscmVhZHkgc2V0IGEgbGlzdGVuZXIgZm9yIHRoaXMgUlRDIEVuZHBvaW50LlwiKTtzKHRoaXMsaSxlKX1nZXQgY29ubmVjdGVkKCl7cmV0dXJuXCJjb25uZWN0ZWRcIj09PXRoaXMucnRjLnJ0Y0NsaWVudC5jb25uZWN0aW9uU3RhdGV9fSxpPW5ldyBXZWFrTWFwLHI9bmV3IFdlYWtNYXB9LDU2OTooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5SVENJQ0VNYW5hZ2VyPXZvaWQgMDtjb25zdCBpPW4oOTY1OSk7Y2xhc3MgciBleHRlbmRzIGkuRW1pdHRlckJhc2V7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSxcImNoYW5uZWxcIiksdGhpcy5lbnN1cmVDaGFubmVsT3BlbmVkPWU9Pm5ldyBQcm9taXNlKCgodCxuKT0+e2lmKFwib3BlblwiPT09ZS5yZWFkeVN0YXRlKXQoKTtlbHNlIGlmKFwiY29ubmVjdGluZ1wiPT09ZS5yZWFkeVN0YXRlKXtjb25zdCBuPSgpPT57ZS5yZW1vdmVFdmVudExpc3RlbmVyKFwib3BlblwiLG4pLHQoKX07ZS5hZGRFdmVudExpc3RlbmVyKFwib3BlblwiLG4pfWVsc2UgbihuZXcgRXJyb3IoXCJUaGlzIENoYW5uZWwgaGFzIGFscmVhZHkgY2xvc2VkXCIpKX0pKX1zdGF0aWMgY3JlYXRlRGF0YUNoYW5uZWxQcm9taXNlKGUsdCl7bGV0IG47Y29uc3QgaT1uZXcgUHJvbWlzZSgoZT0+e249ZX0pKSxyPWk9Pntjb25zdCBvPSgpPT57aS5jaGFubmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsbyksbihpLmNoYW5uZWwpfTtpLmNoYW5uZWwubGFiZWw9PT1lJiYoaS5jaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsbyksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGF0YWNoYW5uZWxcIixyKSl9O3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhY2hhbm5lbFwiLHIpLGl9YXN5bmMgbGlzdGVuRm9yUHJvdmlkZXJJY2UoZSx0KXthd2FpdCB0aGlzLm9uKHRoaXMuY3JlYXRlUHJvdmlkZXJFdmVudE5hbWUoZSksdCx7dGltZXN0YW1wOkRhdGUubm93KCl9KX1hc3luYyByYWlzZVByb3ZpZGVySWNlKGUsdCl7YXdhaXQgdGhpcy53aXJlLmVudmlyb25tZW50LnJhaXNlRXZlbnQodGhpcy5jcmVhdGVSb3V0ZVN0cmluZyh0aGlzLmNyZWF0ZVByb3ZpZGVyRXZlbnROYW1lKGUpKSx0KX1hc3luYyBsaXN0ZW5Gb3JDbGllbnRJY2UoZSx0KXthd2FpdCB0aGlzLm9uKHRoaXMuY3JlYXRlQ2xpZW50RXZlbnROYW1lKGUpLHQse3RpbWVzdGFtcDpEYXRlLm5vdygpfSl9YXN5bmMgcmFpc2VDbGllbnRJY2UoZSx0KXthd2FpdCB0aGlzLndpcmUuZW52aXJvbm1lbnQucmFpc2VFdmVudCh0aGlzLmNyZWF0ZVJvdXRlU3RyaW5nKHRoaXMuY3JlYXRlQ2xpZW50RXZlbnROYW1lKGUpKSx0KX1jbGVhbnVwSWNlTGlzdGVuZXJzKGUpe3RoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHRoaXMuY3JlYXRlQ2xpZW50RXZlbnROYW1lKGUpKSx0aGlzLnJlbW92ZUFsbExpc3RlbmVycyh0aGlzLmNyZWF0ZVByb3ZpZGVyRXZlbnROYW1lKGUpKX1jcmVhdGVDbGllbnRFdmVudE5hbWUoZSl7cmV0dXJuYGljZS1jbGllbnQtJHtlfWB9Y3JlYXRlUHJvdmlkZXJFdmVudE5hbWUoZSl7cmV0dXJuYGljZS1wcm92aWRlci0ke2V9YH1jcmVhdGVSb3V0ZVN0cmluZyhlKXtyZXR1cm5gY2hhbm5lbC8ke2V9YH1jcmVhdGVSdGNQZWVyKCl7cmV0dXJuIHRoaXMud2lyZS5lbnZpcm9ubWVudC5nZXRSdGNQZWVyKCl9YXN5bmMgc3RhcnRDbGllbnRPZmZlcigpe2NvbnN0IGU9TWF0aC5yYW5kb20oKS50b1N0cmluZygpLHQ9dGhpcy5jcmVhdGVSdGNQZWVyKCk7dC5hZGRFdmVudExpc3RlbmVyKFwiaWNlY2FuZGlkYXRlXCIsKGFzeW5jIHQ9Pnt2YXIgbjt0LmNhbmRpZGF0ZSYmYXdhaXQgdGhpcy5yYWlzZUNsaWVudEljZShlLHtjYW5kaWRhdGU6bnVsbD09PShuPXQuY2FuZGlkYXRlKXx8dm9pZCAwPT09bj92b2lkIDA6bi50b0pTT04oKX0pfSkpLGF3YWl0IHRoaXMubGlzdGVuRm9yUHJvdmlkZXJJY2UoZSwoYXN5bmMgZT0+e2F3YWl0IHQuYWRkSWNlQ2FuZGlkYXRlKGUuY2FuZGlkYXRlKX0pKTtjb25zdCBuPXtyZXF1ZXN0OnQuY3JlYXRlRGF0YUNoYW5uZWwoXCJyZXF1ZXN0XCIpLHJlc3BvbnNlOnQuY3JlYXRlRGF0YUNoYW5uZWwoXCJyZXNwb25zZVwiKX0saT1hd2FpdCB0LmNyZWF0ZU9mZmVyKCk7YXdhaXQgdC5zZXRMb2NhbERlc2NyaXB0aW9uKGkpO2NvbnN0IHI9UHJvbWlzZS5hbGwoW24ucmVxdWVzdCxuLnJlc3BvbnNlXS5tYXAodGhpcy5lbnN1cmVDaGFubmVsT3BlbmVkKSkudGhlbigoKCk9Pnt9KSk7cmV0dXJue3J0Y0NsaWVudDp0LGNoYW5uZWxzOm4sb2ZmZXI6aSxydGNDb25uZWN0aW9uSWQ6ZSxjaGFubmVsc09wZW5lZDpyfX1hc3luYyBmaW5pc2hDbGllbnRPZmZlcihlLHQsbil7cmV0dXJuIGF3YWl0IGUuc2V0UmVtb3RlRGVzY3JpcHRpb24odCksYXdhaXQgbiwhMH1hc3luYyBjcmVhdGVQcm92aWRlckFuc3dlcihlLHQpe2NvbnN0IG49dGhpcy5jcmVhdGVSdGNQZWVyKCksaT1yLmNyZWF0ZURhdGFDaGFubmVsUHJvbWlzZShcInJlcXVlc3RcIixuKSxvPXIuY3JlYXRlRGF0YUNoYW5uZWxQcm9taXNlKFwicmVzcG9uc2VcIixuKTtuLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2VjYW5kaWRhdGVcIiwoYXN5bmMgdD0+e3ZhciBuO3QuY2FuZGlkYXRlJiZhd2FpdCB0aGlzLnJhaXNlUHJvdmlkZXJJY2UoZSx7Y2FuZGlkYXRlOm51bGw9PT0obj10LmNhbmRpZGF0ZSl8fHZvaWQgMD09PW4/dm9pZCAwOm4udG9KU09OKCl9KX0pKSxhd2FpdCB0aGlzLmxpc3RlbkZvckNsaWVudEljZShlLChhc3luYyBlPT57YXdhaXQgbi5hZGRJY2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpfSkpLGF3YWl0IG4uc2V0UmVtb3RlRGVzY3JpcHRpb24odCk7Y29uc3Qgcz1hd2FpdCBuLmNyZWF0ZUFuc3dlcigpO2F3YWl0IG4uc2V0TG9jYWxEZXNjcmlwdGlvbihzKTtjb25zdCBhPVByb21pc2UuYWxsKFtpLG9dKS50aGVuKCgoW3Qsbl0pPT4odGhpcy5jbGVhbnVwSWNlTGlzdGVuZXJzKGUpLHtyZXF1ZXN0OnQscmVzcG9uc2U6bn0pKSk7cmV0dXJue3J0Y0NsaWVudDpuLGFuc3dlcjpzLGNoYW5uZWxzOmF9fX10LlJUQ0lDRU1hbmFnZXI9cn0sMzg3MDpmdW5jdGlvbihlLHQsbil7dmFyIGkscixvLHM9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9LGE9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUlRDSW5mbz10LlJUQ1N0cmF0ZWd5PXZvaWQgMDtjb25zdCBjPW4oODc3Nik7dC5SVENTdHJhdGVneT1jbGFzc3tjb25zdHJ1Y3Rvcigpe2kuc2V0KHRoaXMsbnVsbCksci5zZXQodGhpcyxuZXcgTWFwKSxvLnNldCh0aGlzLCEwKSx0aGlzLnNlbmQ9YXN5bmMoZSx0LG4pPT50aGlzLmdldEVuZHBvaW50QnlJZChlKS5zZW5kKHQsbiksdGhpcy5jbG9zZT1hc3luYygpPT57cyh0aGlzLG8pJiYocyh0aGlzLHIpLmZvckVhY2goKGU9PmUuY2xvc2UoKSkpLGEodGhpcyxyLG5ldyBNYXApKSxhKHRoaXMsbywhMSl9fW9uRW5kcG9pbnREaXNjb25uZWN0KGUsdCl7dGhpcy5nZXRFbmRwb2ludEJ5SWQoZSkub25EaXNjb25uZWN0KHQpfXJlY2VpdmUoZSl7aWYocyh0aGlzLGkpKXRocm93IG5ldyBFcnJvcihcIllvdSBoYXZlIGFscmVhZHkgc2V0IGEgbGlzdGVuZXIgZm9yIHRoaXMgUlRDIFN0cmF0ZWd5XCIpO2EodGhpcyxpLGUpLHModGhpcyxyKS5mb3JFYWNoKChlPT5lLnJlY2VpdmUocyh0aGlzLGkpKSkpfWdldEVuZHBvaW50QnlJZChlKXtjb25zdCB0PXModGhpcyxyKS5nZXQoZSk7aWYoIXQpdGhyb3cgbmV3IEVycm9yKGBDbGllbnQgd2l0aCBlbmRwb2ludCBpZCAke2V9IGlzIG5vdCBjb25uZWN0ZWRgKTtyZXR1cm4gdH1nZXQgY29ubmVjdGVkKCl7cmV0dXJuIHModGhpcyxvKX1pc0VuZHBvaW50Q29ubmVjdGVkKGUpe3JldHVybiBzKHRoaXMscikuaGFzKGUpfWFkZEVuZHBvaW50KGUsdCl7aWYoIXModGhpcyxvKSlyZXR1cm4gdm9pZCBjb25zb2xlLndhcm4oXCJBZGRpbmcgZW5kcG9pbnQgdG8gZGlzY29ubmVjdGVkIFJUQyBTdHJhdGVneVwiKTtjb25zdCBuPW5ldyBjLlJUQ0VuZHBvaW50KHQucnRjLHQuZW5kcG9pbnRJZGVudGl0eSk7cyh0aGlzLGkpJiZuLnJlY2VpdmUocyh0aGlzLGkpKSxzKHRoaXMscikuc2V0KGUsbil9YXN5bmMgY2xvc2VFbmRwb2ludChlKXtzKHRoaXMscikuZGVsZXRlKGUpfWlzVmFsaWRFbmRwb2ludFBheWxvYWQoZSl7Y29uc3QgdD1lPT5cIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWU7cmV0dXJuIHQoZSkmJnQoZS5lbmRwb2ludElkZW50aXR5KSYmdChlLnJ0YykmJlwic3RyaW5nXCI9PXR5cGVvZiBlLmVuZHBvaW50SWRlbnRpdHkuZW5kcG9pbnRJZH19LGk9bmV3IFdlYWtNYXAscj1uZXcgV2Vha01hcCxvPW5ldyBXZWFrTWFwLHQuUlRDSW5mbz17dmVyc2lvbjoxLG1pbmltdW1WZXJzaW9uOjAsdHlwZTpcInJ0Y1wifX0sMjk0MjpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59LHI9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQ2hhbm5lbFByb3ZpZGVyPXZvaWQgMDtjb25zdCBvPW4oNzUzOSkscz1uKDIzMDApO2xldCBhPSgoKT0+e3ZhciBlLHQsbixhLGM7Y2xhc3MgZCBleHRlbmRzIG8uQ2hhbm5lbEJhc2V7Y29uc3RydWN0b3IoaCxsLHUpe3N1cGVyKCksZS5zZXQodGhpcyx2b2lkIDApLHQuc2V0KHRoaXMsdm9pZCAwKSxuLnNldCh0aGlzLHZvaWQgMCksYS5zZXQodGhpcywodD0+e2NvbnN0IG89dGhpcy5jb25uZWN0aW9ucy5maWx0ZXIoKGU9PmUuZW5kcG9pbnRJZCE9PXQuZW5kcG9pbnRJZCkpO3IodGhpcyxuKS5jbG9zZUVuZHBvaW50KHQuZW5kcG9pbnRJZCksaSh0aGlzLGUsbyl9KSksdGhpcy5wcm9jZXNzQWN0aW9uPWFzeW5jKGUsdCxuKT0+KGQuY2xpZW50SXNNdWx0aVJ1bnRpbWUobikmJiFzLnJ1bnRpbWVVdWlkTWVldHNNaW5pbXVtUnVudGltZVZlcnNpb24obi5ydW50aW1lVXVpZCxcIjE4Ljg3LjU2LjBcIik/dGhpcy5oYW5kbGVNdWx0aVJ1bnRpbWVMZWdhY3lDbGllbnQobik6dGhpcy5jaGVja0ZvckNsaWVudENvbm5lY3Rpb24obiksc3VwZXIucHJvY2Vzc0FjdGlvbihlLHQsbikpLGMuc2V0KHRoaXMsKCgpPT57cih0aGlzLG4pLmNsb3NlKCk7Y29uc3QgZT1kLnJlbW92YWxNYXAuZ2V0KHRoaXMpO2UmJmUoKX0pKSxpKHRoaXMsdCxuZXcgby5Qcm90ZWN0ZWRJdGVtcyhoLGwpKSx0aGlzLmNvbm5lY3RMaXN0ZW5lcj0oKT0+e30sdGhpcy5kaXNjb25uZWN0TGlzdGVuZXI9KCk9Pnt9LGkodGhpcyxlLFtdKSxpKHRoaXMsbix1KSx1LnJlY2VpdmUodGhpcy5wcm9jZXNzQWN0aW9uKX1nZXQgY29ubmVjdGlvbnMoKXtyZXR1cm5bLi4ucih0aGlzLGUpXX1zdGF0aWMgaGFuZGxlQ2xpZW50RGlzY29ubmVjdGlvbihlLHQpe2NvbnN0IG49ZS5jb25uZWN0aW9ucy5maW5kKChlPT5lLmVuZHBvaW50SWQ9PT10LmVuZHBvaW50SWQpKTtuP3IoZSxhKS5jYWxsKGUsbik6ZS5jb25uZWN0aW9ucy5maWx0ZXIoKGU9PmUudXVpZD09PXQudXVpZCYmZS5uYW1lPT09dC5uYW1lKSkuZm9yRWFjaChyKGUsYSkpLGUuZGlzY29ubmVjdExpc3RlbmVyKHQpfXN0YXRpYyBzZXRQcm92aWRlclJlbW92YWwoZSx0KXtkLnJlbW92YWxNYXAuc2V0KGUsdCl9ZGlzcGF0Y2goZSx0LGkpe3ZhciBvO2NvbnN0IHM9bnVsbCE9PShvPWUuZW5kcG9pbnRJZCkmJnZvaWQgMCE9PW8/bzp0aGlzLmdldEVuZHBvaW50SWRGb3JPcGVuRmluSWQoZSx0KTtyZXR1cm4gcyYmcih0aGlzLG4pLmlzRW5kcG9pbnRDb25uZWN0ZWQocyk/cih0aGlzLG4pLnNlbmQocyx0LGkpOlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihgQ2xpZW50IGNvbm5lY3Rpb24gd2l0aCBpZGVudGl0eSB1dWlkOiAke2UudXVpZH0gLyBuYW1lOiAke2UubmFtZX0gLyBlbmRwb2ludElkOiAke3N9IG5vIGxvbmdlciBjb25uZWN0ZWQuYCkpfWFzeW5jIHByb2Nlc3NDb25uZWN0aW9uKHQsbil7cmV0dXJuIHIodGhpcyxlKS5wdXNoKHQpLHRoaXMuY29ubmVjdExpc3RlbmVyKHQsbil9cHVibGlzaChlLHQpe3JldHVybiB0aGlzLmNvbm5lY3Rpb25zLm1hcCgoaT0+cih0aGlzLG4pLnNlbmQoaS5lbmRwb2ludElkLGUsdCkpKX1vbkNvbm5lY3Rpb24oZSl7dGhpcy5jb25uZWN0TGlzdGVuZXI9ZX1vbkRpc2Nvbm5lY3Rpb24oZSl7dGhpcy5kaXNjb25uZWN0TGlzdGVuZXI9ZX1hc3luYyBkZXN0cm95KCl7Y29uc3Qgbj1yKHRoaXMsdCkse2NoYW5uZWxOYW1lOm99PW4ucHJvdmlkZXJJZGVudGl0eTtpKHRoaXMsZSxbXSksYXdhaXQgbi53aXJlLnNlbmRBY3Rpb24oXCJkZXN0cm95LWNoYW5uZWxcIix7Y2hhbm5lbE5hbWU6b30pLHIodGhpcyxjKS5jYWxsKHRoaXMpfWNoZWNrRm9yQ2xpZW50Q29ubmVjdGlvbihlKXtpZighdGhpcy5pc0NsaWVudENvbm5lY3RlZChlKSl0aHJvdyBuZXcgRXJyb3IoYFRoaXMgYWN0aW9uIHdhcyBzZW50IGZyb20gYSBjbGllbnQgdGhhdCBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBwcm92aWRlci5cXG4gICAgICAgICAgICAgICAgICAgIENsaWVudCBJZGVudGl0eToge3V1aWQ6ICR7ZS51dWlkfSwgbmFtZTogJHtlLm5hbWV9LCBlbmRwb2ludElkOiAke2UuZW5kcG9pbnRJZH19YCl9aXNDbGllbnRDb25uZWN0ZWQoZSl7cmV0dXJuIGQuY2xpZW50SWRlbnRpdHlJbmNsdWRlc0VuZHBvaW50SWQoZSk/dGhpcy5jb25uZWN0aW9ucy5zb21lKCh0PT50LmVuZHBvaW50SWQ9PT1lLmVuZHBvaW50SWQmJnQudXVpZD09PWUudXVpZCYmdC5uYW1lPT09ZS5uYW1lKSk6dGhpcy5pc0xlZ2FjeUNsaWVudENvbm5lY3RlZChlKX1pc0xlZ2FjeUNsaWVudENvbm5lY3RlZChlKXtyZXR1cm4gdGhpcy5jb25uZWN0aW9ucy5zb21lKCh0PT50LnV1aWQ9PT1lLnV1aWQmJnQubmFtZT09PWUubmFtZSkpfWhhbmRsZU11bHRpUnVudGltZUxlZ2FjeUNsaWVudChlKXtpZighdGhpcy5pc0xlZ2FjeUNsaWVudENvbm5lY3RlZChlKSl0aHJvdyBuZXcgRXJyb3IoYFRoaXMgYWN0aW9uIHdhcyBzZW50IGZyb20gYSBjbGllbnQgdGhhdCBpcyBub3QgY29ubmVjdGVkIHRvIHRoZSBwcm92aWRlci4gQ2xpZW50IElkZW50aXR5OlxcbiAgICAgICAgICAgICAgICAgICAge3V1aWQ6ICR7ZS51dWlkfSwgbmFtZTogJHtlLm5hbWV9LCBlbmRwb2ludElkOiAke2UuZW5kcG9pbnRJZH19YCl9Z2V0RW5kcG9pbnRJZEZvck9wZW5GaW5JZChlLG4pe3ZhciBpO2NvbnN0IG89dGhpcy5jb25uZWN0aW9ucy5maWx0ZXIoKHQ9PnQubmFtZT09PWUubmFtZSYmdC51dWlkPT09ZS51dWlkKSk7aWYoby5sZW5ndGg+PTIpe2NvbnN0IGk9cih0aGlzLHQpLHt1dWlkOm8sbmFtZTpzfT1lLGE9bnVsbD09aT92b2lkIDA6aS5wcm92aWRlcklkZW50aXR5LnV1aWQsYz1udWxsPT1pP3ZvaWQgMDppLnByb3ZpZGVySWRlbnRpdHkubmFtZTtjb25zb2xlLndhcm4oYFdBUk5JTkc6IERpc3BhdGNoIGNhbGwgbWF5IGhhdmUgdW5pbnRlbmRlZCByZXN1bHRzLiBUaGUgXCJ0b1wiIGFyZ3VtZW50IG9mIHlvdXIgZGlzcGF0Y2ggY2FsbCBpcyBtaXNzaW5nIHRoZVxcbiAgICAgICAgICAgICAgICBcImVuZHBvaW50SWRcIiBwYXJhbWV0ZXIuIFRoZSBpZGVudGl0eSB5b3UgYXJlIGRpc3BhdGNoaW5nIHRvICh7dXVpZDogJHtvfSwgbmFtZTogJHtzfX0pXFxuICAgICAgICAgICAgICAgIGhhcyBtdWx0aXBsZSBjaGFubmVsQ2xpZW50cyBmb3IgdGhpcyBjaGFubmVsLiBZb3VyIGRpc3BhdGNoZWQgYWN0aW9uOiAoJHtufSkgZnJvbSB0aGUgcHJvdmlkZXI6XFxuICAgICAgICAgICAgICAgICh7dXVpZDogJHthfSwgbmFtZTogJHtjfX0pIHdpbGwgb25seSBiZSBwcm9jZXNzZWQgYnkgdGhlIG1vc3QgcmVjZW50bHktY3JlYXRlZCBjbGllbnQuYCl9cmV0dXJuIG51bGw9PT0oaT1vLnBvcCgpKXx8dm9pZCAwPT09aT92b2lkIDA6aS5lbmRwb2ludElkfXN0YXRpYyBjbGllbnRJZGVudGl0eUluY2x1ZGVzRW5kcG9pbnRJZChlKXtyZXR1cm4gdm9pZCAwIT09ZS5lbmRwb2ludElkfXN0YXRpYyBjbGllbnRJc011bHRpUnVudGltZShlKXtyZXR1cm4gdm9pZCAwIT09ZS5ydW50aW1lVXVpZH19cmV0dXJuIGU9bmV3IFdlYWtNYXAsdD1uZXcgV2Vha01hcCxuPW5ldyBXZWFrTWFwLGE9bmV3IFdlYWtNYXAsYz1uZXcgV2Vha01hcCxkLnJlbW92YWxNYXA9bmV3IFdlYWtNYXAsZH0pKCk7dC5DaGFubmVsUHJvdmlkZXI9YX0sODM0NzooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JbnRlckFwcFBheWxvYWQ9dm9pZCAwO2NvbnN0IGk9big2NDY1KSxyPW4oOTY1OSksbz1uKDMxMjcpLHM9big3NzIyKSxhPW4oNDk5OSk7Y2xhc3MgYyBleHRlbmRzIHIuQmFzZXtjb25zdHJ1Y3RvcihlKXtzdXBlcihlKSx0aGlzLmV2ZW50cz17c3Vic2NyaWJlckFkZGVkOlwic3Vic2NyaWJlci1hZGRlZFwiLHN1YnNjcmliZXJSZW1vdmVkOlwic3Vic2NyaWJlci1yZW1vdmVkXCJ9LHRoaXMucmVmQ291bnRlcj1uZXcgby5kZWZhdWx0LHRoaXMuQ2hhbm5lbD1uZXcgcy5DaGFubmVsKGUpLHRoaXMuZW1pdHRlcj1uZXcgaS5FdmVudEVtaXR0ZXIsZS5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKHRoaXMub25tZXNzYWdlLmJpbmQodGhpcykpLHRoaXMub249dGhpcy5lbWl0dGVyLm9uLmJpbmQodGhpcy5lbWl0dGVyKSx0aGlzLnJlbW92ZUFsbExpc3RlbmVycz10aGlzLmVtaXR0ZXIucmVtb3ZlQWxsTGlzdGVuZXJzLmJpbmQodGhpcy5lbWl0dGVyKX1wdWJsaXNoKGUsdCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicHVibGlzaC1tZXNzYWdlXCIse3RvcGljOmUsbWVzc2FnZTp0LHNvdXJjZVdpbmRvd05hbWU6dGhpcy5tZS5uYW1lfSkudGhlbigoKCk9Pnt9KSl9YXN5bmMgc2VuZChlLHQsbil7Y29uc3QgaT1hLnZhbGlkYXRlSWRlbnRpdHkoZSk7aWYoaSl0aHJvdyBuZXcgRXJyb3IoaSk7YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZW5kLW1lc3NhZ2VcIix7ZGVzdGluYXRpb25VdWlkOmUudXVpZCxkZXN0aW5hdGlvbldpbmRvd05hbWU6ZS5uYW1lLHRvcGljOnQsbWVzc2FnZTpuLHNvdXJjZVdpbmRvd05hbWU6dGhpcy5tZS5uYW1lfSl9c3Vic2NyaWJlKGUsdCxuKXtjb25zdCBpPXRoaXMuY3JlYXRlU3Vic2NyaXB0aW9uS2V5KGUudXVpZCxlLm5hbWV8fFwiKlwiLHQpO3JldHVybiB0aGlzLmVtaXR0ZXIub24oaSxuKSx0aGlzLnJlZkNvdW50ZXIuYWN0T25GaXJzdChpLCgoKT0+dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzdWJzY3JpYmVcIix7c291cmNlVXVpZDplLnV1aWQsc291cmNlV2luZG93TmFtZTplLm5hbWV8fFwiKlwiLHRvcGljOnQsZGVzdGluYXRpb25XaW5kb3dOYW1lOnRoaXMubWUubmFtZX0pKSwoKCk9PlByb21pc2UucmVzb2x2ZSgpKSl9dW5zdWJzY3JpYmUoZSx0LG4pe2NvbnN0IGk9ZS5uYW1lfHxcIipcIixyPXRoaXMuY3JlYXRlU3Vic2NyaXB0aW9uS2V5KGUudXVpZCxpLHQpO3JldHVybiB0aGlzLmVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIocixuKSx0aGlzLnJlZkNvdW50ZXIuYWN0T25MYXN0KHIsKCgpPT50aGlzLndpcmUuc2VuZEFjdGlvbihcInVuc3Vic2NyaWJlXCIse3NvdXJjZVV1aWQ6ZS51dWlkLHNvdXJjZVdpbmRvd05hbWU6aSx0b3BpYzp0LGRlc3RpbmF0aW9uV2luZG93TmFtZTp0aGlzLm1lLm5hbWV9KSksKCgpPT5uZXcgUHJvbWlzZSgoZT0+ZSkpLnRoZW4oKCgpPT57fSkpKSl9cHJvY2Vzc01lc3NhZ2UoZSl7Y29uc3R7cGF5bG9hZDp7bWVzc2FnZTp0LHNvdXJjZVdpbmRvd05hbWU6bixzb3VyY2VVdWlkOmksdG9waWM6cn19PWUsbz1bdGhpcy5jcmVhdGVTdWJzY3JpcHRpb25LZXkoaSxuLHIpLHRoaXMuY3JlYXRlU3Vic2NyaXB0aW9uS2V5KGksXCIqXCIsciksdGhpcy5jcmVhdGVTdWJzY3JpcHRpb25LZXkoXCIqXCIsXCIqXCIscildLHM9e3V1aWQ6aSxuYW1lOm59O28uZm9yRWFjaCgoZT0+e3RoaXMuZW1pdHRlci5lbWl0KGUsdCxzKX0pKX1lbWl0U3Vic2NyaXZlckV2ZW50KGUsdCl7Y29uc3R7cGF5bG9hZDp7dGFyZ2V0TmFtZTpuLHV1aWQ6aSx0b3BpYzpyfX09dCxvPXtuYW1lOm4sdXVpZDppLHRvcGljOnJ9O3RoaXMuZW1pdHRlci5lbWl0KGUsbyl9Y3JlYXRlU3Vic2NyaXB0aW9uS2V5KGUsdCxuKXtjb25zdCBpPXR8fFwiKlwiO2lmKCEoZSYmaSYmbikpdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyB1dWlkLCBuYW1lLCBvciB0b3BpYyBzdHJpbmdcIik7cmV0dXJuIGZ1bmN0aW9uKC4uLmUpe3JldHVybiBlLm1hcCgoZT0+QnVmZmVyLmZyb20oYCR7ZX1gKS50b1N0cmluZyhcImJhc2U2NFwiKSkpLmpvaW4oXCIvXCIpfShlLGksbil9b25tZXNzYWdlKGUpe2NvbnN0e2FjdGlvbjp0fT1lO3N3aXRjaCh0KXtjYXNlXCJwcm9jZXNzLW1lc3NhZ2VcIjp0aGlzLnByb2Nlc3NNZXNzYWdlKGUpO2JyZWFrO2Nhc2UgdGhpcy5ldmVudHMuc3Vic2NyaWJlckFkZGVkOnRoaXMuZW1pdFN1YnNjcml2ZXJFdmVudCh0aGlzLmV2ZW50cy5zdWJzY3JpYmVyQWRkZWQsZSk7YnJlYWs7Y2FzZSB0aGlzLmV2ZW50cy5zdWJzY3JpYmVyUmVtb3ZlZDp0aGlzLmVtaXRTdWJzY3JpdmVyRXZlbnQodGhpcy5ldmVudHMuc3Vic2NyaWJlclJlbW92ZWQsZSl9cmV0dXJuITB9fXQuZGVmYXVsdD1jLHQuSW50ZXJBcHBQYXlsb2FkPWNsYXNze319LDI5Nzc6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGk9big5NjU5KSxyPW4oMjA1Nyksbz1uKDcxMzgpLHM9KGUsLi4udCk9Pm5ldyBlKC4uLnQpO2NsYXNzIGEgZXh0ZW5kcyBpLkJhc2V7YXN5bmMgaW5pdChlLHQ9cyl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWluaXRcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj1hd2FpdCB0aGlzLmZpbi5JbnRlckFwcGxpY2F0aW9uQnVzLkNoYW5uZWwuY3JlYXRlKGBpbnRlcm9wLWJyb2tlci0ke2V9YCksaT1hd2FpdCB0aGlzLmZpbi5BcHBsaWNhdGlvbi5nZXRDdXJyZW50U3luYygpLmdldEluZm8oKTtyZXR1cm4gdChyLkludGVyb3BCcm9rZXIsdGhpcy53aXJlLG4saS5pbml0aWFsT3B0aW9ucy5pbnRlcm9wQnJva2VyQ29uZmlndXJhdGlvbnx8e30pfWNvbm5lY3RTeW5jKGUsdCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1jb25uZWN0LXN5bmNcIikuY2F0Y2goKGU9Pnt9KSksbmV3IG8uSW50ZXJvcENsaWVudCh0aGlzLndpcmUsZSx0KX19dC5kZWZhdWx0PWF9LDIwNTc6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuSW50ZXJvcEJyb2tlcj12b2lkIDA7Y29uc3QgaT1uKDk2NTkpLHI9big3MTE1KSxvPW4oMTc4Nyk7bGV0IHM9W3tpZDpcImdyZWVuXCIsZGlzcGxheU1ldGFkYXRhOntjb2xvcjpcIiMwMENDODhcIixuYW1lOlwiZ3JlZW5cIn19LHtpZDpcInB1cnBsZVwiLGRpc3BsYXlNZXRhZGF0YTp7Y29sb3I6XCIjOEM2MUZGXCIsbmFtZTpcInB1cnBsZVwifX0se2lkOlwib3JhbmdlXCIsZGlzcGxheU1ldGFkYXRhOntjb2xvcjpcIiNGRjhDNENcIixuYW1lOlwib3JhbmdlXCJ9fSx7aWQ6XCJyZWRcIixkaXNwbGF5TWV0YWRhdGE6e2NvbG9yOlwiI0ZGNUU2MFwiLG5hbWU6XCJyZWRcIn19LHtpZDpcInBpbmtcIixkaXNwbGF5TWV0YWRhdGE6e2NvbG9yOlwiI0ZGOEZCOFwiLG5hbWU6XCJwaW5rXCJ9fSx7aWQ6XCJ5ZWxsb3dcIixkaXNwbGF5TWV0YWRhdGE6e2NvbG9yOlwiI0U5RkY4RlwiLG5hbWU6XCJ5ZWxsb3dcIn19XTtjbGFzcyBhIGV4dGVuZHMgaS5CYXNle2NvbnN0cnVjdG9yKGUsdCxuKXtzdXBlcihlKSx0aGlzLmNoYW5uZWw9dCx0aGlzLmludGVyb3BDbGllbnRzPW5ldyBNYXAsdGhpcy5jb250ZXh0R3JvdXBzQnlJZD1uZXcgTWFwLG4uY29udGV4dEdyb3VwcyYmKHM9bi5jb250ZXh0R3JvdXBzKSx0aGlzLmludGVudENsaWVudE1hcD1uZXcgTWFwLHRoaXMubGFzdENvbnRleHRNYXA9bmV3IE1hcCx0aGlzLnNlc3Npb25Db250ZXh0R3JvdXBNYXA9bmV3IE1hcCx0aGlzLnNldENvbnRleHRHcm91cE1hcCgpLHRoaXMud2lyZUNoYW5uZWwodCl9c2V0Q29udGV4dCh7Y29udGV4dDplfSx0KXt0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtYnJva2VyLXNldC1jb250ZXh0XCIpLmNhdGNoKChlPT57fSkpO2NvbnN0IG49dGhpcy5nZXRDbGllbnRTdGF0ZSh0KTtpZighbnx8IW4uY29udGV4dEdyb3VwSWQpdGhyb3cgbj9uZXcgRXJyb3IoXCJZb3UgbXVzdCBqb2luIGEgY29udGV4dCBncm91cCBiZWZvcmUgeW91IGNhbiBzZXQgY29udGV4dC5cIik6bmV3IEVycm9yKGBDbGllbnQgd2l0aCBJZGVudGl0eTogJHt0LnV1aWR9ICR7dC5uYW1lfSBub3QgaW4gQ2xpZW50IFN0YXRlIE1hcGApO3tjb25zdHtjb250ZXh0R3JvdXBJZDp0fT1uO2lmKCF0aGlzLmNvbnRleHRHcm91cHNCeUlkLmhhcyh0KSl0aHJvdyBuZXcgRXJyb3IoYENsaWVudCBoYXMgYSBjb250ZXh0IGdyb3VwIHRoYXQgaXNuJ3QgaW4gdGhlIGNvbnRleHQgZ3JvdXAgbWFwcGluZzogJHt0fS5gKTtjb25zdCBpPWEuY2hlY2tDb250ZXh0SW50ZWdyaXR5KGUpO2lmKCExPT09aS5pc1ZhbGlkKXRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNldCBDb250ZXh0IC0gYmFkIENvbnRleHQuIFJlYXNvbjogJHtpLnJlYXNvbn0uIENvbnRleHQ6ICR7SlNPTi5zdHJpbmdpZnkoZSl9YCk7Y29uc3Qgcj10aGlzLmNvbnRleHRHcm91cHNCeUlkLmdldCh0KSxvPWUudHlwZTtyLnNldChvLGUpLHRoaXMubGFzdENvbnRleHRNYXAuc2V0KHQsbyksQXJyYXkuZnJvbSh0aGlzLmludGVyb3BDbGllbnRzLnZhbHVlcygpKS5maWx0ZXIoKGU9PmUuY29udGV4dEdyb3VwSWQ9PT10KSkuZm9yRWFjaCgodD0+e2Zvcihjb25zdFssbl1vZiB0LmNvbnRleHRIYW5kbGVycylhLmlzQ29udGV4dFR5cGVDb21wYXRpYmxlKG8sbi5jb250ZXh0VHlwZSkmJnRoaXMuaW52b2tlQ29udGV4dEhhbmRsZXIodC5jbGllbnRJZGVudGl0eSxuLmhhbmRsZXJJZCxlKX0pKX19Z2V0Q3VycmVudENvbnRleHQoZSx0KXt2YXIgbjt0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtYnJva2VyLWdldC1jdXJyZW50LWNvbnRleHRcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgaT10aGlzLmdldENsaWVudFN0YXRlKHQpO2lmKCEobnVsbD09aT92b2lkIDA6aS5jb250ZXh0R3JvdXBJZCkpdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgYmUgYSBtZW1iZXIgb2YgYSBjb250ZXh0IGdyb3VwIHRvIGNhbGwgZ2V0Q3VycmVudENvbnRleHRcIik7Y29uc3R7Y29udGV4dEdyb3VwSWQ6cn09aSxvPXRoaXMuY29udGV4dEdyb3Vwc0J5SWQuZ2V0KHIpLHM9dGhpcy5sYXN0Q29udGV4dE1hcC5nZXQociksYT1udWxsIT09KG49bnVsbD09ZT92b2lkIDA6ZS5jb250ZXh0VHlwZSkmJnZvaWQgMCE9PW4/bjpzO3JldHVybiBvJiZhP28uZ2V0KGEpOnZvaWQgMH1hc3luYyBqb2luQ29udGV4dEdyb3VwKHtjb250ZXh0R3JvdXBJZDplLHRhcmdldDp0fSxuKXtpZih0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtYnJva2VyLWpvaW4tY29udGV4dC1ncm91cFwiKS5jYXRjaCgoZT0+e30pKSx0KXthLmhhc0VuZHBvaW50SWQodCkmJmF3YWl0IHRoaXMuYWRkQ2xpZW50VG9Db250ZXh0R3JvdXAoe2NvbnRleHRHcm91cElkOmV9LHQpO2NvbnN0IG49dGhpcy5jaGFubmVsLmNvbm5lY3Rpb25zLmZpbHRlcigoZT0+ZS51dWlkPT09dC51dWlkJiZlLm5hbWU9PT10Lm5hbWUpKTtpZighbi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKGBHaXZlbiBJZGVudGl0eSAke3QudXVpZH0gJHt0Lm5hbWV9IGlzIG5vdCBjb25uZWN0ZWQgdG8gdGhlIEludGVyb3AgQnJva2VyLmApO24ubGVuZ3RoPjEmJmNvbnNvbGUud2FybihgTW9yZSB0aGFuIG9uZSBjb25uZWN0aW9uIGZvdW5kIGZvciBpZGVudGl0eSAke3QudXVpZH0gJHt0Lm5hbWV9YCk7Y29uc3QgaT1bXTtmb3IoY29uc3QgdCBvZiBuKWkucHVzaCh0aGlzLmFkZENsaWVudFRvQ29udGV4dEdyb3VwKHtjb250ZXh0R3JvdXBJZDplfSx0KSk7YXdhaXQgUHJvbWlzZS5hbGwoaSl9ZWxzZSBhd2FpdCB0aGlzLmFkZENsaWVudFRvQ29udGV4dEdyb3VwKHtjb250ZXh0R3JvdXBJZDplfSxuKX1hc3luYyBhZGRDbGllbnRUb0NvbnRleHRHcm91cCh7Y29udGV4dEdyb3VwSWQ6ZX0sdCl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWJyb2tlci1hZGQtY2xpZW50LXRvLWNvbnRleHQtZ3JvdXBcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj10aGlzLmdldENsaWVudFN0YXRlKHQpO2lmKCFuKXRocm93IG5ldyBFcnJvcihgQ2xpZW50IHdpdGggSWRlbnRpdHk6ICR7dC51dWlkfSAke3QubmFtZX0gbm90IGluIENsaWVudCBTdGF0ZSBNYXBgKTtpZighdGhpcy5nZXRDb250ZXh0R3JvdXBzKCkuZmluZCgodD0+dC5pZD09PWUpKSl0aHJvdyBuZXcgRXJyb3IoYEF0dGVtcHRpbmcgdG8gam9pbiBhIGNvbnRleHQgZ3JvdXAgdGhhdCBkb2VzIG5vdCBleGlzdDogJHtlfS4gWW91IG1heSBvbmx5IGpvaW4gZXhpc3RpbmcgY29udGV4dCBncm91cHMuYCk7aWYobi5jb250ZXh0R3JvdXBJZCE9PWUpe24uY29udGV4dEdyb3VwSWQ9ZSxhd2FpdCBhLnNldEN1cnJlbnRDb250ZXh0R3JvdXBJbkNsaWVudE9wdGlvbnModCxlKTtjb25zdCBpPXRoaXMuY29udGV4dEdyb3Vwc0J5SWQuZ2V0KGUpO2Zvcihjb25zdFssZV1vZiBuLmNvbnRleHRIYW5kbGVycyl7Y29uc3R7Y29udGV4dFR5cGU6bixoYW5kbGVySWQ6cn09ZTtpZih2b2lkIDA9PT1uKWkuZm9yRWFjaCgoKGUsbik9Pnt0aGlzLmludm9rZUNvbnRleHRIYW5kbGVyKHQscixlKX0pKTtlbHNlIGlmKGkuaGFzKG4pKXtjb25zdCBlPWkuZ2V0KG4pO2UmJnRoaXMuaW52b2tlQ29udGV4dEhhbmRsZXIodCxyLGUpfX19fWFzeW5jIHJlbW92ZUZyb21Db250ZXh0R3JvdXAoe3RhcmdldDplfSx0KXtpZih0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtYnJva2VyLXJlbW92ZS1mcm9tLWNvbnRleHQtZ3JvdXBcIikuY2F0Y2goKGU9Pnt9KSksZSl7YS5oYXNFbmRwb2ludElkKGUpJiZhd2FpdCB0aGlzLnJlbW92ZUNsaWVudEZyb21Db250ZXh0R3JvdXAoZSk7Y29uc3QgdD10aGlzLmNoYW5uZWwuY29ubmVjdGlvbnMuZmlsdGVyKCh0PT50LnV1aWQ9PT1lLnV1aWQmJnQubmFtZT09PWUubmFtZSkpO2lmKCF0Lmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoYE5vIGNvbm5lY3Rpb24gZm91bmQgZm9yIGdpdmVuIElkZW50aXR5ICR7ZS51dWlkfSAke2UubmFtZX1gKTt0Lmxlbmd0aD4xJiZjb25zb2xlLndhcm4oYE1vcmUgdGhhbiBvbmUgY29ubmVjdGlvbiBmb3VuZCBmb3IgaWRlbnRpdHkgJHtlLnV1aWR9ICR7ZS5uYW1lfWApO2NvbnN0IG49W107Zm9yKGNvbnN0IGUgb2YgdCluLnB1c2godGhpcy5yZW1vdmVDbGllbnRGcm9tQ29udGV4dEdyb3VwKGUpKTthd2FpdCBQcm9taXNlLmFsbChuKX1lbHNlIGF3YWl0IHRoaXMucmVtb3ZlQ2xpZW50RnJvbUNvbnRleHRHcm91cCh0KX1hc3luYyByZW1vdmVDbGllbnRGcm9tQ29udGV4dEdyb3VwKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1icm9rZXItcmVtb3ZlLWNsaWVudC1mcm9tLWNvbnRleHQtZ3JvdXBcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD10aGlzLmdldENsaWVudFN0YXRlKGUpO3QmJih0LmNvbnRleHRHcm91cElkPXZvaWQgMCksYXdhaXQgYS5zZXRDdXJyZW50Q29udGV4dEdyb3VwSW5DbGllbnRPcHRpb25zKGUsbnVsbCl9Z2V0Q29udGV4dEdyb3Vwcygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtYnJva2VyLWdldC1jb250ZXh0LWdyb3Vwc1wiKS5jYXRjaCgoZT0+e30pKSxzLm1hcCgoZT0+KHsuLi5lfSkpKX1nZXRJbmZvRm9yQ29udGV4dEdyb3VwKHtjb250ZXh0R3JvdXBJZDplfSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1icm9rZXItZ2V0LWluZm8tZm9yLWNvbnRleHQtZ3JvdXBcIikuY2F0Y2goKGU9Pnt9KSksdGhpcy5nZXRDb250ZXh0R3JvdXBzKCkuZmluZCgodD0+dC5pZD09PWUpKX1nZXRBbGxDbGllbnRzSW5Db250ZXh0R3JvdXAoe2NvbnRleHRHcm91cElkOmV9KXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWJyb2tlci1nZXQtYWxsLWNsaWVudHMtaW4tY29udGV4dC1ncm91cFwiKS5jYXRjaCgoZT0+e30pKSxBcnJheS5mcm9tKHRoaXMuaW50ZXJvcENsaWVudHMudmFsdWVzKCkpLmZpbHRlcigodD0+dC5jb250ZXh0R3JvdXBJZD09PWUpKS5tYXAoKGU9PmUuY2xpZW50SWRlbnRpdHkpKX1hc3luYyBoYW5kbGVGaXJlZEludGVudChlLHQpe2NvbnN0IG49by5nZW5lcmF0ZU92ZXJyaWRlV2FybmluZyhcImludGVyb3BDbGllbnQuZmlyZUludGVudFwiLFwiZmRjMy5yYWlzZUludGVudFwiLFwiSW50ZXJvcEJyb2tlci5oYW5kbGVGaXJlZEludGVudFwiLHQpO3Rocm93IGNvbnNvbGUud2FybihuKSxuZXcgRXJyb3Ioby5CUk9LRVJfRVJST1JTLmZpcmVJbnRlbnQpfWFzeW5jIHNldEludGVudFRhcmdldChlLHQpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1icm9rZXItc2V0LWludGVudC10YXJnZXRcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj10aGlzLmludGVudENsaWVudE1hcC5nZXQodC5uYW1lKSxpPWBpbnRlbnQtaGFuZGxlci0ke2UubmFtZX1gO2lmKG4pe2NvbnN0IHQ9bi5nZXQoaSk7aWYodCl7aWYodC5wZW5kaW5nSW50ZW50cy5wdXNoKGUpLHQuY2xpZW50SWRlbnRpdHkmJnQuaXNSZWFkeSl7Y29uc3R7Y2xpZW50SWRlbnRpdHk6ZSxwZW5kaW5nSW50ZW50czpufT10O3RyeXtjb25zdCByPW5bbi5sZW5ndGgtMV07YXdhaXQgdGhpcy5jaGFubmVsLmRpc3BhdGNoKGUsaSxyKSx0LnBlbmRpbmdJbnRlbnRzPVtdfWNhdGNoKG4pe2NvbnNvbGUuZXJyb3IoYEVycm9yIGludm9raW5nIGludGVudCBoYW5kbGVyIGZvciBjbGllbnQgJHtlLnV1aWR9LyR7ZS5uYW1lfS8ke2UuZW5kcG9pbnRJZH1gKSx0LmlzUmVhZHk9ITF9fX1lbHNlIG4uc2V0KGkse2lzUmVhZHk6ITEscGVuZGluZ0ludGVudHM6W2VdfSl9ZWxzZXt0aGlzLmludGVudENsaWVudE1hcC5zZXQodC5uYW1lLG5ldyBNYXApO2NvbnN0IG49dGhpcy5pbnRlbnRDbGllbnRNYXAuZ2V0KHQubmFtZSk7biYmbi5zZXQoaSx7aXNSZWFkeTohMSxwZW5kaW5nSW50ZW50czpbZV19KX19YXN5bmMgaGFuZGxlSW5mb0ZvckludGVudChlLHQpe2NvbnN0IG49by5nZW5lcmF0ZU92ZXJyaWRlV2FybmluZyhcImludGVyb3BDbGllbnQuZ2V0SW5mb0ZvckludGVudFwiLFwiZmRjMy5maW5kSW50ZW50XCIsXCJJbnRlcm9wQnJva2VyLmhhbmRsZUluZm9Gb3JJbnRlbnRcIix0KTt0aHJvdyBjb25zb2xlLndhcm4obiksbmV3IEVycm9yKG8uQlJPS0VSX0VSUk9SUy5nZXRJbmZvRm9ySW50ZW50KX1hc3luYyBoYW5kbGVJbmZvRm9ySW50ZW50c0J5Q29udGV4dChlLHQpe2NvbnN0IG49by5nZW5lcmF0ZU92ZXJyaWRlV2FybmluZyhcImludGVyb3BDbGllbnQuZ2V0SW5mb0ZvckludGVudHNCeUNvbnRleHRcIixcImZkYzMuZmluZEludGVudHNCeUNvbnRleHRcIixcIkludGVyb3BCcm9rZXIuaGFuZGxlSW5mb0ZvckludGVudHNCeUNvbnRleHRcIix0KTt0aHJvdyBjb25zb2xlLndhcm4obiksbmV3IEVycm9yKG8uQlJPS0VSX0VSUk9SUy5nZXRJbmZvRm9ySW50ZW50c0J5Q29udGV4dCl9YXN5bmMgaGFuZGxlRmlyZWRJbnRlbnRGb3JDb250ZXh0KGUsdCl7Y29uc3Qgbj1vLmdlbmVyYXRlT3ZlcnJpZGVXYXJuaW5nKFwiaW50ZXJvcENsaWVudC5maXJlSW50ZW50Rm9yQ29udGV4dFwiLFwiZmRjMy5yYWlzZUludGVudEZvckNvbnRleHRcIixcIkludGVyb3BCcm9rZXIuaGFuZGxlRmlyZWRJbnRlbnRGb3JDb250ZXh0XCIsdCk7dGhyb3cgY29uc29sZS53YXJuKG4pLG5ldyBFcnJvcihvLkJST0tFUl9FUlJPUlMuZmlyZUludGVudEZvckNvbnRleHQpfWRlY29yYXRlU25hcHNob3QoZSl7cmV0dXJuey4uLmUsaW50ZXJvcFNuYXBzaG90RGV0YWlsczp7Y29udGV4dEdyb3VwU3RhdGVzOnRoaXMuZ2V0Q29udGV4dEdyb3VwU3RhdGVzKCl9fX1hcHBseVNuYXBzaG90KGUsdCl7dmFyIG47Y29uc3QgaT1udWxsPT09KG49bnVsbD09ZT92b2lkIDA6ZS5pbnRlcm9wU25hcHNob3REZXRhaWxzKXx8dm9pZCAwPT09bj92b2lkIDA6bi5jb250ZXh0R3JvdXBTdGF0ZXM7aSYmKChudWxsPT10P3ZvaWQgMDp0LmNsb3NlRXhpc3RpbmdXaW5kb3dzKXx8dGhpcy51cGRhdGVFeGlzdGluZ0NsaWVudHMoaSksdGhpcy5yZWh5ZHJhdGVDb250ZXh0R3JvdXBTdGF0ZXMoaSkpfXVwZGF0ZUV4aXN0aW5nQ2xpZW50cyhlKXt0aGlzLmludGVyb3BDbGllbnRzLmZvckVhY2goKHQ9Pntjb25zdHtjbGllbnRJZGVudGl0eTpuLGNvbnRleHRHcm91cElkOmksY29udGV4dEhhbmRsZXJzOnJ9PXQ7aWYoaSl7Y29uc3QgdD1lW2ldO2Zvcihjb25zdFssZV1vZiBPYmplY3QuZW50cmllcyh0KSlyLmZvckVhY2goKHQ9Pntjb25zdHtoYW5kbGVySWQ6aSxjb250ZXh0VHlwZTpyfT10O2EuaXNDb250ZXh0VHlwZUNvbXBhdGlibGUoZS50eXBlLHIpJiZ0aGlzLmludm9rZUNvbnRleHRIYW5kbGVyKG4saSxlKX0pKX19KSl9Z2V0Q29udGV4dEdyb3VwU3RhdGVzKCl7cmV0dXJuIGEudG9PYmplY3QodGhpcy5jb250ZXh0R3JvdXBzQnlJZCl9cmVoeWRyYXRlQ29udGV4dEdyb3VwU3RhdGVzKGUpe2NvbnN0IHQ9T2JqZWN0LmVudHJpZXMoZSk7Zm9yKGNvbnN0W2Usbl1vZiB0KXtjb25zdCB0PU9iamVjdC5lbnRyaWVzKG4pO2Zvcihjb25zdFtuLGldb2YgdCl0aGlzLmNvbnRleHRHcm91cHNCeUlkLmhhcyhlKT90aGlzLmNvbnRleHRHcm91cHNCeUlkLmdldChlKS5zZXQobixpKTpjb25zb2xlLndhcm4oYEF0dGVtcHRpbmcgdG8gc2V0IGEgY29udGV4dCBncm91cCB0aGF0IGlzbid0IGluIHRoZSBjb250ZXh0IGdyb3VwIG1hcHBpbmcuIFNraXBwaW5nIGNvbnRleHQgZ3JvdXAgcmVoeWRyYXRpb24gZm9yOiAke2V9YCl9fWNvbnRleHRIYW5kbGVyUmVnaXN0ZXJlZCh7Y29udGV4dFR5cGU6ZSxoYW5kbGVySWQ6dH0sbil7Y29uc3QgaT17Y29udGV4dFR5cGU6ZSxoYW5kbGVySWQ6dH0scj10aGlzLmdldENsaWVudFN0YXRlKG4pO2lmKG51bGw9PXJ8fHIuY29udGV4dEhhbmRsZXJzLnNldCh0LGkpLHImJnIuY29udGV4dEdyb3VwSWQpe2NvbnN0e2NvbnRleHRHcm91cElkOml9PXIsbz10aGlzLmNvbnRleHRHcm91cHNCeUlkLmdldChpKTtpZih2b2lkIDA9PT1lKW8uZm9yRWFjaCgoKGUsaSk9Pnt0aGlzLmludm9rZUNvbnRleHRIYW5kbGVyKG4sdCxlKX0pKTtlbHNlIGlmKG8uaGFzKGUpKXtjb25zdCBpPW8uZ2V0KGUpO2kmJnRoaXMuaW52b2tlQ29udGV4dEhhbmRsZXIobix0LGkpfX19YXN5bmMgaW50ZW50SGFuZGxlclJlZ2lzdGVyZWQoZSx0KXtjb25zdHtoYW5kbGVySWQ6bn09ZSxpPXRoaXMuaW50ZW50Q2xpZW50TWFwLmdldCh0Lm5hbWUpLHI9bnVsbD09aT92b2lkIDA6aS5nZXQobik7aWYoaSlpZihyKXtjb25zdHtwZW5kaW5nSW50ZW50czplfT1yO3IuY2xpZW50SWRlbnRpdHk9dCxyLmlzUmVhZHk9ITA7dHJ5e2lmKGUubGVuZ3RoPjApe2NvbnN0IGk9ZVtlLmxlbmd0aC0xXTthd2FpdCB0aGlzLmNoYW5uZWwuZGlzcGF0Y2godCxuLGkpLHIucGVuZGluZ0ludGVudHM9W119fWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoYEVycm9yIGludm9raW5nIGludGVudCBoYW5kbGVyOiAke259IGZvciBjbGllbnQgJHt0LnV1aWR9LyR7dC5uYW1lfS8ke3QuZW5kcG9pbnRJZH1gKX19ZWxzZSBpLnNldChuLHtpc1JlYWR5OiEwLHBlbmRpbmdJbnRlbnRzOltdLGNsaWVudElkZW50aXR5OnR9KTtlbHNle3RoaXMuaW50ZW50Q2xpZW50TWFwLnNldCh0Lm5hbWUsbmV3IE1hcCk7Y29uc3QgZT10aGlzLmludGVudENsaWVudE1hcC5nZXQodC5uYW1lKTtlJiZlLnNldChuLHtpc1JlYWR5OiEwLHBlbmRpbmdJbnRlbnRzOltdLGNsaWVudElkZW50aXR5OnR9KX19aW52b2tlQ29udGV4dEhhbmRsZXIoZSx0LG4pe3RoaXMuY2hhbm5lbC5kaXNwYXRjaChlLHQsbikuY2F0Y2goKGk9Pntjb25zb2xlLmVycm9yKGBFcnJvciBpbnZva2luZyBjb250ZXh0IGhhbmRsZXIgJHt0fSBmb3IgY29udGV4dCB0eXBlICR7bi50eXBlfSBpbiBjbGllbnQgJHtlLnV1aWR9LyR7ZS5uYW1lfS8ke2UuZW5kcG9pbnRJZH1gLGkpfSkpfXJlbW92ZUNvbnRleHRIYW5kbGVyKHtoYW5kbGVySWQ6ZX0sdCl7Y29uc3Qgbj10aGlzLmdldENsaWVudFN0YXRlKHQpO24mJm4uY29udGV4dEhhbmRsZXJzLmRlbGV0ZShlKX1oYW5kbGVKb2luU2Vzc2lvbkNvbnRleHRHcm91cCh7c2Vzc2lvbkNvbnRleHRHcm91cElkOmV9LHQpe3RyeXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gam9pbiBzZXNzaW9uIGNvbnRleHQgZ3JvdXA6IG11c3Qgc3BlY2lmeSBncm91cCBpZC5cIik7Y29uc3Qgbj10aGlzLnNlc3Npb25Db250ZXh0R3JvdXBNYXAuZ2V0KGUpO2lmKG4pbi5yZWdpc3Rlck5ld0NsaWVudCh0KTtlbHNle2NvbnN0IG49bmV3IHIuZGVmYXVsdCh0aGlzLmNoYW5uZWwsZSk7bi5yZWdpc3Rlck5ld0NsaWVudCh0KSx0aGlzLnNlc3Npb25Db250ZXh0R3JvdXBNYXAuc2V0KGUsbil9cmV0dXJue2hhc0NvbmZsaWN0OnRoaXMuY29udGV4dEdyb3Vwc0J5SWQuaGFzKGUpfX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoZSl9fWdldENsaWVudFN0YXRlKGUpe3JldHVybiB0aGlzLmludGVyb3BDbGllbnRzLmdldChlLmVuZHBvaW50SWQpfXN0YXRpYyB0b09iamVjdChlKXtjb25zdCB0PU9iamVjdC5mcm9tRW50cmllcyhlKSxuPXt9O3JldHVybiBPYmplY3QuZW50cmllcyh0KS5mb3JFYWNoKCgoW2UsdF0pPT57Y29uc3QgaT1PYmplY3QuZnJvbUVudHJpZXModCk7bltlXT1pfSkpLG59c3RhdGljIGNoZWNrQ29udGV4dEludGVncml0eShlKXtpZighZSlyZXR1cm57aXNWYWxpZDohMSxyZWFzb246XCJObyBjb250ZXh0IHN1cHBsaWVkXCJ9O2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlKXJldHVybntpc1ZhbGlkOiExLHJlYXNvbjpcIkNvbnRleHQgbXVzdCBiZSBhbiBPYmplY3RcIn07aWYoIWUudHlwZSlyZXR1cm57aXNWYWxpZDohMSxyZWFzb246XCJDb250ZXh0IG11c3QgaGF2ZSBhIHR5cGUgcHJvcGVydHlcIn07aWYoZS5pZCYmXCJvYmplY3RcIiE9dHlwZW9mIGUuaWQpcmV0dXJue2lzVmFsaWQ6ITEscmVhc29uOlwiQ29udGV4dCBpZCBtdXN0IGJlIGFuIE9iamVjdCBwb3B1bGF0ZWQgd2l0aCBrZXktdmFsdWUgaWRlbnRpZmllcnMgKGlmIHNldClcIn07aWYoZS5pZCl7Y29uc3R7aWQ6dH09ZSxuPU9iamVjdC5rZXlzKHQpO2xldCBpPSExO2lmKCFuLmxlbmd0aClyZXR1cm57aXNWYWxpZDohMSxyZWFzb246XCJDb250ZXh0IGlkIG11c3QgaGF2ZSBhdCBsZWFzdCBvbmUga2V5LXZhbHVlIGlkZW50aWZpZXJcIn07aWYobi5mb3JFYWNoKChlPT57XCJzdHJpbmdcIj09dHlwZW9mIGUmJlwic3RyaW5nXCI9PXR5cGVvZiB0W2VdfHwoaT0hMCl9KSksaSlyZXR1cm57aXNWYWxpZDohMSxyZWFzb246XCJDb250ZXh0IGlkIGtleS12YWx1ZSBpZGVudGlmaWVycyBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nXCJ9fXJldHVybiBlLm5hbWUmJlwic3RyaW5nXCIhPXR5cGVvZiBlLm5hbWU/e2lzVmFsaWQ6ITEscmVhc29uOlwiQ29udGV4dCBuYW1lIG11c3QgYmUgb2Ygc3RyaW5nIHR5cGUgKGlmIHNldClcIn06e2lzVmFsaWQ6ITB9fXN0YXRpYyBoYXNFbmRwb2ludElkKGUpe3JldHVybiB2b2lkIDAhPT1lLmVuZHBvaW50SWR9c3RhdGljIGlzQ29udGV4dFR5cGVDb21wYXRpYmxlKGUsdCl7cmV0dXJuIHZvaWQgMD09PXR8fGU9PT10fXNldENvbnRleHRHcm91cE1hcCgpe2Zvcihjb25zdCBlIG9mIHRoaXMuZ2V0Q29udGV4dEdyb3VwcygpKXRoaXMuY29udGV4dEdyb3Vwc0J5SWQuc2V0KGUuaWQsbmV3IE1hcCl9c3RhdGljIGFzeW5jIHNldEN1cnJlbnRDb250ZXh0R3JvdXBJbkNsaWVudE9wdGlvbnMoZSx0KXtjb25zdCBuPWF3YWl0IGZpbi5TeXN0ZW0uZ2V0RW50aXR5SW5mbyhlLnV1aWQsZS5uYW1lKTtsZXQgaTtcInZpZXdcIj09PW4uZW50aXR5VHlwZT9pPWF3YWl0IGZpbi5WaWV3LndyYXAoZSk6XCJ3aW5kb3dcIj09PW4uZW50aXR5VHlwZSYmKGk9YXdhaXQgZmluLldpbmRvdy53cmFwKGUpKSxpP2F3YWl0IGkudXBkYXRlT3B0aW9ucyh7aW50ZXJvcDp7Y3VycmVudENvbnRleHRHcm91cDp0fX0pOmNvbnNvbGUud2FybihgU2V0dGluZyBDdXJyZW50IENvbnRleHQgR3JvdXA6IEVudGl0eSB3aXRoIGlkZW50aXR5ICR7ZS51dWlkfSwgJHtlLm5hbWV9IGlzIG5vdCBhIHdpbmRvdyBvciB2aWV3LiBJdCBpcyBhICR7bi5lbnRpdHlUeXBlfSBpbnN0ZWFkLmApfXdpcmVDaGFubmVsKGUpe2Uub25Db25uZWN0aW9uKCgoZSx0KT0+e2lmKCF0aGlzLmlzQ29ubmVjdGlvbkF1dGhvcml6ZWQoZSx0KSl0aHJvdyBuZXcgRXJyb3IoYENvbm5lY3Rpb24gbm90IGF1dGhvcml6ZWQgZm9yICR7ZS51dWlkfSwgJHtlLm5hbWV9YCk7aWYoIWUuZW5kcG9pbnRJZCl0aHJvdyBuZXcgRXJyb3IoXCJWZXJzaW9uIHRvbyBvbGQgdG8gYmUgY29tcGF0aWJsZSB3aXRoIEludGVyb3AuIFBsZWFzZSB1cGdyYWRlIHlvdXIgcnVudGltZSB0byBhIG1vcmUgcmVjZW50IHZlcnNpb24uXCIpO2NvbnN0IG49e2NvbnRleHRHcm91cElkOnZvaWQgMCxjb250ZXh0SGFuZGxlcnM6bmV3IE1hcCxjbGllbnRJZGVudGl0eTplfTsobnVsbD09dD92b2lkIDA6dC5jdXJyZW50Q29udGV4dEdyb3VwKSYmdGhpcy5jb250ZXh0R3JvdXBzQnlJZC5oYXModC5jdXJyZW50Q29udGV4dEdyb3VwKSYmKG4uY29udGV4dEdyb3VwSWQ9bnVsbD09dD92b2lkIDA6dC5jdXJyZW50Q29udGV4dEdyb3VwKSx0aGlzLmludGVyb3BDbGllbnRzLnNldChlLmVuZHBvaW50SWQsbil9KSksZS5vbkRpc2Nvbm5lY3Rpb24oKGU9Pnt0aGlzLmludGVyb3BDbGllbnRzLmRlbGV0ZShlLmVuZHBvaW50SWQpO2NvbnN0IHQ9dGhpcy5pbnRlbnRDbGllbnRNYXAuZ2V0KGUubmFtZSk7dCYmZS51dWlkPT09ZmluLm1lLmlkZW50aXR5LnV1aWQmJnQuZm9yRWFjaCgoZT0+e2UuaXNSZWFkeT0hMX0pKSx0aGlzLnNlc3Npb25Db250ZXh0R3JvdXBNYXAuZm9yRWFjaCgodD0+e3Qub25EaXNjb25uZWN0aW9uKGUpfSkpfSkpLGUuYmVmb3JlQWN0aW9uKCgoZSx0LG4pPT57aWYoIXRoaXMuaXNBY3Rpb25BdXRob3JpemVkKGUsdCxuKSl0aHJvdyBuZXcgRXJyb3IoYEFjdGlvbiAoJHtlfSkgbm90IGF1dGhvcml6ZWQgZm9yICR7bi51dWlkfSwgJHtuLm5hbWV9YCk7Y29uc29sZS5sb2coZSx0LG4pfSkpLGUuYWZ0ZXJBY3Rpb24oY29uc29sZS5sb2cpLGUucmVnaXN0ZXIoXCJzZXRDb250ZXh0XCIsdGhpcy5zZXRDb250ZXh0LmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJmaXJlSW50ZW50XCIsdGhpcy5oYW5kbGVGaXJlZEludGVudC5iaW5kKHRoaXMpKSxlLnJlZ2lzdGVyKFwiZ2V0Q3VycmVudENvbnRleHRcIix0aGlzLmdldEN1cnJlbnRDb250ZXh0LmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJnZXRJbmZvRm9ySW50ZW50XCIsdGhpcy5oYW5kbGVJbmZvRm9ySW50ZW50LmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJnZXRJbmZvRm9ySW50ZW50c0J5Q29udGV4dFwiLHRoaXMuaGFuZGxlSW5mb0ZvckludGVudHNCeUNvbnRleHQuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcImZpcmVJbnRlbnRGb3JDb250ZXh0XCIsdGhpcy5oYW5kbGVGaXJlZEludGVudEZvckNvbnRleHQuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcImdldENvbnRleHRHcm91cHNcIix0aGlzLmdldENvbnRleHRHcm91cHMuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcImpvaW5Db250ZXh0R3JvdXBcIix0aGlzLmpvaW5Db250ZXh0R3JvdXAuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcInJlbW92ZUZyb21Db250ZXh0R3JvdXBcIix0aGlzLnJlbW92ZUZyb21Db250ZXh0R3JvdXAuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcImdldEFsbENsaWVudHNJbkNvbnRleHRHcm91cFwiLHRoaXMuZ2V0QWxsQ2xpZW50c0luQ29udGV4dEdyb3VwLmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJnZXRJbmZvRm9yQ29udGV4dEdyb3VwXCIsdGhpcy5nZXRJbmZvRm9yQ29udGV4dEdyb3VwLmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJjb250ZXh0SGFuZGxlclJlZ2lzdGVyZWRcIix0aGlzLmNvbnRleHRIYW5kbGVyUmVnaXN0ZXJlZC5iaW5kKHRoaXMpKSxlLnJlZ2lzdGVyKFwiaW50ZW50SGFuZGxlclJlZ2lzdGVyZWRcIix0aGlzLmludGVudEhhbmRsZXJSZWdpc3RlcmVkLmJpbmQodGhpcykpLGUucmVnaXN0ZXIoXCJyZW1vdmVDb250ZXh0SGFuZGxlclwiLHRoaXMucmVtb3ZlQ29udGV4dEhhbmRsZXIuYmluZCh0aGlzKSksZS5yZWdpc3RlcihcInNlc3Npb25Db250ZXh0R3JvdXA6Y3JlYXRlSWZOZWVkZWRcIix0aGlzLmhhbmRsZUpvaW5TZXNzaW9uQ29udGV4dEdyb3VwLmJpbmQodGhpcykpfWFzeW5jIGlzQ29ubmVjdGlvbkF1dGhvcml6ZWQoZSx0KXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWJyb2tlci1pcy1jb25uZWN0aW9uLWF1dGhvcml6ZWRcIikuY2F0Y2goKGU9Pnt9KSksITB9YXN5bmMgaXNBY3Rpb25BdXRob3JpemVkKGUsdCxuKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWJyb2tlci1pcy1hY3Rpb24tYXV0aG9yaXplZFwiKS5jYXRjaCgoZT0+e30pKSwhMH19dC5JbnRlcm9wQnJva2VyPWF9LDcxMzg6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHIsbz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRTZXR8fGZ1bmN0aW9uKGUsdCxuKXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuc2V0KGUsbiksbn0scz10aGlzJiZ0aGlzLl9fY2xhc3NQcml2YXRlRmllbGRHZXR8fGZ1bmN0aW9uKGUsdCl7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LmdldChlKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5JbnRlcm9wQ2xpZW50PXZvaWQgMDtjb25zdCBhPW4oOTY1OSksYz1uKDgyMiksZD1uKDE3ODcpO2NsYXNzIGggZXh0ZW5kcyBhLkJhc2V7Y29uc3RydWN0b3IoZSx0LG4pe3N1cGVyKGUpLGkuc2V0KHRoaXMsdm9pZCAwKSxyLnNldCh0aGlzLHZvaWQgMCksbyh0aGlzLHIsbmV3IE1hcCksbyh0aGlzLGksdGhpcy53aXJlLmVudmlyb25tZW50LndoZW5SZWFkeSgpLnRoZW4oKCgpPT50aGlzLmZpbi5JbnRlckFwcGxpY2F0aW9uQnVzLkNoYW5uZWwuY29ubmVjdChgaW50ZXJvcC1icm9rZXItJHt0fWAse3BheWxvYWQ6bn0pKSkpfWFzeW5jIHNldENvbnRleHQoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1jbGllbnQtc2V0LWNvbnRleHRcIikuY2F0Y2goKGU9Pnt9KSksKGF3YWl0IHModGhpcyxpKSkuZGlzcGF0Y2goXCJzZXRDb250ZXh0XCIse2NvbnRleHQ6ZX0pfWFzeW5jIGFkZENvbnRleHRIYW5kbGVyKGUsdCl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1hZGQtY29udGV4dC1oYW5kbGVyXCIpLmNhdGNoKChlPT57fSkpO2NvbnN0IG49YXdhaXQgcyh0aGlzLGkpO2xldCByO3Q/KHI9YGludm9rZUNvbnRleHRIYW5kbGVyLSR7dH0tJHtkLmdlbmVyYXRlSWQoKX1gLGNvbnNvbGUud2FybihgV2FybmluZzogQnkgcHJvdmlkaW5nIGEgY29udGV4dFR5cGUgKCR7dH0pLCB5b3UgYXJlIHVzaW5nIHRoZSBleHBlcmltZW50YWwgYWRkQ29udGV4dEhhbmRsZXIuIFRvIGF2b2lkIGlzc3VlcywgbWFrZSBzdXJlIHlvdSBhcmUgYWRkaW5nIHlvdXIgY29udGV4dCBoYW5kbGVycyBhdCB0aGUgdG9wIGxldmVsIGluIHlvdXIgYXBwbGljYXRpb24uYCkpOnI9XCJpbnZva2VDb250ZXh0SGFuZGxlclwiO2NvbnN0IG89ZC53cmFwQ29udGV4dEhhbmRsZXIoZSxyKTtyZXR1cm4gbi5yZWdpc3RlcihyLG8pLGF3YWl0IG4uZGlzcGF0Y2goXCJjb250ZXh0SGFuZGxlclJlZ2lzdGVyZWRcIix7aGFuZGxlcklkOnIsY29udGV4dFR5cGU6dH0pLHt1bnN1YnNjcmliZTphc3luYygpPT57bi5yZW1vdmUociksYXdhaXQgbi5kaXNwYXRjaChcInJlbW92ZUNvbnRleHRIYW5kbGVyXCIse2hhbmRsZXJJZDpyfSl9fX1hc3luYyBnZXRDb250ZXh0R3JvdXBzKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1jbGllbnQtZ2V0LWNvbnRleHQtZ3JvdXBzXCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCBzKHRoaXMsaSkpLmRpc3BhdGNoKFwiZ2V0Q29udGV4dEdyb3Vwc1wiKX1hc3luYyBqb2luQ29udGV4dEdyb3VwKGUsdCl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1qb2luLWNvbnRleHQtZ3JvdXBcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj1hd2FpdCBzKHRoaXMsaSk7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwiTm8gY29udGV4dEdyb3VwSWQgc3BlY2lmaWVkIGZvciBqb2luQ29udGV4dEdyb3VwLlwiKTtyZXR1cm4gbi5kaXNwYXRjaChcImpvaW5Db250ZXh0R3JvdXBcIix7Y29udGV4dEdyb3VwSWQ6ZSx0YXJnZXQ6dH0pfWFzeW5jIHJlbW92ZUZyb21Db250ZXh0R3JvdXAoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1jbGllbnQtcmVtb3ZlLWZyb20tY29udGV4dC1ncm91cFwiKS5jYXRjaCgoZT0+e30pKSwoYXdhaXQgcyh0aGlzLGkpKS5kaXNwYXRjaChcInJlbW92ZUZyb21Db250ZXh0R3JvdXBcIix7dGFyZ2V0OmV9KX1hc3luYyBnZXRBbGxDbGllbnRzSW5Db250ZXh0R3JvdXAoZSl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1nZXQtYWxsLWNsaWVudHMtaW4tY29udGV4dC1ncm91cFwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PWF3YWl0IHModGhpcyxpKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBjb250ZXh0R3JvdXBJZCBzcGVjaWZpZWQgZm9yIGdldEFsbENsaWVudHNJbkNvbnRleHRHcm91cC5cIik7cmV0dXJuIHQuZGlzcGF0Y2goXCJnZXRBbGxDbGllbnRzSW5Db250ZXh0R3JvdXBcIix7Y29udGV4dEdyb3VwSWQ6ZX0pfWFzeW5jIGdldEluZm9Gb3JDb250ZXh0R3JvdXAoZSl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1nZXQtaW5mby1mb3ItY29udGV4dC1ncm91cFwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PWF3YWl0IHModGhpcyxpKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBjb250ZXh0R3JvdXBJZCBzcGVjaWZpZWQgZm9yIGdldEluZm9Gb3JDb250ZXh0R3JvdXAuXCIpO3JldHVybiB0LmRpc3BhdGNoKFwiZ2V0SW5mb0ZvckNvbnRleHRHcm91cFwiLHtjb250ZXh0R3JvdXBJZDplfSl9YXN5bmMgZmlyZUludGVudChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1maXJlLWludGVudFwiKS5jYXRjaCgoZT0+e30pKSwoYXdhaXQgcyh0aGlzLGkpKS5kaXNwYXRjaChcImZpcmVJbnRlbnRcIixlKX1hc3luYyByZWdpc3RlckludGVudEhhbmRsZXIoZSx0KXt0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3AtY2xpZW50LXJlZ2lzdGVyLWludGVudC1oYW5kbGVyXCIpLmNhdGNoKChlPT57fSkpO2NvbnN0IG49YXdhaXQgcyh0aGlzLGkpLHI9YGludGVudC1oYW5kbGVyLSR7dH1gLG89dGhpcy53cmFwSW50ZW50SGFuZGxlcihlLHIpO3RyeXthd2FpdCBuLnJlZ2lzdGVyKHIsbyksYXdhaXQgbi5kaXNwYXRjaChcImludGVudEhhbmRsZXJSZWdpc3RlcmVkXCIse2hhbmRsZXJJZDpyfSl9Y2F0Y2goZSl7dGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIHJlZ2lzdGVyIGludGVudCBoYW5kbGVyXCIpfXJldHVybnt1bnN1YnNjcmliZTphc3luYygpPT57bi5yZW1vdmUocil9fX1hc3luYyBnZXRDdXJyZW50Q29udGV4dChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1nZXQtY3VycmVudC1jb250ZXh0XCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCBzKHRoaXMsaSkpLmRpc3BhdGNoKFwiZ2V0Q3VycmVudENvbnRleHRcIix7Y29udGV4dFR5cGU6ZX0pfWFzeW5jIGdldEluZm9Gb3JJbnRlbnQoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW50ZXJvcC1jbGllbnQtZ2V0LWluZm8tZm9yLWludGVudFwiKS5jYXRjaCgoZT0+e30pKSwoYXdhaXQgcyh0aGlzLGkpKS5kaXNwYXRjaChcImdldEluZm9Gb3JJbnRlbnRcIixlKX1hc3luYyBnZXRJbmZvRm9ySW50ZW50c0J5Q29udGV4dChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1nZXQtaW5mby1mb3ItaW50ZW50cy1ieS1jb250ZXh0XCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCBzKHRoaXMsaSkpLmRpc3BhdGNoKFwiZ2V0SW5mb0ZvckludGVudHNCeUNvbnRleHRcIixlKX1hc3luYyBmaXJlSW50ZW50Rm9yQ29udGV4dChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLWNsaWVudC1maXJlLWludGVudC1mb3ItY29udGV4dFwiKS5jYXRjaCgoZT0+e30pKSwoYXdhaXQgcyh0aGlzLGkpKS5kaXNwYXRjaChcImZpcmVJbnRlbnRGb3JDb250ZXh0XCIsZSl9YXN5bmMgam9pblNlc3Npb25Db250ZXh0R3JvdXAoZSl7dHJ5e2NvbnN0IHQ9cyh0aGlzLHIpLmdldChlKTtpZih0KXJldHVybiB0LmdldFVzZXJJbnN0YW5jZSgpO2NvbnN0IG49YXdhaXQgcyh0aGlzLGkpLHtoYXNDb25mbGljdDpvfT1hd2FpdCBuLmRpc3BhdGNoKFwic2Vzc2lvbkNvbnRleHRHcm91cDpjcmVhdGVJZk5lZWRlZFwiLHtzZXNzaW9uQ29udGV4dEdyb3VwSWQ6ZX0pO28mJmNvbnNvbGUud2FybihgQSAobm9uLXNlc3Npb24pIGNvbnRleHQgZ3JvdXAgd2l0aCB0aGUgbmFtZSBcIiR7ZX1cIiBhbHJlYWR5IGV4aXN0cy4gSWYgeW91IGFyZSB0cnlpbmcgdG8gam9pbiBhIENvbnRleHQgR3JvdXAsIGNhbGwgam9pbkNvbnRleHRHcm91cCBpbnN0ZWFkLmApO2NvbnN0IGE9bmV3IGMuZGVmYXVsdCh0aGlzLndpcmUscyh0aGlzLGkpLGUpO3JldHVybiBzKHRoaXMscikuc2V0KGUsYSksYS5nZXRVc2VySW5zdGFuY2UoKX1jYXRjaCh0KXt0aHJvdyBjb25zb2xlLmVycm9yKGBFcnJvciB0aHJvd24gdHJ5aW5nIHRvIGNyZWF0ZSBTZXNzaW9uIENvbnRleHQgR3JvdXAgd2l0aCBpZCBcIiR7ZX1cIjogJHt0fWApLHR9fXdyYXBJbnRlbnRIYW5kbGVyKGUsdCl7cmV0dXJuIGFzeW5jIG49Pnt0cnl7YXdhaXQgZShuKX1jYXRjaChlKXt0aHJvdyBjb25zb2xlLmVycm9yKGBFcnJvciB0aHJvd24gYnkgaGFuZGxlciAke3R9OiAke2V9YCksZX19fX10LkludGVyb3BDbGllbnQ9aCxpPW5ldyBXZWFrTWFwLHI9bmV3IFdlYWtNYXB9LDcxMTU6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGk9big4NzA2KTt0LmRlZmF1bHQ9Y2xhc3N7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnByb3ZpZGVyPWUsdGhpcy5pZD10LHRoaXMubGFzdENvbnRleHQ9dm9pZCAwLHRoaXMuY29udGV4dEdyb3VwTWFwPW5ldyBNYXAsdGhpcy5jbGllbnRzPW5ldyBNYXAsdGhpcy5yZWdpc3Rlckxpc3RlbmVycygpfXJlZ2lzdGVyTGlzdGVuZXJzKCl7dGhpcy5wcm92aWRlci5yZWdpc3Rlcihgc2Vzc2lvbkNvbnRleHRHcm91cDpnZXRDb250ZXh0LSR7dGhpcy5pZH1gLHRoaXMuZ2V0Q3VycmVudENvbnRleHQuYmluZCh0aGlzKSksdGhpcy5wcm92aWRlci5yZWdpc3Rlcihgc2Vzc2lvbkNvbnRleHRHcm91cDpzZXRDb250ZXh0LSR7dGhpcy5pZH1gLHRoaXMuc2V0Q29udGV4dC5iaW5kKHRoaXMpKSx0aGlzLnByb3ZpZGVyLnJlZ2lzdGVyKGBzZXNzaW9uQ29udGV4dEdyb3VwOmhhbmRsZXJBZGRlZC0ke3RoaXMuaWR9YCx0aGlzLmhhbmRsZXJBZGRlZC5iaW5kKHRoaXMpKSx0aGlzLnByb3ZpZGVyLnJlZ2lzdGVyKGBzZXNzaW9uQ29udGV4dEdyb3VwOmhhbmRsZXJSZW1vdmVkLSR7dGhpcy5pZH1gLHRoaXMuaGFuZGxlclJlbW92ZWQuYmluZCh0aGlzKSl9Z2V0Q3VycmVudENvbnRleHQoZSl7cmV0dXJuIGUudHlwZT90aGlzLmNvbnRleHRHcm91cE1hcC5nZXQoZS50eXBlKTp0aGlzLmxhc3RDb250ZXh0fXNldENvbnRleHQoZSx0KXtjb25zdHtjb250ZXh0Om59PWUscj1pLkludGVyb3BCcm9rZXIuY2hlY2tDb250ZXh0SW50ZWdyaXR5KG4pO2lmKCExPT09ci5pc1ZhbGlkKXRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNldCBDb250ZXh0IC0gYmFkIENvbnRleHQuIFJlYXNvbjogJHtyLnJlYXNvbn0uIENvbnRleHQ6ICR7SlNPTi5zdHJpbmdpZnkobil9YCk7aWYoIXRoaXMuZ2V0Q2xpZW50U3RhdGUodCkpdGhyb3cgbmV3IEVycm9yKGBDbGllbnQgd2l0aCBJZGVudGl0eTogJHt0LnV1aWR9ICR7dC5uYW1lfSBub3QgaW4gU2Vzc2lvbiBDbGllbnQgU3RhdGUgTWFwYCk7dGhpcy5jb250ZXh0R3JvdXBNYXAuc2V0KG4udHlwZSxuKSx0aGlzLmxhc3RDb250ZXh0PW4sQXJyYXkuZnJvbSh0aGlzLmNsaWVudHMudmFsdWVzKCkpLmZvckVhY2goKGU9Pnt2YXIgdDtudWxsPT09KHQ9ZS5jb250ZXh0SGFuZGxlcnMuZ2V0KG4udHlwZSkpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt0aGlzLnByb3ZpZGVyLmRpc3BhdGNoKGUuY2xpZW50SWRlbnRpdHksdCxuKX0pKSxlLmdsb2JhbEhhbmRsZXImJnRoaXMucHJvdmlkZXIuZGlzcGF0Y2goZS5jbGllbnRJZGVudGl0eSxlLmdsb2JhbEhhbmRsZXIsbil9KSl9Z2V0Q2xpZW50U3RhdGUoZSl7cmV0dXJuIHRoaXMuY2xpZW50cy5nZXQoZS5lbmRwb2ludElkKX1oYW5kbGVyQWRkZWQoZSx0KXtjb25zdHtoYW5kbGVySWQ6bixjb250ZXh0VHlwZTppfT1lLHI9dGhpcy5nZXRDbGllbnRTdGF0ZSh0KTtpZighcil0aHJvdyBuZXcgRXJyb3IoYENsaWVudCB3aXRoIElkZW50aXR5OiAke3QudXVpZH0gJHt0Lm5hbWV9IG5vdCBpbiBDbGllbnQgU3RhdGUgTWFwYCk7aWYoaSl7Y29uc3QgZT1yLmNvbnRleHRIYW5kbGVycy5nZXQoaSl8fFtdO3IuY29udGV4dEhhbmRsZXJzLnNldChpLFsuLi5lLG5dKTtjb25zdCBvPXRoaXMuY29udGV4dEdyb3VwTWFwLmdldChpKTtvJiZ0aGlzLnByb3ZpZGVyLmRpc3BhdGNoKHQsbixvKX1lbHNlIHIuZ2xvYmFsSGFuZGxlcj1uLFsuLi50aGlzLmNvbnRleHRHcm91cE1hcC5rZXlzKCldLmZvckVhY2goKGU9Pntjb25zdCBpPXRoaXMuY29udGV4dEdyb3VwTWFwLmdldChlKTtpJiZ0aGlzLnByb3ZpZGVyLmRpc3BhdGNoKHQsbixpKX0pKX1oYW5kbGVyUmVtb3ZlZChlLHQpe2NvbnN0e2hhbmRsZXJJZDpufT1lLGk9dGhpcy5jbGllbnRzLmdldCh0LmVuZHBvaW50SWQpO2k/KEFycmF5LmZyb20oaS5jb250ZXh0SGFuZGxlcnMpLmZvckVhY2goKChbLGVdKT0+e2NvbnN0IHQ9ZS5pbmRleE9mKG4pO3Q+LTEmJmUuc3BsaWNlKHQsMSl9KSksaS5nbG9iYWxIYW5kbGVyPT09biYmKGkuZ2xvYmFsSGFuZGxlcj12b2lkIDApKTpjb25zb2xlLndhcm4oYFRyeWluZyB0byByZW1vdmUgYSBoYW5kbGVyIGZyb20gYSBjbGllbnQgdGhhdCBpc24ndCBtYXBwZWQuIGhhbmRsZXJJZDogJHtufS4gY2xpZW50SWRlbnRpdHk6ICR7dH1gKX1yZWdpc3Rlck5ld0NsaWVudChlKXtpZighdGhpcy5jbGllbnRzLmhhcyhlLmVuZHBvaW50SWQpKXtjb25zdCB0PXtjb250ZXh0SGFuZGxlcnM6bmV3IE1hcCxjbGllbnRJZGVudGl0eTplLGdsb2JhbEhhbmRsZXI6dm9pZCAwfTt0aGlzLmNsaWVudHMuc2V0KGUuZW5kcG9pbnRJZCx0KX19b25EaXNjb25uZWN0aW9uKGUpe3RoaXMuY2xpZW50cy5kZWxldGUoZS5lbmRwb2ludElkKX19fSw4MjI6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpLHI9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59LG89dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IHM9big5NjU5KSxhPW4oMTc4Nyk7Y2xhc3MgYyBleHRlbmRzIHMuQmFzZXtjb25zdHJ1Y3RvcihlLHQsbil7c3VwZXIoZSksaS5zZXQodGhpcyx2b2lkIDApLHRoaXMuaWQ9bixyKHRoaXMsaSx0KX1hc3luYyBzZXRDb250ZXh0KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3Atc2Vzc2lvbi1jb250ZXh0LWdyb3VwLXNldC1jb250ZXh0XCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCBvKHRoaXMsaSkpLmRpc3BhdGNoKGBzZXNzaW9uQ29udGV4dEdyb3VwOnNldENvbnRleHQtJHt0aGlzLmlkfWAse3Nlc3Npb25Db250ZXh0R3JvdXBJZDp0aGlzLmlkLGNvbnRleHQ6ZX0pfWFzeW5jIGdldEN1cnJlbnRDb250ZXh0KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImludGVyb3Atc2Vzc2lvbi1jb250ZXh0LWdyb3VwLWdldC1jb250ZXh0XCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCBvKHRoaXMsaSkpLmRpc3BhdGNoKGBzZXNzaW9uQ29udGV4dEdyb3VwOmdldENvbnRleHQtJHt0aGlzLmlkfWAse3Nlc3Npb25Db250ZXh0R3JvdXBJZDp0aGlzLmlkLHR5cGU6ZX0pfWFzeW5jIGFkZENvbnRleHRIYW5kbGVyKGUsdCl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpbnRlcm9wLXNlc3Npb24tY29udGV4dC1ncm91cC1hZGQtaGFuZGxlclwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCBuPWF3YWl0IG8odGhpcyxpKTtsZXQgcjtyZXR1cm4gcj10P2BzZXNzaW9uQ29udGV4dEhhbmRsZXI6aW52b2tlLSR7dGhpcy5pZH0tJHt0fS0ke2EuZ2VuZXJhdGVJZCgpfWA6YHNlc3Npb25Db250ZXh0SGFuZGxlcjppbnZva2UtJHt0aGlzLmlkfWAsbi5yZWdpc3RlcihyLGEud3JhcENvbnRleHRIYW5kbGVyKGUscikpLG4uZGlzcGF0Y2goYHNlc3Npb25Db250ZXh0R3JvdXA6aGFuZGxlckFkZGVkLSR7dGhpcy5pZH1gLHtoYW5kbGVySWQ6cixjb250ZXh0VHlwZTp0fSkse3Vuc3Vic2NyaWJlOmF3YWl0IHRoaXMuY3JlYXRlVW5zdWJzY3JpYmVDYihyKX19YXN5bmMgY3JlYXRlVW5zdWJzY3JpYmVDYihlKXtjb25zdCB0PWF3YWl0IG8odGhpcyxpKTtyZXR1cm4gYXN5bmMoKT0+e3QucmVtb3ZlKGUpLGF3YWl0IHQuZGlzcGF0Y2goYHNlc3Npb25Db250ZXh0R3JvdXA6aGFuZGxlclJlbW92ZWQtJHt0aGlzLmlkfWAse2hhbmRsZXJJZDplfSl9fWdldFVzZXJJbnN0YW5jZSgpe3JldHVybntpZDp0aGlzLmlkLHNldENvbnRleHQ6YS53cmFwSW5UcnlDYXRjaCh0aGlzLnNldENvbnRleHQuYmluZCh0aGlzKSxcIkZhaWxlZCB0byBzZXQgY29udGV4dDogXCIpLGdldEN1cnJlbnRDb250ZXh0OmEud3JhcEluVHJ5Q2F0Y2godGhpcy5nZXRDdXJyZW50Q29udGV4dC5iaW5kKHRoaXMpLFwiRmFpbGVkIHRvIGdldCBjb250ZXh0OiBcIiksYWRkQ29udGV4dEhhbmRsZXI6YS53cmFwSW5UcnlDYXRjaCh0aGlzLmFkZENvbnRleHRIYW5kbGVyLmJpbmQodGhpcyksXCJGYWlsZWQgdG8gYWRkIGNvbnRleHQgaGFuZGxlcjogXCIpfX19dC5kZWZhdWx0PWMsaT1uZXcgV2Vha01hcH0sODcwNjpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9OmZ1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLGVbaV09dFtuXX0pLHI9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIGUpXCJkZWZhdWx0XCI9PT1ufHx0Lmhhc093blByb3BlcnR5KG4pfHxpKHQsZSxuKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbz1uKDI5NzcpO3QuZGVmYXVsdD1vLmRlZmF1bHQscihuKDcxMzgpLHQpLHIobigyMDU3KSx0KX0sMTc4NzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuQlJPS0VSX0VSUk9SUz10LmdlbmVyYXRlT3ZlcnJpZGVXYXJuaW5nPXQuZ2VuZXJhdGVPdmVycmlkZUVycm9yPXQud3JhcENvbnRleHRIYW5kbGVyPXQud3JhcEluVHJ5Q2F0Y2g9dC5nZW5lcmF0ZUlkPXZvaWQgMCx0LmdlbmVyYXRlSWQ9KCk9PmAke01hdGgucmFuZG9tKCl9JHtEYXRlLm5vdygpfWAsdC53cmFwSW5UcnlDYXRjaD0oZSx0KT0+KC4uLm4pPT57dHJ5e3JldHVybiBlKC4uLm4pfWNhdGNoKGUpe3Rocm93IG5ldyBFcnJvcigodHx8XCJcIikrZSl9fSx0LndyYXBDb250ZXh0SGFuZGxlcj0oZSx0KT0+YXN5bmMgbj0+e3RyeXthd2FpdCBlKG4pfWNhdGNoKGUpe3Rocm93IGNvbnNvbGUuZXJyb3IoYEVycm9yIHRocm93biBieSBoYW5kbGVyICR7dH0gZm9yIGNvbnRleHQgdHlwZSAke24udHlwZX06ICR7ZX1gKSxlfX0sdC5nZW5lcmF0ZU92ZXJyaWRlRXJyb3I9KGUsdCk9PmBZb3UgaGF2ZSB0cmllZCB0byB0byB1c2UgJHtlfSBidXQgJHt0fSBoYXMgbm90IGJlZW4gb3ZlcnJpZGRlbiBpbiB0aGUgSW50ZXJvcCBCcm9rZXIuIFBsZWFzZSBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uLiBSZWZlciB0byBvdXIgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvLmAsdC5nZW5lcmF0ZU92ZXJyaWRlV2FybmluZz0oZSx0LG4saSk9Pntjb25zdHt1dWlkOnIsbmFtZTpvfT1pO3JldHVybmBFbnRpdHkgd2l0aCBpZGVudGl0eTogJHtyfS8ke299IGhhcyBjYWxsZWQgJHtlfSBvciAke3R9IGJ1dCAke259IGhhcyBub3QgYmVlbiBvdmVycmlkZGVuLmB9LHQuQlJPS0VSX0VSUk9SUz17ZmlyZUludGVudDp0LmdlbmVyYXRlT3ZlcnJpZGVFcnJvcihcImZpcmVJbnRlbnRcIixcImhhbmRsZUZpcmVkSW50ZW50XCIpLGZpcmVJbnRlbnRGb3JDb250ZXh0OnQuZ2VuZXJhdGVPdmVycmlkZUVycm9yKFwiZmlyZUludGVudEZvckNvbnRleHRcIixcImhhbmRsZUZpcmVkSW50ZW50Rm9yQ29udGV4dFwiKSxnZXRJbmZvRm9ySW50ZW50OnQuZ2VuZXJhdGVPdmVycmlkZUVycm9yKFwiZ2V0SW5mb0ZvckludGVudFwiLFwiaGFuZGxlSW5mb0ZvckludGVudFwiKSxnZXRJbmZvRm9ySW50ZW50c0J5Q29udGV4dDp0LmdlbmVyYXRlT3ZlcnJpZGVFcnJvcihcImdldEluZm9Gb3JJbnRlbnRzQnlDb250ZXh0XCIsXCJoYW5kbGVJbmZvRm9ySW50ZW50c0J5Q29udGV4dFwiKX19LDk2NDE6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZ2V0TWU9dC5nZXRCYXNlTWU9dm9pZCAwO2NvbnN0IGk9big0MTY5KSxyPW4oNjcyMCksbz1uKDQ5OTcpO2Z1bmN0aW9uIHMoZSx0LG4pe3JldHVybntpc1ZpZXc6XCJ2aWV3XCI9PT1lLGlzV2luZG93Olwid2luZG93XCI9PT1lLGlzRnJhbWU6XCJpZnJhbWVcIj09PWUsaXNFeHRlcm5hbDpcImV4dGVybmFsIGNvbm5lY3Rpb25cIj09PWUsdXVpZDp0LG5hbWU6bixlbnRpdHlUeXBlOmV9fXQuZ2V0QmFzZU1lPXMsdC5nZXRNZT1mdW5jdGlvbihlKXtjb25zdHt1dWlkOnQsbmFtZTpuLGVudGl0eVR5cGU6YX09ZS5tZSxjPXtzZXRDb250ZXh0KCl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJvcCBBUEkgaGFzIG5vdCBiZWVuIGluc3RhbnRpYXRlZC4gRWl0aGVyIGNvbm5lY3Rpb24gaGFzIGZhaWxlZCBvciB5b3UgaGF2ZSBub3QgZGVjbGFyZWQgaW50ZXJvcCBpbiB5b3VyIGNvbmZpZy5cIil9LGFkZENvbnRleHRIYW5kbGVyKCl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJvcCBBUEkgaGFzIG5vdCBiZWVuIGluc3RhbnRpYXRlZC4gRWl0aGVyIGNvbm5lY3Rpb24gaGFzIGZhaWxlZCBvciB5b3UgaGF2ZSBub3QgZGVjbGFyZWQgaW50ZXJvcCBpbiB5b3VyIGNvbmZpZy5cIil9LGdldENvbnRleHRHcm91cHMoKXt0aHJvdyBuZXcgRXJyb3IoXCJJbnRlcm9wIEFQSSBoYXMgbm90IGJlZW4gaW5zdGFudGlhdGVkLiBFaXRoZXIgY29ubmVjdGlvbiBoYXMgZmFpbGVkIG9yIHlvdSBoYXZlIG5vdCBkZWNsYXJlZCBpbnRlcm9wIGluIHlvdXIgY29uZmlnLlwiKX0sam9pbkNvbnRleHRHcm91cCgpe3Rocm93IG5ldyBFcnJvcihcIkludGVyb3AgQVBJIGhhcyBub3QgYmVlbiBpbnN0YW50aWF0ZWQuIEVpdGhlciBjb25uZWN0aW9uIGhhcyBmYWlsZWQgb3IgeW91IGhhdmUgbm90IGRlY2xhcmVkIGludGVyb3AgaW4geW91ciBjb25maWcuXCIpfSxyZW1vdmVGcm9tQ29udGV4dEdyb3VwKCl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJvcCBBUEkgaGFzIG5vdCBiZWVuIGluc3RhbnRpYXRlZC4gRWl0aGVyIGNvbm5lY3Rpb24gaGFzIGZhaWxlZCBvciB5b3UgaGF2ZSBub3QgZGVjbGFyZWQgaW50ZXJvcCBpbiB5b3VyIGNvbmZpZy5cIil9LGdldEFsbENsaWVudHNJbkNvbnRleHRHcm91cCgpe3Rocm93IG5ldyBFcnJvcihcIkludGVyb3AgQVBJIGhhcyBub3QgYmVlbiBpbnN0YW50aWF0ZWQuIEVpdGhlciBjb25uZWN0aW9uIGhhcyBmYWlsZWQgb3IgeW91IGhhdmUgbm90IGRlY2xhcmVkIGludGVyb3AgaW4geW91ciBjb25maWcuXCIpfSxnZXRJbmZvRm9yQ29udGV4dEdyb3VwKCl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJvcCBBUEkgaGFzIG5vdCBiZWVuIGluc3RhbnRpYXRlZC4gRWl0aGVyIGNvbm5lY3Rpb24gaGFzIGZhaWxlZCBvciB5b3UgaGF2ZSBub3QgZGVjbGFyZWQgaW50ZXJvcCBpbiB5b3VyIGNvbmZpZy5cIil9fTtzd2l0Y2goYSl7Y2FzZVwidmlld1wiOnJldHVybiBPYmplY3QuYXNzaWduKG5ldyBpLlZpZXcoZSx7dXVpZDp0LG5hbWU6bn0pLHMoYSx0LG4pLHtpbnRlcm9wOmN9KTtjYXNlXCJ3aW5kb3dcIjpyZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgby5fV2luZG93KGUse3V1aWQ6dCxuYW1lOm59KSxzKGEsdCxuKSx7aW50ZXJvcDpjfSk7Y2FzZVwiaWZyYW1lXCI6cmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IHIuX0ZyYW1lKGUse3V1aWQ6dCxuYW1lOm59KSxzKGEsdCxuKSx7aW50ZXJvcDpjfSk7ZGVmYXVsdDpyZXR1cm57Li4ucyhhLHQsbil9fX19LDcyODM6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IGk9big5NjU5KSxyPW4oNjM5NCksbz1uKDk4NzIpO2NsYXNzIHMgZXh0ZW5kcyBpLkJhc2V7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSx0aGlzLl9jaGFubmVsPXQsdGhpcy5faW5pdGlhbGl6ZXI9KC4uLmUpPT50aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0UHJvdmlkZXJJbml0aWFsaXplcigpLnRoZW4oKHQ9PnQodGhpcy53aXJlLmVudmlyb25tZW50KSguLi5lKSkpLHRoaXMuTGF5b3V0PW5ldyByLkxheW91dE1vZHVsZSh0aGlzLndpcmUpfWFzeW5jIGluaXQoZSl7Y29uc3QgdD1udWxsPT1lP3ZvaWQgMDplLm92ZXJyaWRlQ2FsbGJhY2ssbj1hd2FpdCB0aGlzLmZpbi5JbnRlcm9wLmluaXQodGhpcy5maW4ubWUudXVpZCxudWxsPT1lP3ZvaWQgMDplLmludGVyb3BPdmVycmlkZSk7cmV0dXJuIHdpbmRvdy5pbnRlcm9wQnJva2VyPW4sdGhpcy5faW5pdGlhbGl6ZXIodCxuKX1hc3luYyB3cmFwKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInBsYXRmb3JtLXdyYXBcIikuY2F0Y2goKGU9Pnt9KSksbmV3IG8uUGxhdGZvcm0oe3V1aWQ6ZS51dWlkfSx0aGlzLl9jaGFubmVsKX13cmFwU3luYyhlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS13cmFwLXN5bmNcIikuY2F0Y2goKGU9Pnt9KSksbmV3IG8uUGxhdGZvcm0oe3V1aWQ6ZS51dWlkfSx0aGlzLl9jaGFubmVsKX1hc3luYyBnZXRDdXJyZW50KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tZ2V0LWN1cnJlbnRcIikuY2F0Y2goKGU9Pnt9KSksdGhpcy53cmFwKHt1dWlkOnRoaXMud2lyZS5tZS51dWlkfSl9Z2V0Q3VycmVudFN5bmMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1nZXQtY3VycmVudC1zeW5jXCIpLmNhdGNoKChlPT57fSkpLHRoaXMud3JhcFN5bmMoe3V1aWQ6dGhpcy53aXJlLm1lLnV1aWR9KX1zdGFydChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1zdGFydFwiKS5jYXRjaCgoZT0+e30pKSxuZXcgUHJvbWlzZSgoYXN5bmModCxuKT0+e3RyeXtjb25zdHt1dWlkOm59PWUsaT1hd2FpdCB0aGlzLmZpbi5BcHBsaWNhdGlvbi5fY3JlYXRlKHsuLi5lLGlzUGxhdGZvcm1Db250cm9sbGVyOiEwfSk7aS5vbmNlKFwicGxhdGZvcm0tYXBpLXJlYWR5XCIsKCgpPT50KHRoaXMud3JhcFN5bmMoe3V1aWQ6bn0pKSkpLGkuX3J1bih7dXVpZDpufSl9Y2F0Y2goZSl7bihlKX19KSl9c3RhcnRGcm9tTWFuaWZlc3QoZSx0KXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1zdGFydC1mcm9tLW1hbmlmZXN0XCIpLmNhdGNoKChlPT57fSkpLG5ldyBQcm9taXNlKChhc3luYyhuLGkpPT57dHJ5e2NvbnN0IGk9YXdhaXQgdGhpcy5maW4uQXBwbGljYXRpb24uX2NyZWF0ZUZyb21NYW5pZmVzdChlKTtpLm9uY2UoXCJwbGF0Zm9ybS1hcGktcmVhZHlcIiwoKCk9Pm4odGhpcy53cmFwU3luYyh7dXVpZDppLmlkZW50aXR5LnV1aWR9KSkpKSxpLl9ydW4odCl9Y2F0Y2goZSl7aShlKX19KSl9fXQuZGVmYXVsdD1zfSw5ODcyOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyPXRoaXMmJnRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldHx8ZnVuY3Rpb24oZSx0KXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuZ2V0KGUpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LlBsYXRmb3JtPXZvaWQgMDtjb25zdCBvPW4oOTY1OSkscz1uKDQ5OTkpLGE9bmV3IE1hcDtjbGFzcyBjIGV4dGVuZHMgby5FbWl0dGVyQmFzZXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKHQud2lyZSxcImFwcGxpY2F0aW9uXCIsZS51dWlkKSx0aGlzLmdldENsaWVudD1lPT57dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1nZXQtY2xpZW50XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD1lfHx0aGlzLmlkZW50aXR5LHt1dWlkOm59PXQ7aWYoIWEuaGFzKG4pKXtjb25zdCBlPXIodGhpcyxpKS5jYWxsKHRoaXMsbik7YS5zZXQobixlKX1yZXR1cm4gYS5nZXQobil9LGkuc2V0KHRoaXMsKGFzeW5jIGU9Pnt0cnl7Y29uc3QgdD1gY3VzdG9tLWZyYW1lLSR7ZX1gLG49YXdhaXQgdGhpcy5fY2hhbm5lbC5jb25uZWN0KHQse3dhaXQ6ITF9KTtyZXR1cm4gbi5vbkRpc2Nvbm5lY3Rpb24oKCgpPT57YS5kZWxldGUoZSl9KSksbn1jYXRjaCh0KXt0aHJvdyBhLmRlbGV0ZShlKSxuZXcgRXJyb3IoXCJUaGUgdGFyZ2V0ZWQgUGxhdGZvcm0gaXMgbm90IGN1cnJlbnRseSBydW5uaW5nLiBMaXN0ZW4gZm9yIGFwcGxpY2F0aW9uLXN0YXJ0ZWQgZXZlbnQgZm9yIHRoZSBnaXZlbiBVdWlkLlwiKX19KSksdGhpcy5sYXVuY2hMZWdhY3lNYW5pZmVzdD10aGlzLmxhdW5jaENvbnRlbnRNYW5pZmVzdDtjb25zdCBuPXMudmFsaWRhdGVJZGVudGl0eShlKTtpZihuKXRocm93IG5ldyBFcnJvcihuKTt0aGlzLl9jaGFubmVsPXQsdGhpcy5pZGVudGl0eT17dXVpZDplLnV1aWR9LHRoaXMuTGF5b3V0PXRoaXMuZmluLlBsYXRmb3JtLkxheW91dCx0aGlzLkFwcGxpY2F0aW9uPXRoaXMuZmluLkFwcGxpY2F0aW9uLndyYXBTeW5jKHRoaXMuaWRlbnRpdHkpfWFzeW5jIGNyZWF0ZVZpZXcoZSx0LG4pe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tY3JlYXRlLXZpZXdcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKTtjb25zdCBpPWF3YWl0IHRoaXMuZ2V0Q2xpZW50KCkscj1hd2FpdCBpLmRpc3BhdGNoKFwiY3JlYXRlLXZpZXdcIix7dGFyZ2V0OnQsb3B0czplLHRhcmdldFZpZXc6bn0pO2lmKCFyfHxzLnZhbGlkYXRlSWRlbnRpdHkoci5pZGVudGl0eSkpdGhyb3cgbmV3IEVycm9yKGBXaGVuIG92ZXJ3cml0aW5nIHRoZSBjcmVhdGVWaWV3IGNhbGwsIHBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IHRoYXQgaGFzIGEgdmFsaWQgJ2lkZW50aXR5JyBwcm9wZXJ0eTogJHtKU09OLnN0cmluZ2lmeShyKX1gKTtyZXR1cm4gdGhpcy5maW4uVmlldy53cmFwU3luYyhyLmlkZW50aXR5KX1hc3luYyBjcmVhdGVXaW5kb3coZSl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1jcmVhdGUtd2luZG93XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD1hd2FpdCB0aGlzLmdldENsaWVudCgpO2UucmVhc29ufHwoZS5yZWFzb249XCJhcGktY2FsbFwiKTtjb25zdCBuPWF3YWl0IHQuZGlzcGF0Y2goXCJjcmVhdGUtdmlldy1jb250YWluZXJcIixlKTtpZighbnx8cy52YWxpZGF0ZUlkZW50aXR5KG4uaWRlbnRpdHkpKXRocm93IG5ldyBFcnJvcihgV2hlbiBvdmVyd3JpdGluZyB0aGUgY3JlYXRlV2luZG93IGNhbGwsIHBsZWFzZSByZXR1cm4gYW4gb2JqZWN0IHRoYXQgaGFzIGEgdmFsaWQgJ2lkZW50aXR5JyBwcm9wZXJ0eTogJHtKU09OLnN0cmluZ2lmeShuKX1gKTtjb25zdHtpZGVudGl0eTppfT1uLHI9dGhpcy5maW4uV2luZG93LndyYXBTeW5jKGkpO3JldHVybiByLm5hbWU9aS5uYW1lLHIudXVpZD1pLnV1aWQscn1hc3luYyBxdWl0KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tcXVpdFwiLHRoaXMuaWRlbnRpdHkpLmNhdGNoKChlPT57fSkpLChhd2FpdCB0aGlzLmdldENsaWVudCgpKS5kaXNwYXRjaChcInF1aXRcIil9YXN5bmMgY2xvc2VWaWV3KGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tY2xvc2Utdmlld1wiLHRoaXMuaWRlbnRpdHkpLmNhdGNoKChlPT57fSkpO2NvbnN0IHQ9YXdhaXQgdGhpcy5nZXRDbGllbnQoKTthd2FpdCB0LmRpc3BhdGNoKFwiY2xvc2Utdmlld1wiLHt2aWV3OmV9KX1hc3luYyByZXBhcmVudFZpZXcoZSx0KXt2YXIgbjtjb25zb2xlLndhcm4oXCJQbGF0Zm9ybS5yZXBhcmVudFZpZXcgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBQbGF0Zm9ybS5jcmVhdGVWaWV3XCIpLHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tcmVwYXJlbnQtdmlld1wiLHRoaXMuaWRlbnRpdHkpLmNhdGNoKChlPT57fSkpO2NvbnN0IGk9ey4uLmUsdXVpZDpudWxsIT09KG49ZS51dWlkKSYmdm9pZCAwIT09bj9uOnRoaXMuaWRlbnRpdHkudXVpZH0scj1hd2FpdCB0aGlzLmZpbi5WaWV3LndyYXAoaSksbz1hd2FpdCByLmdldE9wdGlvbnMoKTtyZXR1cm4gdGhpcy5jcmVhdGVWaWV3KG8sdCl9YXN5bmMgZ2V0U25hcHNob3QoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1nZXQtc25hcHNob3RcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKSwoYXdhaXQgdGhpcy5nZXRDbGllbnQoKSkuZGlzcGF0Y2goXCJnZXQtc25hcHNob3RcIil9YXN5bmMgYXBwbHlTbmFwc2hvdChlLHQpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tYXBwbHktc25hcHNob3RcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKTtjb25zdCBuPVwiUmVxdWVzdGVkIHNuYXBzaG90IG11c3QgYmUgYSB2YWxpZCBTbmFwc2hvdCBvYmplY3QsIG9yIGEgdXJsIG9yIGZpbGVwYXRoIHRvIHN1Y2ggYW4gb2JqZWN0LlwiO2xldCBpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKXRyeXtpPShhd2FpdCB0aGlzLl9jaGFubmVsLndpcmUuc2VuZEFjdGlvbihcImdldC1hcHBsaWNhdGlvbi1tYW5pZmVzdFwiLHttYW5pZmVzdFVybDplfSkpLnBheWxvYWQuZGF0YX1jYXRjaChlKXt0aHJvdyBuZXcgRXJyb3IoYCR7bn06ICR7ZX1gKX1lbHNlIGk9ZTtpZighaS53aW5kb3dzKXRocm93IG5ldyBFcnJvcihuKTtjb25zdCByPWF3YWl0IHRoaXMuZ2V0Q2xpZW50KCk7cmV0dXJuIGF3YWl0IHIuZGlzcGF0Y2goXCJhcHBseS1zbmFwc2hvdFwiLHtzbmFwc2hvdDppLG9wdGlvbnM6dH0pLHRoaXN9YXN5bmMgZmV0Y2hNYW5pZmVzdChlKXtyZXR1cm4oYXdhaXQgdGhpcy5nZXRDbGllbnQoKSkuZGlzcGF0Y2goXCJwbGF0Zm9ybS1mZXRjaC1tYW5pZmVzdFwiLHttYW5pZmVzdFVybDplfSl9YXN5bmMgbGF1bmNoQ29udGVudE1hbmlmZXN0KGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tbGF1bmNoLWNvbnRlbnQtbWFuaWZlc3RcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PWF3YWl0IHRoaXMuZ2V0Q2xpZW50KCksbj1hd2FpdCB0aGlzLmZldGNoTWFuaWZlc3QoZSk7cmV0dXJuIHQuZGlzcGF0Y2goXCJsYXVuY2gtaW50by1wbGF0Zm9ybVwiLHttYW5pZmVzdDpufSksdGhpc31hc3luYyBzZXRXaW5kb3dDb250ZXh0KGU9e30sdCl7aWYodGhpcy53aXJlLnNlbmRBY3Rpb24oXCJwbGF0Zm9ybS1zZXQtd2luZG93LWNvbnRleHRcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKSwhZSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIHNlcmlhbGl6YWJsZSBvYmplY3Qgb3Igc3RyaW5nIHRvIHNldCB0aGUgY29udGV4dC5cIik7Y29uc3Qgbj1hd2FpdCB0aGlzLmdldENsaWVudCgpLHtlbnRpdHlUeXBlOml9PXQ/YXdhaXQgdGhpcy5maW4uU3lzdGVtLmdldEVudGl0eUluZm8odC51dWlkLHQubmFtZSk6dGhpcy5maW4ubWU7YXdhaXQgbi5kaXNwYXRjaChcInNldC13aW5kb3ctY29udGV4dFwiLHtjb250ZXh0OmUsZW50aXR5VHlwZTppLHRhcmdldDp0fHx7dXVpZDp0aGlzLmZpbi5tZS51dWlkLG5hbWU6dGhpcy5maW4ubWUubmFtZX19KX1hc3luYyBnZXRXaW5kb3dDb250ZXh0KGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwicGxhdGZvcm0tZ2V0LXdpbmRvdy1jb250ZXh0XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD1hd2FpdCB0aGlzLmdldENsaWVudCgpLHtlbnRpdHlUeXBlOm59PWU/YXdhaXQgdGhpcy5maW4uU3lzdGVtLmdldEVudGl0eUluZm8oZS51dWlkLGUubmFtZSk6dGhpcy5maW4ubWU7cmV0dXJuIHQuZGlzcGF0Y2goXCJnZXQtd2luZG93LWNvbnRleHRcIix7dGFyZ2V0OmV8fHt1dWlkOnRoaXMuZmluLm1lLnV1aWQsbmFtZTp0aGlzLmZpbi5tZS5uYW1lfSxlbnRpdHlUeXBlOm59KX19dC5QbGF0Zm9ybT1jLGk9bmV3IFdlYWtNYXB9LDQzODY6KGUsdCk9PntmdW5jdGlvbiBuKGUpe3N3aXRjaChlKXtjYXNlXCJjb2x1bW5zXCI6Y2FzZVwiZ3JpZFwiOmNhc2VcInJvd3NcIjpjYXNlXCJ0YWJzXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc1ZhbGlkUHJlc2V0VHlwZT12b2lkIDAsdC5pc1ZhbGlkUHJlc2V0VHlwZT1uLHQuZGVmYXVsdD17aXNWYWxpZFByZXNldFR5cGU6bn19LDYwOTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9OmZ1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLGVbaV09dFtuXX0pLHI9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIGUpXCJkZWZhdWx0XCI9PT1ufHx0Lmhhc093blByb3BlcnR5KG4pfHxpKHQsZSxuKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbz1uKDcyODMpO3QuZGVmYXVsdD1vLmRlZmF1bHQscihuKDk4NzIpLHQpfSw0MjEwOmZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyPXRoaXMmJnRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldHx8ZnVuY3Rpb24oZSx0KXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuZ2V0KGUpfSxvPXRoaXMmJnRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldHx8ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5zZXQoZSxuKSxufTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkxheW91dE1vZHVsZT12b2lkIDA7Y29uc3Qgcz1uKDgxMTEpLGE9big5NjU5KTtjbGFzcyBjIGV4dGVuZHMgYS5CYXNle2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSxpLnNldCh0aGlzLHZvaWQgMCksdGhpcy5pbml0PWFzeW5jKGU9e30pPT57aWYodGhpcy53aXJlLnNlbmRBY3Rpb24oXCJsYXlvdXQtaW5pdFwiKS5jYXRjaCgoZT0+e30pKSwhdGhpcy5maW4ubWUuaXNXaW5kb3cpdGhyb3cgbmV3IEVycm9yKFwiTGF5b3V0LmluaXQgY2FuIG9ubHkgYmUgY2FsbGVkIGZyb20gYSBXaW5kb3cgY29udGV4dC5cIik7aWYocih0aGlzLGkpKXRocm93IG5ldyBFcnJvcihcIkxheW91dCBmb3IgdGhpcyB3aW5kb3cgYWxyZWFkeSBpbml0aWFsaXplZCwgcGxlYXNlIHVzZSBMYXlvdXQucmVwbGFjZSBjYWxsIHRvIHJlcGxhY2UgdGhlIGxheW91dC5cIik7Y29uc3QgdD1hd2FpdCB0aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0TWFuYWdlckNvbnN0cnVjdG9yKCk7byh0aGlzLGksbmV3IHQpO2xldHtsYXlvdXQ6bixjb250YWluZXJJZDpzfT1lO24mJmNvbnNvbGUud2FybihcIldlIHJlY29tbWVuZCB1c2luZyBhIGxheW91dCBpbiB3aW5kb3cgb3B0aW9ucy5cXG4gICAgICAgICAgICAgICAgVGhpcyBsYXlvdXQgaGFzIG5vdCBiZWVuIHNhbml0aXplZCBhbmQgdW5leHBlY3RlZCBiZWhhdmlvciBjYW4gb2NjdXIuXCIpLG49bnx8KGF3YWl0IHRoaXMuZmluLldpbmRvdy5nZXRDdXJyZW50U3luYygpLmdldE9wdGlvbnMoKSkubGF5b3V0LHM9c3x8XCJsYXlvdXQtY29udGFpbmVyXCI7Y29uc3QgYT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChzKTtyZXR1cm4gYXdhaXQgcih0aGlzLGkpLmluaXRNYW5hZ2VyKCksYXdhaXQgcih0aGlzLGkpLmNyZWF0ZUxheW91dChuLGEpLE9iamVjdC5hc3NpZ24odGhpcy5nZXRDdXJyZW50U3luYygpLHtsYXlvdXRNYW5hZ2VyOnIodGhpcyxpKX0pfX1hc3luYyB3cmFwKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImxheW91dC13cmFwXCIpLmNhdGNoKChlPT57fSkpLG5ldyBzLkxheW91dChlLHRoaXMud2lyZSl9d3JhcFN5bmMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwibGF5b3V0LXdyYXAtc3luY1wiKS5jYXRjaCgoZT0+e30pKSxuZXcgcy5MYXlvdXQoZSx0aGlzLndpcmUpfWFzeW5jIGdldEN1cnJlbnQoKXtpZih0aGlzLndpcmUuc2VuZEFjdGlvbihcImxheW91dC1nZXQtY3VycmVudFwiKS5jYXRjaCgoZT0+e30pKSwhdGhpcy5maW4ubWUuaXNXaW5kb3cpdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBub3QgaW4gYSBXaW5kb3cgY29udGV4dC4gIE9ubHkgV2luZG93cyBjYW4gaGF2ZSBhIExheW91dC5cIik7Y29uc3R7dXVpZDplLG5hbWU6dH09dGhpcy5maW4ubWU7cmV0dXJuIHRoaXMud3JhcCh7dXVpZDplLG5hbWU6dH0pfWdldEN1cnJlbnRTeW5jKCl7aWYodGhpcy53aXJlLnNlbmRBY3Rpb24oXCJsYXlvdXQtZ2V0LWN1cnJlbnQtc3luY1wiKS5jYXRjaCgoZT0+e30pKSwhdGhpcy5maW4ubWUuaXNXaW5kb3cpdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBub3QgaW4gYSBXaW5kb3cgY29udGV4dC4gIE9ubHkgV2luZG93cyBjYW4gaGF2ZSBhIExheW91dC5cIik7Y29uc3R7dXVpZDplLG5hbWU6dH09dGhpcy5maW4ubWU7cmV0dXJuIHRoaXMud3JhcFN5bmMoe3V1aWQ6ZSxuYW1lOnR9KX19dC5MYXlvdXRNb2R1bGU9YyxpPW5ldyBXZWFrTWFwfSw4MTExOihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LkxheW91dD12b2lkIDA7Y29uc3QgaT1uKDQ5OTkpLHI9big0Mzg2KSxvPW4oOTY1OSk7Y2xhc3MgcyBleHRlbmRzIG8uQmFzZXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKHQpLHRoaXMucmVwbGFjZT1hc3luYyBlPT57dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJsYXlvdXQtcmVwbGFjZVwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PWF3YWl0IHRoaXMucGxhdGZvcm0uZ2V0Q2xpZW50KCk7YXdhaXQgdC5kaXNwYXRjaChcInJlcGxhY2UtbGF5b3V0XCIse3RhcmdldDp0aGlzLmlkZW50aXR5LG9wdHM6e2xheW91dDplfX0pfSx0aGlzLnJlcGxhY2VWaWV3PWFzeW5jKGUsdCk9Pnt0aGlzLndpcmUuc2VuZEFjdGlvbihcImxheW91dC1yZXBsYWNlLXZpZXdcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3Qgbj1hd2FpdCB0aGlzLnBsYXRmb3JtLmdldENsaWVudCgpO2F3YWl0IG4uZGlzcGF0Y2goXCJyZXBsYWNlLXZpZXdcIix7dGFyZ2V0OnRoaXMuaWRlbnRpdHksb3B0czp7dmlld1RvUmVwbGFjZTplLG5ld1ZpZXc6dH19KX0sdGhpcy5hcHBseVByZXNldD1hc3luYyBlPT57dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJsYXlvdXQtYXBwbHktcHJlc2V0XCIpLmNhdGNoKChlPT57fSkpO2NvbnN0IHQ9YXdhaXQgdGhpcy5wbGF0Zm9ybS5nZXRDbGllbnQoKSx7cHJlc2V0VHlwZTpufT1lO2lmKCFufHwhci5pc1ZhbGlkUHJlc2V0VHlwZShuKSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgYXBwbHkgcHJlc2V0IGxheW91dCwgcGxlYXNlIGluY2x1ZGUgYW4gYXBwbGljYWJsZSBwcmVzZXRUeXBlIHByb3BlcnR5IGluIHRoZSBQcmVzZXRMYXlvdXRPcHRpb25zLlwiKTthd2FpdCB0LmRpc3BhdGNoKFwiYXBwbHktcHJlc2V0LWxheW91dFwiLHt0YXJnZXQ6dGhpcy5pZGVudGl0eSxvcHRzOntwcmVzZXRUeXBlOm59fSl9O2NvbnN0IG49aS52YWxpZGF0ZUlkZW50aXR5KGUpO2lmKG4pdGhyb3cgbmV3IEVycm9yKG4pO3RoaXMuaWRlbnRpdHk9ZSx0aGlzLnBsYXRmb3JtPXRoaXMuZmluLlBsYXRmb3JtLndyYXBTeW5jKHt1dWlkOmUudXVpZH0pLGUudXVpZD09PXRoaXMuZmluLm1lLnV1aWQmJmUubmFtZT09PXRoaXMuZmluLm1lLm5hbWUmJih0aGlzLmluaXQ9dGhpcy5maW4uUGxhdGZvcm0uTGF5b3V0LmluaXQpfWFzeW5jIGdldENvbmZpZygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImxheW91dC1nZXQtY29uZmlnXCIpLmNhdGNoKChlPT57fSkpLChhd2FpdCB0aGlzLnBsYXRmb3JtLmdldENsaWVudCgpKS5kaXNwYXRjaChcImdldC1mcmFtZS1zbmFwc2hvdFwiLHt0YXJnZXQ6dGhpcy5pZGVudGl0eX0pfX10LkxheW91dD1zfSw2Mzk0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgaT10aGlzJiZ0aGlzLl9fY3JlYXRlQmluZGluZ3x8KE9iamVjdC5jcmVhdGU/ZnVuY3Rpb24oZSx0LG4saSl7dm9pZCAwPT09aSYmKGk9biksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsaSx7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdFtuXX19KX06ZnVuY3Rpb24oZSx0LG4saSl7dm9pZCAwPT09aSYmKGk9biksZVtpXT10W25dfSkscj10aGlzJiZ0aGlzLl9fZXhwb3J0U3Rhcnx8ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG4gaW4gZSlcImRlZmF1bHRcIj09PW58fHQuaGFzT3duUHJvcGVydHkobil8fGkodCxlLG4pfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyKG4oNDIxMCksdCkscihuKDgxMTEpLHQpfSwxNzQ2OihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBpPW4oOTY1OSkscj1uKDI4NzgpLG89big2MjE1KTtjbGFzcyBzIGV4dGVuZHMgaS5CYXNle2FzeW5jIGluaXQoZSl7aWYodGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzbmFwc2hvdC1zb3VyY2UtaW5pdFwiKS5jYXRjaCgoZT0+e30pKSxcIm9iamVjdFwiIT10eXBlb2YgZXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZS5nZXRTbmFwc2hvdHx8XCJmdW5jdGlvblwiIT10eXBlb2YgZS5hcHBseVNuYXBzaG90KXRocm93IG5ldyBFcnJvcihcInlvdSBtdXN0IHBhc3MgaW4gYSB2YWxpZCBTbmFwc2hvdFByb3ZpZGVyXCIpO2NvbnN0IHQ9YXdhaXQgdGhpcy5maW4uSW50ZXJBcHBsaWNhdGlvbkJ1cy5DaGFubmVsLmNyZWF0ZShvLmdldFNuYXBzaG90U291cmNlQ2hhbm5lbE5hbWUoZmluLm1lLmlkZW50aXR5KSk7dC5yZWdpc3RlcihcImdldC1zbmFwc2hvdFwiLChhc3luYygpPT4oe3NuYXBzaG90OmF3YWl0IGUuZ2V0U25hcHNob3QoKX0pKSksdC5yZWdpc3RlcihcImFwcGx5LXNuYXBzaG90XCIsKCh7c25hcHNob3Q6dH0pPT5lLmFwcGx5U25hcHNob3QodCkpKX13cmFwU3luYyhlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzbmFwc2hvdC1zb3VyY2Utd3JhcC1zeW5jXCIpLmNhdGNoKChlPT57fSkpLG5ldyByLlNuYXBzaG90U291cmNlKHRoaXMud2lyZSxlKX1hc3luYyB3cmFwKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNuYXBzaG90LXNvdXJjZS13cmFwXCIpLmNhdGNoKChlPT57fSkpLHRoaXMud3JhcFN5bmMoZSl9fXQuZGVmYXVsdD1zfSwyODc4OmZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyLG8scyxhLGM9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkU2V0fHxmdW5jdGlvbihlLHQsbil7aWYoIXQuaGFzKGUpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO3JldHVybiB0LnNldChlLG4pLG59LGQ9dGhpcyYmdGhpcy5fX2NsYXNzUHJpdmF0ZUZpZWxkR2V0fHxmdW5jdGlvbihlLHQpe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5nZXQoZSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuU25hcHNob3RTb3VyY2U9dm9pZCAwO2NvbnN0IGg9big5NjU5KSxsPW4oNjIxNSksdT1uZXcgTWFwO2NsYXNzIHAgZXh0ZW5kcyBoLkJhc2V7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlKSxpLnNldCh0aGlzLHZvaWQgMCksci5zZXQodGhpcywoKCk9Pih1Lmhhcyh0aGlzLmlkZW50aXR5LnV1aWQpfHx1LnNldCh0aGlzLmlkZW50aXR5LnV1aWQse2V2ZW50RmlyZWQ6bnVsbCxjbGllbnRQcm9taXNlOm51bGx9KSx1LmdldCh0aGlzLmlkZW50aXR5LnV1aWQpKSkpLG8uc2V0KHRoaXMsKCgpPT4oZCh0aGlzLHIpLmNhbGwodGhpcykuY2xpZW50UHJvbWlzZXx8KGQodGhpcyxyKS5jYWxsKHRoaXMpLmNsaWVudFByb21pc2U9ZCh0aGlzLHMpLmNhbGwodGhpcykpLGQodGhpcyxyKS5jYWxsKHRoaXMpLmNsaWVudFByb21pc2UpKSkscy5zZXQodGhpcywoYXN5bmMoKT0+e2NvbnN0IGU9bC5nZXRTbmFwc2hvdFNvdXJjZUNoYW5uZWxOYW1lKHRoaXMuaWRlbnRpdHkpO3RyeXtkKHRoaXMscikuY2FsbCh0aGlzKS5ldmVudEZpcmVkfHxhd2FpdCBkKHRoaXMsYSkuY2FsbCh0aGlzKTtjb25zdCB0PWF3YWl0IHRoaXMuZmluLkludGVyQXBwbGljYXRpb25CdXMuQ2hhbm5lbC5jb25uZWN0KGUse3dhaXQ6ITF9KTtyZXR1cm4gdC5vbkRpc2Nvbm5lY3Rpb24oKCgpPT57ZCh0aGlzLHIpLmNhbGwodGhpcykuY2xpZW50UHJvbWlzZT1udWxsLGQodGhpcyxyKS5jYWxsKHRoaXMpLmV2ZW50RmlyZWQ9bnVsbH0pKSx0fWNhdGNoKGUpe3Rocm93IGQodGhpcyxyKS5jYWxsKHRoaXMpLmNsaWVudFByb21pc2U9bnVsbCxuZXcgRXJyb3IoXCJUaGUgdGFyZ2V0ZWQgU25hcHNob3RTb3VyY2UgaXMgbm90IGN1cnJlbnRseSBpbml0aWFsaXplZC4gQXdhaXQgdGhpcyBvYmplY3QncyByZWFkeSgpIG1ldGhvZC5cIil9fSkpLGEuc2V0KHRoaXMsKGFzeW5jKCk9Pntjb25zdCBlPWwuZ2V0U25hcHNob3RTb3VyY2VDaGFubmVsTmFtZSh0aGlzLmlkZW50aXR5KTtsZXQgdCxuO2NvbnN0IGk9bmV3IFByb21pc2UoKChlLGkpPT57dD1lLG49aX0pKTtkKHRoaXMscikuY2FsbCh0aGlzKS5ldmVudEZpcmVkPWk7Y29uc3Qgbz1hc3luYyBpPT57dHJ5e2kuY2hhbm5lbE5hbWU9PT1lJiYodCgpLGF3YWl0IHRoaXMuZmluLkludGVyQXBwbGljYXRpb25CdXMuQ2hhbm5lbC5yZW1vdmVMaXN0ZW5lcihcImNvbm5lY3RlZFwiLG8pKX1jYXRjaChlKXtuKGUpfX07YXdhaXQgdGhpcy5maW4uSW50ZXJBcHBsaWNhdGlvbkJ1cy5DaGFubmVsLm9uKFwiY29ubmVjdGVkXCIsbyl9KSksYyh0aGlzLGksdCl9Z2V0IGlkZW50aXR5KCl7cmV0dXJuIGQodGhpcyxpKX1hc3luYyByZWFkeSgpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwic25hcHNob3Qtc291cmNlLXJlYWR5XCIpLmNhdGNoKChlPT57fSkpO3RyeXthd2FpdCBkKHRoaXMsbykuY2FsbCh0aGlzKX1jYXRjaChlKXthd2FpdCBkKHRoaXMscikuY2FsbCh0aGlzKS5ldmVudEZpcmVkfX1hc3luYyBnZXRTbmFwc2hvdCgpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwic25hcHNob3Qtc291cmNlLWdldC1zbmFwc2hvdFwiKS5jYXRjaCgoZT0+e30pKTtjb25zdCBlPWF3YWl0IGQodGhpcyxvKS5jYWxsKHRoaXMpLHQ9YXdhaXQgZS5kaXNwYXRjaChcImdldC1zbmFwc2hvdFwiKTtyZXR1cm4oYXdhaXQgdCkuc25hcHNob3R9YXN5bmMgYXBwbHlTbmFwc2hvdChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzbmFwc2hvdC1zb3VyY2UtYXBwbHktc25hcHNob3RcIikuY2F0Y2goKGU9Pnt9KSksKGF3YWl0IGQodGhpcyxvKS5jYWxsKHRoaXMpKS5kaXNwYXRjaChcImFwcGx5LXNuYXBzaG90XCIse3NuYXBzaG90OmV9KX19dC5TbmFwc2hvdFNvdXJjZT1wLGk9bmV3IFdlYWtNYXAscj1uZXcgV2Vha01hcCxvPW5ldyBXZWFrTWFwLHM9bmV3IFdlYWtNYXAsYT1uZXcgV2Vha01hcH0sNzE1MzpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9OmZ1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLGVbaV09dFtuXX0pLHI9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIGUpXCJkZWZhdWx0XCI9PT1ufHx0Lmhhc093blByb3BlcnR5KG4pfHxpKHQsZSxuKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbz1uKDE3NDYpO3QuZGVmYXVsdD1vLmRlZmF1bHQscihuKDI4NzgpLHQpfSw2MjE1OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5nZXRTbmFwc2hvdFNvdXJjZUNoYW5uZWxOYW1lPXZvaWQgMCx0LmdldFNuYXBzaG90U291cmNlQ2hhbm5lbE5hbWU9ZT0+YHNuYXBzaG90LXNvdXJjZS1wcm92aWRlci0ke2UudXVpZH1gfSwzNjQxOihlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBpPW4oOTY1OSkscj1uKDUwMDcpLG89big0OTk3KTtjbGFzcyBzIGV4dGVuZHMgaS5FbWl0dGVyQmFzZXtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLFwic3lzdGVtXCIpfXNlbmRFeHRlcm5hbFByb2Nlc3NSZXF1ZXN0KGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKCgobixpKT0+e2NvbnN0IHI9XCJleHRlcm5hbC1wcm9jZXNzLWV4aXRlZFwiO2xldCBzLGEsYyxkO1wiZnVuY3Rpb25cIj09dHlwZW9mIHQubGlzdGVuZXImJihjPWU9Pntjb25zdCBuPWV8fHt9O2E9e3RvcGljOlwiZXhpdGVkXCIsdXVpZDpuLnByb2Nlc3NVdWlkfHxcIlwiLGV4aXRDb2RlOm4uZXhpdENvZGV8fDB9LHM9PT1lLnByb2Nlc3NVdWlkJiYodC5saXN0ZW5lcihhKSxkLnJlbW92ZUxpc3RlbmVyKHIsYykpfSx0aGlzLndpcmUubWUubmFtZXx8KHRoaXMud2lyZS5tZS5uYW1lPXRoaXMud2lyZS5tZS51dWlkKSxkPW5ldyBvLl9XaW5kb3codGhpcy53aXJlLHRoaXMud2lyZS5tZSksZC5vbihyLGMpKSx0aGlzLndpcmUuc2VuZEFjdGlvbihlLHQpLnRoZW4oKCh7cGF5bG9hZDplfSk9PntzPWUuZGF0YS51dWlkLG4oZS5kYXRhKSxhJiZzPT09YS51dWlkJiYodC5saXN0ZW5lcihhKSxkLnJlbW92ZUxpc3RlbmVyKHIsYykpfSkpLmNhdGNoKChlPT57ZCYmZC5yZW1vdmVMaXN0ZW5lcihyLGMpLGkoZSl9KSl9KSl9Z2V0VmVyc2lvbigpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC12ZXJzaW9uXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWNsZWFyQ2FjaGUoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiY2xlYXItY2FjaGVcIixlKS50aGVuKCgoKT0+e30pKX1kZWxldGVDYWNoZU9uRXhpdCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImRlbGV0ZS1jYWNoZS1yZXF1ZXN0XCIpLnRoZW4oKCgpPT57fSkpfWV4aXQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJleGl0LWRlc2t0b3BcIikudGhlbigoKCk9Pnt9KSl9YXN5bmMgZmV0Y2hNYW5pZmVzdChlKXtjb25zdHtwYXlsb2FkOntkYXRhOnR9fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImZldGNoLW1hbmlmZXN0XCIse21hbmlmZXN0VXJsOmV9KTtyZXR1cm4gdH1mbHVzaENvb2tpZVN0b3JlKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZmx1c2gtY29va2llLXN0b3JlXCIpLnRoZW4oKCgpPT57fSkpfWdldEFsbFdpbmRvd3MoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtYWxsLXdpbmRvd3NcIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0QWxsQXBwbGljYXRpb25zKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWFsbC1hcHBsaWNhdGlvbnNcIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0Q29tbWFuZExpbmVBcmd1bWVudHMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtY29tbWFuZC1saW5lLWFyZ3VtZW50c1wiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBnZXRDcmFzaFJlcG9ydGVyU3RhdGUoKXtjb25zdHtwYXlsb2FkOntkYXRhOntkaWFnbm9zdGljTW9kZTplLGlzUnVubmluZzp0fX19PWF3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWNyYXNoLXJlcG9ydGVyLXN0YXRlXCIpO3JldHVybiBjb25zb2xlLndhcm4oXCJkaWFnbm9zdGljTW9kZSBwcm9wZXJ0eSBpcyBkZXByZWNhdGVkLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvblwiKSx7ZGlhZ25vc3RpY01vZGU6ZSxkaWFnbm9zdGljc01vZGU6ZSxpc1J1bm5pbmc6dH19YXN5bmMgc3RhcnRDcmFzaFJlcG9ydGVyKGUpe2NvbnN0IHQ9ZSxuPXsuLi50LGRpYWdub3N0aWNNb2RlOnQuZGlhZ25vc3RpY3NNb2RlfHx0LmRpYWdub3N0aWNNb2RlfSx7cGF5bG9hZDp7ZGF0YTp7ZGlhZ25vc3RpY01vZGU6aSxpc1J1bm5pbmc6cn19fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInN0YXJ0LWNyYXNoLXJlcG9ydGVyXCIsbik7cmV0dXJue2RpYWdub3N0aWNNb2RlOmksZGlhZ25vc3RpY3NNb2RlOmksaXNSdW5uaW5nOnJ9fWdldFVuaXF1ZVVzZXJJZCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC11bmlxdWUtdXNlci1pZFwiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRFbnRpdHlJbmZvKGUsdCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWVudGl0eS1pbmZvXCIse3V1aWQ6ZSxuYW1lOnR9KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRFbnZpcm9ubWVudFZhcmlhYmxlKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1lbnZpcm9ubWVudC12YXJpYWJsZVwiLHtlbnZpcm9ubWVudFZhcmlhYmxlczplfSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0Rm9jdXNlZFdpbmRvdygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1mb2N1c2VkLXdpbmRvd1wiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBpc0FwcENlcnRpZmllZChlKXtjb25zdHtwYXlsb2FkOntkYXRhOntjZXJ0aWZpZWRJbmZvOnR9fX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJpcy1hcHAtY2VydGlmaWVkXCIse21hbmlmZXN0VXJsOmV9KTtyZXR1cm4gdH1nZXRJbnN0YWxsZWRSdW50aW1lcygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1pbnN0YWxsZWQtcnVudGltZXNcIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhLnJ1bnRpbWVzKSl9YXN5bmMgZ2V0SW5zdGFsbGVkQXBwcygpe2NvbnN0e3BheWxvYWQ6e2RhdGE6e2luc3RhbGxlZEFwcHM6ZX19fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1pbnN0YWxsZWQtYXBwc1wiKTtyZXR1cm4gZX1nZXRMb2coZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidmlldy1sb2dcIixlKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRNYWNoaW5lSWQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtbWFjaGluZS1pZFwiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRNaW5Mb2dMZXZlbCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1taW4tbG9nLWxldmVsXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldExvZ0xpc3QoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJsaXN0LWxvZ3NcIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0TW9uaXRvckluZm8oKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtbW9uaXRvci1pbmZvXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldE1vdXNlUG9zaXRpb24oKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtbW91c2UtcG9zaXRpb25cIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0UHJvY2Vzc0xpc3QoKXtyZXR1cm4gY29uc29sZS53YXJuKFwiU3lzdGVtLmdldFByb2Nlc3NMaXN0IGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFBsZWFzZSBjb25zaWRlciB1c2luZyBvdXIgbmV3IHByb2Nlc3MgQVBJczogV2luZG93LmdldFByb2Nlc3NJbmZvLCBWaWV3LmdldFByb2Nlc3NJbmZvLCBBcHBsaWNhdGlvbi5nZXRQcm9jZXNzSW5mbywgU3lzdGVtLmdldEFsbFByb2Nlc3NJbmZvXCIpLHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicHJvY2Vzcy1zbmFwc2hvdFwiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBnZXRBbGxQcm9jZXNzSW5mbygpe2NvbnN0e3BheWxvYWQ6e2RhdGE6ZX19PWF3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWFsbC1wcm9jZXNzLWluZm9cIix0aGlzLmlkZW50aXR5KTtyZXR1cm4gZX1nZXRQcm94eVNldHRpbmdzKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXByb3h5LXNldHRpbmdzXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldFJ1bnRpbWVJbmZvKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXJ1bnRpbWUtaW5mb1wiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRSdm1JbmZvKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXJ2bS1pbmZvXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldEhvc3RTcGVjcygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1ob3N0LXNwZWNzXCIpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWxhdW5jaEV4dGVybmFsUHJvY2VzcyhlKXtyZXR1cm4gdGhpcy5zZW5kRXh0ZXJuYWxQcm9jZXNzUmVxdWVzdChcImxhdW5jaC1leHRlcm5hbC1wcm9jZXNzXCIsZSl9bW9uaXRvckV4dGVybmFsUHJvY2VzcyhlKXtyZXR1cm4gdGhpcy5zZW5kRXh0ZXJuYWxQcm9jZXNzUmVxdWVzdChcIm1vbml0b3ItZXh0ZXJuYWwtcHJvY2Vzc1wiLGUpfWxvZyhlLHQpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIndyaXRlLXRvLWxvZ1wiLHtsZXZlbDplLG1lc3NhZ2U6dH0pLnRoZW4oKCgpPT57fSkpfW9wZW5VcmxXaXRoQnJvd3NlcihlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJvcGVuLXVybC13aXRoLWJyb3dzZXJcIix7dXJsOmV9KS50aGVuKCgoKT0+e30pKX1yZWxlYXNlRXh0ZXJuYWxQcm9jZXNzKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInJlbGVhc2UtZXh0ZXJuYWwtcHJvY2Vzc1wiLHt1dWlkOmV9KS50aGVuKCgoKT0+e30pKX1zaG93RGV2ZWxvcGVyVG9vbHMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwic2hvdy1kZXZlbG9wZXItdG9vbHNcIixlKS50aGVuKCgoKT0+e30pKX10ZXJtaW5hdGVFeHRlcm5hbFByb2Nlc3MoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidGVybWluYXRlLWV4dGVybmFsLXByb2Nlc3NcIixlKS50aGVuKCgoKT0+e30pKX11cGRhdGVQcm94eVNldHRpbmdzKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInVwZGF0ZS1wcm94eVwiLGUpLnRoZW4oKCgpPT57fSkpfWRvd25sb2FkQXNzZXQoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKChuLGkpPT57aWYoXCJOb2RlRW52aXJvbm1lbnRcIj09PXRoaXMud2lyZS5lbnZpcm9ubWVudC5jb25zdHJ1Y3Rvci5uYW1lKXJldHVybiB2b2lkIGkobmV3IHIuTm90U3VwcG9ydGVkRXJyb3IoXCJkb3dubG9hZEFzc2V0IG9ubHkgc3VwcG9ydGVkIGluIGFuIE9wZW5GaW4gUmVuZGVyIHByb2Nlc3NcIikpO2NvbnN0IG89dGhpcy53aXJlLmVudmlyb25tZW50LmdldE5leHRNZXNzYWdlSWQoKS50b1N0cmluZygpLHM9YGFzc2V0LWRvd25sb2FkLXByb2dyZXNzLSR7b31gLGE9YGFzc2V0LWRvd25sb2FkLWVycm9yLSR7b31gLGM9YGFzc2V0LWRvd25sb2FkLWNvbXBsZXRlLSR7b31gLGQ9ZT0+e2NvbnN0IG49e2Rvd25sb2FkZWRCeXRlczplLmRvd25sb2FkZWRCeXRlcyx0b3RhbEJ5dGVzOmUudG90YWxCeXRlc307dChuKX0saD0oKT0+e3RoaXMucmVtb3ZlTGlzdGVuZXIocyxkKX07dGhpcy5vbihzLGQpLHRoaXMub25jZShhLCgoZSx0KT0+e2NvbnN0IG49dHx8ZTtoKCksaShuZXcgci5SdW50aW1lRXJyb3IobikpfSkpLHRoaXMub25jZShjLCgoKT0+e2goKSxuKCl9KSk7Y29uc3QgbD1PYmplY3QuYXNzaWduKGUse2Rvd25sb2FkSWQ6b30pO3RoaXMud2lyZS5zZW5kQWN0aW9uKFwiZG93bmxvYWQtYXNzZXRcIixsKS5jYXRjaCgoZT0+e2goKSxpKGUpfSkpfSkpfWRvd25sb2FkUnVudGltZShlLHQpe3JldHVybiBuZXcgUHJvbWlzZSgoKG4saSk9PntpZihcIk5vZGVFbnZpcm9ubWVudFwiPT09dGhpcy53aXJlLmVudmlyb25tZW50LmNvbnN0cnVjdG9yLm5hbWUpcmV0dXJuIHZvaWQgaShuZXcgci5Ob3RTdXBwb3J0ZWRFcnJvcihcImRvd25sb2FkUnVudGltZSBvbmx5IHN1cHBvcnRlZCBpbiBhbiBPcGVuRmluIFJlbmRlciBwcm9jZXNzXCIpKTtjb25zdCBvPXRoaXMud2lyZS5lbnZpcm9ubWVudC5nZXROZXh0TWVzc2FnZUlkKCkudG9TdHJpbmcoKSxzPWBydW50aW1lLWRvd25sb2FkLXByb2dyZXNzLSR7b31gLGE9YHJ1bnRpbWUtZG93bmxvYWQtZXJyb3ItJHtvfWAsYz1gcnVudGltZS1kb3dubG9hZC1jb21wbGV0ZS0ke299YCxkPWU9Pntjb25zdCBuPXtkb3dubG9hZGVkQnl0ZXM6ZS5kb3dubG9hZGVkQnl0ZXMsdG90YWxCeXRlczplLnRvdGFsQnl0ZXN9O3Qobil9LGg9KCk9Pnt0aGlzLnJlbW92ZUxpc3RlbmVyKHMsZCl9O3RoaXMub24ocyxkKSx0aGlzLm9uY2UoYSwoKGUsdCk9Pntjb25zdCBuPXR8fGU7aCgpLGkobmV3IHIuUnVudGltZUVycm9yKG4pKX0pKSx0aGlzLm9uY2UoYywoKCk9PntoKCksbigpfSkpO2NvbnN0IGw9T2JqZWN0LmFzc2lnbihlLHtkb3dubG9hZElkOm99KTt0aGlzLndpcmUuc2VuZEFjdGlvbihcImRvd25sb2FkLXJ1bnRpbWVcIixsKS5jYXRjaCgoZT0+e2goKSxpKGUpfSkpfSkpfWRvd25sb2FkUHJlbG9hZFNjcmlwdHMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZG93bmxvYWQtcHJlbG9hZC1zY3JpcHRzXCIse3NjcmlwdHM6ZX0pLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldEFsbEV4dGVybmFsQXBwbGljYXRpb25zKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWFsbC1leHRlcm5hbC1hcHBsaWNhdGlvbnNcIikudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9Z2V0QXBwQXNzZXRJbmZvKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1hcHAtYXNzZXQtaW5mb1wiLGUpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldENvb2tpZXMoZSl7Y29uc3QgdD10aGlzLndpcmUuZW52aXJvbm1lbnQuZ2V0VXJsKCksbj1PYmplY3QuYXNzaWduKGUse3VybDp0fSk7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWNvb2tpZXNcIixuKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1zZXRNaW5Mb2dMZXZlbChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtbWluLWxvZy1sZXZlbFwiLHtsZXZlbDplfSkudGhlbigoKCk9Pnt9KSl9cmVzb2x2ZVV1aWQoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicmVzb2x2ZS11dWlkXCIse2VudGl0eUtleTplfSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9ZXhlY3V0ZU9uUmVtb3RlKGUsdCl7cmV0dXJuIHQucmVxdWVzdGluZ0lkZW50aXR5PWUsdGhpcy53aXJlLmZlcnJ5QWN0aW9uKHQpfXJlYWRSZWdpc3RyeVZhbHVlKGUsdCxuKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZWFkLXJlZ2lzdHJ5LXZhbHVlXCIse3Jvb3RLZXk6ZSxzdWJrZXk6dCx2YWx1ZTpufSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9cmVnaXN0ZXJFeHRlcm5hbENvbm5lY3Rpb24oZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwicmVnaXN0ZXItZXh0ZXJuYWwtY29ubmVjdGlvblwiLHt1dWlkOmV9KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBnZXRTZXJ2aWNlQ29uZmlndXJhdGlvbihlKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZS5uYW1lKXRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhbiBvYmplY3Qgd2l0aCBhIGBuYW1lYCBwcm9wZXJ0eSBoYXZpbmcgYSBzdHJpbmcgdmFsdWVcIik7Y29uc3R7bmFtZTp0fT1lO3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1zZXJ2aWNlLWNvbmZpZ3VyYXRpb25cIix7bmFtZTp0fSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9YXN5bmMgZ2V0U3lzdGVtQXBwQ29uZmlnKGUpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIk11c3QgcHJvdmlkZSBhIHN0cmluZyB2YWx1ZSBmb3IgbmFtZSBvZiBzeXN0ZW0gYXBwXCIpO3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1zeXN0ZW0tYXBwLWNvbmZpZ3VyYXRpb25cIix7bmFtZTplfSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9cnVuUnZtSGVhbHRoQ2hlY2soKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJydW4tcnZtLWhlYWx0aC1jaGVja1wiKS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1hc3luYyBsYXVuY2hNYW5pZmVzdChlLHQpe3JldHVybihhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImxhdW5jaC1tYW5pZmVzdFwiLHttYW5pZmVzdFVybDplLG9wdHM6dH0pKS5wYXlsb2FkLmRhdGEubWFuaWZlc3R9YXN5bmMgcXVlcnlQZXJtaXNzaW9uRm9yQ3VycmVudENvbnRleHQoZSl7Y29uc3QgdD17dXVpZDp0aGlzLndpcmUubWUudXVpZCxuYW1lOnRoaXMud2lyZS5tZS5uYW1lfTtyZXR1cm4oYXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJxdWVyeS1wZXJtaXNzaW9uLWZvci1jdXJyZW50LWNvbnRleHRcIix7YXBpTmFtZTplLGlkZW50aXR5OnR9KSkucGF5bG9hZC5kYXRhfWFzeW5jIGVuYWJsZU5hdGl2ZVdpbmRvd0ludGVncmF0aW9uUHJvdmlkZXIoZSl7Y29uc3R7cGF5bG9hZDp0fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImVuYWJsZS1uYXRpdmUtd2luZG93LWludGVncmF0aW9uLXByb3ZpZGVyXCIse3Blcm1pc3Npb25zOmV9KTtyZXR1cm4gdC5kYXRhfWFzeW5jIHJlZ2lzdGVyVXNhZ2Uoe2RhdGE6ZSx0eXBlOnR9KXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInJlZ2lzdGVyLXVzYWdlXCIse2RhdGE6ZSx0eXBlOnR9KX19dC5kZWZhdWx0PXN9LDI0MDooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgaT1uKDk2NTkpLHI9big0OTk5KSxvPW4oNDE2OSk7Y2xhc3MgcyBleHRlbmRzIGkuQmFzZXthc3luYyBjcmVhdGUoZSl7Y29uc3R7dXVpZDp0fT10aGlzLndpcmUubWU7aWYoIWUubmFtZXx8XCJzdHJpbmdcIiE9dHlwZW9mIGUubmFtZSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIG5hbWUgcHJvcGVydHkgYXMgYSBzdHJpbmcgaW4gb3JkZXIgdG8gY3JlYXRlIGEgVmlldy5cIik7cmV0dXJuIHRoaXMud2lyZS5lbnZpcm9ubWVudC5jaGlsZFZpZXdzP2F3YWl0IHRoaXMud2lyZS5lbnZpcm9ubWVudC5jcmVhdGVDaGlsZENvbnRlbnQoe2VudGl0eVR5cGU6XCJ2aWV3XCIsb3B0aW9uczp7Li4uZSx1dWlkOnR9fSk6YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJjcmVhdGUtdmlld1wiLHsuLi5lLHV1aWQ6dH0pLHRoaXMud3JhcFN5bmMoe3V1aWQ6dCxuYW1lOmUubmFtZX0pfWFzeW5jIHdyYXAoZSl7dGhpcy53aXJlLnNlbmRBY3Rpb24oXCJ2aWV3LXdyYXBcIik7Y29uc3QgdD1yLnZhbGlkYXRlSWRlbnRpdHkoZSk7aWYodCl0aHJvdyBuZXcgRXJyb3IodCk7cmV0dXJuIG5ldyBvLlZpZXcodGhpcy53aXJlLGUpfXdyYXBTeW5jKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwidmlldy13cmFwLXN5bmNcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD1yLnZhbGlkYXRlSWRlbnRpdHkoZSk7aWYodCl0aHJvdyBuZXcgRXJyb3IodCk7cmV0dXJuIG5ldyBvLlZpZXcodGhpcy53aXJlLGUpfWdldEN1cnJlbnQoKXtpZih0aGlzLndpcmUuc2VuZEFjdGlvbihcInZpZXctZ2V0LWN1cnJlbnRcIikuY2F0Y2goKGU9Pnt9KSksIXRoaXMud2lyZS5tZS5pc1ZpZXcpdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBub3QgaW4gYSBWaWV3IGNvbnRleHRcIik7Y29uc3R7dXVpZDplLG5hbWU6dH09dGhpcy53aXJlLm1lO3JldHVybiB0aGlzLndyYXAoe3V1aWQ6ZSxuYW1lOnR9KX1nZXRDdXJyZW50U3luYygpe2lmKHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidmlldy1nZXQtY3VycmVudC1zeW5jXCIpLmNhdGNoKChlPT57fSkpLCF0aGlzLndpcmUubWUuaXNWaWV3KXRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbm90IGluIGEgVmlldyBjb250ZXh0XCIpO2NvbnN0e3V1aWQ6ZSxuYW1lOnR9PXRoaXMud2lyZS5tZTtyZXR1cm4gdGhpcy53cmFwU3luYyh7dXVpZDplLG5hbWU6dH0pfX10LmRlZmF1bHQ9c30sMzE2MzooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5WaWV3PXZvaWQgMDtjb25zdCBpPW4oNDYzNikscj1uKDQ5OTcpO2NsYXNzIG8gZXh0ZW5kcyBpLldlYkNvbnRlbnRze2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSx0LFwidmlld1wiKSx0aGlzLmlkZW50aXR5PXQsdGhpcy5hdHRhY2g9YXN5bmMgZT0+e2F3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiYXR0YWNoLXZpZXdcIix7dGFyZ2V0OmUsLi4udGhpcy5pZGVudGl0eX0pfSx0aGlzLmRlc3Ryb3k9YXN5bmMoKT0+e2F3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZGVzdHJveS12aWV3XCIsey4uLnRoaXMuaWRlbnRpdHl9KX0sdGhpcy5zaG93PWFzeW5jKCk9Pnthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNob3ctdmlld1wiLHsuLi50aGlzLmlkZW50aXR5fSl9LHRoaXMuaGlkZT1hc3luYygpPT57YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJoaWRlLXZpZXdcIix7Li4udGhpcy5pZGVudGl0eX0pfSx0aGlzLnNldEJvdW5kcz1hc3luYyBlPT57YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtdmlldy1ib3VuZHNcIix7Ym91bmRzOmUsLi4udGhpcy5pZGVudGl0eX0pfSx0aGlzLmdldEJvdW5kcz1hc3luYygpPT4oYXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtdmlldy1ib3VuZHNcIix7Li4udGhpcy5pZGVudGl0eX0pKS5wYXlsb2FkLmRhdGEsdGhpcy5nZXRJbmZvPWFzeW5jKCk9Pihhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC12aWV3LWluZm9cIix7Li4udGhpcy5pZGVudGl0eX0pKS5wYXlsb2FkLmRhdGEsdGhpcy5nZXRQYXJlbnRMYXlvdXQ9YXN5bmMoKT0+KHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidmlldy1nZXQtcGFyZW50LWxheW91dFwiLHsuLi50aGlzLmlkZW50aXR5fSkuY2F0Y2goKGU9Pnt9KSksKGF3YWl0IHRoaXMuZ2V0Q3VycmVudFdpbmRvdygpKS5nZXRMYXlvdXQoKSksdGhpcy5nZXRPcHRpb25zPWFzeW5jKCk9PnRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXZpZXctb3B0aW9uc1wiLHsuLi50aGlzLmlkZW50aXR5fSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSksdGhpcy51cGRhdGVPcHRpb25zPWFzeW5jIGU9PnRoaXMud2lyZS5zZW5kQWN0aW9uKFwidXBkYXRlLXZpZXctb3B0aW9uc1wiLHtvcHRpb25zOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpLHRoaXMuZ2V0Q3VycmVudFdpbmRvdz1hc3luYygpPT57Y29uc3R7cGF5bG9hZDp7ZGF0YTplfX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtdmlldy13aW5kb3dcIix7Li4udGhpcy5pZGVudGl0eX0pO3JldHVybiBuZXcgci5fV2luZG93KHRoaXMud2lyZSxlKX19YXN5bmMgZm9jdXMoe2VtaXRTeW50aEZvY3VzZWQ6ZX09e2VtaXRTeW50aEZvY3VzZWQ6ITB9KXtjb25zdCB0PWF3YWl0IHRoaXMuZ2V0Q3VycmVudFdpbmRvdygpO2F3YWl0IHQuZm9jdXNlZFdlYlZpZXdXYXNDaGFuZ2VkKCksYXdhaXQgc3VwZXIuZm9jdXMoe2VtaXRTeW50aEZvY3VzZWQ6ZX0pfX10LlZpZXc9b30sNDE2OTpmdW5jdGlvbihlLHQsbil7dmFyIGk9dGhpcyYmdGhpcy5fX2NyZWF0ZUJpbmRpbmd8fChPYmplY3QuY3JlYXRlP2Z1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRbbl19fSl9OmZ1bmN0aW9uKGUsdCxuLGkpe3ZvaWQgMD09PWkmJihpPW4pLGVbaV09dFtuXX0pLHI9dGhpcyYmdGhpcy5fX2V4cG9ydFN0YXJ8fGZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuIGluIGUpXCJkZWZhdWx0XCI9PT1ufHx0Lmhhc093blByb3BlcnR5KG4pfHxpKHQsZSxuKX07T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3Qgbz1uKDI0MCk7dC5kZWZhdWx0PW8uZGVmYXVsdCxyKG4oMzE2MyksdCl9LDQ2MzY6KGUsdCxuKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuV2ViQ29udGVudHM9dm9pZCAwO2NvbnN0IGk9big5NjU5KTtjbGFzcyByIGV4dGVuZHMgaS5FbWl0dGVyQmFzZXtjb25zdHJ1Y3RvcihlLHQsbil7c3VwZXIoZSxuLHQudXVpZCx0Lm5hbWUpLHRoaXMuZW50aXR5VHlwZT1ufWNhcHR1cmVQYWdlKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNhcHR1cmUtcGFnZVwiLHtvcHRpb25zOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWV4ZWN1dGVKYXZhU2NyaXB0KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImV4ZWN1dGUtamF2YXNjcmlwdC1pbi13aW5kb3dcIix7Li4udGhpcy5pZGVudGl0eSxjb2RlOmV9KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRab29tTGV2ZWwoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtem9vbS1sZXZlbFwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfXNldFpvb21MZXZlbChlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtem9vbS1sZXZlbFwiLHsuLi50aGlzLmlkZW50aXR5LGxldmVsOmV9KS50aGVuKCgoKT0+e30pKX1uYXZpZ2F0ZShlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJuYXZpZ2F0ZS13aW5kb3dcIix7Li4udGhpcy5pZGVudGl0eSx1cmw6ZX0pLnRoZW4oKCgpPT57fSkpfW5hdmlnYXRlQmFjaygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIm5hdmlnYXRlLXdpbmRvdy1iYWNrXCIsey4uLnRoaXMuaWRlbnRpdHl9KS50aGVuKCgoKT0+e30pKX1hc3luYyBuYXZpZ2F0ZUZvcndhcmQoKXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcIm5hdmlnYXRlLXdpbmRvdy1mb3J3YXJkXCIsey4uLnRoaXMuaWRlbnRpdHl9KX1zdG9wTmF2aWdhdGlvbigpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInN0b3Atd2luZG93LW5hdmlnYXRpb25cIix7Li4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXJlbG9hZChlPSExKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZWxvYWQtd2luZG93XCIse2lnbm9yZUNhY2hlOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXByaW50KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInByaW50XCIsey4uLnRoaXMuaWRlbnRpdHksb3B0aW9uczplfSkudGhlbigoKCk9Pnt9KSl9ZmluZEluUGFnZShlLHQpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImZpbmQtaW4tcGFnZVwiLHsuLi50aGlzLmlkZW50aXR5LHNlYXJjaFRlcm06ZSxvcHRpb25zOnR9KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1zdG9wRmluZEluUGFnZShlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzdG9wLWZpbmQtaW4tcGFnZVwiLHsuLi50aGlzLmlkZW50aXR5LGFjdGlvbjplfSkudGhlbigoKCk9Pnt9KSl9Z2V0UHJpbnRlcnMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtcHJpbnRlcnNcIix7Li4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWFzeW5jIGZvY3VzKHtlbWl0U3ludGhGb2N1c2VkOmV9PXtlbWl0U3ludGhGb2N1c2VkOiEwfSl7YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJmb2N1cy13aW5kb3dcIix7ZW1pdFN5bnRoRm9jdXNlZDplLC4uLnRoaXMuaWRlbnRpdHl9KX1hc3luYyBzaG93RGV2ZWxvcGVyVG9vbHMoKXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNob3ctZGV2ZWxvcGVyLXRvb2xzXCIsdGhpcy5pZGVudGl0eSl9YXN5bmMgZ2V0UHJvY2Vzc0luZm8oKXtjb25zdHtwYXlsb2FkOntkYXRhOmV9fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1wcm9jZXNzLWluZm9cIix0aGlzLmlkZW50aXR5KTtyZXR1cm4gZX1hc3luYyBnZXRTaGFyZWRXb3JrZXJzKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXNoYXJlZC13b3JrZXJzXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9YXN5bmMgaW5zcGVjdFNoYXJlZFdvcmtlcigpe2F3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW5zcGVjdC1zaGFyZWQtd29ya2VyXCIsey4uLnRoaXMuaWRlbnRpdHl9KX1hc3luYyBpbnNwZWN0U2hhcmVkV29ya2VyQnlJZChlKXthd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImluc3BlY3Qtc2hhcmVkLXdvcmtlci1ieS1pZFwiLHsuLi50aGlzLmlkZW50aXR5LHdvcmtlcklkOmV9KX1hc3luYyBpbnNwZWN0U2VydmljZVdvcmtlcigpe2F3YWl0IHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiaW5zcGVjdC1zZXJ2aWNlLXdvcmtlclwiLHsuLi50aGlzLmlkZW50aXR5fSl9fXQuV2ViQ29udGVudHM9cn0sMjE2MzooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7Y29uc3QgaT1uKDk2NTkpLHI9big0OTk5KSxvPW4oNTA0Nyk7Y2xhc3MgcyBleHRlbmRzIGkuQmFzZXthc3luYyB3cmFwKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LXdyYXBcIikuY2F0Y2goKGU9Pnt9KSk7Y29uc3QgdD1yLnZhbGlkYXRlSWRlbnRpdHkoZSk7aWYodCl0aHJvdyBuZXcgRXJyb3IodCk7cmV0dXJuIG5ldyBvLl9XaW5kb3codGhpcy53aXJlLGUpfXdyYXBTeW5jKGUpe3RoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LXdyYXAtc3luY1wiKS5jYXRjaCgoZT0+e30pKTtjb25zdCB0PXIudmFsaWRhdGVJZGVudGl0eShlKTtpZih0KXRocm93IG5ldyBFcnJvcih0KTtyZXR1cm4gbmV3IG8uX1dpbmRvdyh0aGlzLndpcmUsZSl9Y3JlYXRlKGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNyZWF0ZS13aW5kb3dcIikuY2F0Y2goKGU9Pnt9KSksbmV3IG8uX1dpbmRvdyh0aGlzLndpcmUse3V1aWQ6dGhpcy5tZS51dWlkLG5hbWU6ZS5uYW1lfSkuY3JlYXRlV2luZG93KGUpfWdldEN1cnJlbnQoKXtpZih0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC1jdXJyZW50LXdpbmRvd1wiKS5jYXRjaCgoZT0+e30pKSwhdGhpcy53aXJlLm1lLmlzV2luZG93KXRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbm90IGluIGEgV2luZG93IGNvbnRleHRcIik7Y29uc3R7dXVpZDplLG5hbWU6dH09dGhpcy53aXJlLm1lO3JldHVybiB0aGlzLndyYXAoe3V1aWQ6ZSxuYW1lOnR9KX1nZXRDdXJyZW50U3luYygpe2lmKHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWN1cnJlbnQtd2luZG93LXN5bmNcIikuY2F0Y2goKGU9Pnt9KSksIXRoaXMud2lyZS5tZS5pc1dpbmRvdyl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIG5vdCBpbiBhIFdpbmRvdyBjb250ZXh0XCIpO2NvbnN0e3V1aWQ6ZSxuYW1lOnR9PXRoaXMud2lyZS5tZTtyZXR1cm4gdGhpcy53cmFwU3luYyh7dXVpZDplLG5hbWU6dH0pfX10LmRlZmF1bHQ9c30sNTA0NzooZSx0LG4pPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5fV2luZG93PXZvaWQgMDtjb25zdCBpPW4oNzI2NCkscj1uKDQ2MzYpLG89big0MTY5KTtjbGFzcyBzIGV4dGVuZHMgci5XZWJDb250ZW50c3tjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsdCxcIndpbmRvd1wiKSx0aGlzLmlkZW50aXR5PXR9Y3JlYXRlV2luZG93KGUpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIndpbmRvdy1jcmVhdGUtd2luZG93XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksbmV3IFByb21pc2UoKCh0LG4pPT57Y29uc3QgaT1cImZpcmUtY29uc3RydWN0b3ItY2FsbGJhY2tcIixyPW5ldyBQcm9taXNlKChlPT57dGhpcy5vbihpLChmdW5jdGlvbiB0KG4pe2xldCByO2NvbnN0e3N1Y2Nlc3M6b309bixzPW4uZGF0YSx7bWVzc2FnZTphfT1zO3I9bz97aHR0cFJlc3BvbnNlQ29kZTpzLmh0dHBSZXNwb25zZUNvZGUsYXBpSW5qZWN0ZWQ6cy5hcGlJbmplY3RlZH06e21lc3NhZ2U6cy5tZXNzYWdlLG5ldHdvcmtFcnJvckNvZGU6cy5uZXR3b3JrRXJyb3JDb2RlLHN0YWNrOnMuc3RhY2t9LHRoaXMucmVtb3ZlTGlzdGVuZXIoaSx0KSxlKHttZXNzYWdlOmEsY2JQYXlsb2FkOnIsc3VjY2VzczpvfSl9KSl9KSk7dm9pZCAwPT09ZS53YWl0Rm9yUGFnZUxvYWQmJihlLndhaXRGb3JQYWdlTG9hZD0hMSksdm9pZCAwPT09ZS5hdXRvU2hvdyYmKGUuYXV0b1Nob3c9ITApO2NvbnN0IG89dGhpcy53aXJlLmVudmlyb25tZW50LmNyZWF0ZUNoaWxkQ29udGVudCh7ZW50aXR5VHlwZTpcIndpbmRvd1wiLG9wdGlvbnM6ZX0pO1Byb21pc2UuYWxsKFtyLG9dKS50aGVuKChlPT57Y29uc3QgaT1lWzBdO2kuc3VjY2Vzcz90KHRoaXMpOm4oaSk7dHJ5e3RoaXMuZ2V0V2ViV2luZG93KCkuZmluLl9faW50ZXJuYWxfLm9wZW5lclN1Y2Nlc3NDQkNhbGxlZCgpfWNhdGNoKGUpe319KSkuY2F0Y2gobil9KSl9Z2V0QWxsRnJhbWVzKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LWFsbC1mcmFtZXNcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRCb3VuZHMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtd2luZG93LWJvdW5kc1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWNlbnRlcigpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNlbnRlci13aW5kb3dcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1ibHVyKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiYmx1ci13aW5kb3dcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1icmluZ1RvRnJvbnQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJicmluZy13aW5kb3ctdG8tZnJvbnRcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1hbmltYXRlKGUsdCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiYW5pbWF0ZS13aW5kb3dcIix7dHJhbnNpdGlvbnM6ZSxvcHRpb25zOnQsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfWhpZGUoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJoaWRlLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfWNsb3NlKGU9ITEpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImNsb3NlLXdpbmRvd1wiLHtmb3JjZTplLC4uLnRoaXMuaWRlbnRpdHl9KS50aGVuKCgoKT0+e09iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLG51bGwpfSkpfWZvY3VzZWRXZWJWaWV3V2FzQ2hhbmdlZCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImZvY3VzZWQtd2Vidmlldy1jaGFuZ2VkXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKCk9Pnt9KSl9Z2V0TmF0aXZlSWQoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtd2luZG93LW5hdGl2ZS1pZFwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWFzeW5jIGdldEN1cnJlbnRWaWV3cygpe2NvbnN0e3BheWxvYWQ6ZX09YXdhaXQgdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJ3aW5kb3ctZ2V0LXZpZXdzXCIsdGhpcy5pZGVudGl0eSk7cmV0dXJuIGUuZGF0YS5tYXAoKGU9Pm5ldyBvLlZpZXcodGhpcy53aXJlLGUpKSl9ZGlzYWJsZUZyYW1lKCl7cmV0dXJuIGNvbnNvbGUud2FybihcIkZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQ7IHVzZSBkaXNhYmxlVXNlck1vdmVtZW50IGluc3RlYWQuXCIpLHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZGlzYWJsZS13aW5kb3ctZnJhbWVcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1kaXNhYmxlVXNlck1vdmVtZW50KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZGlzYWJsZS13aW5kb3ctZnJhbWVcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1lbmFibGVGcmFtZSgpe3JldHVybiBjb25zb2xlLndhcm4oXCJGdW5jdGlvbiBpcyBkZXByZWNhdGVkOyB1c2UgZW5hYmxlVXNlck1vdmVtZW50IGluc3RlYWQuXCIpLHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZW5hYmxlLXdpbmRvdy1mcmFtZVwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfWVuYWJsZVVzZXJNb3ZlbWVudCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImVuYWJsZS13aW5kb3ctZnJhbWVcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1mbGFzaCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImZsYXNoLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfXN0b3BGbGFzaGluZygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInN0b3AtZmxhc2gtd2luZG93XCIsdGhpcy5pZGVudGl0eSkudGhlbigoKCk9Pnt9KSl9Z2V0SW5mbygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC13aW5kb3ctaW5mb1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWFzeW5jIGdldExheW91dCgpe2lmKHRoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LWdldC1sYXlvdXRcIix0aGlzLmlkZW50aXR5KS5jYXRjaCgoZT0+e30pKSwhKGF3YWl0IHRoaXMuZ2V0T3B0aW9ucygpKS5sYXlvdXQpdGhyb3cgbmV3IEVycm9yKFwiV2luZG93IGRvZXMgbm90IGhhdmUgYSBMYXlvdXRcIik7cmV0dXJuIHRoaXMuZmluLlBsYXRmb3JtLkxheW91dC53cmFwKHRoaXMuaWRlbnRpdHkpfWdldE9wdGlvbnMoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJnZXQtd2luZG93LW9wdGlvbnNcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoe3BheWxvYWQ6ZX0pPT5lLmRhdGEpKX1nZXRQYXJlbnRBcHBsaWNhdGlvbigpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIndpbmRvdy1nZXQtcGFyZW50LWFwcGxpY2F0aW9uXCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksUHJvbWlzZS5yZXNvbHZlKG5ldyBpLkFwcGxpY2F0aW9uKHRoaXMud2lyZSx0aGlzLmlkZW50aXR5KSl9Z2V0UGFyZW50V2luZG93KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LWdldC1wYXJlbnQtd2luZG93XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksUHJvbWlzZS5yZXNvbHZlKG5ldyBpLkFwcGxpY2F0aW9uKHRoaXMud2lyZSx0aGlzLmlkZW50aXR5KSkudGhlbigoZT0+ZS5nZXRXaW5kb3coKSkpfWFzeW5jIGdldFNuYXBzaG90KGUpe2NvbnN0IHQ9e2FyZWE6ZSwuLi50aGlzLmlkZW50aXR5fTtyZXR1cm4gY29uc29sZS53YXJuKFwiV2luZG93LmdldFNuYXBzaG90IGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgV2luZG93LmNhcHR1cmVQYWdlXCIpLChhd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcImdldC13aW5kb3ctc25hcHNob3RcIix0KSkucGF5bG9hZC5kYXRhfWdldFN0YXRlKCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwiZ2V0LXdpbmRvdy1zdGF0ZVwiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCh7cGF5bG9hZDplfSk9PmUuZGF0YSkpfWdldFdlYldpbmRvdygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIndpbmRvdy1nZXQtd2ViLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLmNhdGNoKChlPT57fSkpLHRoaXMud2lyZS5lbnZpcm9ubWVudC5nZXRXZWJXaW5kb3codGhpcy5pZGVudGl0eSl9aXNNYWluV2luZG93KCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LWlzLW1haW4td2luZG93XCIsdGhpcy5pZGVudGl0eSkuY2F0Y2goKGU9Pnt9KSksdGhpcy5tZS51dWlkPT09dGhpcy5tZS5uYW1lfWlzU2hvd2luZygpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcImlzLXdpbmRvdy1zaG93aW5nXCIsdGhpcy5pZGVudGl0eSkudGhlbigoKHtwYXlsb2FkOmV9KT0+ZS5kYXRhKSl9bWF4aW1pemUoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJtYXhpbWl6ZS13aW5kb3dcIix0aGlzLmlkZW50aXR5KS50aGVuKCgoKT0+e30pKX1taW5pbWl6ZSgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIm1pbmltaXplLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfW1vdmVCeShlLHQpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIm1vdmUtd2luZG93LWJ5XCIse2RlbHRhTGVmdDplLGRlbHRhVG9wOnQsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfW1vdmVUbyhlLHQpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcIm1vdmUtd2luZG93XCIse2xlZnQ6ZSx0b3A6dCwuLi50aGlzLmlkZW50aXR5fSkudGhlbigoKCk9Pnt9KSl9cmVzaXplQnkoZSx0LG4pe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInJlc2l6ZS13aW5kb3ctYnlcIix7ZGVsdGFXaWR0aDpNYXRoLmZsb29yKGUpLGRlbHRhSGVpZ2h0Ok1hdGguZmxvb3IodCksYW5jaG9yOm4sLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXJlc2l6ZVRvKGUsdCxuKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZXNpemUtd2luZG93XCIse3dpZHRoOk1hdGguZmxvb3IoZSksaGVpZ2h0Ok1hdGguZmxvb3IodCksYW5jaG9yOm4sLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXJlc3RvcmUoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJyZXN0b3JlLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfXNldEFzRm9yZWdyb3VuZCgpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNldC1mb3JlZ3JvdW5kLXdpbmRvd1wiLHRoaXMuaWRlbnRpdHkpLnRoZW4oKCgpPT57fSkpfXNldEJvdW5kcyhlKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJzZXQtd2luZG93LWJvdW5kc1wiLHsuLi5lLC4uLnRoaXMuaWRlbnRpdHl9KS50aGVuKCgoKT0+e30pKX1zaG93KGU9ITEpe3JldHVybiB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNob3ctd2luZG93XCIse2ZvcmNlOmUsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXNob3dBdChlLHQsbj0hMSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwic2hvdy1hdC13aW5kb3dcIix7Zm9yY2U6bixsZWZ0Ok1hdGguZmxvb3IoZSksdG9wOk1hdGguZmxvb3IodCksLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfXVwZGF0ZU9wdGlvbnMoZSl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwidXBkYXRlLXdpbmRvdy1vcHRpb25zXCIse29wdGlvbnM6ZSwuLi50aGlzLmlkZW50aXR5fSkudGhlbigoKCk9Pnt9KSl9YXV0aGVudGljYXRlKGUsdCl7cmV0dXJuIHRoaXMud2lyZS5zZW5kQWN0aW9uKFwid2luZG93LWF1dGhlbnRpY2F0ZVwiLHt1c2VyTmFtZTplLHBhc3N3b3JkOnQsLi4udGhpcy5pZGVudGl0eX0pLnRoZW4oKCgpPT57fSkpfWFzeW5jIHNob3dQb3B1cE1lbnUoZSl7Y29uc3R7cGF5bG9hZDp0fT1hd2FpdCB0aGlzLndpcmUuc2VuZEFjdGlvbihcInNob3ctcG9wdXAtbWVudVwiLHtvcHRpb25zOmUsLi4udGhpcy5pZGVudGl0eX0pO3JldHVybiB0LmRhdGF9YXN5bmMgY2xvc2VQb3B1cE1lbnUoKXtyZXR1cm4gdGhpcy53aXJlLnNlbmRBY3Rpb24oXCJjbG9zZS1wb3B1cC1tZW51XCIsey4uLnRoaXMuaWRlbnRpdHl9KS50aGVuKCgoKT0+e30pKX19dC5fV2luZG93PXN9LDQ5OTc6ZnVuY3Rpb24oZSx0LG4pe3ZhciBpPXRoaXMmJnRoaXMuX19jcmVhdGVCaW5kaW5nfHwoT2JqZWN0LmNyZWF0ZT9mdW5jdGlvbihlLHQsbixpKXt2b2lkIDA9PT1pJiYoaT1uKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0W25dfX0pfTpmdW5jdGlvbihlLHQsbixpKXt2b2lkIDA9PT1pJiYoaT1uKSxlW2ldPXRbbl19KSxyPXRoaXMmJnRoaXMuX19leHBvcnRTdGFyfHxmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiBlKVwiZGVmYXVsdFwiPT09bnx8dC5oYXNPd25Qcm9wZXJ0eShuKXx8aSh0LGUsbil9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2NvbnN0IG89bigyMTYzKTt0LmRlZmF1bHQ9by5kZWZhdWx0LHIobig1MDQ3KSx0KX0sMTY4MTooZSx0LG4pPT57dmFyIGk7dC5IPXZvaWQgMDtjb25zdCByPW4oNjQ2NSksbz1uKDY1NDUpLHM9big5Mjk4KTtjbGFzcyBhIGV4dGVuZHMgci5FdmVudEVtaXR0ZXJ7Y29ubmVjdChlKXt0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIG5vdCBydW5uaW5nIGluIE9wZW5GaW4uXCIpfWNvbm5lY3RTeW5jKCl7dGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBub3QgcnVubmluZyBpbiBPcGVuRmluLlwiKX1zZW5kKGUpe3Rocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbm90IHJ1bm5pbmcgaW4gT3BlbkZpbi5cIil9c2h1dGRvd24oKXt0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIG5vdCBydW5uaW5nIGluIE9wZW5GaW4uXCIpfWNvbnN0cnVjdG9yKCl7c3VwZXIoKX19Y2xhc3MgY3tjb25zdHJ1Y3Rvcigpe3RoaXMuY2hpbGRWaWV3cz0hMH1nZXREZWZhdWx0Q2hhbm5lbE9wdGlvbnMoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX1nZXRSdGNQZWVyKCl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIil9Z2V0TWFuYWdlckNvbnN0cnVjdG9yKCl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIil9Z2V0UHJvdmlkZXJJbml0aWFsaXplcigpe3Rocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpfXdyaXRlVG9rZW4oZSx0KXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX1yZXRyaWV2ZVBvcnQoZSl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIil9Z2V0TmV4dE1lc3NhZ2VJZCgpe3Rocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpfWdldFJhbmRvbUlkKCl7dGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIil9Y3JlYXRlQ2hpbGRDb250ZW50KGUpe3Rocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpfWdldFdlYldpbmRvdyhlKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX1nZXRDdXJyZW50RW50aXR5SWRlbnRpdHkoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX1nZXRDdXJyZW50RW50aXR5VHlwZSgpe3JldHVyblwidW5rbm93blwifXJhaXNlRXZlbnQoZSx0KXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX1nZXRVcmwoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX13aGVuUmVhZHkoKXt0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKX19dC5IPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJihudWxsPT09KGk9d2luZG93KXx8dm9pZCAwPT09aT92b2lkIDA6aS5maW4pfHwoKCk9Pntjb25zdCBlPW5ldyBjLHQ9bmV3IHMuZGVmYXVsdChhLGUse3V1aWQ6XCJcIixuYW1lOlwiXCJ9KTtyZXR1cm4gbmV3IG8uZGVmYXVsdCh0KX0pKCl9LDgwNjg6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmdldEZpbj10LnJlZ2lzdGVyRmluPXZvaWQgMDtjb25zdCBuPW5ldyBXZWFrTWFwO3QucmVnaXN0ZXJGaW49ZnVuY3Rpb24oZSx0KXtuLnNldChlLHQpfSx0LmdldEZpbj1mdW5jdGlvbihlKXtjb25zdCB0PW4uZ2V0KGUpO2lmKCF0KXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2NhdGUgZmluIGFwaSBmb3IgZ2l2ZW4gdHJhbnNwb3J0XCIpO3JldHVybiB0fX0sNTAwNzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuUnVudGltZUVycm9yPXQuTm90U3VwcG9ydGVkRXJyb3I9dC5Ob3RJbXBsZW1lbnRlZEVycm9yPXQuTm9BY2tFcnJvcj10LkR1cGxpY2F0ZUNvcnJlbGF0aW9uRXJyb3I9dC5VbmV4cGVjdGVkQWN0aW9uRXJyb3I9dC5EaXNjb25uZWN0ZWRFcnJvcj12b2lkIDA7Y2xhc3MgbiBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKGBFeHBlY3RlZCB3ZWJzb2NrZXQgc3RhdGUgT1BFTiBidXQgZm91bmQgJHtlfWApLHRoaXMucmVhZHlTdGF0ZT1lfX10LkRpc2Nvbm5lY3RlZEVycm9yPW47Y2xhc3MgaSBleHRlbmRzIEVycm9ye310LlVuZXhwZWN0ZWRBY3Rpb25FcnJvcj1pO2NsYXNzIHIgZXh0ZW5kcyBFcnJvcnt9dC5EdXBsaWNhdGVDb3JyZWxhdGlvbkVycm9yPXI7Y2xhc3MgbyBleHRlbmRzIEVycm9ye310Lk5vQWNrRXJyb3I9bztjbGFzcyBzIGV4dGVuZHMgRXJyb3J7fXQuTm90SW1wbGVtZW50ZWRFcnJvcj1zO2NsYXNzIGEgZXh0ZW5kcyBFcnJvcnt9dC5Ob3RTdXBwb3J0ZWRFcnJvcj1hO2NsYXNzIGMgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihlKXtjb25zdCB0PWUucGF5bG9hZHx8ZSx7cmVhc29uOm4sZXJyb3I6aX09dDtzdXBlcihuKSx0aGlzLm5hbWU9XCJSdW50aW1lRXJyb3JcIiwobnVsbD09aT92b2lkIDA6aS5zdGFjaykmJih0aGlzLnN0YWNrPWkuc3RhY2spfX10LlJ1bnRpbWVFcnJvcj1jfSw5Mjk4OmZ1bmN0aW9uKGUsdCxuKXt2YXIgaSxyPXRoaXMmJnRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZFNldHx8ZnVuY3Rpb24oZSx0LG4pe2lmKCF0LmhhcyhlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtyZXR1cm4gdC5zZXQoZSxuKSxufSxvPXRoaXMmJnRoaXMuX19jbGFzc1ByaXZhdGVGaWVsZEdldHx8ZnVuY3Rpb24oZSx0KXtpZighdC5oYXMoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7cmV0dXJuIHQuZ2V0KGUpfTtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtjb25zdCBzPW4oNjQ2NSksYT1uKDg2MjQpLGM9big1MDA3KSxkPW4oMjczNCksaD1uKDk2NDEpO2NsYXNzIGwgZXh0ZW5kcyBzLkV2ZW50RW1pdHRlcntjb25zdHJ1Y3RvcihlLHQsbil7c3VwZXIoKSx0aGlzLndpcmVMaXN0ZW5lcnM9bmV3IE1hcCx0aGlzLnRvcGljUmVmTWFwPW5ldyBNYXAsdGhpcy5ldmVudEFnZ3JlZ2F0b3I9bmV3IGQuZGVmYXVsdCx0aGlzLm1lc3NhZ2VIYW5kbGVycz1bdGhpcy5ldmVudEFnZ3JlZ2F0b3IuZGlzcGF0Y2hFdmVudF0saS5zZXQodGhpcyx2b2lkIDApLHRoaXMuY29ubmVjdFN5bmM9KCk9PntvKHRoaXMsaSkuY29ubmVjdFN5bmMoKX0sdGhpcy5nZXRQb3J0PSgpPT57aWYoXCJOb2RlRW52aXJvbm1lbnRcIiE9PXRoaXMuZW52aXJvbm1lbnQuY29uc3RydWN0b3IubmFtZSl0aHJvdyBuZXcgYy5Ob3RJbXBsZW1lbnRlZEVycm9yKFwiTm90IEltcGxlbWVudGVkXCIpO3JldHVybiBvKHRoaXMsaSkud2lyZS51cmwuc3BsaXQoXCI6XCIpLnNsaWNlKC0xKVswXX0scih0aGlzLGksbmV3IGUodGhpcy5vbm1lc3NhZ2UuYmluZCh0aGlzKSkpLHRoaXMuZW52aXJvbm1lbnQ9dCx0aGlzLnNlbmRSYXc9byh0aGlzLGkpLnNlbmQuYmluZChvKHRoaXMsaSkpLHRoaXMucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcih0aGlzLmhhbmRsZU1lc3NhZ2UuYmluZCh0aGlzKSksbyh0aGlzLGkpLm9uKFwiZGlzY29ubmVjdGVkXCIsKCgpPT57Zm9yKGNvbnN0Wyx7cmVqZWN0OmV9XW9mIHRoaXMud2lyZUxpc3RlbmVycyllKFwiUmVtb3RlIGNvbm5lY3Rpb24gaGFzIGNsb3NlZFwiKTt0aGlzLndpcmVMaXN0ZW5lcnMuY2xlYXIoKSx0aGlzLmVtaXQoXCJkaXNjb25uZWN0ZWRcIil9KSk7Y29uc3R7dXVpZDpzLG5hbWU6YX09bixsPXRoaXMuZW52aXJvbm1lbnQuZ2V0Q3VycmVudEVudGl0eVR5cGUoKTt0aGlzLm1lPWguZ2V0QmFzZU1lKGwscyxhKX1zaHV0ZG93bigpe3JldHVybiBvKHRoaXMsaSkuc2h1dGRvd24oKX1hc3luYyBjb25uZWN0KGUpe2lmKGEuaXNFeGlzdGluZ0Nvbm5lY3RDb25maWcoZSkpcmV0dXJuIHRoaXMuY29ubmVjdEJ5UG9ydChlKTtpZihhLmlzTmV3Q29ubmVjdENvbmZpZyhlKSl7Y29uc3QgdD1hd2FpdCB0aGlzLmVudmlyb25tZW50LnJldHJpZXZlUG9ydChlKTtyZXR1cm4gdGhpcy5jb25uZWN0QnlQb3J0KHsuLi5lLGFkZHJlc3M6YHdzOi8vbG9jYWxob3N0OiR7dH1gfSl9fWFzeW5jIGNvbm5lY3RCeVBvcnQoZSl7Y29uc3R7YWRkcmVzczp0LHV1aWQ6bn09ZSxyPXsuLi5lLHR5cGU6XCJmaWxlLXRva2VuXCJ9LHM9byh0aGlzLGkpO2F3YWl0IHMuY29ubmVjdCh0KTtjb25zdCBhPWF3YWl0IHRoaXMuc2VuZEFjdGlvbihcInJlcXVlc3QtZXh0ZXJuYWwtYXV0aG9yaXphdGlvblwiLHt1dWlkOm4sdHlwZTpcImZpbGUtdG9rZW5cIn0sITApO2lmKFwiZXh0ZXJuYWwtYXV0aG9yaXphdGlvbi1yZXNwb25zZVwiIT09YS5hY3Rpb24pdGhyb3cgbmV3IGMuVW5leHBlY3RlZEFjdGlvbkVycm9yKGEuYWN0aW9uKTtjb25zdHt0b2tlbjpkfT1hLnBheWxvYWQ7YXdhaXQgdGhpcy5lbnZpcm9ubWVudC53cml0ZVRva2VuKGEucGF5bG9hZC5maWxlLGEucGF5bG9hZC50b2tlbik7Y29uc3QgaD1hd2FpdCB0aGlzLnNlbmRBY3Rpb24oXCJyZXF1ZXN0LWF1dGhvcml6YXRpb25cIixyLCEwKTtpZihcImF1dGhvcml6YXRpb24tcmVzcG9uc2VcIiE9PWguYWN0aW9uKXRocm93IG5ldyBjLlVuZXhwZWN0ZWRBY3Rpb25FcnJvcihoLmFjdGlvbik7aWYoITAhPT1oLnBheWxvYWQuc3VjY2Vzcyl0aHJvdyBuZXcgYy5SdW50aW1lRXJyb3IoaC5wYXlsb2FkKTtyZXR1cm4gZH1zZW5kQWN0aW9uKGUsdD17fSxuPSExKXtyZXR1cm4gbmV3IFByb21pc2UoKChyLHMpPT57Y29uc3QgYT10aGlzLmVudmlyb25tZW50LmdldE5leHRNZXNzYWdlSWQoKSxjPXthY3Rpb246ZSxwYXlsb2FkOnQsbWVzc2FnZUlkOmF9LGQ9byh0aGlzLGkpO3JldHVybiB0aGlzLmFkZFdpcmVMaXN0ZW5lcihhLHIscyxuKSxkLnNlbmQoYykuY2F0Y2gocyl9KSl9ZmVycnlBY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKCgodCxuKT0+e2NvbnN0IHI9dGhpcy5lbnZpcm9ubWVudC5nZXROZXh0TWVzc2FnZUlkKCk7ZS5tZXNzYWdlSWQ9cjtjb25zdCBzPWU9Pnt0KGUucGF5bG9hZCl9O3JldHVybiBvKHRoaXMsaSkuc2VuZChlKS50aGVuKCgoKT0+dGhpcy5hZGRXaXJlTGlzdGVuZXIocixzLG4sITEpKSkuY2F0Y2gobil9KSl9cmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihlKXt0aGlzLm1lc3NhZ2VIYW5kbGVycy5wdXNoKGUpfWFkZFdpcmVMaXN0ZW5lcihlLHQsbixpKXtpP3RoaXMudW5jb3JyZWxhdGVkTGlzdGVuZXI9dDp0aGlzLndpcmVMaXN0ZW5lcnMuaGFzKGUpP24obmV3IGMuRHVwbGljYXRlQ29ycmVsYXRpb25FcnJvcihTdHJpbmcoZSkpKTp0aGlzLndpcmVMaXN0ZW5lcnMuc2V0KGUse3Jlc29sdmU6dCxyZWplY3Q6bn0pfW9ubWVzc2FnZShlKXtmb3IoY29uc3QgdCBvZiB0aGlzLm1lc3NhZ2VIYW5kbGVycyl0LmNhbGwobnVsbCxlKX1oYW5kbGVNZXNzYWdlKGUpe2NvbnN0IHQ9ZS5jb3JyZWxhdGlvbklkfHxOYU47aWYoXCJjb3JyZWxhdGlvbklkXCJpbiBlKXtpZighdGhpcy53aXJlTGlzdGVuZXJzLmhhcyh0KSlyZXR1cm4hMTt7Y29uc3R7cmVzb2x2ZTpuLHJlamVjdDppfT10aGlzLndpcmVMaXN0ZW5lcnMuZ2V0KHQpO1wiYWNrXCIhPT1lLmFjdGlvbj9pKG5ldyBjLk5vQWNrRXJyb3IoZS5hY3Rpb24pKTpcInBheWxvYWRcImluIGU/ZS5wYXlsb2FkLnN1Y2Nlc3M/bi5jYWxsKG51bGwsZSk6aShuZXcgYy5SdW50aW1lRXJyb3IoZS5wYXlsb2FkKSk6aShuZXcgYy5SdW50aW1lRXJyb3IoZSkpLHRoaXMud2lyZUxpc3RlbmVycy5kZWxldGUodCl9fWVsc2UgdGhpcy51bmNvcnJlbGF0ZWRMaXN0ZW5lciYmdGhpcy51bmNvcnJlbGF0ZWRMaXN0ZW5lci5jYWxsKG51bGwsZSksdGhpcy51bmNvcnJlbGF0ZWRMaXN0ZW5lcj0oKT0+e307cmV0dXJuITB9fWk9bmV3IFdlYWtNYXAsdC5kZWZhdWx0PWx9LDg2MjQ6KGUsdCk9PntmdW5jdGlvbiBuKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlLm1hbmlmZXN0VXJsfWZ1bmN0aW9uIGkoZSl7cmV0dXJuIHIoZSkmJlwic3RyaW5nXCI9PXR5cGVvZiBlLmFkZHJlc3N9ZnVuY3Rpb24gcihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZS51dWlkfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIGUucnVudGltZSYmXCJzdHJpbmdcIj09dHlwZW9mIGUucnVudGltZS52ZXJzaW9ufWZ1bmN0aW9uIHMoZSl7cmV0dXJuIHIoZSkmJm8oZSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5pc0ludGVybmFsQ29ubmVjdENvbmZpZz10LmlzUG9ydERpc2NvdmVyeUNvbmZpZz10LmlzTmV3Q29ubmVjdENvbmZpZz10LmlzRXhpc3RpbmdDb25uZWN0Q29uZmlnPXQuaXNFeHRlcm5hbENvbmZpZz12b2lkIDAsdC5pc0V4dGVybmFsQ29uZmlnPW4sdC5pc0V4aXN0aW5nQ29ubmVjdENvbmZpZz1pLHQuaXNOZXdDb25uZWN0Q29uZmlnPXMsdC5pc1BvcnREaXNjb3ZlcnlDb25maWc9ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSkmJm8oZSl8fHMoZSl9LHQuaXNJbnRlcm5hbENvbm5lY3RDb25maWc9ZnVuY3Rpb24oZSl7cmV0dXJuIGkoZSl8fHMoZSl9fSwyMzY2OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC5lcnJvclRvUE9KTz12b2lkIDAsdC5lcnJvclRvUE9KTz1mdW5jdGlvbihlKXtyZXR1cm57c3RhY2s6ZS5zdGFjayxtZXNzYWdlOmUubWVzc2FnZSx0b1N0cmluZzplLnRvU3RyaW5nfX19LDM5MTc6KGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LmV4aGF1c3RpdmVDaGVjaz12b2lkIDAsdC5leGhhdXN0aXZlQ2hlY2s9ZnVuY3Rpb24oZSx0KXt0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHZhbHVlOiAke2V9JHt0P2BcXG4gU3VwcG9ydGVkIHZhbHVlcyBhcmU6ICR7dC5qb2luKFwiXCIpfWA6XCJcIn1gKX19LDM0NDI6KGUsdCk9Pnthc3luYyBmdW5jdGlvbiBuKGUpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IG4gb2YgZSl7Y29uc3QgZT1hd2FpdCBuKCk7dC5wdXNoKGUpfXJldHVybiB0fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQucHJvbWlzZU1hcFNlcmlhbD10LnNlcmlhbD10LnByb21pc2VNYXA9dC5wcm9taXNpZnk9dm9pZCAwLHQucHJvbWlzaWZ5PWZ1bmN0aW9uKGUpe3JldHVybiguLi50KT0+bmV3IFByb21pc2UoKChuLGkpPT57ZSguLi50LCgoZSx0KT0+ZT9pKGUpOm4odCkpKX0pKX0sdC5wcm9taXNlTWFwPWFzeW5jIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIFByb21pc2UuYWxsKGUubWFwKHQpKX0sdC5zZXJpYWw9bix0LnByb21pc2VNYXBTZXJpYWw9YXN5bmMgZnVuY3Rpb24oZSx0KXtyZXR1cm4gbihlLm1hcCgoKGUsbixpKT0+KCk9PnQoZSxuLGkpKSkpfX0sMzEyNzooZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1jbGFzc3tjb25zdHJ1Y3Rvcigpe3RoaXMudG9waWNSZWZNYXA9bmV3IE1hcH1pbmNSZWZDb3VudChlKXtjb25zdCB0PXRoaXMudG9waWNSZWZNYXAuZ2V0KGUpO2xldCBuO2lmKHQpe2NvbnN0IGk9dCsxO249aSx0aGlzLnRvcGljUmVmTWFwLnNldChlLGkpfWVsc2UgdGhpcy50b3BpY1JlZk1hcC5zZXQoZSwxKSxuPTE7cmV0dXJuIG59ZGVjUmVmQ291bnQoZSl7Y29uc3QgdD10aGlzLnRvcGljUmVmTWFwLmdldChlKTtsZXQgbjtpZih0KXtjb25zdCBpPXQtMTt0aGlzLnRvcGljUmVmTWFwLnNldChlLGkpLG49aX1lbHNlIG49LTE7cmV0dXJuIG59YWN0T25GaXJzdChlLHQsbil7cmV0dXJuIDE9PT10aGlzLmluY1JlZkNvdW50KGUpP3QoKTpuKCl9YWN0T25MYXN0KGUsdCxuKXtyZXR1cm4gMD09PXRoaXMuZGVjUmVmQ291bnQoZSk/dCgpOm4oKX19fSwyMzAwOihlLHQpPT57ZnVuY3Rpb24gbihlKXtyZXR1cm5bLi4uZS5zcGxpdChcIi5cIikucmV2ZXJzZSgpLmVudHJpZXMoKV0ucmVkdWNlKCgoZSxbdCxuXSk9PmUrICtuKjFlNCoqdCksMCl9ZnVuY3Rpb24gaShlLHQpe3JldHVybiBuKGUpPj1uKHQpfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGUuc3BsaXQoXCIvXCIpWzBdfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHQucnVudGltZVV1aWRNZWV0c01pbmltdW1SdW50aW1lVmVyc2lvbj10LnBhcnNlUnVudGltZVV1aWQ9dC5tZWV0c01pbmltdW1SdW50aW1lVmVyc2lvbj12b2lkIDAsdC5tZWV0c01pbmltdW1SdW50aW1lVmVyc2lvbj1pLHQucGFyc2VSdW50aW1lVXVpZD1yLHQucnVudGltZVV1aWRNZWV0c01pbmltdW1SdW50aW1lVmVyc2lvbj1mdW5jdGlvbihlLHQpe3JldHVybiBpKHIoZSksdCl9fSw0OTk5OihlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksdC52YWxpZGF0ZUlkZW50aXR5PXZvaWQgMCx0LnZhbGlkYXRlSWRlbnRpdHk9ZnVuY3Rpb24oZSl7bGV0IHQ7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnV1aWR8fCh0PVwiTm90IGEgdmFsaWQgaWRlbnRpdHkgb2JqZWN0XCIpLHR9fSw2NDY1OmU9Pnt2YXIgdCxuPVwib2JqZWN0XCI9PXR5cGVvZiBSZWZsZWN0P1JlZmxlY3Q6bnVsbCxpPW4mJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4uYXBwbHk/bi5hcHBseTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxuKX07dD1uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLm93bktleXM/bi5vd25LZXlzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX06ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfTt2YXIgcj1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtmdW5jdGlvbiBvKCl7by5pbml0LmNhbGwodGhpcyl9ZS5leHBvcnRzPW8sZS5leHBvcnRzLm9uY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4saSl7ZnVuY3Rpb24gcihuKXtlLnJlbW92ZUxpc3RlbmVyKHQsbyksaShuKX1mdW5jdGlvbiBvKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5yZW1vdmVMaXN0ZW5lciYmZS5yZW1vdmVMaXN0ZW5lcihcImVycm9yXCIsciksbihbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpfXkoZSx0LG8se29uY2U6ITB9KSxcImVycm9yXCIhPT10JiZmdW5jdGlvbihlLHQsbil7XCJmdW5jdGlvblwiPT10eXBlb2YgZS5vbiYmeShlLFwiZXJyb3JcIix0LHtvbmNlOiEwfSl9KGUscil9KSl9LG8uRXZlbnRFbWl0dGVyPW8sby5wcm90b3R5cGUuX2V2ZW50cz12b2lkIDAsby5wcm90b3R5cGUuX2V2ZW50c0NvdW50PTAsby5wcm90b3R5cGUuX21heExpc3RlbmVycz12b2lkIDA7dmFyIHM9MTA7ZnVuY3Rpb24gYShlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpfWZ1bmN0aW9uIGMoZSl7cmV0dXJuIHZvaWQgMD09PWUuX21heExpc3RlbmVycz9vLmRlZmF1bHRNYXhMaXN0ZW5lcnM6ZS5fbWF4TGlzdGVuZXJzfWZ1bmN0aW9uIGQoZSx0LG4saSl7dmFyIHIsbyxzLGQ7aWYoYShuKSx2b2lkIDA9PT0obz1lLl9ldmVudHMpPyhvPWUuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2V2ZW50c0NvdW50PTApOih2b2lkIDAhPT1vLm5ld0xpc3RlbmVyJiYoZS5lbWl0KFwibmV3TGlzdGVuZXJcIix0LG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxvPWUuX2V2ZW50cykscz1vW3RdKSx2b2lkIDA9PT1zKXM9b1t0XT1uLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBzP3M9b1t0XT1pP1tuLHNdOltzLG5dOmk/cy51bnNoaWZ0KG4pOnMucHVzaChuKSwocj1jKGUpKT4wJiZzLmxlbmd0aD5yJiYhcy53YXJuZWQpe3Mud2FybmVkPSEwO3ZhciBoPW5ldyBFcnJvcihcIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gXCIrcy5sZW5ndGgrXCIgXCIrU3RyaW5nKHQpK1wiIGxpc3RlbmVycyBhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXRcIik7aC5uYW1lPVwiTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nXCIsaC5lbWl0dGVyPWUsaC50eXBlPXQsaC5jb3VudD1zLmxlbmd0aCxkPWgsY29uc29sZSYmY29uc29sZS53YXJuJiZjb25zb2xlLndhcm4oZCl9cmV0dXJuIGV9ZnVuY3Rpb24gaCgpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChlLHQsbil7dmFyIGk9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOm59LHI9aC5iaW5kKGkpO3JldHVybiByLmxpc3RlbmVyPW4saS53cmFwRm49cixyfWZ1bmN0aW9uIHUoZSx0LG4pe3ZhciBpPWUuX2V2ZW50cztpZih2b2lkIDA9PT1pKXJldHVybltdO3ZhciByPWlbdF07cmV0dXJuIHZvaWQgMD09PXI/W106XCJmdW5jdGlvblwiPT10eXBlb2Ygcj9uP1tyLmxpc3RlbmVyfHxyXTpbcl06bj9mdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5KGUubGVuZ3RoKSxuPTA7bjx0Lmxlbmd0aDsrK24pdFtuXT1lW25dLmxpc3RlbmVyfHxlW25dO3JldHVybiB0fShyKTp3KHIsci5sZW5ndGgpfWZ1bmN0aW9uIHAoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBuPXRbZV07aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgbilyZXR1cm4gMTtpZih2b2lkIDAhPT1uKXJldHVybiBuLmxlbmd0aH1yZXR1cm4gMH1mdW5jdGlvbiB3KGUsdCl7Zm9yKHZhciBuPW5ldyBBcnJheSh0KSxpPTA7aTx0OysraSluW2ldPWVbaV07cmV0dXJuIG59ZnVuY3Rpb24geShlLHQsbixpKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm9uKWkub25jZT9lLm9uY2UodCxuKTplLm9uKHQsbik7ZWxzZXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlLmFkZEV2ZW50TGlzdGVuZXIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwiZW1pdHRlclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyt0eXBlb2YgZSk7ZS5hZGRFdmVudExpc3RlbmVyKHQsKGZ1bmN0aW9uIHIobyl7aS5vbmNlJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxyKSxuKG8pfSkpfX1PYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGUpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlfHxlPDB8fHIoZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnK2UrXCIuXCIpO3M9ZX19KSxvLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxvLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGV8fGU8MHx8cihlKSl0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiblwiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZStcIi5cIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LG8ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBjKHRoaXMpfSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0LnB1c2goYXJndW1lbnRzW25dKTt2YXIgcj1cImVycm9yXCI9PT1lLG89dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PW8pcj1yJiZ2b2lkIDA9PT1vLmVycm9yO2Vsc2UgaWYoIXIpcmV0dXJuITE7aWYocil7dmFyIHM7aWYodC5sZW5ndGg+MCYmKHM9dFswXSkscyBpbnN0YW5jZW9mIEVycm9yKXRocm93IHM7dmFyIGE9bmV3IEVycm9yKFwiVW5oYW5kbGVkIGVycm9yLlwiKyhzP1wiIChcIitzLm1lc3NhZ2UrXCIpXCI6XCJcIikpO3Rocm93IGEuY29udGV4dD1zLGF9dmFyIGM9b1tlXTtpZih2b2lkIDA9PT1jKXJldHVybiExO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGMpaShjLHRoaXMsdCk7ZWxzZXt2YXIgZD1jLmxlbmd0aCxoPXcoYyxkKTtmb3Iobj0wO248ZDsrK24paShoW25dLHRoaXMsdCl9cmV0dXJuITB9LG8ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGQodGhpcyxlLHQsITEpfSxvLnByb3RvdHlwZS5vbj1vLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixvLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZCh0aGlzLGUsdCwhMCl9LG8ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYSh0KSx0aGlzLm9uKGUsbCh0aGlzLGUsdCkpLHRoaXN9LG8ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYSh0KSx0aGlzLnByZXBlbmRMaXN0ZW5lcihlLGwodGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuLGkscixvLHM7aWYoYSh0KSx2b2lkIDA9PT0oaT10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPWlbZV0pKXJldHVybiB0aGlzO2lmKG49PT10fHxuLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgaVtlXSxpLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsbi5saXN0ZW5lcnx8dCkpO2Vsc2UgaWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil7Zm9yKHI9LTEsbz1uLmxlbmd0aC0xO28+PTA7by0tKWlmKG5bb109PT10fHxuW29dLmxpc3RlbmVyPT09dCl7cz1uW29dLmxpc3RlbmVyLHI9bzticmVha31pZihyPDApcmV0dXJuIHRoaXM7MD09PXI/bi5zaGlmdCgpOmZ1bmN0aW9uKGUsdCl7Zm9yKDt0KzE8ZS5sZW5ndGg7dCsrKWVbdF09ZVt0KzFdO2UucG9wKCl9KG4sciksMT09PW4ubGVuZ3RoJiYoaVtlXT1uWzBdKSx2b2lkIDAhPT1pLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoXCJyZW1vdmVMaXN0ZW5lclwiLGUsc3x8dCl9cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLm9mZj1vLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcixvLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7dmFyIHQsbixpO2lmKHZvaWQgMD09PShuPXRoaXMuX2V2ZW50cykpcmV0dXJuIHRoaXM7aWYodm9pZCAwPT09bi5yZW1vdmVMaXN0ZW5lcilyZXR1cm4gMD09PWFyZ3VtZW50cy5sZW5ndGg/KHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTApOnZvaWQgMCE9PW5bZV0mJigwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOmRlbGV0ZSBuW2VdKSx0aGlzO2lmKDA9PT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgcixvPU9iamVjdC5rZXlzKG4pO2ZvcihpPTA7aTxvLmxlbmd0aDsrK2kpXCJyZW1vdmVMaXN0ZW5lclwiIT09KHI9b1tpXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKHIpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycyhcInJlbW92ZUxpc3RlbmVyXCIpLHRoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuX2V2ZW50c0NvdW50PTAsdGhpc31pZihcImZ1bmN0aW9uXCI9PXR5cGVvZih0PW5bZV0pKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0KTtlbHNlIGlmKHZvaWQgMCE9PXQpZm9yKGk9dC5sZW5ndGgtMTtpPj0wO2ktLSl0aGlzLnJlbW92ZUxpc3RlbmVyKGUsdFtpXSk7cmV0dXJuIHRoaXN9LG8ucHJvdG90eXBlLmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gdSh0aGlzLGUsITApfSxvLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIHUodGhpcyxlLCExKX0sby5saXN0ZW5lckNvdW50PWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTpwLmNhbGwoZSx0KX0sby5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1wLG8ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD90KHRoaXMuX2V2ZW50cyk6W119fX0sdD17fTtmdW5jdGlvbiBuKGkpe3ZhciByPXRbaV07aWYodm9pZCAwIT09cilyZXR1cm4gci5leHBvcnRzO3ZhciBvPXRbaV09e2V4cG9ydHM6e319O3JldHVybiBlW2ldLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLG4pLG8uZXhwb3J0c31uLmQ9KGUsdCk9Pntmb3IodmFyIGkgaW4gdCluLm8odCxpKSYmIW4ubyhlLGkpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLHtlbnVtZXJhYmxlOiEwLGdldDp0W2ldfSl9LG4ubz0oZSx0KT0+T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCk7dmFyIGk9e307KCgpPT57bi5kKGkse2RxOigpPT5hLE1TOigpPT5zLHhROigpPT5jLHNPOigpPT5mZSxadTooKT0+Z2UsSTM6KCk9Pm1lLCRVOigpPT52ZSxpMDooKT0+Q2UsY1g6KCk9PmQsX1c6KCk9PmgsVSQ6KCk9PncsVTc6KCk9PnkscmQ6KCk9PnBlfSk7dmFyIGUsdCxyLG89bigxNjgxKTtjbGFzcyBzIGV4dGVuZHMgRXJyb3J7Y29uc3RydWN0b3IoZT1cIkFuIHVuZXhwZWN0ZWQgZXJyb3IgaGFzIG9jY3VycmVkXCIsdCl7dmFyIG47c3VwZXIoZSksdCYmKHRoaXMuaW5uZXJFcnJvcj10JiZ0KSx0aGlzLnN0YWNrPW51bGw9PT0obj10aGlzLnN0YWNrKXx8dm9pZCAwPT09bj92b2lkIDA6bi5yZXBsYWNlKC9eKFxcdypFcnJvcikvLGAke3RoaXMuY29uc3RydWN0b3IubmFtZX1gKX19Y2xhc3MgYSBleHRlbmRzIHN7Y29uc3RydWN0b3IoZT1cIkZhaWxlZCB0byBleGVjdXRlIGFkYXB0ZXIgZnVuY3Rpb25cIix0KXtzdXBlcihlLHQpfX1jbGFzcyBjIGV4dGVuZHMgc3tjb25zdHJ1Y3RvcihlPVwiRmFpbGVkIHRvIHJhaXNlIGV2ZW50XCIsdCl7c3VwZXIoZSx0KX19Y2xhc3MgZCBleHRlbmRzIHN7Y29uc3RydWN0b3IoZT1cIkZhaWxlZCB0byBpbml0aWFsaXplIGFkYXB0ZXJcIix0KXtzdXBlcihlLHQpfX1jbGFzcyBoIGV4dGVuZHMgc3tjb25zdHJ1Y3RvcihlPVwiSW52YWxpZCBwYXJhbWV0ZXIgdmFsdWVcIix0KXtzdXBlcihlLHQpfX0hZnVuY3Rpb24oZSl7ZS5BY3RpdmF0ZVdvcmtib29rPVwiQWN0aXZhdGVXb3JrYm9va1wiLGUuQWN0aXZhdGVXb3Jrc2hlZXQ9XCJBY3RpdmF0ZVdvcmtzaGVldFwiLGUuQWRkV29ya3NoZWV0PVwiQWRkV29ya3NoZWV0XCIsZS5DYWxjdWxhdGVXb3JrYm9vaz1cIkNhbGN1bGF0ZVdvcmtib29rXCIsZS5DYWxjdWxhdGVXb3Jrc2hlZXQ9XCJDYWxjdWxhdGVXb3Jrc2hlZXRcIixlLkNsZWFyQWxsQ2VsbHM9XCJDbGVhckFsbENlbGxzXCIsZS5DbGVhckFsbENlbGxWYWx1ZXM9XCJDbGVhckFsbENlbGxWYWx1ZXNcIixlLkNsZWFyQWxsQ2VsbEZvcm1hdHRpbmc9XCJDbGVhckFsbENlbGxGb3JtYXR0aW5nXCIsZS5DbGVhckNlbGxWYWx1ZXM9XCJDbGVhckNlbGxWYWx1ZXNcIixlLkNsZWFyQ2VsbEZvcm1hdHRpbmc9XCJDbGVhckNlbGxGb3JtYXR0aW5nXCIsZS5DbGVhckNlbGxzPVwiQ2xlYXJDZWxsc1wiLGUuQ2xvc2VXb3JrYm9vaz1cIkNsb3NlV29ya2Jvb2tcIixlLkNyZWF0ZVdvcmtib29rPVwiQ3JlYXRlV29ya2Jvb2tcIixlLkRlbGV0ZVdvcmtzaGVldD1cIkRlbGV0ZVdvcmtzaGVldFwiLGUuRGVyZWdpc3RlckV2ZW50PVwiRGVyZWdpc3RlckV2ZW50XCIsZS5FdmVudEZpcmVkPVwiRXZlbnRGaXJlZFwiLGUuR2V0Q2FsY3VsYXRpb25Nb2RlPVwiR2V0Q2FsY3VsYXRpb25Nb2RlXCIsZS5HZXRDZWxscz1cIkdldENlbGxzXCIsZS5HZXRXb3JrYm9va0J5SWQ9XCJHZXRXb3JrYm9va0J5SWRcIixlLkdldFdvcmtib29rTmFtZT1cIkdldFdvcmtib29rTmFtZVwiLGUuR2V0V29ya2Jvb2tzPVwiR2V0V29ya2Jvb2tzXCIsZS5HZXRXb3Jrc2hlZXRCeUlkPVwiR2V0V29ya3NoZWV0QnlJZFwiLGUuR2V0V29ya3NoZWV0QnlOYW1lPVwiR2V0V29ya3NoZWV0QnlOYW1lXCIsZS5HZXRXb3Jrc2hlZXROYW1lPVwiR2V0V29ya3NoZWV0TmFtZVwiLGUuR2V0V29ya3NoZWV0cz1cIkdldFdvcmtzaGVldHNcIixlLkxvZ01lc3NhZ2U9XCJMb2dNZXNzYWdlXCIsZS5PcGVuV29ya2Jvb2s9XCJPcGVuV29ya2Jvb2tcIixlLlByb3RlY3RXb3Jrc2hlZXQ9XCJQcm90ZWN0V29ya3NoZWV0XCIsZS5SZWdpc3RlckV2ZW50PVwiUmVnaXN0ZXJFdmVudFwiLGUuU2F2ZVdvcmtib29rPVwiU2F2ZVdvcmtib29rXCIsZS5TYXZlV29ya2Jvb2tBcz1cIlNhdmVXb3JrYm9va0FzXCIsZS5TZXRDZWxsVmFsdWVzPVwiU2V0Q2VsbFZhbHVlc1wiLGUuU2V0Q2VsbEZvcm1hdHRpbmc9XCJTZXRDZWxsRm9ybWF0dGluZ1wiLGUuU2V0Q2VsbE5hbWU9XCJTZXRDZWxsTmFtZVwiLGUuU2V0V29ya3NoZWV0TmFtZT1cIlNldFdvcmtzaGVldE5hbWVcIixlLkZpbHRlckNlbGxzPVwiRmlsdGVyQ2VsbHNcIixlLlF1aXRBcHBsaWNhdGlvbj1cIlF1aXRBcHBsaWNhdGlvblwifShlfHwoZT17fSkpLGZ1bmN0aW9uKGUpe2UuQWN0aXZhdGU9XCJBY3RpdmF0ZVwiLGUuQWRkV29ya3NoZWV0PVwiQWRkV29ya3NoZWV0XCIsZS5DaGFuZ2U9XCJDaGFuZ2VcIixlLkNsb3NlPVwiQ2xvc2VcIixlLkRlYWN0aXZhdGU9XCJEZWFjdGl2YXRlXCIsZS5EZWxldGVXb3Jrc2hlZXQ9XCJEZWxldGVXb3Jrc2hlZXRcIn0odHx8KHQ9e30pKSxmdW5jdGlvbihlKXtlLldvcmtib29rPVwiV29ya2Jvb2tcIixlLldvcmtzaGVldD1cIldvcmtzaGVldFwifShyfHwocj17fSkpO2NvbnN0IGw9XCIxLjMuMFwiO2xldCB1PSExO2NvbnN0IHA9XCJbQG9wZW5maW4vZXhjZWxdXCIsdz0oKT0+e3U9ITF9LHk9KCk9Pnt1PSEwLGcoXCJ2MS4zLjBcIil9LGY9KGUsdCk9Pnt1JiYoZS5pbm5lckVycm9yP2NvbnNvbGUuZXJyb3IodD9gJHtwfSAke3R9YDpwLGUsXCJcXG5cXG4oaW5uZXIpXCIsZS5pbm5lckVycm9yKTpjb25zb2xlLmVycm9yKHQ/YCR7cH0gJHt0fWA6cCxlKSl9LGc9KC4uLmUpPT57dSYmY29uc29sZS5sb2cocCwuLi5lKX0sbT0oLi4uZSk9Pnt1JiZjb25zb2xlLndhcm4ocCwuLi5lKX07by5IfHxPYmplY3QuYXNzaWduKHdpbmRvdyx7ZmluOnt9fSksT2JqZWN0LmFzc2lnbihvLkgse0ludGVncmF0aW9uczp7RXhjZWw6e2VuYWJsZUxvZ2dpbmc6eSxkaXNhYmxlTG9nZ2luZzp3fX19KTtjb25zdCB2PSgpPT5cInh4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eFwiLnJlcGxhY2UoL1t4eV0vZywoZT0+e2NvbnN0IHQ9MTYqTWF0aC5yYW5kb20oKXwwO3JldHVybihcInhcIj09PWU/dDozJnR8OCkudG9TdHJpbmcoMTYpfSkpLEM9bmV3IE1hcCxJPSh0LG4pPT5hc3luYygpPT57ZyhgV29ya3NoZWV0OiBBY3RpdmF0ZSAoJHtufSlgKTt0cnl7YXdhaXQgdC5kaXNwYXRjaChlLkFjdGl2YXRlV29ya3NoZWV0LG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0seD0odCxuKT0+YXN5bmMoKT0+e2coYFdvcmtzaGVldDogQ2FsY3VsYXRlICgke259KWApO3RyeXthd2FpdCB0LmRpc3BhdGNoKGUuQ2FsY3VsYXRlV29ya3NoZWV0LG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sQT0odCxuKT0+YXN5bmMoKT0+e2coYFdvcmtzaGVldDogQ2xlYXIgYWxsIGNlbGwgdmFsdWVzICgke259KWApO3RyeXthd2FpdCB0LmRpc3BhdGNoKGUuQ2xlYXJBbGxDZWxsVmFsdWVzLG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sYj0odCxuKT0+YXN5bmMoKT0+e2coYFdvcmtzaGVldDogQ2xlYXIgYWxsIGNlbGwgZm9ybWF0dGluZyAoJHtufSlgKTt0cnl7YXdhaXQgdC5kaXNwYXRjaChlLkNsZWFyQWxsQ2VsbEZvcm1hdHRpbmcsbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxFPSh0LG4pPT5hc3luYygpPT57ZyhgV29ya3NoZWV0OiBDbGVhciBhbGwgY2VsbHMgKCR7bn0pYCk7dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5DbGVhckFsbENlbGxzLG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sUD0odCxuKT0+YXN5bmMgaT0+e2coYFdvcmtzaGVldDogQ2xlYXIgY2VsbCB2YWx1ZXM7IGNlbGxSYW5nZToke2l9ICgke259KWApO2NvbnN0IHI9e2NlbGxSYW5nZTppLG9iamVjdElkOm59O3RyeXthd2FpdCB0LmRpc3BhdGNoKGUuQ2xlYXJDZWxsVmFsdWVzLHIpfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0saz0odCxuKT0+YXN5bmMgaT0+e2coYFdvcmtzaGVldDogQ2xlYXIgY2VsbCBmb3JtYXR0aW5nOyBjZWxsUmFuZ2U6JHtpfSAoJHtufSlgKTtjb25zdCByPXtjZWxsUmFuZ2U6aSxvYmplY3RJZDpufTt0cnl7YXdhaXQgdC5kaXNwYXRjaChlLkNsZWFyQ2VsbEZvcm1hdHRpbmcscil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxNPSh0LG4pPT5hc3luYyBpPT57ZyhgV29ya3NoZWV0OiBDbGVhciBjZWxsczsgY2VsbFJhbmdlOiR7aX0gKCR7bn0pYCk7Y29uc3Qgcj17Y2VsbFJhbmdlOmksb2JqZWN0SWQ6bn07dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5DbGVhckNlbGxzLHIpfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sXz0oZSx0KT0+KG4saSxyPTFlMyk9PntpZihOdW1iZXIuaXNOYU4ocil8fHI8PTApdGhyb3cgbmV3IHMoXCJVcGRhdGUgaW50ZXJ2YWwgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlclwiKTtjb25zdCBvPXYoKTtnKGBXb3Jrc2hlZXQ6IENyZWF0ZSBkYXRhIHN0cmVhbTsgc3RyZWFtSWQ6JHtvfTsgY2VsbFJhbmdlOiR7bn07IHVwZGF0ZUludGVydmFsOiR7cn0gKCR7dH0pYCk7Y29uc3QgYT17Y2xvc2U6KCk9PntnKGBDbG9zZWQgc3RyZWFtICgke299KWApLChlPT57dmFyIHQ7dHJ5e2NvbnN0IG49Qy5nZXQoZSk7aWYoIW4pdGhyb3cgbmV3IHMoYFVuYWJsZSB0byBmaW5kIHJlZ2lzdGVyZWQgZGF0YSBzdHJlYW0gd2l0aCBpZCAke2V9YCk7dm9pZCAwIT09KG51bGwhPT0odD1uLnRpbWVyKSYmdm9pZCAwIT09dD90OnZvaWQgMCkmJlQoZSksQy5kZWxldGUoZSl9Y2F0Y2goZSl7dGhyb3cgZihlKSxlfX0pKG8pfSxjZWxsUmFuZ2U6bixpZDpvLHN0YXJ0OigpPT57ZyhgU3RhcnRlZCBzdHJlYW1pbmcgKCR7b30pYCksQihvLGksZSx0KX0sc3RvcDooKT0+e2coYFN0b3BwZWQgc3RyZWFtaW5nICgke299KWApLFQobyl9LHVwZGF0ZUludGVydmFsOnIsd29ya3NoZWV0SWQ6dH07cmV0dXJuIEMuc2V0KG8se2RhdGFTdHJlYW06YX0pLGF9LFM9KGUsdCxuLGkpPT57Y29uc3Qgbz17ZXZlbnRUYXJnZXQ6ci5Xb3Jrc2hlZXQsb2JqZWN0SWQ6dH07cmV0dXJue29iamVjdElkOnQsYWN0aXZhdGU6SShlLHQpLGFkZEV2ZW50TGlzdGVuZXI6bihlLG8pLGNhbGN1bGF0ZTp4KGUsdCksY2xlYXJBbGxDZWxsRm9ybWF0dGluZzpiKGUsdCksY2xlYXJBbGxDZWxsczpFKGUsdCksY2xlYXJBbGxDZWxsVmFsdWVzOkEoZSx0KSxjbGVhckNlbGxGb3JtYXR0aW5nOmsoZSx0KSxjbGVhckNlbGxzOk0oZSx0KSxjbGVhckNlbGxWYWx1ZXM6UChlLHQpLGNyZWF0ZURhdGFTdHJlYW06XyhlLHQpLGRlbGV0ZTpPKGUsdCksZmlsdGVyQ2VsbHM6VyhlLHQpLGdldENlbGxzOkYoZSx0KSxnZXROYW1lOkwoZSx0KSxwcm90ZWN0OlIoZSx0KSxyZW1vdmVFdmVudExpc3RlbmVyOmkoZSksc2V0Q2VsbEZvcm1hdHRpbmc6JChlLHQpLHNldENlbGxOYW1lOkcoZSx0KSxzZXRDZWxsVmFsdWVzOmooZSx0KSxzZXROYW1lOk4oZSx0KX19LE89KHQsbik9PmFzeW5jKCk9PntnKGBXb3Jrc2hlZXQ6IERlbGV0ZSAoJHtufSlgKTt0cnl7YXdhaXQgdC5kaXNwYXRjaChlLkRlbGV0ZVdvcmtzaGVldCxuKX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LFc9KHQsbik9PmFzeW5jKGkscixvLHMsYyxkPSEwKT0+e2coYFdvcmtzaGVldDogRmlsdGVyIGNlbGxzOyBjZWxsUmFuZ2U6JHtpfSAoJHtufSlgLHtjb2x1bW5JbmRleDpyLGZpbHRlck9wZXJhdG9yOm8sY3JpdGVyaWExOnMsY3JpdGVyaWEyOmMsdmlzaWJsZURyb3BEb3duOmR9KTtjb25zdCBoPXtjZWxsUmFuZ2U6aSxjcml0ZXJpYTE6cyxjcml0ZXJpYTI6Yyxjb2x1bW5JbmRleDpyLGZpbHRlck9wZXJhdG9yOm8sb2JqZWN0SWQ6bix2aXNpYmxlRHJvcERvd246ZH07dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5GaWx0ZXJDZWxscyxoKX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LEY9KHQsbik9PmFzeW5jIGk9PntnKGBXb3Jrc2hlZXQ6IEdldCBjZWxsczsgY2VsbFJhbmdlOiR7aX0gKCR7bn0pYCk7Y29uc3Qgcj17Y2VsbFJhbmdlOmksb2JqZWN0SWQ6bn07bGV0IG89W107dHJ5e289YXdhaXQgdC5kaXNwYXRjaChlLkdldENlbGxzLHIpLGcoYCR7aX06YCxvKX1jYXRjaChlKXt0aHJvdyBuZXcgYX1yZXR1cm4gb30sTD0odCxuKT0+YXN5bmMoKT0+e2coYFdvcmtzaGVldDogR2V0IG5hbWUgKCR7bn0pYCk7dHJ5e3JldHVybiBhd2FpdCB0LmRpc3BhdGNoKGUuR2V0V29ya3NoZWV0TmFtZSxuKX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LFI9KHQsbik9PmFzeW5jKCk9PntnKGBXb3Jrc2hlZXQ6IFByb3RlY3QgKCR7bn0pYCk7dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5Qcm90ZWN0V29ya3NoZWV0LG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sJD0odCxuKT0+YXN5bmMoaSxyKT0+e2coYFdvcmtzaGVldDogU2V0IGNlbGwgZm9ybWF0dGluZzsgY2VsbFJhbmdlOiR7aX0gKCR7bn0pYCxyKTtjb25zdCBvPXtjZWxsUmFuZ2U6aSxmb3JtYXR0aW5nOnIsb2JqZWN0SWQ6bn07dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5TZXRDZWxsRm9ybWF0dGluZyxvKX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LEc9KHQsbik9PmFzeW5jKGkscik9Pntjb25zdCBvPXIudHJpbSgpO2xldCBzO2lmKCFvKXRocm93IHM9bmV3IGgoXCJDZWxsIHJhbmdlIG5hbWUgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZ1wiKSxmKHMpLHM7aWYoby5sZW5ndGg+MjU1KXRocm93IHM9bmV3IGgoXCJDZWxsIHJhbmdlIG5hbWUgbXVzdCBiZSAyNTUgY2hhcmFjdGVycyBvciBsZXNzXCIpLGYocykscztpZigvW15hLXowLTlfLj9cXFxcXCInXS8udGVzdChvKSl0aHJvdyBzPW5ldyBoKFwiQ2VsbCByYW5nZSBuYW1lIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyc1wiKSxmKHMpLHM7aWYoL15cXGR8XFxkJC8udGVzdChvKSl0aHJvdyBzPW5ldyBoKFwiQ2VsbCByYW5nZSBuYW1lIG11c3Qgbm90IHN0YXJ0IG9yIGVuZCB3aXRoIGEgbnVtYmVyXCIpLGYocykscztnKGBXb3Jrc2hlZXQ6IFNldCBjZWxsIG5hbWU7IGNlbGxSYW5nZToke2l9OyBuZXdDZWxsUmFuZ2VOYW1lOiR7b30gKCR7bn0pYCk7Y29uc3QgYz17Y2VsbFJhbmdlOmksbmFtZTpvLG9iamVjdElkOm59O3RyeXthd2FpdCB0LmRpc3BhdGNoKGUuU2V0Q2VsbE5hbWUsYyl9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxqPSh0LG4pPT5hc3luYyhpLHIpPT57ZyhgV29ya3NoZWV0OiBTZXQgY2VsbCB2YWx1ZXM7IGNlbGxSYW5nZToke2l9ICgke259KWAscik7Y29uc3Qgbz17Y2VsbFJhbmdlOmksb2JqZWN0SWQ6bix2YWx1ZXNNYXA6cn07dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5TZXRDZWxsVmFsdWVzLG8pfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sTj0odCxuKT0+YXN5bmMgaT0+e2NvbnN0IHI9aS50cmltKCk7bGV0IG87aWYoIXIpdGhyb3cgbz1uZXcgaChcIldvcmtzaGVldCBuYW1lIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmdcIiksZihvKSxvO2lmKHIubGVuZ3RoPjMxKXRocm93IG89bmV3IGgoXCJXb3Jrc2hlZXQgbmFtZSBtdXN0IGJlIDMxIGNoYXJhY3RlcnMgb3IgbGVzc1wiKSxmKG8pLG87ZyhgV29ya3NoZWV0OiBTZXQgbmFtZTsgbmV3V29ya3NoZWV0TmFtZToke3J9ICgke259KWApO2NvbnN0IHM9e25ld1dvcmtzaGVldE5hbWU6cixvYmplY3RJZDpufTt0cnl7cmV0dXJuIGF3YWl0IHQuZGlzcGF0Y2goZS5TZXRXb3Jrc2hlZXROYW1lLHMpfWNhdGNoKGUpe3Rocm93IG5ldyBhfX0sQj0oZSx0LG4saSk9Pnt2YXIgcjt0cnl7Y29uc3Qgbz1DLmdldChlKTtpZighbyl0aHJvdyBuZXcgcyhgVW5hYmxlIHRvIGZpbmQgcmVnaXN0ZXJlZCBkYXRhIHN0cmVhbSB3aXRoIGlkICR7ZX1gKTt2b2lkIDAhPT0obnVsbCE9PShyPW8udGltZXIpJiZ2b2lkIDAhPT1yP3I6dm9pZCAwKSYmVChlKTtjb25zdHtjZWxsUmFuZ2U6YSx1cGRhdGVJbnRlcnZhbDpjfT1vLmRhdGFTdHJlYW0sZD1hc3luYygpPT57Y29uc3Qgcj1hd2FpdCB0KCk7dHJ5e2F3YWl0IGoobixpKShhLFtbcl1dKX1jYXRjaCh0KXttKGBVbmFibGUgdG8gdXBkYXRlIGNlbGwgcmFuZ2UgZm9yIHN0cmVhbSB3aXRoIGlkICR7ZX06ICR7bnVsbD09dD92b2lkIDA6dC5tZXNzYWdlfWApfX0saD13aW5kb3cuc2V0SW50ZXJ2YWwoZCxjKTtvLnRpbWVyPWh9Y2F0Y2goZSl7dGhyb3cgZihlKSxlfX0sVD1lPT57dmFyIHQ7dHJ5e2NvbnN0IG49Qy5nZXQoZSk7aWYoIW4pdGhyb3cgbmV3IHMoYFVuYWJsZSB0byBmaW5kIHJlZ2lzdGVyZWQgZGF0YSBzdHJlYW0gd2l0aCBpZCAke2V9YCk7aWYodm9pZCAwPT09KG51bGwhPT0odD1uLnRpbWVyKSYmdm9pZCAwIT09dD90OnZvaWQgMCkpcmV0dXJuO3dpbmRvdy5jbGVhckludGVydmFsKG4udGltZXIpLG4udGltZXI9dm9pZCAwfWNhdGNoKGUpe3Rocm93IGYoZSksZX19LEQ9bmV3IE1hcCxWPShuLGkpPT5hc3luYyhyLG8pPT57aWYoIWl8fCFpLmV2ZW50VGFyZ2V0fHwhaS5vYmplY3RJZCl7Y29uc3QgZT1uZXcgYyhcIkV2ZW50IHJlZ2lzdHJhdGlvbiBtaXNzaW5nIHJlcXVpcmVkIHZhbHVlc1wiKTt0aHJvdyBmKGUpLGV9Y29uc3Qgcz1PYmplY3Qua2V5cyh0KS5maW5kKChlPT5lLnRvTG93ZXJDYXNlKCk9PT1yLnRvTG93ZXJDYXNlKCkpKTtpZighcyl7Y29uc3QgZT1uZXcgYyhgVW5zdXBwb3J0ZWQgZXZlbnQgbmFtZTogJHtyfWApO3Rocm93IGYoZSksZX1pLmV2ZW50TmFtZT10W3NdLGcoXCJSZWdpc3RlcmluZyBldmVudFwiLGkpO3RyeXtjb25zdCB0PWF3YWl0IG4uZGlzcGF0Y2goZS5SZWdpc3RlckV2ZW50LGkpO0Quc2V0KHQsbyl9Y2F0Y2goZSl7dGhyb3cgbmV3IGEodm9pZCAwLGUpfX0sSD10PT5hc3luYyBuPT57bGV0IGk7Zm9yKGNvbnN0W2UsdF1vZiBEKWlmKHQ9PT1uKXtpPWU7YnJlYWt9aWYoIWkpdGhyb3cgbmV3IGM7ZyhcIkRlcmVnaXN0ZXJpbmcgZXZlbnQ6XCIsaSk7dHJ5e2F3YWl0IHQuZGlzcGF0Y2goZS5EZXJlZ2lzdGVyRXZlbnQsaSksRC5kZWxldGUoaSl9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxVPSh0LG4pPT5hc3luYygpPT57ZyhgV29ya2Jvb2s6IEFjdGl2YXRlICgke259KWApO3RyeXtyZXR1cm4gYXdhaXQgdC5kaXNwYXRjaChlLkFjdGl2YXRlV29ya2Jvb2ssbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSx6PSh0LG4saSxyKT0+YXN5bmMoKT0+e2xldCBvO2coYFdvcmtib29rOiBBZGQgd29ya3NoZWV0ICgke259KWApO3RyeXtvPWF3YWl0IHQuZGlzcGF0Y2goZS5BZGRXb3Jrc2hlZXQsbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9cmV0dXJuIFModCxvLGkscil9LHE9KHQsbik9PmFzeW5jKCk9PntnKGBXb3JrYm9vazogQ2FsY3VsYXRlICgke259KWApO3RyeXthd2FpdCB0LmRpc3BhdGNoKGUuQ2FsY3VsYXRlV29ya2Jvb2ssbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxKPSh0LG4pPT5hc3luYygpPT57ZyhgV29ya2Jvb2s6IENsb3NlICgke259KWApO3RyeXtyZXR1cm4gYXdhaXQgdC5kaXNwYXRjaChlLkNsb3NlV29ya2Jvb2ssbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxLPShlLHQsbixpKT0+e2NvbnN0IG89e2V2ZW50VGFyZ2V0OnIuV29ya2Jvb2ssb2JqZWN0SWQ6dH07cmV0dXJue29iamVjdElkOnQsYWN0aXZhdGU6VShlLHQpLGFkZFdvcmtzaGVldDp6KGUsdCxuLGkpLGFkZEV2ZW50TGlzdGVuZXI6bihlLG8pLGNhbGN1bGF0ZTpxKGUsdCksY2xvc2U6SihlLHQpLGdldENhbGN1bGF0aW9uTW9kZTpZKGUsdCksZ2V0TmFtZTpRKGUsdCksZ2V0V29ya3NoZWV0QnlOYW1lOlooZSx0LG4saSksZ2V0V29ya3NoZWV0czpYKGUsdCxuLGkpLHJlbW92ZUV2ZW50TGlzdGVuZXI6aShlKSxzYXZlOmVlKGUsdCksc2F2ZUFzOnRlKGUsdCl9fSxZPSh0LG4pPT5hc3luYygpPT57ZyhcIldvcmtib29rOiBHZXQgY2FsY3VsYXRpb24gbW9kZVwiKTt0cnl7cmV0dXJuIGF3YWl0IHQuZGlzcGF0Y2goZS5HZXRDYWxjdWxhdGlvbk1vZGUsbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSxRPSh0LG4pPT5hc3luYygpPT57ZyhgV29ya2Jvb2s6IEdldCBuYW1lICgke259KWApO3RyeXtyZXR1cm4gYXdhaXQgdC5kaXNwYXRjaChlLkdldFdvcmtib29rTmFtZSxuKX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LFo9KHQsbixpLHIpPT5hc3luYyBvPT57bGV0IHM7ZyhgV29ya2Jvb2s6IEdldCB3b3Jrc2hlZXQgYnkgbmFtZTogJHtvfSAoJHtufSlgKTt0cnl7aWYocz1hd2FpdCB0LmRpc3BhdGNoKGUuR2V0V29ya3NoZWV0QnlOYW1lLHtvYmplY3RJZDpuLHdvcmtzaGVldE5hbWU6b30pLG51bGw9PT1zKXJldHVybiBudWxsfWNhdGNoKGUpe3Rocm93IG5ldyBhfXJldHVybiBTKHQscyxpLHIpfSxYPSh0LG4saSxyKT0+YXN5bmMoKT0+e2xldCBvO2coYFdvcmtib29rOiBHZXQgd29ya3NoZWV0cyAoJHtufSlgKTt0cnl7bz1hd2FpdCB0LmRpc3BhdGNoKGUuR2V0V29ya3NoZWV0cyxuKX1jYXRjaChlKXt0aHJvdyBuZXcgYX1yZXR1cm4gby5tYXAoKGU9PlModCxlLGkscikpKX0sZWU9KHQsbik9PmFzeW5jKCk9PntnKGBXb3JrYm9vazogU2F2ZSAoJHtufSlgKTt0cnl7cmV0dXJuIGF3YWl0IHQuZGlzcGF0Y2goZS5TYXZlV29ya2Jvb2ssbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fSx0ZT0odCxuKT0+YXN5bmMgaT0+e2coYFdvcmtib29rOiBTYXZlIGFzOyBmaWxlUGF0aDoke2l9ICgke259KWApO3RyeXtyZXR1cm4gYXdhaXQgdC5kaXNwYXRjaChlLlNhdmVXb3JrYm9va0FzLHtmaWxlUGF0aDppLG9iamVjdElkOm59KX1jYXRjaChlKXt0aHJvdyBuZXcgYX19LG5lPXQ9PmFzeW5jKCk9PntsZXQgbjtnKFwiQXBwbGljYXRpb246IENyZWF0ZSB3b3JrYm9va1wiKTt0cnl7bj1hd2FpdCB0LmRpc3BhdGNoKGUuQ3JlYXRlV29ya2Jvb2spfWNhdGNoKGUpe3Rocm93IG5ldyBhfXJldHVybiBLKHQsbixWLEgpfSxpZT10PT5hc3luYyBuPT57bGV0IGk7ZyhgQXBwbGljYXRpb246IEdldCB3b3JrYm9vazsgaWQ6JHtufWApO3RyeXtpPWF3YWl0IHQuZGlzcGF0Y2goZS5HZXRXb3JrYm9va0J5SWQsbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9cmV0dXJuIEsodCxpLFYsSCl9LHJlPXQ9PmFzeW5jKCk9PntsZXQgbjtnKFwiQXBwbGljYXRpb246IEdldCB3b3JrYm9va3NcIik7dHJ5e249YXdhaXQgdC5kaXNwYXRjaChlLkdldFdvcmtib29rcyl9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9cmV0dXJuIG4ubWFwKChlPT5LKHQsZSxWLEgpKSl9LG9lPXQ9PmFzeW5jIG49PntnKGBBcHBsaWNhdGlvbjogR2V0IHdvcmtzaGVldDsgaWQ6JHtufWApO3RyeXtuPWF3YWl0IHQuZGlzcGF0Y2goZS5HZXRXb3Jrc2hlZXRCeUlkLG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfXJldHVybiBTKHQsbixWLEgpfSxzZT10PT5hc3luYyBuPT57bGV0IGk7ZyhgQXBwbGljYXRpb246IE9wZW4gd29ya2Jvb2s7IGZpbGVQYXRoOiR7bn1gKTt0cnl7aT1hd2FpdCB0LmRpc3BhdGNoKGUuT3Blbldvcmtib29rLG4pfWNhdGNoKGUpe3Rocm93IG5ldyBhfXJldHVybiBLKHQsaSxWLEgpfSxhZT10PT5hc3luYyhuPSEwKT0+e2coYEFwcGxpY2F0aW9uOiBRdWl0OyBkaXNwbGF5QWxlcnRzOiR7bn1gKTt0cnl7cmV0dXJuIGF3YWl0IHQuZGlzcGF0Y2goZS5RdWl0QXBwbGljYXRpb24sbil9Y2F0Y2goZSl7dGhyb3cgbmV3IGF9fTt2YXIgY2U7IWZ1bmN0aW9uKGUpe2VbZS5JbmZvPTFdPVwiSW5mb1wiLGVbZS5XYXJuPTJdPVwiV2FyblwiLGVbZS5FcnJvcj0zXT1cIkVycm9yXCJ9KGNlfHwoY2U9e30pKTtjb25zdCBkZT1cImV4Y2VsLWFkYXB0ZXJcIixoZT12KCk7bGV0IGxlLHVlO2NvbnN0IHBlPWFzeW5jKCk9Pnt0cnl7aWYoIWxlfHwhYXdhaXQoYXN5bmMgZT0+KGF3YWl0IG8uSC5JbnRlckFwcGxpY2F0aW9uQnVzLkNoYW5uZWwuZ2V0QWxsQ2hhbm5lbHMoKSkuc29tZSgodD0+dC5jaGFubmVsTmFtZT09PWUpKSkoaGUpKXthd2FpdChhc3luYygpPT57dmFyIGU7Y29uc3QgdD1udWxsPT09KGU9KGF3YWl0IG8uSC5BcHBsaWNhdGlvbi5nZXRDdXJyZW50U3luYygpLmdldE1hbmlmZXN0KCkpLmFwcEFzc2V0cyl8fHZvaWQgMD09PWU/dm9pZCAwOmUuZmluZCgoZT0+ZS5hbGlhcz09PWRlKSk7aWYodClyZXR1cm4gdm9pZCBtKFwiRGV0ZWN0ZWQgYWRhcHRlciBwYWNrYWdlIGluIGFwcCBtYW5pZmVzdCBhcHBBc3NldHNcIix0KTtpZihhd2FpdCB5ZSgpKXJldHVybiB2b2lkIGcoXCJVc2luZyBleGlzdGluZyBhZGFwdGVyIHBhY2thZ2VcIik7Y29uc3Qgbj17YWxpYXM6ZGUsc3JjOlwiaHR0cHM6Ly9jZG4ub3BlbmZpbi5jby9yZWxlYXNlL2ludGVncmF0aW9ucy9leGNlbC8xLjMuMC9PcGVuRmluLkV4Y2VsLnppcFwiLHRhcmdldDpcIk9wZW5GaW4uRXhjZWwuZXhlXCIsdmVyc2lvbjpsfTtnKFwiRG93bmxvYWRpbmcgYWRhcHRlciBwYWNrYWdlXCIsbik7dHJ5e2F3YWl0IG8uSC5TeXN0ZW0uZG93bmxvYWRBc3NldChuLCgoKT0+e30pKX1jYXRjaChlKXt0aHJvdyBmKFwiVW5hYmxlIHRvIGRvd25sb2FkIGFkYXB0ZXIgcGFja2FnZVwiKSxlfX0pKCk7Y29uc3QgZT1hd2FpdCBvLkguU3lzdGVtLmdldFJ1bnRpbWVJbmZvKCksdD1vLkguQXBwbGljYXRpb24ubWUudXVpZCxuPWUudmVyc2lvbixpPWUuc2VjdXJpdHlSZWFsbTtnKFwiSW5pdGlhbGl6aW5nIGFkYXB0ZXJcIix7YXBwSWQ6dCxjaGFubmVsTmFtZTpoZSxydW50aW1lVmVyc2lvbjpuLHNlY3VyaXR5UmVhbG06aX0pLGxlPWF3YWl0IG8uSC5TeXN0ZW0ubGF1bmNoRXh0ZXJuYWxQcm9jZXNzKHthbGlhczpkZSxhcmd1bWVudHM6YCR7dH0gJHtufSAke2l9ICR7aGV9YH0pLGcoYEFkYXB0ZXIgcnVubmluZyB3aXRoIHV1aWQgJHtsZS51dWlkfWApfWNvbnN0IGk9by5ILkludGVyQXBwbGljYXRpb25CdXMuQ2hhbm5lbC5jb25uZWN0KGhlLHtwYXlsb2FkOnt2ZXJzaW9uOmx9fSkscz1uZXcgUHJvbWlzZSgoZT0+e3NldFRpbWVvdXQoZSwyZTQpfSkpLnRoZW4oKCgpPT57dGhyb3cgbmV3IEVycm9yKFwiQ29ubmVjdGlvbiB0byBhZGFwdGVyIHRpbWVkIG91dFwiKX0pKTt1ZT1hd2FpdCBQcm9taXNlLnJhY2UoW2ksc10pLGcoYENvbm5lY3RlZCB0byBhZGFwdGVyIG9uIGNoYW5uZWwgJHtoZX1gKSx1ZS5yZWdpc3RlcihlLkxvZ01lc3NhZ2Usd2UpLHVlLnJlZ2lzdGVyKGUuRXZlbnRGaXJlZCwobj11ZSxlPT57Y29uc3R7ZXZlbnRSZWdpc3RyYXRpb25JZDppfT1lLG89RC5nZXQoaSk7aWYoIW8pdGhyb3cgbmV3IGMoYE5vIHJlZ2lzdGVyZWQgZXZlbnQgbGlzdGVuZXIgZm91bmQgZm9yIGlkOiAke2l9YCk7ZyhcIkV2ZW50IHBheWxvYWQgcmVjZWl2ZWRcIixlKSwoKGUsbixpKT0+e3ZhciBvLHM7c3dpdGNoKGkuZXZlbnRUYXJnZXQpe2Nhc2Ugci5Xb3JrYm9vazpzd2l0Y2gobnVsbD09PShvPWkuZXZlbnROYW1lKXx8dm9pZCAwPT09bz92b2lkIDA6by50b1VwcGVyQ2FzZSgpKXtjYXNlIHQuQWN0aXZhdGUudG9VcHBlckNhc2UoKTpjYXNlIHQuQ2xvc2UudG9VcHBlckNhc2UoKTpjYXNlIHQuRGVhY3RpdmF0ZS50b1VwcGVyQ2FzZSgpOnJldHVybiBlKCk7Y2FzZSB0LkFkZFdvcmtzaGVldC50b1VwcGVyQ2FzZSgpOmNhc2UgdC5EZWxldGVXb3Jrc2hlZXQudG9VcHBlckNhc2UoKTpyZXR1cm4gZShTKG4saS53b3Jrc2hlZXRPYmplY3RJZCxWLEgpKTtkZWZhdWx0OnRocm93IG5ldyBjKGBVbmV4cGVjdGVkIHdvcmtib29rIGV2ZW50OiAke2kuZXZlbnROYW1lfWApfWNhc2Ugci5Xb3Jrc2hlZXQ6c3dpdGNoKG51bGw9PT0ocz1pLmV2ZW50TmFtZSl8fHZvaWQgMD09PXM/dm9pZCAwOnMudG9VcHBlckNhc2UoKSl7Y2FzZSB0LkFjdGl2YXRlLnRvVXBwZXJDYXNlKCk6cmV0dXJuIGUoKTtjYXNlIHQuQ2hhbmdlLnRvVXBwZXJDYXNlKCk6cmV0dXJuIGUoaS5jaGFuZ2VkQ2VsbHMpO2Nhc2UgdC5EZWFjdGl2YXRlLnRvVXBwZXJDYXNlKCk6cmV0dXJuIGUoKTtkZWZhdWx0OnRocm93IG5ldyBjKGBVbmV4cGVjdGVkIHdvcmtzaGVldCBldmVudDogJHtpLmV2ZW50TmFtZX1gKX1kZWZhdWx0OnRocm93IG5ldyBjKGBVbmV4cGVjdGVkIGV2ZW50IHRhcmdldDogJHtpLmV2ZW50VGFyZ2V0fWApfX0pKG8sbixlKX0pKX1jYXRjaChlKXtjb25zdCB0PW5ldyBkKHZvaWQgMCxlKTt0aHJvdyBmKHQpLHR9dmFyIG47cmV0dXJue2FkYXB0ZXI6e2NoYW5uZWxOYW1lOmhlLHZlcnNpb246bH0sY3JlYXRlV29ya2Jvb2s6bmUodWUpLGdldFdvcmtib29rQnlJZDppZSh1ZSksZ2V0V29ya2Jvb2tzOnJlKHVlKSxnZXRXb3Jrc2hlZXRCeUlkOm9lKHVlKSxvcGVuV29ya2Jvb2s6c2UodWUpLHF1aXQ6YWUodWUpfX0sd2U9ZT0+e2NvbnN0e21lc3NhZ2U6dCx0eXBlOm59PWUsaT1cIlthZGFwdGVyXVwiO3N3aXRjaChuKXtjYXNlIGNlLkVycm9yOmYodCxpKTticmVhaztjYXNlIGNlLkluZm86ZyhpLHQpO2JyZWFrO2Nhc2UgY2UuV2FybjptKGksdCl9fSx5ZT1hc3luYygpPT57dHJ5e2NvbnN0IGU9YXdhaXQgby5ILlN5c3RlbS5nZXRBcHBBc3NldEluZm8oe2FsaWFzOmRlfSk7cmV0dXJuIGUmJmUudmVyc2lvbj09PWx9Y2F0Y2goZSl7cmV0dXJuITF9fTt2YXIgZmUsZ2UsbWUsdmUsQ2U7IWZ1bmN0aW9uKGUpe2UuQ29udGludW91cz1cIkNvbnRpbnVvdXNcIixlLkRhc2g9XCJEYXNoXCIsZS5EYXNoRG90PVwiRGFzaERvdFwiLGUuRGFzaERvdERvdD1cIkRhc2hEb3REb3RcIixlLkRvdD1cIkRvdFwiLGUuRG91YmxlPVwiRG91YmxlXCIsZS5TbGFudERhc2hEb3Q9XCJTbGFudERhc2hEb3RcIixlLk5vbmU9XCJOb25lXCJ9KGZlfHwoZmU9e30pKSxmdW5jdGlvbihlKXtlLkNlbnRlcj1cIkNlbnRlclwiLGUuQ2VudGVyQWNyb3NzU2VsZWN0aW9uPVwiQ2VudGVyQWNyb3NzU2VsZWN0aW9uXCIsZS5EaXN0cmlidXRlZD1cIkRpc3RyaWJ1dGVkXCIsZS5GaWxsPVwiRmlsbFwiLGUuR2VuZXJhbD1cIkdlbmVyYWxcIixlLkp1c3RpZnk9XCJKdXN0aWZ5XCIsZS5MZWZ0PVwiTGVmdFwiLGUuUmlnaHQ9XCJSaWdodFwifShnZXx8KGdlPXt9KSksZnVuY3Rpb24oZSl7ZS5BdXRvbWF0aWM9XCJBdXRvbWF0aWNcIixlLkNoZWNrZXI9XCJDaGVja2VyXCIsZS5Dcmlzc0Nyb3NzPVwiQ3Jpc3NDcm9zc1wiLGUuRG93bj1cIkRvd25cIixlLkdyYXkxNj1cIkdyYXkxNlwiLGUuR3JheTI1PVwiR3JheTI1XCIsZS5HcmF5NTA9XCJHcmF5NTBcIixlLkdyYXk3NT1cIkdyYXk3NVwiLGUuR3JheTg9XCJHcmF5OFwiLGUuR3JpZD1cIkdyaWRcIixlLkhvcml6b250YWw9XCJIb3Jpem9udGFsXCIsZS5MaWdodERvd249XCJMaWdodERvd25cIixlLkxpZ2h0SG9yaXpvbnRhbD1cIkxpZ2h0SG9yaXpvbnRhbFwiLGUuTGlnaHRVcD1cIkxpZ2h0VXBcIixlLkxpZ2h0VmVydGljYWw9XCJMaWdodFZlcnRpY2FsXCIsZS5MaW5lYXJHcmFkaWVudD1cIkxpbmVhckdyYWRpZW50XCIsZS5Ob25lPVwiTm9uZVwiLGUuUmVjdGFuZ3VsYXJHcmFkaWVudD1cIlJlY3Rhbmd1bGFyR3JhZGllbnRcIixlLlNlbWlHcmF5NzU9XCJTZW1pR3JheTc1XCIsZS5Tb2xpZD1cIlNvbGlkXCIsZS5VcD1cIlVwXCIsZS5WZXJ0aWNhbD1cIlZlcnRpY2FsXCJ9KG1lfHwobWU9e30pKSxmdW5jdGlvbihlKXtlLkJvdHRvbT1cIkJvdHRvbVwiLGUuQ2VudGVyPVwiQ2VudGVyXCIsZS5EaXN0cmlidXRlZD1cIkRpc3RyaWJ1dGVkXCIsZS5KdXN0aWZ5PVwiSnVzdGlmeVwiLGUuVG9wPVwiVG9wXCJ9KHZlfHwodmU9e30pKSxmdW5jdGlvbihlKXtlLkFuZD1cIkFuZFwiLGUuT3I9XCJPclwiLGUuVG9wMTBJdGVtcz1cIlRvcDEwSXRlbXNcIixlLkJvdHRvbTEwSXRlbXM9XCJCb3R0b20xMEl0ZW1zXCIsZS5Ub3AxMFBlcmNlbnQ9XCJUb3AxMFBlcmNlbnRcIixlLkJvdHRvbTEwUGVyY2VudD1cIkJvdHRvbTEwUGVyY2VudFwiLGUuRmlsdGVyVmFsdWVzPVwiRmlsdGVyVmFsdWVzXCJ9KENlfHwoQ2U9e30pKX0pKCk7dmFyIHI9aS5kcSxvPWkuTVMscz1pLnhRLGE9aS5zTyxjPWkuWnUsZD1pLkkzLGg9aS4kVSxsPWkuaTAsdT1pLmNYLHA9aS5fVyx3PWkuVSQseT1pLlU3LGY9aS5yZDtleHBvcnR7ciBhcyBBZGFwdGVyRXJyb3IsbyBhcyBBcGlFcnJvcixzIGFzIEV2ZW50RXJyb3IsYSBhcyBFeGNlbENlbGxCb3JkZXJMaW5lU3R5bGUsYyBhcyBFeGNlbENlbGxIb3Jpem9udGFsQWxpZ25tZW50LGQgYXMgRXhjZWxDZWxsUGF0dGVybixoIGFzIEV4Y2VsQ2VsbFZlcnRpY2FsQWxpZ25tZW50LGwgYXMgRXhjZWxGaWx0ZXJPcGVyYXRvcix1IGFzIEluaXRpYWxpemF0aW9uRXJyb3IscCBhcyBQYXJhbWV0ZXJFcnJvcix3IGFzIGRpc2FibGVMb2dnaW5nLHkgYXMgZW5hYmxlTG9nZ2luZyxmIGFzIGdldEV4Y2VsQXBwbGljYXRpb259OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgZ2V0Q3VycmVudENoYW5uZWwgfSBmcm9tIFwiQGZpbm9zL2ZkYzNcIjtcbmltcG9ydCB7IENlbGwsIEV4Y2VsQXBwbGljYXRpb24sIEV4Y2VsV29ya2Jvb2ssIEV4Y2VsV29ya3NoZWV0LCBnZXRFeGNlbEFwcGxpY2F0aW9uIH0gZnJvbSBcIkBvcGVuZmluL2V4Y2VsXCI7XG5cbmNvbnN0IEtOT1dOX0lOU1RSVU1FTlRTID0gW1wiVFNMQVwiLCBcIk1TRlRcIiwgXCJBQVBMXCJdO1xuXG5sZXQgZXhjZWw6IEV4Y2VsQXBwbGljYXRpb24gfCB1bmRlZmluZWQ7XG5sZXQgb3Blbldvcmtib29rczpcblx0fCB7XG5cdFx0XHRib29rOiBFeGNlbFdvcmtib29rO1xuXHRcdFx0bmFtZTogc3RyaW5nO1xuXHQgIH1bXVxuXHR8IHVuZGVmaW5lZDtcbmxldCBzZWxlY3RlZFdvcmtib29rSW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZDtcbmxldCBvcGVuV29ya3NoZWV0czpcblx0fCB7XG5cdFx0XHRzaGVldDogRXhjZWxXb3Jrc2hlZXQ7XG5cdFx0XHRuYW1lOiBzdHJpbmc7XG5cdCAgfVtdXG5cdHwgdW5kZWZpbmVkO1xubGV0IHNlbGVjdGVkV29ya3NoZWV0SW5kZXg6IG51bWJlciB8IHVuZGVmaW5lZDtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXN5bmMgKCkgPT4ge1xuXHR0cnkge1xuXHRcdGF3YWl0IGluaXQoKTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRjb25zb2xlLmVycm9yKGVycm9yKTtcblx0fVxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG5cdHRyeSB7XG5cdFx0Y29uc3QgcmVzdWx0c0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTEVsZW1lbnQ+KFwiI3Jlc3VsdHMtY29udGFpbmVyXCIpO1xuXHRcdHJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG5cdFx0ZXhjZWwgPSBhd2FpdCBnZXRFeGNlbEFwcGxpY2F0aW9uKCk7XG5cblx0XHRhd2FpdCBwb3B1bGF0ZVdvcmtib29rcygpO1xuXG5cdFx0Y29uc3QgcmVmcmVzaFdvcmtib29rQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3b3JrYm9vay1yZWZyZXNoXCIpO1xuXHRcdHJlZnJlc2hXb3JrYm9va0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4gcG9wdWxhdGVXb3JrYm9va3MoKSk7XG5cblx0XHRjb25zdCByZWZyZXNoV29ya3NoZWV0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3b3Jrc2hlZXQtcmVmcmVzaFwiKTtcblx0XHRyZWZyZXNoV29ya3NoZWV0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiBwb3B1bGF0ZVdvcmtzaGVldHMoKSk7XG5cblx0XHRjb25zdCBvcGVuV29ya2Jvb2tzU2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN3b3JrYm9va3NcIik7XG5cdFx0b3Blbldvcmtib29rc1NlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGFzeW5jIChlKSA9PlxuXHRcdFx0c2VsZWN0V29ya2Jvb2soKGUudGFyZ2V0IGFzIHVua25vd24gYXMgeyB2YWx1ZTogc3RyaW5nIH0pLnZhbHVlKVxuXHRcdCk7XG5cblx0XHRjb25zdCBvcGVuV29ya3NoZWV0c1NlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjd29ya3NoZWV0c1wiKTtcblx0XHRvcGVuV29ya3NoZWV0c1NlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGFzeW5jIChlKSA9PlxuXHRcdFx0c2VsZWN0V29ya3NoZWV0KChlLnRhcmdldCBhcyB1bmtub3duIGFzIHsgdmFsdWU6IHN0cmluZyB9KS52YWx1ZSlcblx0XHQpO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRzaG93RXJyb3IoZXJyKTtcblx0fVxufVxuXG5mdW5jdGlvbiBzaG93RXJyb3IoZXJyKSB7XG5cdGNvbnN0IGVyckRvbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZXJyb3JcIik7XG5cdGVyckRvbS5pbm5lckhUTUwgPSBlcnIubWVzc2FnZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcG9wdWxhdGVXb3JrYm9va3MoKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmIChleGNlbCkge1xuXHRcdHNlbGVjdGVkV29ya2Jvb2tJbmRleCA9IHVuZGVmaW5lZDtcblx0XHRjb25zdCByZWZyZXNoQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjd29ya2Jvb2stcmVmcmVzaFwiKTtcblx0XHRyZWZyZXNoQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblxuXHRcdGNvbnN0IHNlbGVjdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTFNlbGVjdEVsZW1lbnQ+KFwiI3dvcmtib29rc1wiKTtcblx0XHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdHNlbGVjdC5pbm5lckhUTUwgPSBcIlwiO1xuXG5cdFx0b3Blbldvcmtib29rcyA9IFtdO1xuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHdvcmtib29rcyA9IGF3YWl0IGV4Y2VsLmdldFdvcmtib29rcygpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IGJvb2sgb2Ygd29ya2Jvb2tzKSB7XG5cdFx0XHRcdGNvbnN0IG5hbWUgPSBhd2FpdCBib29rLmdldE5hbWUoKTtcblx0XHRcdFx0b3Blbldvcmtib29rcy5wdXNoKHtcblx0XHRcdFx0XHRib29rLFxuXHRcdFx0XHRcdG5hbWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IG9wdGlvbkVtcHR5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcblx0XHRcdG9wdGlvbkVtcHR5LmlubmVySFRNTCA9IFwiLS0tLVNlbGVjdCB3b3JrYm9vay0tLS1cIjtcblx0XHRcdG9wdGlvbkVtcHR5LnZhbHVlID0gXCJcIjtcblx0XHRcdG9wdGlvbkVtcHR5LnNlbGVjdGVkID0gdHJ1ZTtcblx0XHRcdG9wdGlvbkVtcHR5LmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdHNlbGVjdC5hcHBlbmQob3B0aW9uRW1wdHkpO1xuXG5cdFx0XHRmb3IgKGNvbnN0IG9wZW5Xb3JrYm9vayBvZiBvcGVuV29ya2Jvb2tzKSB7XG5cdFx0XHRcdGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cdFx0XHRcdG9wdGlvbi5pbm5lckhUTUwgPSBvcGVuV29ya2Jvb2submFtZTtcblx0XHRcdFx0b3B0aW9uLnZhbHVlID0gb3Blbldvcmtib29rLm5hbWU7XG5cdFx0XHRcdHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRcdHNob3dFcnJvcihlcnIpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRzZWxlY3QuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdHJlZnJlc2hCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblx0XHR9XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2VsZWN0V29ya2Jvb2sobmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IG5ld1dvcmtib29rSW5kZXggPSBvcGVuV29ya2Jvb2tzLmZpbmRJbmRleCgodykgPT4gdy5uYW1lID09PSBuYW1lKTtcblxuXHRpZiAobmV3V29ya2Jvb2tJbmRleCAhPT0gc2VsZWN0ZWRXb3JrYm9va0luZGV4KSB7XG5cdFx0c2VsZWN0ZWRXb3JrYm9va0luZGV4ID0gbmV3V29ya2Jvb2tJbmRleDtcblx0XHRpZiAobmV3V29ya2Jvb2tJbmRleCA+PSAwKSB7XG5cdFx0XHRhd2FpdCBvcGVuV29ya2Jvb2tzW3NlbGVjdGVkV29ya2Jvb2tJbmRleF0uYm9vay5hY3RpdmF0ZSgpO1xuXHRcdH1cblx0fVxuXG5cdGF3YWl0IHBvcHVsYXRlV29ya3NoZWV0cygpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwb3B1bGF0ZVdvcmtzaGVldHMoKTogUHJvbWlzZTx2b2lkPiB7XG5cdGlmIChleGNlbCkge1xuXHRcdHNlbGVjdGVkV29ya3NoZWV0SW5kZXggPSB1bmRlZmluZWQ7XG5cdFx0Y29uc3QgcmVmcmVzaEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3dvcmtzaGVldC1yZWZyZXNoXCIpO1xuXHRcdHJlZnJlc2hCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG5cdFx0Y29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MU2VsZWN0RWxlbWVudD4oXCIjd29ya3NoZWV0c1wiKTtcblx0XHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdHNlbGVjdC5pbm5lckhUTUwgPSBcIlwiO1xuXG5cdFx0b3BlbldvcmtzaGVldHMgPSBbXTtcblxuXHRcdGNvbnN0IHdvcmtib29rID0gb3Blbldvcmtib29rc1tzZWxlY3RlZFdvcmtib29rSW5kZXhdO1xuXHRcdGlmICh3b3JrYm9vaykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3Qgc2hlZXRzID0gYXdhaXQgd29ya2Jvb2suYm9vay5nZXRXb3Jrc2hlZXRzKCk7XG5cblx0XHRcdFx0Zm9yIChjb25zdCBzaGVldCBvZiBzaGVldHMpIHtcblx0XHRcdFx0XHRjb25zdCBuYW1lID0gYXdhaXQgc2hlZXQuZ2V0TmFtZSgpO1xuXHRcdFx0XHRcdG9wZW5Xb3Jrc2hlZXRzLnB1c2goe1xuXHRcdFx0XHRcdFx0c2hlZXQsXG5cdFx0XHRcdFx0XHRuYW1lXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjb25zdCBvcHRpb25FbXB0eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cdFx0XHRcdG9wdGlvbkVtcHR5LmlubmVySFRNTCA9IFwiLS0tLVNlbGVjdCB3b3Jrc2hlZXQtLS0tXCI7XG5cdFx0XHRcdG9wdGlvbkVtcHR5LnZhbHVlID0gXCJcIjtcblx0XHRcdFx0b3B0aW9uRW1wdHkuc2VsZWN0ZWQgPSB0cnVlO1xuXHRcdFx0XHRvcHRpb25FbXB0eS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRcdHNlbGVjdC5hcHBlbmQob3B0aW9uRW1wdHkpO1xuXG5cdFx0XHRcdGZvciAoY29uc3Qgb3BlbldvcmtzaGVldCBvZiBvcGVuV29ya3NoZWV0cykge1xuXHRcdFx0XHRcdGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG5cdFx0XHRcdFx0b3B0aW9uLmlubmVySFRNTCA9IG9wZW5Xb3Jrc2hlZXQubmFtZTtcblx0XHRcdFx0XHRvcHRpb24udmFsdWUgPSBvcGVuV29ya3NoZWV0Lm5hbWU7XG5cdFx0XHRcdFx0c2VsZWN0LmFwcGVuZChvcHRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xuXHRcdFx0XHRzaG93RXJyb3IoZXJyKTtcblx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdHNlbGVjdC5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0XHRyZWZyZXNoQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbGVjdFdvcmtzaGVldChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0Y29uc3QgbmV3V29ya3NoZWV0SW5kZXggPSBvcGVuV29ya3NoZWV0cy5maW5kSW5kZXgoKHcpID0+IHcubmFtZSA9PT0gbmFtZSk7XG5cblx0aWYgKG5ld1dvcmtzaGVldEluZGV4ICE9PSBzZWxlY3RlZFdvcmtzaGVldEluZGV4KSB7XG5cdFx0Y29uc3Qgb2xkV29ya3NoZWV0ID0gb3BlbldvcmtzaGVldHNbc2VsZWN0ZWRXb3Jrc2hlZXRJbmRleF07XG5cdFx0aWYgKG9sZFdvcmtzaGVldCkge1xuXHRcdFx0YXdhaXQgb2xkV29ya3NoZWV0LnNoZWV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoaGFuZGxlQ2VsbENoYW5nZSk7XG5cdFx0fVxuXG5cdFx0c2VsZWN0ZWRXb3Jrc2hlZXRJbmRleCA9IG5ld1dvcmtzaGVldEluZGV4O1xuXHRcdGlmIChzZWxlY3RlZFdvcmtzaGVldEluZGV4ID49IDApIHtcblx0XHRcdGF3YWl0IG9wZW5Xb3Jrc2hlZXRzW3NlbGVjdGVkV29ya3NoZWV0SW5kZXhdLnNoZWV0LmFjdGl2YXRlKCk7XG5cdFx0XHRhd2FpdCBvcGVuV29ya3NoZWV0c1tzZWxlY3RlZFdvcmtzaGVldEluZGV4XS5zaGVldC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGhhbmRsZUNlbGxDaGFuZ2UpO1xuXG5cdFx0XHRjb25zdCByZXN1bHRzQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oXCIjcmVzdWx0cy1jb250YWluZXJcIik7XG5cdFx0XHRyZXN1bHRzQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcblx0XHR9XG5cdH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlQ2VsbENoYW5nZShjZWxsczogQ2VsbFtdKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGNlbGxDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NlbGwtY2hhbmdlcy1jb250YWluZXJcIik7XG5cdGNlbGxDb250YWluZXIuaW5uZXJIVE1MID0gSlNPTi5zdHJpbmdpZnkoY2VsbHMsIHVuZGVmaW5lZCwgXCIgIFwiKTtcblxuXHRmb3IgKGNvbnN0IGNlbGwgb2YgY2VsbHMpIHtcblx0XHRpZiAoS05PV05fSU5TVFJVTUVOVFMuaW5jbHVkZXMoY2VsbC52YWx1ZSkpIHtcblx0XHRcdGF3YWl0IGJyb2FkY2FzdEluc3RydW1lbnQoY2VsbC52YWx1ZSk7XG5cdFx0fVxuXHR9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGJyb2FkY2FzdEluc3RydW1lbnQoaW5zdHJ1bWVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdGNvbnN0IGJyb2FkY2FzdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxJbnB1dEVsZW1lbnQ+KFwiI2Jyb2FkY2FzdC1pbnN0cnVtZW50XCIpO1xuXHRpZiAod2luZG93LmZkYzMpIHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgZmRjSW5zdHJ1bWVudCA9IHtcblx0XHRcdFx0dHlwZTogXCJmZGMzLmluc3RydW1lbnRcIixcblx0XHRcdFx0aWQ6IHtcblx0XHRcdFx0XHR0aWNrZXI6IGluc3RydW1lbnRcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0Y29uc3QgY2hhbm5lbCA9IGF3YWl0IGdldEN1cnJlbnRDaGFubmVsKCk7XG5cdFx0XHRjaGFubmVsLmJyb2FkY2FzdChmZGNJbnN0cnVtZW50KTtcblxuXHRcdFx0YnJvYWRjYXN0RWxlbWVudC52YWx1ZSA9IGluc3RydW1lbnQ7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRicm9hZGNhc3RFbGVtZW50LnZhbHVlID0gZXJyLm1lc3NhZ2U7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGJyb2FkY2FzdEVsZW1lbnQudGV4dENvbnRlbnQgPSBcIk5vIEZEMyBDaGFubmVsIGF2YWlsYWJsZVwiO1xuXHR9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=