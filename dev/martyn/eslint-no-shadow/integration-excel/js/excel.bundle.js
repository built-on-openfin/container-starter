/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@finos/fdc3/dist/fdc3.esm.js":
/*!*******************************************************!*\
  !*** ../../node_modules/@finos/fdc3/dist/fdc3.esm.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChannelError": () => (/* binding */ ChannelError),
/* harmony export */   "ContextTypes": () => (/* binding */ ContextTypes),
/* harmony export */   "Convert": () => (/* binding */ Convert),
/* harmony export */   "Intents": () => (/* binding */ Intents),
/* harmony export */   "OpenError": () => (/* binding */ OpenError),
/* harmony export */   "ResolveError": () => (/* binding */ ResolveError),
/* harmony export */   "addContextListener": () => (/* binding */ addContextListener),
/* harmony export */   "addIntentListener": () => (/* binding */ addIntentListener),
/* harmony export */   "broadcast": () => (/* binding */ broadcast),
/* harmony export */   "compareVersionNumbers": () => (/* binding */ compareVersionNumbers),
/* harmony export */   "fdc3Ready": () => (/* binding */ fdc3Ready),
/* harmony export */   "findIntent": () => (/* binding */ findIntent),
/* harmony export */   "findIntentsByContext": () => (/* binding */ findIntentsByContext),
/* harmony export */   "getCurrentChannel": () => (/* binding */ getCurrentChannel),
/* harmony export */   "getInfo": () => (/* binding */ getInfo),
/* harmony export */   "getOrCreateChannel": () => (/* binding */ getOrCreateChannel),
/* harmony export */   "getSystemChannels": () => (/* binding */ getSystemChannels),
/* harmony export */   "joinChannel": () => (/* binding */ joinChannel),
/* harmony export */   "leaveCurrentChannel": () => (/* binding */ leaveCurrentChannel),
/* harmony export */   "open": () => (/* binding */ open),
/* harmony export */   "raiseIntent": () => (/* binding */ raiseIntent),
/* harmony export */   "raiseIntentForContext": () => (/* binding */ raiseIntentForContext),
/* harmony export */   "versionIsAtLeast": () => (/* binding */ versionIsAtLeast)
/* harmony export */ });
/**
 * SPDX-License-Identifier: Apache-2.0
 * Copyright 2019 FINOS FDC3 contributors - see NOTICE file
 */
var OpenError;

(function (OpenError) {
  OpenError["AppNotFound"] = "AppNotFound";
  OpenError["ErrorOnLaunch"] = "ErrorOnLaunch";
  OpenError["AppTimeout"] = "AppTimeout";
  OpenError["ResolverUnavailable"] = "ResolverUnavailable";
})(OpenError || (OpenError = {}));

var ResolveError;

(function (ResolveError) {
  ResolveError["NoAppsFound"] = "NoAppsFound";
  ResolveError["ResolverUnavailable"] = "ResolverUnavailable";
  ResolveError["ResolverTimeout"] = "ResolverTimeout";
})(ResolveError || (ResolveError = {}));

var ChannelError;

(function (ChannelError) {
  ChannelError["NoChannelFound"] = "NoChannelFound";
  ChannelError["AccessDenied"] = "AccessDenied";
  ChannelError["CreationFailed"] = "CreationFailed";
})(ChannelError || (ChannelError = {}));

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var DEFAULT_TIMEOUT = 5000;
var UnavailableError = /*#__PURE__*/new Error('FDC3 DesktopAgent not available at `window.fdc3`.');
var TimeoutError = /*#__PURE__*/new Error('Timed out waiting for `fdc3Ready` event.');
var UnexpectedError = /*#__PURE__*/new Error('`fdc3Ready` event fired, but `window.fdc3` not set to DesktopAgent.');

function rejectIfNoGlobal(f) {
  return window.fdc3 ? f() : Promise.reject(UnavailableError);
}

function throwIfNoGlobal(f) {
  if (!window.fdc3) {
    throw UnavailableError;
  }

  return f();
}

var fdc3Ready = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(waitForMs) {
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (waitForMs === void 0) {
              waitForMs = DEFAULT_TIMEOUT;
            }

            return _context.abrupt("return", new Promise(function (resolve, reject) {
              // if the global is already available resolve immediately
              if (window.fdc3) {
                resolve();
              } else {
                // if its not available setup a timeout to return a rejected promise
                var timeout = setTimeout(function () {
                  return window.fdc3 ? resolve() : reject(TimeoutError);
                }, waitForMs); // listen for the fdc3Ready event

                window.addEventListener('fdc3Ready', function () {
                  clearTimeout(timeout);
                  window.fdc3 ? resolve() : reject(UnexpectedError);
                }, {
                  once: true
                });
              }
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function fdc3Ready(_x) {
    return _ref.apply(this, arguments);
  };
}();
function open(app, context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.open(app, context);
  });
}
function findIntent(intent, context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.findIntent(intent, context);
  });
}
function findIntentsByContext(context) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.findIntentsByContext(context);
  });
}
function broadcast(context) {
  throwIfNoGlobal(function () {
    return window.fdc3.broadcast(context);
  });
}
function raiseIntent(intent, context, app) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.raiseIntent(intent, context, app);
  });
}
function raiseIntentForContext(context, app) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.raiseIntentForContext(context, app);
  });
}
function addIntentListener(intent, handler) {
  return throwIfNoGlobal(function () {
    return window.fdc3.addIntentListener(intent, handler);
  });
}
function addContextListener(contextTypeOrHandler, handler) {
  if (typeof contextTypeOrHandler !== 'function') {
    return throwIfNoGlobal(function () {
      return window.fdc3.addContextListener(contextTypeOrHandler, handler);
    });
  } else {
    return throwIfNoGlobal(function () {
      return window.fdc3.addContextListener(contextTypeOrHandler);
    });
  }
}
function getSystemChannels() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getSystemChannels();
  });
}
function joinChannel(channelId) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.joinChannel(channelId);
  });
}
function getOrCreateChannel(channelId) {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getOrCreateChannel(channelId);
  });
}
function getCurrentChannel() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.getCurrentChannel();
  });
}
function leaveCurrentChannel() {
  return rejectIfNoGlobal(function () {
    return window.fdc3.leaveCurrentChannel();
  });
}
function getInfo() {
  return throwIfNoGlobal(function () {
    return window.fdc3.getInfo();
  });
}
/**
 * Compare numeric semver version number strings (in the form `1.2.3`).
 *
 * Returns `-1` if the first argument is a lower version number than the second,
 * `1` if the first argument is greater than the second, 0 if the arguments are
 * equal and `null` if an error occurred during the comparison.
 *
 * @param a
 * @param b
 */

var compareVersionNumbers = function compareVersionNumbers(a, b) {
  try {
    var aVerArr = a.split('.').map(Number);
    var bVerArr = b.split('.').map(Number);

    for (var index = 0; index < Math.max(aVerArr.length, bVerArr.length); index++) {
      /* If one version number has more digits and the other does not, and they are otherwise equal,
         assume the longer is greater. E.g. 1.1.1 > 1.1 */
      if (index === aVerArr.length || aVerArr[index] < bVerArr[index]) {
        return -1;
      } else if (index === bVerArr.length || aVerArr[index] > bVerArr[index]) {
        return 1;
      }
    }

    return 0;
  } catch (e) {
    console.error('Failed to compare version strings', e);
    return null;
  }
};
/**
 * Check if the FDC3 version in an ImplementationMetadata object is greater than
 * or equal to the supplied numeric semver version number string (in the form `1.2.3`).
 *
 * Returns a boolean or null if an error occurred while comparing the version numbers.
 *
 * @param metadata
 * @param version
 */

var versionIsAtLeast = function versionIsAtLeast(metadata, version) {
  var comparison = compareVersionNumbers(metadata.fdc3Version, version);
  return comparison === null ? null : comparison >= 0 ? true : false;
};

var ContextTypes;

(function (ContextTypes) {
  ContextTypes["Contact"] = "fdc3.contact";
  ContextTypes["ContactList"] = "fdc3.contactList";
  ContextTypes["Country"] = "fdc3.country";
  ContextTypes["Instrument"] = "fdc3.instrument";
  ContextTypes["Organization"] = "fdc3.organization";
  ContextTypes["Portfolio"] = "fdc3.portfolio";
  ContextTypes["Position"] = "fdc3.position";
})(ContextTypes || (ContextTypes = {}));

// To parse this data:
//
//   import { Convert, Context, Contact, ContactList, Instrument, InstrumentList, Country, Organization, Portfolio, Position } from "./file";
//
//   const context = Convert.toContext(json);
//   const contact = Convert.toContact(json);
//   const contactList = Convert.toContactList(json);
//   const instrument = Convert.toInstrument(json);
//   const instrumentList = Convert.toInstrumentList(json);
//   const country = Convert.toCountry(json);
//   const organization = Convert.toOrganization(json);
//   const portfolio = Convert.toPortfolio(json);
//   const position = Convert.toPosition(json);
//
// These functions will throw an error if the JSON doesn't
// match the expected interface, even if the JSON is valid.
// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
var Convert = /*#__PURE__*/function () {
  function Convert() {}

  Convert.toContext = function toContext(json) {
    return cast(JSON.parse(json), r('Context'));
  };

  Convert.contextToJson = function contextToJson(value) {
    return JSON.stringify(uncast(value, r('Context')), null, 2);
  };

  Convert.toContact = function toContact(json) {
    return cast(JSON.parse(json), r('Contact'));
  };

  Convert.contactToJson = function contactToJson(value) {
    return JSON.stringify(uncast(value, r('Contact')), null, 2);
  };

  Convert.toContactList = function toContactList(json) {
    return cast(JSON.parse(json), r('ContactList'));
  };

  Convert.contactListToJson = function contactListToJson(value) {
    return JSON.stringify(uncast(value, r('ContactList')), null, 2);
  };

  Convert.toInstrument = function toInstrument(json) {
    return cast(JSON.parse(json), r('Instrument'));
  };

  Convert.instrumentToJson = function instrumentToJson(value) {
    return JSON.stringify(uncast(value, r('Instrument')), null, 2);
  };

  Convert.toInstrumentList = function toInstrumentList(json) {
    return cast(JSON.parse(json), r('InstrumentList'));
  };

  Convert.instrumentListToJson = function instrumentListToJson(value) {
    return JSON.stringify(uncast(value, r('InstrumentList')), null, 2);
  };

  Convert.toCountry = function toCountry(json) {
    return cast(JSON.parse(json), r('Country'));
  };

  Convert.countryToJson = function countryToJson(value) {
    return JSON.stringify(uncast(value, r('Country')), null, 2);
  };

  Convert.toOrganization = function toOrganization(json) {
    return cast(JSON.parse(json), r('Organization'));
  };

  Convert.organizationToJson = function organizationToJson(value) {
    return JSON.stringify(uncast(value, r('Organization')), null, 2);
  };

  Convert.toPortfolio = function toPortfolio(json) {
    return cast(JSON.parse(json), r('Portfolio'));
  };

  Convert.portfolioToJson = function portfolioToJson(value) {
    return JSON.stringify(uncast(value, r('Portfolio')), null, 2);
  };

  Convert.toPosition = function toPosition(json) {
    return cast(JSON.parse(json), r('Position'));
  };

  Convert.positionToJson = function positionToJson(value) {
    return JSON.stringify(uncast(value, r('Position')), null, 2);
  };

  return Convert;
}();

function invalidValue(typ, val, key) {
  if (key === void 0) {
    key = '';
  }

  if (key) {
    throw Error("Invalid value for key \"" + key + "\". Expected type " + JSON.stringify(typ) + " but got " + JSON.stringify(val));
  }

  throw Error("Invalid value " + JSON.stringify(val) + " for type " + JSON.stringify(typ));
}

function jsonToJSProps(typ) {
  if (typ.jsonToJS === undefined) {
    var map = {};
    typ.props.forEach(function (p) {
      return map[p.json] = {
        key: p.js,
        typ: p.typ
      };
    });
    typ.jsonToJS = map;
  }

  return typ.jsonToJS;
}

function jsToJSONProps(typ) {
  if (typ.jsToJSON === undefined) {
    var map = {};
    typ.props.forEach(function (p) {
      return map[p.js] = {
        key: p.json,
        typ: p.typ
      };
    });
    typ.jsToJSON = map;
  }

  return typ.jsToJSON;
}

function transform(val, typ, getProps, key) {
  if (key === void 0) {
    key = '';
  }

  function transformPrimitive(typ, val) {
    if (typeof typ === typeof val) return val;
    return invalidValue(typ, val, key);
  }

  function transformUnion(typs, val) {
    // val must validate against one typ in typs
    var l = typs.length;

    for (var i = 0; i < l; i++) {
      var _typ = typs[i];

      try {
        return transform(val, _typ, getProps);
      } catch (_) {}
    }

    return invalidValue(typs, val);
  }

  function transformEnum(cases, val) {
    if (cases.indexOf(val) !== -1) return val;
    return invalidValue(cases, val);
  }

  function transformArray(typ, val) {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) return invalidValue('array', val);
    return val.map(function (el) {
      return transform(el, typ, getProps);
    });
  }

  function transformDate(val) {
    if (val === null) {
      return null;
    }

    var d = new Date(val);

    if (isNaN(d.valueOf())) {
      return invalidValue('Date', val);
    }

    return d;
  }

  function transformObject(props, additional, val) {
    if (val === null || typeof val !== 'object' || Array.isArray(val)) {
      return invalidValue('object', val);
    }

    var result = {};
    Object.getOwnPropertyNames(props).forEach(function (key) {
      var prop = props[key];
      var v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;
      result[prop.key] = transform(v, prop.typ, getProps, prop.key);
    });
    Object.getOwnPropertyNames(val).forEach(function (key) {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps, key);
      }
    });
    return result;
  }

  if (typ === 'any') return val;

  if (typ === null) {
    if (val === null) return val;
    return invalidValue(typ, val);
  }

  if (typ === false) return invalidValue(typ, val);

  while (typeof typ === 'object' && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }

  if (Array.isArray(typ)) return transformEnum(typ, val);

  if (typeof typ === 'object') {
    return typ.hasOwnProperty('unionMembers') ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty('arrayItems') ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty('props') ? transformObject(getProps(typ), typ.additional, val) : invalidValue(typ, val);
  } // Numbers can be parsed by Date but shouldn't be.


  if (typ === Date && typeof val !== 'number') return transformDate(val);
  return transformPrimitive(typ, val);
}

function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}

function a(typ) {
  return {
    arrayItems: typ
  };
}

function u() {
  for (var _len = arguments.length, typs = new Array(_len), _key = 0; _key < _len; _key++) {
    typs[_key] = arguments[_key];
  }

  return {
    unionMembers: typs
  };
}

function o(props, additional) {
  return {
    props: props,
    additional: additional
  };
}

function m(additional) {
  return {
    props: [],
    additional: additional
  };
}

function r(name) {
  return {
    ref: name
  };
}

var typeMap = {
  Context: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }], 'any'),
  ContactList: /*#__PURE__*/o([{
    json: 'contacts',
    js: 'contacts',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Contact'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Contact: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('ContactID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  ContactID: /*#__PURE__*/o([{
    json: 'email',
    js: 'email',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  InstrumentList: /*#__PURE__*/o([{
    json: 'instruments',
    js: 'instruments',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Instrument'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Instrument: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('InstrumentID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  InstrumentID: /*#__PURE__*/o([{
    json: 'BBG',
    js: 'BBG',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'CUSIP',
    js: 'CUSIP',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'FIGI',
    js: 'FIGI',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ISIN',
    js: 'ISIN',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'PERMID',
    js: 'PERMID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'RIC',
    js: 'RIC',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'SEDOL',
    js: 'SEDOL',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ticker',
    js: 'ticker',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Country: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('CountryID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  CountryID: /*#__PURE__*/o([{
    json: 'ISOALPHA2',
    js: 'ISOALPHA2',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'ISOALPHA3',
    js: 'ISOALPHA3',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Organization: /*#__PURE__*/o([{
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/r('OrganizationID')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  OrganizationID: /*#__PURE__*/o([{
    json: 'FDS_ID',
    js: 'FDS_ID',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'LEI',
    js: 'LEI',
    typ: /*#__PURE__*/u(undefined, '')
  }, {
    json: 'PERMID',
    js: 'PERMID',
    typ: /*#__PURE__*/u(undefined, '')
  }], ''),
  Portfolio: /*#__PURE__*/o([{
    json: 'positions',
    js: 'positions',
    typ: /*#__PURE__*/a( /*#__PURE__*/r('Position'))
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any'),
  Position: /*#__PURE__*/o([{
    json: 'holding',
    js: 'holding',
    typ: 3.14
  }, {
    json: 'instrument',
    js: 'instrument',
    typ: /*#__PURE__*/r('Instrument')
  }, {
    json: 'type',
    js: 'type',
    typ: ''
  }, {
    json: 'id',
    js: 'id',
    typ: /*#__PURE__*/u(undefined, /*#__PURE__*/m(''))
  }, {
    json: 'name',
    js: 'name',
    typ: /*#__PURE__*/u(undefined, '')
  }], 'any')
};

var Intents;

(function (Intents) {
  Intents["StartCall"] = "StartCall";
  Intents["StartChat"] = "StartChat";
  Intents["ViewChart"] = "ViewChart";
  Intents["ViewContact"] = "ViewContact";
  Intents["ViewQuote"] = "ViewQuote";
  Intents["ViewNews"] = "ViewNews";
  Intents["ViewInstrument"] = "ViewInstrument";
  Intents["ViewAnalysis"] = "ViewAnalysis";
})(Intents || (Intents = {}));


//# sourceMappingURL=fdc3.esm.js.map


/***/ }),

/***/ "../../node_modules/@openfin/excel/openfin.excel.js":
/*!**********************************************************!*\
  !*** ../../node_modules/@openfin/excel/openfin.excel.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AdapterError": () => (/* binding */ r),
/* harmony export */   "ApiError": () => (/* binding */ o),
/* harmony export */   "EventError": () => (/* binding */ s),
/* harmony export */   "ExcelCellBorderLineStyle": () => (/* binding */ a),
/* harmony export */   "ExcelCellHorizontalAlignment": () => (/* binding */ c),
/* harmony export */   "ExcelCellPattern": () => (/* binding */ d),
/* harmony export */   "ExcelCellVerticalAlignment": () => (/* binding */ h),
/* harmony export */   "ExcelFilterOperator": () => (/* binding */ l),
/* harmony export */   "InitializationError": () => (/* binding */ u),
/* harmony export */   "ParameterError": () => (/* binding */ p),
/* harmony export */   "disableLogging": () => (/* binding */ w),
/* harmony export */   "enableLogging": () => (/* binding */ y),
/* harmony export */   "getExcelApplication": () => (/* binding */ f)
/* harmony export */ });
var e={3885:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(4794);class s extends i.Base{async wrap(e){this.wire.sendAction("wrap-application").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.Application(this.wire,e)}wrapSync(e){this.wire.sendAction("wrap-application-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.Application(this.wire,e)}async _create(e){return void 0===e.waitForPageLoad&&(e.waitForPageLoad=!1),void 0===e.autoShow&&void 0===e.isPlatformController&&(e.autoShow=!0),await this.wire.sendAction("create-application",e),this.wrap({uuid:e.uuid})}create(e){return console.warn("Deprecation Warning: fin.Application.create is deprecated. Please use fin.Application.start"),this.wire.sendAction("application-create").catch((e=>{})),this._create(e)}async start(e){this.wire.sendAction("start-application").catch((e=>{}));const t=await this._create(e);return await this.wire.sendAction("run-application",{uuid:e.uuid}),t}async startManyManifests(e){return this.wire.sendAction("run-applications",{applications:e}).then((()=>{}))}getCurrent(){return this.wire.sendAction("get-current-application").catch((e=>{})),this.wrap({uuid:this.wire.me.uuid})}getCurrentSync(){return this.wire.sendAction("get-current-application-sync").catch((e=>{})),this.wrapSync({uuid:this.wire.me.uuid})}async startFromManifest(e,t){this.wire.sendAction("application-start-from-manifest").catch((e=>{}));const n=await this._createFromManifest(e);return await n._run(t),n}createFromManifest(e){return console.warn("Deprecation Warning: fin.Application.createFromManifest is deprecated. Please use fin.Application.startFromManifest"),this.wire.sendAction("application-create-from-manifest").catch((e=>{})),this._createFromManifest(e)}_createFromManifest(e){return this.wire.sendAction("get-application-manifest",{manifestUrl:e}).then((({payload:e})=>{const t=e.data.platform?e.data.platform.uuid:e.data.startup_app.uuid;return this.wrap({uuid:t})})).then((t=>(t._manifestUrl=e,t)))}}t.default=s},4794:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Application=void 0;const i=n(9659),r=n(4997),o=n(4169);class s extends i.EmitterBase{constructor(e,t){super(e,"application",t.uuid),this.identity=t,this.window=new r._Window(this.wire,{uuid:this.identity.uuid,name:this.identity.uuid})}windowListFromIdentityList(e){const t=[];return e.forEach((e=>{t.push(new r._Window(this.wire,{uuid:e.uuid,name:e.name}))})),t}isRunning(){return this.wire.sendAction("is-application-running",this.identity).then((({payload:e})=>e.data))}async quit(e=!1){await this._close(e),await this.wire.sendAction("destroy-application",{force:e,...this.identity})}_close(e=!1){return this.wire.sendAction("close-application",{force:e,...this.identity}).then((()=>{}))}close(e=!1){return console.warn("Deprecation Warning: Application.close is deprecated Please use Application.quit"),this.wire.sendAction("application-close",this.identity).catch((e=>{})),this._close(e)}getChildWindows(){return this.wire.sendAction("get-child-windows",this.identity).then((({payload:e})=>{const t=[];return e.data.forEach((e=>{t.push({uuid:this.identity.uuid,name:e})})),this.windowListFromIdentityList(t)}))}getManifest(){return this.wire.sendAction("get-application-manifest",this.identity).then((({payload:e})=>e.data))}getParentUuid(){return this.wire.sendAction("get-parent-application",this.identity).then((({payload:e})=>e.data))}getShortcuts(){return this.wire.sendAction("get-shortcuts",this.identity).then((({payload:e})=>e.data))}async getViews(){const{payload:e}=await this.wire.sendAction("application-get-views",this.identity);return e.data.map((e=>new o.View(this.wire,e)))}getZoomLevel(){return this.wire.sendAction("get-application-zoom-level",this.identity).then((({payload:e})=>e.data))}getWindow(){return this.wire.sendAction("application-get-window",this.identity).catch((e=>{})),Promise.resolve(this.window)}registerUser(e,t){return this.wire.sendAction("register-user",{userName:e,appName:t,...this.identity}).then((()=>{}))}removeTrayIcon(){return this.wire.sendAction("remove-tray-icon",this.identity).then((()=>{}))}restart(){return this.wire.sendAction("restart-application",this.identity).then((()=>{}))}run(){return console.warn("Deprecation Warning: Application.run is deprecated Please use fin.Application.start"),this.wire.sendAction("application-run",this.identity).catch((e=>{})),this._run()}_run(e={}){return this.wire.sendAction("run-application",{manifestUrl:this._manifestUrl,opts:e,...this.identity}).then((()=>{}))}scheduleRestart(){return this.wire.sendAction("relaunch-on-close",this.identity).then((()=>{}))}async sendApplicationLog(){const{payload:e}=await this.wire.sendAction("send-application-log",this.identity);return e.data}async setJumpList(e){await this.wire.sendAction("set-jump-list",{config:e,...this.identity})}setTrayIcon(e){return this.wire.sendAction("set-tray-icon",{enabledIcon:e,...this.identity}).then((()=>{}))}setShortcuts(e){return this.wire.sendAction("set-shortcuts",{data:e,...this.identity}).then((()=>{}))}async setShortcutQueryParams(e){await this.wire.sendAction("set-shortcut-query-args",{data:e,...this.identity})}setZoomLevel(e){return this.wire.sendAction("set-application-zoom-level",{level:e,...this.identity}).then((()=>{}))}async setAppLogUsername(e){await this.wire.sendAction("set-app-log-username",{data:e,...this.identity})}getTrayIconInfo(){return this.wire.sendAction("get-tray-icon-info",this.identity).then((({payload:e})=>e.data))}terminate(){return this.wire.sendAction("terminate-application",this.identity).then((()=>{}))}wait(){return this.wire.sendAction("wait-for-hung-application",this.identity).then((()=>{}))}getInfo(){return this.wire.sendAction("get-info",this.identity).then((({payload:e})=>e.data))}async getProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("application-get-process-info",this.identity);return e}async setFileDownloadLocation(e){await this.wire.sendAction("set-file-download-location",{downloadLocation:e,...this.identity})}}t.Application=s},7264:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(3885);r(n(4794),t),t.default=o.default},9659:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Reply=t.EmitterBase=t.Base=void 0;const s=n(3442),a=n(8068);class c{constructor(e){this.isNodeEnvironment=()=>"NodeEnvironment"===this.wire.environment.constructor.name,this.isOpenFinEnvironment=()=>"OpenFinEnvironment"===this.wire.environment.constructor.name,this.wire=e}get fin(){return a.getFin(this.wire)}get me(){return this.wire.me}}t.Base=c,t.EmitterBase=class extends c{constructor(e,t,...n){super(e),this.topic=t,i.set(this,void 0),this.eventNames=()=>this.hasEmitter()?this.getOrCreateEmitter().eventNames():[],this.emit=(e,t,...n)=>!!this.hasEmitter()&&this.getOrCreateEmitter().emit(e,t,...n),this.hasEmitter=()=>this.wire.eventAggregator.has(o(this,i)),this.getOrCreateEmitter=()=>this.wire.eventAggregator.getOrCreate(o(this,i)),this.listeners=e=>this.hasEmitter()?this.getOrCreateEmitter().listeners(e):[],this.listenerCount=e=>this.hasEmitter()?this.getOrCreateEmitter().listenerCount(e):0,this.registerEventListener=async(e,t={},n,i)=>{const r={...this.identity,timestamp:t.timestamp||Date.now(),topic:this.topic,type:e},o=this.getOrCreateEmitter();n(o);try{await this.wire.sendAction("subscribe-to-desktop-event",r)}catch(e){throw i(o),this.deleteEmitterIfNothingRegistered(o),e}},this.deregisterEventListener=async(e,t={})=>{if(this.hasEmitter()){const n={...this.identity,timestamp:t.timestamp||Date.now(),topic:this.topic,type:e};return await this.wire.sendAction("unsubscribe-to-desktop-event",n).catch((()=>null)),this.getOrCreateEmitter()}return Promise.resolve()},this.on=async(e,t,n)=>(await this.registerEventListener(e,n,(n=>{n.on(e,t)}),(n=>{n.removeListener(e,t)})),this),this.addListener=this.on,this.once=async(e,t,n)=>{const i=()=>this.deregisterEventListener(e);return await this.registerEventListener(e,n,(n=>{n.once(e,i),n.once(e,t)}),(n=>{n.removeListener(e,i),n.removeListener(e,t)})),this},this.prependListener=async(e,t,n)=>(await this.registerEventListener(e,n,(n=>{n.prependListener(e,t)}),(n=>{n.removeListener(e,t)})),this),this.prependOnceListener=async(e,t,n)=>{const i=()=>this.deregisterEventListener(e);return await this.registerEventListener(e,n,(n=>{n.prependOnceListener(e,t),n.once(e,i)}),(n=>{n.removeListener(e,t),n.removeListener(e,i)})),this},this.removeListener=async(e,t,n)=>{const i=await this.deregisterEventListener(e,n);return i&&(i.removeListener(e,t),this.deleteEmitterIfNothingRegistered(i)),this},this.deregisterAllListeners=async e=>{const t={...this.identity,type:e,topic:this.topic};if(this.hasEmitter()){const e=this.getOrCreateEmitter(),n=e.listenerCount(t.type),i=[];for(let e=0;e<n;e++)i.push(this.wire.sendAction("unsubscribe-to-desktop-event",t).catch((()=>null)));return await Promise.all(i),e}},this.removeAllListeners=async e=>{const t=async e=>{const t=await this.deregisterAllListeners(e);t&&(t.removeAllListeners(e),this.deleteEmitterIfNothingRegistered(t))};if(e)await t(e);else if(this.hasEmitter()){const e=this.getOrCreateEmitter().eventNames();await s.promiseMap(e,t)}return this},r(this,i,[t,...n]),this.listeners=e=>this.hasEmitter()?this.getOrCreateEmitter().listeners(e):[]}deleteEmitterIfNothingRegistered(e){0===e.eventNames().length&&this.wire.eventAggregator.delete(o(this,i))}},i=new WeakMap,t.Reply=class{}},3427:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659);class r extends i.Base{writeText(e){return this.wire.sendAction("clipboard-write-text",e).then((()=>{}))}readText(e){return this.wire.sendAction("clipboard-read-text",e).then((({payload:e})=>e.data))}writeHtml(e){return this.wire.sendAction("clipboard-write-html",e).then((()=>{}))}readHtml(e){return this.wire.sendAction("clipboard-read-html",e).then((({payload:e})=>e.data))}writeRtf(e){return this.wire.sendAction("clipboard-write-rtf",e).then((()=>{}))}readRtf(e){return this.wire.sendAction("clipboard-read-rtf",e).then((({payload:e})=>e.data))}write(e){return this.wire.sendAction("clipboard-write",e).then((()=>{}))}getAvailableFormats(e){return this.wire.sendAction("clipboard-read-formats",e).then((({payload:e})=>e.data))}}t.default=r},7813:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmitterMap=void 0;const i=n(6465);function r(e){return Buffer.from(e).toString("base64")}t.EmitterMap=class{constructor(){this.storage=new Map}hashKeys(e){return e.map(r).join("/")}getOrCreate(e){const t=this.hashKeys(e);return this.storage.has(t)||this.storage.set(t,new i.EventEmitter),this.storage.get(t)}has(e){return this.storage.has(this.hashKeys(e))}delete(e){const t=this.hashKeys(e);return this.storage.delete(t)}}},2734:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(7813);class r extends i.EmitterMap{constructor(){super(...arguments),this.dispatchEvent=e=>{if(function(e){return"process-desktop-event"===e.action}(e)){const{payload:t}=e,n=function(e){const{topic:t}=e;if("frame"===t){const{uuid:n,name:i}=e;return[t,n,i]}if("window"===t){const{uuid:n,name:i}=e;return[t,n,i]}if("application"===t){const{uuid:n}=e;return[t,n]}if("view"===t){const{uuid:n,name:i}=e;return[t,n,i]}return[t]}(t);if(this.has(n))return this.getOrCreate(n).emit(t.type,t),!0}return!1}}}t.default=r},7168:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(8298);class o extends i.Base{wrap(e){return this.wire.sendAction("external-application-wrap").catch((e=>{})),Promise.resolve(new r.ExternalApplication(this.wire,{uuid:e}))}wrapSync(e){return this.wire.sendAction("external-application-wrap-sync").catch((e=>{})),new r.ExternalApplication(this.wire,{uuid:e})}}t.default=o},8298:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExternalApplication=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t){super(e,"external-application",t.uuid),this.identity=t}getInfo(){return this.wire.sendAction("get-external-application-info",this.identity).then((({payload:e})=>e.data))}}t.ExternalApplication=r},9021:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(7168);t.default=o.default,r(n(8298),t)},6545:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(6465),r=n(3641),o=n(4997),s=n(7264),a=n(8347),c=n(3427),d=n(9021),h=n(6720),l=n(9211),u=n(4169),p=n(609),w=n(9641),y=n(8068),f=n(8706),g=n(7153);class m extends i.EventEmitter{constructor(e){super(),y.registerFin(e,this),this.wire=e,this.System=new r.default(e),this.Window=new o.default(e),this.Application=new s.default(e),this.InterApplicationBus=new a.default(e),this.Clipboard=new c.default(e),this.ExternalApplication=new d.default(e),this.Frame=new h.default(e),this.GlobalHotkey=new l.default(e),this.Platform=new p.default(e,this.InterApplicationBus.Channel),this.View=new u.default(e),this.Interop=new f.default(e),this.SnapshotSource=new g.default(e),this.me=w.getMe(e),e.on("disconnected",(()=>{this.emit("disconnected")}))}}t.default=m},1778:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(8161);class s extends i.Base{async wrap(e){this.wire.sendAction("frame-wrap").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Frame(this.wire,e)}wrapSync(e){this.wire.sendAction("frame-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Frame(this.wire,e)}getCurrent(){return this.wire.sendAction("frame-get-current").catch((e=>{})),Promise.resolve(new o._Frame(this.wire,this.wire.environment.getCurrentEntityIdentity()))}getCurrentSync(){return this.wire.sendAction("frame-get-current-sync").catch((e=>{})),new o._Frame(this.wire,this.wire.environment.getCurrentEntityIdentity())}}t.default=s},8161:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._Frame=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t){super(e,"frame",t.uuid,t.name),this.identity=t}getInfo(){return this.wire.sendAction("get-frame-info",this.identity).then((({payload:e})=>e.data))}getParentWindow(){return this.wire.sendAction("get-parent-window",this.identity).then((({payload:e})=>e.data))}}t._Frame=r},6720:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1778);t.default=o.default,r(n(8161),t)},9211:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659);class r extends i.EmitterBase{constructor(e){super(e,"global-hotkey")}async register(e,t){await this.on(e,t),await this.wire.sendAction("global-hotkey-register",{hotkey:e})}async unregister(e){await this.removeAllListeners(e),await this.wire.sendAction("global-hotkey-unregister",{hotkey:e})}async unregisterAll(){await Promise.all(this.eventNames().filter((e=>!("registered"===e||"unregistered"===e))).map((e=>this.removeAllListeners(e)))),await this.wire.sendAction("global-hotkey-unregister-all",{})}async isRegistered(e){const{payload:{data:t}}=await this.wire.sendAction("global-hotkey-is-registered",{hotkey:e});return t}}t.default=r},7539:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ChannelBase=t.ProtectedItems=void 0;const n=e=>(t,n,i)=>{const r=e(t,n,i);return void 0===r?n:r};t.ProtectedItems=class{constructor(e,t){this.providerIdentity=e,this.wire=t}};class i{constructor(){this.subscriptions=new Map}static defaultAction(e){throw new Error(`No action registered at target for ${e}`)}async processAction(e,t,n){try{const r=this.subscriptions.has(e)?this.subscriptions.get(e):(t,n)=>{var r;return(null!==(r=this.defaultAction)&&void 0!==r?r:i.defaultAction)(e,t,n)},o=this.preAction?await this.preAction(e,t,n):t,s=await r(o,n);return this.postAction?await this.postAction(e,s,n):s}catch(t){if(this.errorMiddleware)return this.errorMiddleware(e,t,n);throw t}}beforeAction(e){if(this.preAction)throw new Error("Already registered beforeAction middleware");this.preAction=n(e)}onError(e){if(this.errorMiddleware)throw new Error("Already registered error middleware");this.errorMiddleware=e}afterAction(e){if(this.postAction)throw new Error("Already registered afterAction middleware");this.postAction=n(e)}remove(e){this.subscriptions.delete(e)}setDefaultAction(e){if(this.defaultAction)throw new Error("default action can only be set once");this.defaultAction=e}register(e,t){if(this.subscriptions.has(e))throw new Error(`Subscription already registered for action: ${e}. Unsubscribe before adding new subscription`);return this.subscriptions.set(e,t),!0}}t.ChannelBase=i},8378:function(e,t,n){var i,r,o,s=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},a=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const c=n(7539),d=new Map;class h extends c.ChannelBase{constructor(e,t,n){super(),i.set(this,void 0),r.set(this,void 0),this.processAction=(e,t,n)=>super.processAction(e,t,n),o.set(this,(()=>{d.delete(this.endpointId),a(this,r).close()})),s(this,i,new c.ProtectedItems(e,t)),this.disconnectListener=()=>{},this.endpointId=e.endpointId,s(this,r,n),d.set(this.endpointId,this),n.receive(this.processAction)}static closeChannelByEndpointId(e){const t=d.get(e);t&&a(t,o).call(t)}static handleProviderDisconnect(e,t){e.disconnectListener(t),a(e,o).call(e)}get providerIdentity(){return a(this,i).providerIdentity}async dispatch(e,t){if(a(this,r).isEndpointConnected(this.providerIdentity.channelId))return a(this,r).send(this.providerIdentity.channelId,e,t);throw new Error("The client you are trying to dispatch from is disconnected from the target provider.")}onDisconnection(e){this.disconnectListener=t=>{try{e(t)}catch(e){throw new Error(`Error while calling the onDisconnection callback: ${e.message}`)}finally{this.disconnectListener=()=>{}}}}async disconnect(){const e=a(this,i),{channelName:t,uuid:n,name:r}=e.providerIdentity;await e.wire.sendAction("disconnect-from-channel",{channelName:t,uuid:n,name:r,endpointId:this.endpointId}),a(this,o).call(this)}}t.default=h,i=new WeakMap,r=new WeakMap,o=new WeakMap},6711:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectionManager=void 0;const a=n(3917),c=n(9659),d=n(1046),h=n(3870),l=n(569),u=n(2942),p=n(3749),w=n(3037),y=n(7113);class f extends c.Base{constructor(e){super(e),i.set(this,void 0),r.set(this,void 0),this.removeChannelFromProviderMap=e=>{this.providerMap.delete(e)},this.onmessage=e=>"process-channel-connection"===e.action&&(this.processChannelConnection(e),!0),this.providerMap=new Map,this.protocolManager=new w.ProtocolManager(this.isNodeEnvironment()?["classic"]:["rtc","classic"]),o(this,i,new p.MessageReceiver(e)),o(this,r,new l.RTCICEManager(e)),e.registerMessageHandler(this.onmessage.bind(this))}static getProtocolOptionsFromStrings(e){return e.map((e=>{switch(e){case"rtc":return h.RTCInfo;case"classic":return d.ClassicInfo;default:return a.exhaustiveCheck(e,["rtc","classic"])}}))}createProvider(e,t){const n=Object.assign(this.wire.environment.getDefaultChannelOptions().create,e||{}),r=this.protocolManager.getProviderProtocols(null==n?void 0:n.protocols),o=r.map((e=>{switch(e){case"rtc":return new h.RTCStrategy;case"classic":return new d.ClassicStrategy(this.wire,s(this,i),t.channelId,t);default:return a.exhaustiveCheck(e,["rtc","classic"])}}));let c;if(2===o.length){const[e,t]=o;c=y.default.combine(e,t)}else{if(1!==o.length)throw new Error("failed to combine strategies");[c]=o}const l=new u.ChannelProvider(t,this.wire,c),p=t.channelId;return this.providerMap.set(p,{provider:l,strategy:c,supportedProtocols:f.getProtocolOptionsFromStrings(r)}),u.ChannelProvider.setProviderRemoval(l,this.removeChannelFromProviderMap.bind(this)),l}async createClientOffer(e){const t=this.protocolManager.getClientProtocols(null==e?void 0:e.protocols);let n;return{offer:{supportedProtocols:await Promise.all(t.map((async e=>{switch(e){case"rtc":{const{rtcClient:e,channels:t,offer:i,rtcConnectionId:o,channelsOpened:a}=await s(this,r).startClientOffer();return n={rtcClient:e,channels:t,channelsOpened:a},{type:"rtc",version:h.RTCInfo.version,payload:{offer:i,rtcConnectionId:o}}}case"classic":return{type:"classic",version:d.ClassicInfo.version};default:return a.exhaustiveCheck(e,["rtc","classic"])}}))),maxProtocols:2},rtc:n}}async createClientStrategy(e,t){var n;t.endpointId||(t.endpointId=this.wire.environment.getNextMessageId(),s(this,i).checkForPreviousClientConnection(t.channelId));const o=null!==(n=t.answer)&&void 0!==n?n:{supportedProtocols:[{type:"classic",version:1}]},a=(await Promise.all(o.supportedProtocols.map((async n=>"rtc"===n.type&&e?(await s(this,r).finishClientOffer(e.rtcClient,n.payload.answer,e.channelsOpened),new h.RTCStrategy):"classic"===n.type?new d.ClassicStrategy(this.wire,s(this,i),t.endpointId,t):null)))).filter((e=>null!==e));let c;if(e&&!a.some((e=>e instanceof h.RTCStrategy))&&e&&e.rtcClient.close(),a.length>=2)c=y.default.combine(a[0],a[1]);else{if(!a.length)throw new Error("No compatible protocols");[c]=a}const l={endpointIdentity:t,rtc:e};return c.addEndpoint(t.channelId,l),c}async processChannelConnection(e){const{clientIdentity:t,providerIdentity:n,ackToSender:i,payload:o,offer:a}=e.payload;t.endpointId?t.isLocalEndpointId=!1:(t.endpointId=this.wire.environment.getNextMessageId(),t.isLocalEndpointId=!0);const c=n.channelId,l=this.providerMap.get(c);if(!l)return i.payload.success=!1,i.payload.reason=`Channel "${n.channelName}" has been destroyed.`,this.wire.sendRaw(i);const{provider:p,strategy:w,supportedProtocols:y}=l;try{if(!(p instanceof u.ChannelProvider))throw Error("Cannot connect to a channel client");const e=null!=a?a:{supportedProtocols:[{type:"classic",version:1}],maxProtocols:1},n=this.protocolManager.getCompatibleProtocols(y,e);if(!n.length)throw new Error("This provider does not support any of the offered protocols.");const c=await p.processConnection(t,o);i.payload.payload=i.payload.payload||{};let l={supportedProtocols:[],endpointPayloadPromise:Promise.resolve({endpointIdentity:t})};return l=await n.reduce((async(e,t)=>{const n=await e;if("rtc"===t.type){const{answer:e,rtcClient:i,channels:o}=await s(this,r).createProviderAnswer(t.payload.rtcConnectionId,t.payload.offer);n.supportedProtocols.push({type:"rtc",version:h.RTCInfo.version,payload:{answer:e}}),n.endpointPayloadPromise=n.endpointPayloadPromise.then((e=>o.then((t=>({...e,rtc:{rtcClient:i,channels:t}})))))}else n.supportedProtocols.push({type:"classic",version:d.ClassicInfo.version});return n}),Promise.resolve(l)),l.endpointPayloadPromise.then((e=>w.addEndpoint(t.endpointId,e))),i.payload.payload.result=c,i.payload.payload.answer=l,this.wire.sendRaw(i)}catch(e){return i.payload.success=!1,i.payload.reason=e.message,this.wire.sendRaw(i)}}}t.ConnectionManager=f,i=new WeakMap,r=new WeakMap},7722:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Channel=void 0;const s=n(8378),a=n(2942),c=n(9659),d=n(6711),h=()=>{};class l extends c.EmitterBase{constructor(e){super(e,"channel"),i.set(this,void 0),r(this,i,new d.ConnectionManager(e))}async getAllChannels(){return this.wire.sendAction("get-all-channels").then((({payload:e})=>e.data))}async onChannelConnect(e){await this.on("connected",e)}async onChannelDisconnect(e){await this.on("disconnected",e)}async connect(e,t){if(!e||"string"!=typeof e)throw new Error("Please provide a channelName string to connect to a channel.");const n=Object.assign(this.wire.environment.getDefaultChannelOptions().connect,t||{});let r=h,a=h;const c=new Promise((t=>{r=t,a=i=>{e===i.channelName&&(this.removeListener("connected",a),this.connect(e,n).then((e=>{t(e)})))},this.on("connected",a)}));try{const{offer:t,rtc:c}=await o(this,i).createClientOffer(n),d=await this.wire.sendAction("connect-to-channel",{channelName:e,...n,offer:t}),{payload:{data:h}}=d;r&&r(),this.removeListener("connected",a);const l=await o(this,i).createClientStrategy(c,h),u=new s.default(h,this.wire,l);return l.onEndpointDisconnect(h.channelId,(async()=>{try{await u.disconnect()}catch(e){console.warn(`Something went wrong during disconnect for client with uuid: ${h.uuid} / name: ${h.name} / endpointId: ${h.endpointId}.`)}finally{s.default.handleProviderDisconnect(u,h)}})),this.on("disconnected",(t=>{t.channelName===e&&s.default.handleProviderDisconnect(u,t)})),u}catch(t){const i="internal-nack";if({wait:!0,...n}.wait&&t.message&&t.message.includes(i))return console.warn(`Channel not found for channelName: ${e}, waiting for channel connection.`),c;throw t.message===i?new Error(`No channel found for channelName: ${e}`):new Error(t)}}async create(e,t){if(!e)throw new Error("Please provide a channelName to create a channel");const{payload:{data:n}}=await this.wire.sendAction("create-channel",{channelName:e}),r=o(this,i).createProvider(t,n);return this.on("client-disconnected",(t=>{t.channelName===e&&a.ChannelProvider.handleClientDisconnection(r,t)})),r}}t.Channel=l,i=new WeakMap},3749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MessageReceiver=void 0;const i=n(8378),r=n(9659);class o extends r.Base{constructor(e){super(e),this.onmessage=e=>"process-channel-message"===e.action&&(this.processChannelMessage(e),!0),this.endpointMap=new Map,this.latestEndpointIdByChannelId=new Map,e.registerMessageHandler(this.onmessage.bind(this))}async processChannelMessage(e){var t,n;const{senderIdentity:i,providerIdentity:r,action:o,ackToSender:s,payload:a,intendedTargetIdentity:c}=e.payload,d=null!==(n=null!==(t=c.channelId)&&void 0!==t?t:c.endpointId)&&void 0!==n?n:this.latestEndpointIdByChannelId.get(r.channelId),h=this.endpointMap.get(d);if(!h)return s.payload.success=!1,s.payload.reason=`Client connection with identity uuid: ${this.wire.me.uuid} / name: ${this.wire.me.name} / endpointId: ${d} no longer connected.`,this.wire.sendRaw(s);try{const e=await h(o,a,i);return s.payload.payload=s.payload.payload||{},s.payload.payload.result=e,this.wire.sendRaw(s)}catch(e){return s.payload.success=!1,s.payload.reason=e.message,this.wire.sendRaw(s)}}addEndpoint(e,t,n){this.endpointMap.set(n,e),t!==n&&this.latestEndpointIdByChannelId.set(t,n)}removeEndpoint(e,t){this.endpointMap.delete(t),this.latestEndpointIdByChannelId.get(e)===t&&this.latestEndpointIdByChannelId.delete(e)}checkForPreviousClientConnection(e){const t=this.latestEndpointIdByChannelId.get(e);t&&(i.default.closeChannelByEndpointId(t),console.warn("You have created a second connection to an older provider. First connection has been removed from the clientMap"),console.warn("If the provider calls publish(), you may receive multiple messages."))}}t.MessageReceiver=o},1046:function(e,t){var n,i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ClassicInfo=t.ClassicStrategy=void 0,t.ClassicStrategy=class{constructor(e,t,s,a){this.messageReceiver=t,this.endpointId=s,this.providerIdentity=a,n.set(this,void 0),i.set(this,new Map),this.send=async(e,t,r)=>{const s=o(this,i).get(e);if(!s)throw new Error(`Could not locate routing info for endpoint ${e}`);const a={...s};return a.isLocalEndpointId&&delete a.endpointId,delete a.isLocalEndpointId,(await o(this,n).sendAction("send-channel-message",{...a,providerIdentity:this.providerIdentity,action:t,payload:r}).catch((e=>{throw new Error(e.message)}))).payload.data.result},this.close=async()=>{this.messageReceiver.removeEndpoint(this.providerIdentity.channelId,this.endpointId),r(this,i,new Map)},r(this,n,e)}onEndpointDisconnect(e,t){}receive(e){this.messageReceiver.addEndpoint(e,this.providerIdentity.channelId,this.endpointId)}async closeEndpoint(e){o(this,i).delete(e)}isEndpointConnected(e){return o(this,i).has(e)}addEndpoint(e,t){o(this,i).set(e,t.endpointIdentity)}isValidEndpointPayload(e){var t,n;return"string"==typeof(null===(t=null==e?void 0:e.endpointIdentity)||void 0===t?void 0:t.endpointId)||"string"==typeof(null===(n=null==e?void 0:e.endpointIdentity)||void 0===n?void 0:n.channelId)}},n=new WeakMap,i=new WeakMap,t.ClassicInfo={version:5,minimumVersion:0,type:"classic"}},7113:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});class n{constructor(e,t){this.primary=e,this.secondary=t}static combine(e,t){return new n(e,t)}onEndpointDisconnect(e,t){this.primary.onEndpointDisconnect(e,(()=>{this.secondary.isEndpointConnected(e)||t()})),this.secondary.onEndpointDisconnect(e,(()=>{this.primary.isEndpointConnected(e)||t()}))}isValidEndpointPayload(e){return this.primary.isValidEndpointPayload(e)||this.secondary.isValidEndpointPayload(e)}async closeEndpoint(e){await this.primary.closeEndpoint(e),await this.secondary.closeEndpoint(e)}isEndpointConnected(e){return this.primary.isEndpointConnected(e)||this.secondary.isEndpointConnected(e)}async addEndpoint(e,t){this.primary.isValidEndpointPayload(t)&&await this.primary.addEndpoint(e,t),this.secondary.isValidEndpointPayload(t)&&await this.secondary.addEndpoint(e,t)}receive(e){this.primary.receive(e),this.secondary.receive(e)}send(e,t,n){return this.primary.isEndpointConnected(e)?this.primary.send(e,t,n):this.secondary.send(e,t,n)}async close(){await Promise.all([this.primary.close(),this.secondary.close()])}}t.default=n},3037:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ProtocolManager=void 0,t.ProtocolManager=class{constructor(e){this.ProtocolsInPreferenceOrder=e,this.DefaultClientProtocols=["classic"],this.DefaultProviderProtocols=["classic"],this.getClientProtocols=e=>{const t=e?this.ProtocolsInPreferenceOrder.filter((t=>e.includes(t))):this.DefaultClientProtocols;if(!t.length)throw new Error(`No valid protocols were passed in. Accepted values are: ${this.ProtocolsInPreferenceOrder.join(", ")}.`);return t},this.getProviderProtocols=e=>{const t=e?this.ProtocolsInPreferenceOrder.filter((t=>e.includes(t))):this.DefaultProviderProtocols;if(!t.length)throw new Error(`No valid protocols were passed in. Accepted values are: ${this.ProtocolsInPreferenceOrder.join(", ")}.`);return t},this.getCompatibleProtocols=(e,t)=>t.supportedProtocols.filter((t=>e.some((e=>{var n;return e.type===t.type&&t.version>=e.minimumVersion&&e.version>=(null!==(n=t.minimumVersion)&&void 0!==n?n:0)})))).slice(0,t.maxProtocols)}}},8776:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},s=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.RTCEndpoint=void 0;const a=n(2366);t.RTCEndpoint=class{constructor(e,t){this.rtc=e,this.endpointIdentity=t,this.responseMap=new Map,i.set(this,null),r.set(this,void 0),this.connectionStateChangeHandler=e=>{"connected"!==this.rtc.rtcClient.connectionState&&(this.rtc.rtcClient.removeEventListener("connectionstatechange",this.connectionStateChangeHandler),this.close(),o(this,r)&&o(this,r).call(this))},this.send=async(e,t)=>{const n=`message-${Math.random()}`,i=new Promise(((e,t)=>{this.responseMap.set(n,{resolve:e,reject:t})}));return this.rtc.channels.request.send(JSON.stringify({action:e,payload:t,messageId:n})),i},this.close=()=>{this.responseMap.forEach((e=>e.reject("Connection has closed."))),this.responseMap=new Map,this.rtc.channels.request.close(),this.rtc.channels.response.close(),this.rtc.rtcClient.close()},this.rtc.channels.response.addEventListener("message",(e=>{var t;const{messageId:n,payload:i,success:r,error:o}=JSON.parse(e.data),{resolve:s,reject:a}=null!==(t=this.responseMap.get(n))&&void 0!==t?t:{};s&&a?(this.responseMap.delete(n),r?s(i):a(o)):(console.log("Could not find id in responseMap."),console.log(e))})),this.rtc.channels.request.addEventListener("message",(async e=>{const{messageId:n,action:r,payload:s}=JSON.parse(e.data);if(o(this,i))try{const e=await o(this,i).call(this,r,s,t);this.rtc.channels.response.send(JSON.stringify({messageId:n,payload:e,success:!0}))}catch(e){"open"===this.rtc.channels.response.readyState&&this.rtc.channels.response.send(JSON.stringify({messageId:n,error:a.errorToPOJO(e),success:!1}))}else"open"===this.rtc.channels.response.readyState&&this.rtc.channels.response.send(JSON.stringify({messageId:n,success:!1,error:"Connection not ready."}))})),this.rtc.rtcClient.addEventListener("connectionstatechange",this.connectionStateChangeHandler),Object.values(this.rtc.channels).forEach((e=>{e.onclose=e=>{[...this.responseMap.values()].forEach((e=>e.reject(new Error("RTCDataChannel closed unexpectedly, this is most commonly caused by message size. Note: RTC Channels have a message size limit of ~255kB.")))),this.close(),o(this,r)&&o(this,r).call(this)}}))}onDisconnect(e){if(o(this,r))throw new Error("RTCEndpoint disconnectListener cannot be set twice.");s(this,r,e)}receive(e){if(o(this,i))throw new Error("You have already set a listener for this RTC Endpoint.");s(this,i,e)}get connected(){return"connected"===this.rtc.rtcClient.connectionState}},i=new WeakMap,r=new WeakMap},569:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RTCICEManager=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e){super(e,"channel"),this.ensureChannelOpened=e=>new Promise(((t,n)=>{if("open"===e.readyState)t();else if("connecting"===e.readyState){const n=()=>{e.removeEventListener("open",n),t()};e.addEventListener("open",n)}else n(new Error("This Channel has already closed"))}))}static createDataChannelPromise(e,t){let n;const i=new Promise((e=>{n=e})),r=i=>{const o=()=>{i.channel.removeEventListener("open",o),n(i.channel)};i.channel.label===e&&(i.channel.addEventListener("open",o),t.removeEventListener("datachannel",r))};return t.addEventListener("datachannel",r),i}async listenForProviderIce(e,t){await this.on(this.createProviderEventName(e),t,{timestamp:Date.now()})}async raiseProviderIce(e,t){await this.wire.environment.raiseEvent(this.createRouteString(this.createProviderEventName(e)),t)}async listenForClientIce(e,t){await this.on(this.createClientEventName(e),t,{timestamp:Date.now()})}async raiseClientIce(e,t){await this.wire.environment.raiseEvent(this.createRouteString(this.createClientEventName(e)),t)}cleanupIceListeners(e){this.removeAllListeners(this.createClientEventName(e)),this.removeAllListeners(this.createProviderEventName(e))}createClientEventName(e){return`ice-client-${e}`}createProviderEventName(e){return`ice-provider-${e}`}createRouteString(e){return`channel/${e}`}createRtcPeer(){return this.wire.environment.getRtcPeer()}async startClientOffer(){const e=Math.random().toString(),t=this.createRtcPeer();t.addEventListener("icecandidate",(async t=>{var n;t.candidate&&await this.raiseClientIce(e,{candidate:null===(n=t.candidate)||void 0===n?void 0:n.toJSON()})})),await this.listenForProviderIce(e,(async e=>{await t.addIceCandidate(e.candidate)}));const n={request:t.createDataChannel("request"),response:t.createDataChannel("response")},i=await t.createOffer();await t.setLocalDescription(i);const r=Promise.all([n.request,n.response].map(this.ensureChannelOpened)).then((()=>{}));return{rtcClient:t,channels:n,offer:i,rtcConnectionId:e,channelsOpened:r}}async finishClientOffer(e,t,n){return await e.setRemoteDescription(t),await n,!0}async createProviderAnswer(e,t){const n=this.createRtcPeer(),i=r.createDataChannelPromise("request",n),o=r.createDataChannelPromise("response",n);n.addEventListener("icecandidate",(async t=>{var n;t.candidate&&await this.raiseProviderIce(e,{candidate:null===(n=t.candidate)||void 0===n?void 0:n.toJSON()})})),await this.listenForClientIce(e,(async e=>{await n.addIceCandidate(e.candidate)})),await n.setRemoteDescription(t);const s=await n.createAnswer();await n.setLocalDescription(s);const a=Promise.all([i,o]).then((([t,n])=>(this.cleanupIceListeners(e),{request:t,response:n})));return{rtcClient:n,answer:s,channels:a}}}t.RTCICEManager=r},3870:function(e,t,n){var i,r,o,s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},a=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.RTCInfo=t.RTCStrategy=void 0;const c=n(8776);t.RTCStrategy=class{constructor(){i.set(this,null),r.set(this,new Map),o.set(this,!0),this.send=async(e,t,n)=>this.getEndpointById(e).send(t,n),this.close=async()=>{s(this,o)&&(s(this,r).forEach((e=>e.close())),a(this,r,new Map)),a(this,o,!1)}}onEndpointDisconnect(e,t){this.getEndpointById(e).onDisconnect(t)}receive(e){if(s(this,i))throw new Error("You have already set a listener for this RTC Strategy");a(this,i,e),s(this,r).forEach((e=>e.receive(s(this,i))))}getEndpointById(e){const t=s(this,r).get(e);if(!t)throw new Error(`Client with endpoint id ${e} is not connected`);return t}get connected(){return s(this,o)}isEndpointConnected(e){return s(this,r).has(e)}addEndpoint(e,t){if(!s(this,o))return void console.warn("Adding endpoint to disconnected RTC Strategy");const n=new c.RTCEndpoint(t.rtc,t.endpointIdentity);s(this,i)&&n.receive(s(this,i)),s(this,r).set(e,n)}async closeEndpoint(e){s(this,r).delete(e)}isValidEndpointPayload(e){const t=e=>"object"==typeof e&&null!==e;return t(e)&&t(e.endpointIdentity)&&t(e.rtc)&&"string"==typeof e.endpointIdentity.endpointId}},i=new WeakMap,r=new WeakMap,o=new WeakMap,t.RTCInfo={version:1,minimumVersion:0,type:"rtc"}},2942:function(e,t,n){var i=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.ChannelProvider=void 0;const o=n(7539),s=n(2300);let a=(()=>{var e,t,n,a,c;class d extends o.ChannelBase{constructor(h,l,u){super(),e.set(this,void 0),t.set(this,void 0),n.set(this,void 0),a.set(this,(t=>{const o=this.connections.filter((e=>e.endpointId!==t.endpointId));r(this,n).closeEndpoint(t.endpointId),i(this,e,o)})),this.processAction=async(e,t,n)=>(d.clientIsMultiRuntime(n)&&!s.runtimeUuidMeetsMinimumRuntimeVersion(n.runtimeUuid,"18.87.56.0")?this.handleMultiRuntimeLegacyClient(n):this.checkForClientConnection(n),super.processAction(e,t,n)),c.set(this,(()=>{r(this,n).close();const e=d.removalMap.get(this);e&&e()})),i(this,t,new o.ProtectedItems(h,l)),this.connectListener=()=>{},this.disconnectListener=()=>{},i(this,e,[]),i(this,n,u),u.receive(this.processAction)}get connections(){return[...r(this,e)]}static handleClientDisconnection(e,t){const n=e.connections.find((e=>e.endpointId===t.endpointId));n?r(e,a).call(e,n):e.connections.filter((e=>e.uuid===t.uuid&&e.name===t.name)).forEach(r(e,a)),e.disconnectListener(t)}static setProviderRemoval(e,t){d.removalMap.set(e,t)}dispatch(e,t,i){var o;const s=null!==(o=e.endpointId)&&void 0!==o?o:this.getEndpointIdForOpenFinId(e,t);return s&&r(this,n).isEndpointConnected(s)?r(this,n).send(s,t,i):Promise.reject(new Error(`Client connection with identity uuid: ${e.uuid} / name: ${e.name} / endpointId: ${s} no longer connected.`))}async processConnection(t,n){return r(this,e).push(t),this.connectListener(t,n)}publish(e,t){return this.connections.map((i=>r(this,n).send(i.endpointId,e,t)))}onConnection(e){this.connectListener=e}onDisconnection(e){this.disconnectListener=e}async destroy(){const n=r(this,t),{channelName:o}=n.providerIdentity;i(this,e,[]),await n.wire.sendAction("destroy-channel",{channelName:o}),r(this,c).call(this)}checkForClientConnection(e){if(!this.isClientConnected(e))throw new Error(`This action was sent from a client that is not connected to the provider.\n                    Client Identity: {uuid: ${e.uuid}, name: ${e.name}, endpointId: ${e.endpointId}}`)}isClientConnected(e){return d.clientIdentityIncludesEndpointId(e)?this.connections.some((t=>t.endpointId===e.endpointId&&t.uuid===e.uuid&&t.name===e.name)):this.isLegacyClientConnected(e)}isLegacyClientConnected(e){return this.connections.some((t=>t.uuid===e.uuid&&t.name===e.name))}handleMultiRuntimeLegacyClient(e){if(!this.isLegacyClientConnected(e))throw new Error(`This action was sent from a client that is not connected to the provider. Client Identity:\n                    {uuid: ${e.uuid}, name: ${e.name}, endpointId: ${e.endpointId}}`)}getEndpointIdForOpenFinId(e,n){var i;const o=this.connections.filter((t=>t.name===e.name&&t.uuid===e.uuid));if(o.length>=2){const i=r(this,t),{uuid:o,name:s}=e,a=null==i?void 0:i.providerIdentity.uuid,c=null==i?void 0:i.providerIdentity.name;console.warn(`WARNING: Dispatch call may have unintended results. The "to" argument of your dispatch call is missing the\n                "endpointId" parameter. The identity you are dispatching to ({uuid: ${o}, name: ${s}})\n                has multiple channelClients for this channel. Your dispatched action: (${n}) from the provider:\n                ({uuid: ${a}, name: ${c}}) will only be processed by the most recently-created client.`)}return null===(i=o.pop())||void 0===i?void 0:i.endpointId}static clientIdentityIncludesEndpointId(e){return void 0!==e.endpointId}static clientIsMultiRuntime(e){return void 0!==e.runtimeUuid}}return e=new WeakMap,t=new WeakMap,n=new WeakMap,a=new WeakMap,c=new WeakMap,d.removalMap=new WeakMap,d})();t.ChannelProvider=a},8347:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InterAppPayload=void 0;const i=n(6465),r=n(9659),o=n(3127),s=n(7722),a=n(4999);class c extends r.Base{constructor(e){super(e),this.events={subscriberAdded:"subscriber-added",subscriberRemoved:"subscriber-removed"},this.refCounter=new o.default,this.Channel=new s.Channel(e),this.emitter=new i.EventEmitter,e.registerMessageHandler(this.onmessage.bind(this)),this.on=this.emitter.on.bind(this.emitter),this.removeAllListeners=this.emitter.removeAllListeners.bind(this.emitter)}publish(e,t){return this.wire.sendAction("publish-message",{topic:e,message:t,sourceWindowName:this.me.name}).then((()=>{}))}async send(e,t,n){const i=a.validateIdentity(e);if(i)throw new Error(i);await this.wire.sendAction("send-message",{destinationUuid:e.uuid,destinationWindowName:e.name,topic:t,message:n,sourceWindowName:this.me.name})}subscribe(e,t,n){const i=this.createSubscriptionKey(e.uuid,e.name||"*",t);return this.emitter.on(i,n),this.refCounter.actOnFirst(i,(()=>this.wire.sendAction("subscribe",{sourceUuid:e.uuid,sourceWindowName:e.name||"*",topic:t,destinationWindowName:this.me.name})),(()=>Promise.resolve()))}unsubscribe(e,t,n){const i=e.name||"*",r=this.createSubscriptionKey(e.uuid,i,t);return this.emitter.removeListener(r,n),this.refCounter.actOnLast(r,(()=>this.wire.sendAction("unsubscribe",{sourceUuid:e.uuid,sourceWindowName:i,topic:t,destinationWindowName:this.me.name})),(()=>new Promise((e=>e)).then((()=>{}))))}processMessage(e){const{payload:{message:t,sourceWindowName:n,sourceUuid:i,topic:r}}=e,o=[this.createSubscriptionKey(i,n,r),this.createSubscriptionKey(i,"*",r),this.createSubscriptionKey("*","*",r)],s={uuid:i,name:n};o.forEach((e=>{this.emitter.emit(e,t,s)}))}emitSubscriverEvent(e,t){const{payload:{targetName:n,uuid:i,topic:r}}=t,o={name:n,uuid:i,topic:r};this.emitter.emit(e,o)}createSubscriptionKey(e,t,n){const i=t||"*";if(!(e&&i&&n))throw new Error("Missing uuid, name, or topic string");return function(...e){return e.map((e=>Buffer.from(`${e}`).toString("base64"))).join("/")}(e,i,n)}onmessage(e){const{action:t}=e;switch(t){case"process-message":this.processMessage(e);break;case this.events.subscriberAdded:this.emitSubscriverEvent(this.events.subscriberAdded,e);break;case this.events.subscriberRemoved:this.emitSubscriverEvent(this.events.subscriberRemoved,e)}return!0}}t.default=c,t.InterAppPayload=class{}},2977:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(2057),o=n(7138),s=(e,...t)=>new e(...t);class a extends i.Base{async init(e,t=s){this.wire.sendAction("interop-init").catch((e=>{}));const n=await this.fin.InterApplicationBus.Channel.create(`interop-broker-${e}`),i=await this.fin.Application.getCurrentSync().getInfo();return t(r.InteropBroker,this.wire,n,i.initialOptions.interopBrokerConfiguration||{})}connectSync(e,t){return this.wire.sendAction("interop-connect-sync").catch((e=>{})),new o.InteropClient(this.wire,e,t)}}t.default=a},2057:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InteropBroker=void 0;const i=n(9659),r=n(7115),o=n(1787);let s=[{id:"green",displayMetadata:{color:"#00CC88",name:"green"}},{id:"purple",displayMetadata:{color:"#8C61FF",name:"purple"}},{id:"orange",displayMetadata:{color:"#FF8C4C",name:"orange"}},{id:"red",displayMetadata:{color:"#FF5E60",name:"red"}},{id:"pink",displayMetadata:{color:"#FF8FB8",name:"pink"}},{id:"yellow",displayMetadata:{color:"#E9FF8F",name:"yellow"}}];class a extends i.Base{constructor(e,t,n){super(e),this.channel=t,this.interopClients=new Map,this.contextGroupsById=new Map,n.contextGroups&&(s=n.contextGroups),this.intentClientMap=new Map,this.lastContextMap=new Map,this.sessionContextGroupMap=new Map,this.setContextGroupMap(),this.wireChannel(t)}setContext({context:e},t){this.wire.sendAction("interop-broker-set-context").catch((e=>{}));const n=this.getClientState(t);if(!n||!n.contextGroupId)throw n?new Error("You must join a context group before you can set context."):new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);{const{contextGroupId:t}=n;if(!this.contextGroupsById.has(t))throw new Error(`Client has a context group that isn't in the context group mapping: ${t}.`);const i=a.checkContextIntegrity(e);if(!1===i.isValid)throw new Error(`Failed to set Context - bad Context. Reason: ${i.reason}. Context: ${JSON.stringify(e)}`);const r=this.contextGroupsById.get(t),o=e.type;r.set(o,e),this.lastContextMap.set(t,o),Array.from(this.interopClients.values()).filter((e=>e.contextGroupId===t)).forEach((t=>{for(const[,n]of t.contextHandlers)a.isContextTypeCompatible(o,n.contextType)&&this.invokeContextHandler(t.clientIdentity,n.handlerId,e)}))}}getCurrentContext(e,t){var n;this.wire.sendAction("interop-broker-get-current-context").catch((e=>{}));const i=this.getClientState(t);if(!(null==i?void 0:i.contextGroupId))throw new Error("You must be a member of a context group to call getCurrentContext");const{contextGroupId:r}=i,o=this.contextGroupsById.get(r),s=this.lastContextMap.get(r),a=null!==(n=null==e?void 0:e.contextType)&&void 0!==n?n:s;return o&&a?o.get(a):void 0}async joinContextGroup({contextGroupId:e,target:t},n){if(this.wire.sendAction("interop-broker-join-context-group").catch((e=>{})),t){a.hasEndpointId(t)&&await this.addClientToContextGroup({contextGroupId:e},t);const n=this.channel.connections.filter((e=>e.uuid===t.uuid&&e.name===t.name));if(!n.length)throw new Error(`Given Identity ${t.uuid} ${t.name} is not connected to the Interop Broker.`);n.length>1&&console.warn(`More than one connection found for identity ${t.uuid} ${t.name}`);const i=[];for(const t of n)i.push(this.addClientToContextGroup({contextGroupId:e},t));await Promise.all(i)}else await this.addClientToContextGroup({contextGroupId:e},n)}async addClientToContextGroup({contextGroupId:e},t){this.wire.sendAction("interop-broker-add-client-to-context-group").catch((e=>{}));const n=this.getClientState(t);if(!n)throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);if(!this.getContextGroups().find((t=>t.id===e)))throw new Error(`Attempting to join a context group that does not exist: ${e}. You may only join existing context groups.`);if(n.contextGroupId!==e){n.contextGroupId=e,await a.setCurrentContextGroupInClientOptions(t,e);const i=this.contextGroupsById.get(e);for(const[,e]of n.contextHandlers){const{contextType:n,handlerId:r}=e;if(void 0===n)i.forEach(((e,n)=>{this.invokeContextHandler(t,r,e)}));else if(i.has(n)){const e=i.get(n);e&&this.invokeContextHandler(t,r,e)}}}}async removeFromContextGroup({target:e},t){if(this.wire.sendAction("interop-broker-remove-from-context-group").catch((e=>{})),e){a.hasEndpointId(e)&&await this.removeClientFromContextGroup(e);const t=this.channel.connections.filter((t=>t.uuid===e.uuid&&t.name===e.name));if(!t.length)throw new Error(`No connection found for given Identity ${e.uuid} ${e.name}`);t.length>1&&console.warn(`More than one connection found for identity ${e.uuid} ${e.name}`);const n=[];for(const e of t)n.push(this.removeClientFromContextGroup(e));await Promise.all(n)}else await this.removeClientFromContextGroup(t)}async removeClientFromContextGroup(e){this.wire.sendAction("interop-broker-remove-client-from-context-group").catch((e=>{}));const t=this.getClientState(e);t&&(t.contextGroupId=void 0),await a.setCurrentContextGroupInClientOptions(e,null)}getContextGroups(){return this.wire.sendAction("interop-broker-get-context-groups").catch((e=>{})),s.map((e=>({...e})))}getInfoForContextGroup({contextGroupId:e}){return this.wire.sendAction("interop-broker-get-info-for-context-group").catch((e=>{})),this.getContextGroups().find((t=>t.id===e))}getAllClientsInContextGroup({contextGroupId:e}){return this.wire.sendAction("interop-broker-get-all-clients-in-context-group").catch((e=>{})),Array.from(this.interopClients.values()).filter((t=>t.contextGroupId===e)).map((e=>e.clientIdentity))}async handleFiredIntent(e,t){const n=o.generateOverrideWarning("interopClient.fireIntent","fdc3.raiseIntent","InteropBroker.handleFiredIntent",t);throw console.warn(n),new Error(o.BROKER_ERRORS.fireIntent)}async setIntentTarget(e,t){this.wire.sendAction("interop-broker-set-intent-target").catch((e=>{}));const n=this.intentClientMap.get(t.name),i=`intent-handler-${e.name}`;if(n){const t=n.get(i);if(t){if(t.pendingIntents.push(e),t.clientIdentity&&t.isReady){const{clientIdentity:e,pendingIntents:n}=t;try{const r=n[n.length-1];await this.channel.dispatch(e,i,r),t.pendingIntents=[]}catch(n){console.error(`Error invoking intent handler for client ${e.uuid}/${e.name}/${e.endpointId}`),t.isReady=!1}}}else n.set(i,{isReady:!1,pendingIntents:[e]})}else{this.intentClientMap.set(t.name,new Map);const n=this.intentClientMap.get(t.name);n&&n.set(i,{isReady:!1,pendingIntents:[e]})}}async handleInfoForIntent(e,t){const n=o.generateOverrideWarning("interopClient.getInfoForIntent","fdc3.findIntent","InteropBroker.handleInfoForIntent",t);throw console.warn(n),new Error(o.BROKER_ERRORS.getInfoForIntent)}async handleInfoForIntentsByContext(e,t){const n=o.generateOverrideWarning("interopClient.getInfoForIntentsByContext","fdc3.findIntentsByContext","InteropBroker.handleInfoForIntentsByContext",t);throw console.warn(n),new Error(o.BROKER_ERRORS.getInfoForIntentsByContext)}async handleFiredIntentForContext(e,t){const n=o.generateOverrideWarning("interopClient.fireIntentForContext","fdc3.raiseIntentForContext","InteropBroker.handleFiredIntentForContext",t);throw console.warn(n),new Error(o.BROKER_ERRORS.fireIntentForContext)}decorateSnapshot(e){return{...e,interopSnapshotDetails:{contextGroupStates:this.getContextGroupStates()}}}applySnapshot(e,t){var n;const i=null===(n=null==e?void 0:e.interopSnapshotDetails)||void 0===n?void 0:n.contextGroupStates;i&&((null==t?void 0:t.closeExistingWindows)||this.updateExistingClients(i),this.rehydrateContextGroupStates(i))}updateExistingClients(e){this.interopClients.forEach((t=>{const{clientIdentity:n,contextGroupId:i,contextHandlers:r}=t;if(i){const t=e[i];for(const[,e]of Object.entries(t))r.forEach((t=>{const{handlerId:i,contextType:r}=t;a.isContextTypeCompatible(e.type,r)&&this.invokeContextHandler(n,i,e)}))}}))}getContextGroupStates(){return a.toObject(this.contextGroupsById)}rehydrateContextGroupStates(e){const t=Object.entries(e);for(const[e,n]of t){const t=Object.entries(n);for(const[n,i]of t)this.contextGroupsById.has(e)?this.contextGroupsById.get(e).set(n,i):console.warn(`Attempting to set a context group that isn't in the context group mapping. Skipping context group rehydration for: ${e}`)}}contextHandlerRegistered({contextType:e,handlerId:t},n){const i={contextType:e,handlerId:t},r=this.getClientState(n);if(null==r||r.contextHandlers.set(t,i),r&&r.contextGroupId){const{contextGroupId:i}=r,o=this.contextGroupsById.get(i);if(void 0===e)o.forEach(((e,i)=>{this.invokeContextHandler(n,t,e)}));else if(o.has(e)){const i=o.get(e);i&&this.invokeContextHandler(n,t,i)}}}async intentHandlerRegistered(e,t){const{handlerId:n}=e,i=this.intentClientMap.get(t.name),r=null==i?void 0:i.get(n);if(i)if(r){const{pendingIntents:e}=r;r.clientIdentity=t,r.isReady=!0;try{if(e.length>0){const i=e[e.length-1];await this.channel.dispatch(t,n,i),r.pendingIntents=[]}}catch(e){console.error(`Error invoking intent handler: ${n} for client ${t.uuid}/${t.name}/${t.endpointId}`)}}else i.set(n,{isReady:!0,pendingIntents:[],clientIdentity:t});else{this.intentClientMap.set(t.name,new Map);const e=this.intentClientMap.get(t.name);e&&e.set(n,{isReady:!0,pendingIntents:[],clientIdentity:t})}}invokeContextHandler(e,t,n){this.channel.dispatch(e,t,n).catch((i=>{console.error(`Error invoking context handler ${t} for context type ${n.type} in client ${e.uuid}/${e.name}/${e.endpointId}`,i)}))}removeContextHandler({handlerId:e},t){const n=this.getClientState(t);n&&n.contextHandlers.delete(e)}handleJoinSessionContextGroup({sessionContextGroupId:e},t){try{if(!e)throw new Error("Failed to join session context group: must specify group id.");const n=this.sessionContextGroupMap.get(e);if(n)n.registerNewClient(t);else{const n=new r.default(this.channel,e);n.registerNewClient(t),this.sessionContextGroupMap.set(e,n)}return{hasConflict:this.contextGroupsById.has(e)}}catch(e){throw new Error(e)}}getClientState(e){return this.interopClients.get(e.endpointId)}static toObject(e){const t=Object.fromEntries(e),n={};return Object.entries(t).forEach((([e,t])=>{const i=Object.fromEntries(t);n[e]=i})),n}static checkContextIntegrity(e){if(!e)return{isValid:!1,reason:"No context supplied"};if("object"!=typeof e)return{isValid:!1,reason:"Context must be an Object"};if(!e.type)return{isValid:!1,reason:"Context must have a type property"};if(e.id&&"object"!=typeof e.id)return{isValid:!1,reason:"Context id must be an Object populated with key-value identifiers (if set)"};if(e.id){const{id:t}=e,n=Object.keys(t);let i=!1;if(!n.length)return{isValid:!1,reason:"Context id must have at least one key-value identifier"};if(n.forEach((e=>{"string"==typeof e&&"string"==typeof t[e]||(i=!0)})),i)return{isValid:!1,reason:"Context id key-value identifiers must be of type string"}}return e.name&&"string"!=typeof e.name?{isValid:!1,reason:"Context name must be of string type (if set)"}:{isValid:!0}}static hasEndpointId(e){return void 0!==e.endpointId}static isContextTypeCompatible(e,t){return void 0===t||e===t}setContextGroupMap(){for(const e of this.getContextGroups())this.contextGroupsById.set(e.id,new Map)}static async setCurrentContextGroupInClientOptions(e,t){const n=await fin.System.getEntityInfo(e.uuid,e.name);let i;"view"===n.entityType?i=await fin.View.wrap(e):"window"===n.entityType&&(i=await fin.Window.wrap(e)),i?await i.updateOptions({interop:{currentContextGroup:t}}):console.warn(`Setting Current Context Group: Entity with identity ${e.uuid}, ${e.name} is not a window or view. It is a ${n.entityType} instead.`)}wireChannel(e){e.onConnection(((e,t)=>{if(!this.isConnectionAuthorized(e,t))throw new Error(`Connection not authorized for ${e.uuid}, ${e.name}`);if(!e.endpointId)throw new Error("Version too old to be compatible with Interop. Please upgrade your runtime to a more recent version.");const n={contextGroupId:void 0,contextHandlers:new Map,clientIdentity:e};(null==t?void 0:t.currentContextGroup)&&this.contextGroupsById.has(t.currentContextGroup)&&(n.contextGroupId=null==t?void 0:t.currentContextGroup),this.interopClients.set(e.endpointId,n)})),e.onDisconnection((e=>{this.interopClients.delete(e.endpointId);const t=this.intentClientMap.get(e.name);t&&e.uuid===fin.me.identity.uuid&&t.forEach((e=>{e.isReady=!1})),this.sessionContextGroupMap.forEach((t=>{t.onDisconnection(e)}))})),e.beforeAction(((e,t,n)=>{if(!this.isActionAuthorized(e,t,n))throw new Error(`Action (${e}) not authorized for ${n.uuid}, ${n.name}`);console.log(e,t,n)})),e.afterAction(console.log),e.register("setContext",this.setContext.bind(this)),e.register("fireIntent",this.handleFiredIntent.bind(this)),e.register("getCurrentContext",this.getCurrentContext.bind(this)),e.register("getInfoForIntent",this.handleInfoForIntent.bind(this)),e.register("getInfoForIntentsByContext",this.handleInfoForIntentsByContext.bind(this)),e.register("fireIntentForContext",this.handleFiredIntentForContext.bind(this)),e.register("getContextGroups",this.getContextGroups.bind(this)),e.register("joinContextGroup",this.joinContextGroup.bind(this)),e.register("removeFromContextGroup",this.removeFromContextGroup.bind(this)),e.register("getAllClientsInContextGroup",this.getAllClientsInContextGroup.bind(this)),e.register("getInfoForContextGroup",this.getInfoForContextGroup.bind(this)),e.register("contextHandlerRegistered",this.contextHandlerRegistered.bind(this)),e.register("intentHandlerRegistered",this.intentHandlerRegistered.bind(this)),e.register("removeContextHandler",this.removeContextHandler.bind(this)),e.register("sessionContextGroup:createIfNeeded",this.handleJoinSessionContextGroup.bind(this))}async isConnectionAuthorized(e,t){return this.wire.sendAction("interop-broker-is-connection-authorized").catch((e=>{})),!0}async isActionAuthorized(e,t,n){return this.wire.sendAction("interop-broker-is-action-authorized").catch((e=>{})),!0}}t.InteropBroker=a},7138:function(e,t,n){var i,r,o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},s=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.InteropClient=void 0;const a=n(9659),c=n(822),d=n(1787);class h extends a.Base{constructor(e,t,n){super(e),i.set(this,void 0),r.set(this,void 0),o(this,r,new Map),o(this,i,this.wire.environment.whenReady().then((()=>this.fin.InterApplicationBus.Channel.connect(`interop-broker-${t}`,{payload:n}))))}async setContext(e){return this.wire.sendAction("interop-client-set-context").catch((e=>{})),(await s(this,i)).dispatch("setContext",{context:e})}async addContextHandler(e,t){this.wire.sendAction("interop-client-add-context-handler").catch((e=>{}));const n=await s(this,i);let r;t?(r=`invokeContextHandler-${t}-${d.generateId()}`,console.warn(`Warning: By providing a contextType (${t}), you are using the experimental addContextHandler. To avoid issues, make sure you are adding your context handlers at the top level in your application.`)):r="invokeContextHandler";const o=d.wrapContextHandler(e,r);return n.register(r,o),await n.dispatch("contextHandlerRegistered",{handlerId:r,contextType:t}),{unsubscribe:async()=>{n.remove(r),await n.dispatch("removeContextHandler",{handlerId:r})}}}async getContextGroups(){return this.wire.sendAction("interop-client-get-context-groups").catch((e=>{})),(await s(this,i)).dispatch("getContextGroups")}async joinContextGroup(e,t){this.wire.sendAction("interop-client-join-context-group").catch((e=>{}));const n=await s(this,i);if(!e)throw new Error("No contextGroupId specified for joinContextGroup.");return n.dispatch("joinContextGroup",{contextGroupId:e,target:t})}async removeFromContextGroup(e){return this.wire.sendAction("interop-client-remove-from-context-group").catch((e=>{})),(await s(this,i)).dispatch("removeFromContextGroup",{target:e})}async getAllClientsInContextGroup(e){this.wire.sendAction("interop-client-get-all-clients-in-context-group").catch((e=>{}));const t=await s(this,i);if(!e)throw new Error("No contextGroupId specified for getAllClientsInContextGroup.");return t.dispatch("getAllClientsInContextGroup",{contextGroupId:e})}async getInfoForContextGroup(e){this.wire.sendAction("interop-client-get-info-for-context-group").catch((e=>{}));const t=await s(this,i);if(!e)throw new Error("No contextGroupId specified for getInfoForContextGroup.");return t.dispatch("getInfoForContextGroup",{contextGroupId:e})}async fireIntent(e){return this.wire.sendAction("interop-client-fire-intent").catch((e=>{})),(await s(this,i)).dispatch("fireIntent",e)}async registerIntentHandler(e,t){this.wire.sendAction("interop-client-register-intent-handler").catch((e=>{}));const n=await s(this,i),r=`intent-handler-${t}`,o=this.wrapIntentHandler(e,r);try{await n.register(r,o),await n.dispatch("intentHandlerRegistered",{handlerId:r})}catch(e){throw new Error("Unable to register intent handler")}return{unsubscribe:async()=>{n.remove(r)}}}async getCurrentContext(e){return this.wire.sendAction("interop-client-get-current-context").catch((e=>{})),(await s(this,i)).dispatch("getCurrentContext",{contextType:e})}async getInfoForIntent(e){return this.wire.sendAction("interop-client-get-info-for-intent").catch((e=>{})),(await s(this,i)).dispatch("getInfoForIntent",e)}async getInfoForIntentsByContext(e){return this.wire.sendAction("interop-client-get-info-for-intents-by-context").catch((e=>{})),(await s(this,i)).dispatch("getInfoForIntentsByContext",e)}async fireIntentForContext(e){return this.wire.sendAction("interop-client-fire-intent-for-context").catch((e=>{})),(await s(this,i)).dispatch("fireIntentForContext",e)}async joinSessionContextGroup(e){try{const t=s(this,r).get(e);if(t)return t.getUserInstance();const n=await s(this,i),{hasConflict:o}=await n.dispatch("sessionContextGroup:createIfNeeded",{sessionContextGroupId:e});o&&console.warn(`A (non-session) context group with the name "${e}" already exists. If you are trying to join a Context Group, call joinContextGroup instead.`);const a=new c.default(this.wire,s(this,i),e);return s(this,r).set(e,a),a.getUserInstance()}catch(t){throw console.error(`Error thrown trying to create Session Context Group with id "${e}": ${t}`),t}}wrapIntentHandler(e,t){return async n=>{try{await e(n)}catch(e){throw console.error(`Error thrown by handler ${t}: ${e}`),e}}}}t.InteropClient=h,i=new WeakMap,r=new WeakMap},7115:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(8706);t.default=class{constructor(e,t){this.provider=e,this.id=t,this.lastContext=void 0,this.contextGroupMap=new Map,this.clients=new Map,this.registerListeners()}registerListeners(){this.provider.register(`sessionContextGroup:getContext-${this.id}`,this.getCurrentContext.bind(this)),this.provider.register(`sessionContextGroup:setContext-${this.id}`,this.setContext.bind(this)),this.provider.register(`sessionContextGroup:handlerAdded-${this.id}`,this.handlerAdded.bind(this)),this.provider.register(`sessionContextGroup:handlerRemoved-${this.id}`,this.handlerRemoved.bind(this))}getCurrentContext(e){return e.type?this.contextGroupMap.get(e.type):this.lastContext}setContext(e,t){const{context:n}=e,r=i.InteropBroker.checkContextIntegrity(n);if(!1===r.isValid)throw new Error(`Failed to set Context - bad Context. Reason: ${r.reason}. Context: ${JSON.stringify(n)}`);if(!this.getClientState(t))throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Session Client State Map`);this.contextGroupMap.set(n.type,n),this.lastContext=n,Array.from(this.clients.values()).forEach((e=>{var t;null===(t=e.contextHandlers.get(n.type))||void 0===t||t.forEach((t=>{this.provider.dispatch(e.clientIdentity,t,n)})),e.globalHandler&&this.provider.dispatch(e.clientIdentity,e.globalHandler,n)}))}getClientState(e){return this.clients.get(e.endpointId)}handlerAdded(e,t){const{handlerId:n,contextType:i}=e,r=this.getClientState(t);if(!r)throw new Error(`Client with Identity: ${t.uuid} ${t.name} not in Client State Map`);if(i){const e=r.contextHandlers.get(i)||[];r.contextHandlers.set(i,[...e,n]);const o=this.contextGroupMap.get(i);o&&this.provider.dispatch(t,n,o)}else r.globalHandler=n,[...this.contextGroupMap.keys()].forEach((e=>{const i=this.contextGroupMap.get(e);i&&this.provider.dispatch(t,n,i)}))}handlerRemoved(e,t){const{handlerId:n}=e,i=this.clients.get(t.endpointId);i?(Array.from(i.contextHandlers).forEach((([,e])=>{const t=e.indexOf(n);t>-1&&e.splice(t,1)})),i.globalHandler===n&&(i.globalHandler=void 0)):console.warn(`Trying to remove a handler from a client that isn't mapped. handlerId: ${n}. clientIdentity: ${t}`)}registerNewClient(e){if(!this.clients.has(e.endpointId)){const t={contextHandlers:new Map,clientIdentity:e,globalHandler:void 0};this.clients.set(e.endpointId,t)}}onDisconnection(e){this.clients.delete(e.endpointId)}}},822:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const s=n(9659),a=n(1787);class c extends s.Base{constructor(e,t,n){super(e),i.set(this,void 0),this.id=n,r(this,i,t)}async setContext(e){return this.wire.sendAction("interop-session-context-group-set-context").catch((e=>{})),(await o(this,i)).dispatch(`sessionContextGroup:setContext-${this.id}`,{sessionContextGroupId:this.id,context:e})}async getCurrentContext(e){return this.wire.sendAction("interop-session-context-group-get-context").catch((e=>{})),(await o(this,i)).dispatch(`sessionContextGroup:getContext-${this.id}`,{sessionContextGroupId:this.id,type:e})}async addContextHandler(e,t){this.wire.sendAction("interop-session-context-group-add-handler").catch((e=>{}));const n=await o(this,i);let r;return r=t?`sessionContextHandler:invoke-${this.id}-${t}-${a.generateId()}`:`sessionContextHandler:invoke-${this.id}`,n.register(r,a.wrapContextHandler(e,r)),n.dispatch(`sessionContextGroup:handlerAdded-${this.id}`,{handlerId:r,contextType:t}),{unsubscribe:await this.createUnsubscribeCb(r)}}async createUnsubscribeCb(e){const t=await o(this,i);return async()=>{t.remove(e),await t.dispatch(`sessionContextGroup:handlerRemoved-${this.id}`,{handlerId:e})}}getUserInstance(){return{id:this.id,setContext:a.wrapInTryCatch(this.setContext.bind(this),"Failed to set context: "),getCurrentContext:a.wrapInTryCatch(this.getCurrentContext.bind(this),"Failed to get context: "),addContextHandler:a.wrapInTryCatch(this.addContextHandler.bind(this),"Failed to add context handler: ")}}}t.default=c,i=new WeakMap},8706:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2977);t.default=o.default,r(n(7138),t),r(n(2057),t)},1787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BROKER_ERRORS=t.generateOverrideWarning=t.generateOverrideError=t.wrapContextHandler=t.wrapInTryCatch=t.generateId=void 0,t.generateId=()=>`${Math.random()}${Date.now()}`,t.wrapInTryCatch=(e,t)=>(...n)=>{try{return e(...n)}catch(e){throw new Error((t||"")+e)}},t.wrapContextHandler=(e,t)=>async n=>{try{await e(n)}catch(e){throw console.error(`Error thrown by handler ${t} for context type ${n.type}: ${e}`),e}},t.generateOverrideError=(e,t)=>`You have tried to to use ${e} but ${t} has not been overridden in the Interop Broker. Please override this function. Refer to our documentation for more info.`,t.generateOverrideWarning=(e,t,n,i)=>{const{uuid:r,name:o}=i;return`Entity with identity: ${r}/${o} has called ${e} or ${t} but ${n} has not been overridden.`},t.BROKER_ERRORS={fireIntent:t.generateOverrideError("fireIntent","handleFiredIntent"),fireIntentForContext:t.generateOverrideError("fireIntentForContext","handleFiredIntentForContext"),getInfoForIntent:t.generateOverrideError("getInfoForIntent","handleInfoForIntent"),getInfoForIntentsByContext:t.generateOverrideError("getInfoForIntentsByContext","handleInfoForIntentsByContext")}},9641:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getMe=t.getBaseMe=void 0;const i=n(4169),r=n(6720),o=n(4997);function s(e,t,n){return{isView:"view"===e,isWindow:"window"===e,isFrame:"iframe"===e,isExternal:"external connection"===e,uuid:t,name:n,entityType:e}}t.getBaseMe=s,t.getMe=function(e){const{uuid:t,name:n,entityType:a}=e.me,c={setContext(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},addContextHandler(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getContextGroups(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},joinContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},removeFromContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getAllClientsInContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")},getInfoForContextGroup(){throw new Error("Interop API has not been instantiated. Either connection has failed or you have not declared interop in your config.")}};switch(a){case"view":return Object.assign(new i.View(e,{uuid:t,name:n}),s(a,t,n),{interop:c});case"window":return Object.assign(new o._Window(e,{uuid:t,name:n}),s(a,t,n),{interop:c});case"iframe":return Object.assign(new r._Frame(e,{uuid:t,name:n}),s(a,t,n),{interop:c});default:return{...s(a,t,n)}}}},7283:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(6394),o=n(9872);class s extends i.Base{constructor(e,t){super(e),this._channel=t,this._initializer=(...e)=>this.wire.environment.getProviderInitializer().then((t=>t(this.wire.environment)(...e))),this.Layout=new r.LayoutModule(this.wire)}async init(e){const t=null==e?void 0:e.overrideCallback,n=await this.fin.Interop.init(this.fin.me.uuid,null==e?void 0:e.interopOverride);return window.interopBroker=n,this._initializer(t,n)}async wrap(e){return this.wire.sendAction("platform-wrap").catch((e=>{})),new o.Platform({uuid:e.uuid},this._channel)}wrapSync(e){return this.wire.sendAction("platform-wrap-sync").catch((e=>{})),new o.Platform({uuid:e.uuid},this._channel)}async getCurrent(){return this.wire.sendAction("platform-get-current").catch((e=>{})),this.wrap({uuid:this.wire.me.uuid})}getCurrentSync(){return this.wire.sendAction("platform-get-current-sync").catch((e=>{})),this.wrapSync({uuid:this.wire.me.uuid})}start(e){return this.wire.sendAction("platform-start").catch((e=>{})),new Promise((async(t,n)=>{try{const{uuid:n}=e,i=await this.fin.Application._create({...e,isPlatformController:!0});i.once("platform-api-ready",(()=>t(this.wrapSync({uuid:n})))),i._run({uuid:n})}catch(e){n(e)}}))}startFromManifest(e,t){return this.wire.sendAction("platform-start-from-manifest").catch((e=>{})),new Promise((async(n,i)=>{try{const i=await this.fin.Application._createFromManifest(e);i.once("platform-api-ready",(()=>n(this.wrapSync({uuid:i.identity.uuid})))),i._run(t)}catch(e){i(e)}}))}}t.default=s},9872:function(e,t,n){var i,r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.Platform=void 0;const o=n(9659),s=n(4999),a=new Map;class c extends o.EmitterBase{constructor(e,t){super(t.wire,"application",e.uuid),this.getClient=e=>{this.wire.sendAction("platform-get-client",this.identity).catch((e=>{}));const t=e||this.identity,{uuid:n}=t;if(!a.has(n)){const e=r(this,i).call(this,n);a.set(n,e)}return a.get(n)},i.set(this,(async e=>{try{const t=`custom-frame-${e}`,n=await this._channel.connect(t,{wait:!1});return n.onDisconnection((()=>{a.delete(e)})),n}catch(t){throw a.delete(e),new Error("The targeted Platform is not currently running. Listen for application-started event for the given Uuid.")}})),this.launchLegacyManifest=this.launchContentManifest;const n=s.validateIdentity(e);if(n)throw new Error(n);this._channel=t,this.identity={uuid:e.uuid},this.Layout=this.fin.Platform.Layout,this.Application=this.fin.Application.wrapSync(this.identity)}async createView(e,t,n){this.wire.sendAction("platform-create-view",this.identity).catch((e=>{}));const i=await this.getClient(),r=await i.dispatch("create-view",{target:t,opts:e,targetView:n});if(!r||s.validateIdentity(r.identity))throw new Error(`When overwriting the createView call, please return an object that has a valid 'identity' property: ${JSON.stringify(r)}`);return this.fin.View.wrapSync(r.identity)}async createWindow(e){this.wire.sendAction("platform-create-window",this.identity).catch((e=>{}));const t=await this.getClient();e.reason||(e.reason="api-call");const n=await t.dispatch("create-view-container",e);if(!n||s.validateIdentity(n.identity))throw new Error(`When overwriting the createWindow call, please return an object that has a valid 'identity' property: ${JSON.stringify(n)}`);const{identity:i}=n,r=this.fin.Window.wrapSync(i);return r.name=i.name,r.uuid=i.uuid,r}async quit(){return this.wire.sendAction("platform-quit",this.identity).catch((e=>{})),(await this.getClient()).dispatch("quit")}async closeView(e){this.wire.sendAction("platform-close-view",this.identity).catch((e=>{}));const t=await this.getClient();await t.dispatch("close-view",{view:e})}async reparentView(e,t){var n;console.warn("Platform.reparentView has been deprecated, please use Platform.createView"),this.wire.sendAction("platform-reparent-view",this.identity).catch((e=>{}));const i={...e,uuid:null!==(n=e.uuid)&&void 0!==n?n:this.identity.uuid},r=await this.fin.View.wrap(i),o=await r.getOptions();return this.createView(o,t)}async getSnapshot(){return this.wire.sendAction("platform-get-snapshot",this.identity).catch((e=>{})),(await this.getClient()).dispatch("get-snapshot")}async applySnapshot(e,t){this.wire.sendAction("platform-apply-snapshot",this.identity).catch((e=>{}));const n="Requested snapshot must be a valid Snapshot object, or a url or filepath to such an object.";let i;if("string"==typeof e)try{i=(await this._channel.wire.sendAction("get-application-manifest",{manifestUrl:e})).payload.data}catch(e){throw new Error(`${n}: ${e}`)}else i=e;if(!i.windows)throw new Error(n);const r=await this.getClient();return await r.dispatch("apply-snapshot",{snapshot:i,options:t}),this}async fetchManifest(e){return(await this.getClient()).dispatch("platform-fetch-manifest",{manifestUrl:e})}async launchContentManifest(e){this.wire.sendAction("platform-launch-content-manifest",this.identity).catch((e=>{}));const t=await this.getClient(),n=await this.fetchManifest(e);return t.dispatch("launch-into-platform",{manifest:n}),this}async setWindowContext(e={},t){if(this.wire.sendAction("platform-set-window-context",this.identity).catch((e=>{})),!e)throw new Error("Please provide a serializable object or string to set the context.");const n=await this.getClient(),{entityType:i}=t?await this.fin.System.getEntityInfo(t.uuid,t.name):this.fin.me;await n.dispatch("set-window-context",{context:e,entityType:i,target:t||{uuid:this.fin.me.uuid,name:this.fin.me.name}})}async getWindowContext(e){this.wire.sendAction("platform-get-window-context",this.identity).catch((e=>{}));const t=await this.getClient(),{entityType:n}=e?await this.fin.System.getEntityInfo(e.uuid,e.name):this.fin.me;return t.dispatch("get-window-context",{target:e||{uuid:this.fin.me.uuid,name:this.fin.me.name},entityType:n})}}t.Platform=c,i=new WeakMap},4386:(e,t)=>{function n(e){switch(e){case"columns":case"grid":case"rows":case"tabs":return!0;default:return!1}}Object.defineProperty(t,"__esModule",{value:!0}),t.isValidPresetType=void 0,t.isValidPresetType=n,t.default={isValidPresetType:n}},609:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(7283);t.default=o.default,r(n(9872),t)},4210:function(e,t,n){var i,r=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)},o=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n};Object.defineProperty(t,"__esModule",{value:!0}),t.LayoutModule=void 0;const s=n(8111),a=n(9659);class c extends a.Base{constructor(){super(...arguments),i.set(this,void 0),this.init=async(e={})=>{if(this.wire.sendAction("layout-init").catch((e=>{})),!this.fin.me.isWindow)throw new Error("Layout.init can only be called from a Window context.");if(r(this,i))throw new Error("Layout for this window already initialized, please use Layout.replace call to replace the layout.");const t=await this.wire.environment.getManagerConstructor();o(this,i,new t);let{layout:n,containerId:s}=e;n&&console.warn("We recommend using a layout in window options.\n                This layout has not been sanitized and unexpected behavior can occur."),n=n||(await this.fin.Window.getCurrentSync().getOptions()).layout,s=s||"layout-container";const a=document.getElementById(s);return await r(this,i).initManager(),await r(this,i).createLayout(n,a),Object.assign(this.getCurrentSync(),{layoutManager:r(this,i)})}}async wrap(e){return this.wire.sendAction("layout-wrap").catch((e=>{})),new s.Layout(e,this.wire)}wrapSync(e){return this.wire.sendAction("layout-wrap-sync").catch((e=>{})),new s.Layout(e,this.wire)}async getCurrent(){if(this.wire.sendAction("layout-get-current").catch((e=>{})),!this.fin.me.isWindow)throw new Error("You are not in a Window context.  Only Windows can have a Layout.");const{uuid:e,name:t}=this.fin.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("layout-get-current-sync").catch((e=>{})),!this.fin.me.isWindow)throw new Error("You are not in a Window context.  Only Windows can have a Layout.");const{uuid:e,name:t}=this.fin.me;return this.wrapSync({uuid:e,name:t})}}t.LayoutModule=c,i=new WeakMap},8111:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Layout=void 0;const i=n(4999),r=n(4386),o=n(9659);class s extends o.Base{constructor(e,t){super(t),this.replace=async e=>{this.wire.sendAction("layout-replace").catch((e=>{}));const t=await this.platform.getClient();await t.dispatch("replace-layout",{target:this.identity,opts:{layout:e}})},this.replaceView=async(e,t)=>{this.wire.sendAction("layout-replace-view").catch((e=>{}));const n=await this.platform.getClient();await n.dispatch("replace-view",{target:this.identity,opts:{viewToReplace:e,newView:t}})},this.applyPreset=async e=>{this.wire.sendAction("layout-apply-preset").catch((e=>{}));const t=await this.platform.getClient(),{presetType:n}=e;if(!n||!r.isValidPresetType(n))throw new Error("Cannot apply preset layout, please include an applicable presetType property in the PresetLayoutOptions.");await t.dispatch("apply-preset-layout",{target:this.identity,opts:{presetType:n}})};const n=i.validateIdentity(e);if(n)throw new Error(n);this.identity=e,this.platform=this.fin.Platform.wrapSync({uuid:e.uuid}),e.uuid===this.fin.me.uuid&&e.name===this.fin.me.name&&(this.init=this.fin.Platform.Layout.init)}async getConfig(){return this.wire.sendAction("layout-get-config").catch((e=>{})),(await this.platform.getClient()).dispatch("get-frame-snapshot",{target:this.identity})}}t.Layout=s},6394:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),r(n(4210),t),r(n(8111),t)},1746:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(2878),o=n(6215);class s extends i.Base{async init(e){if(this.wire.sendAction("snapshot-source-init").catch((e=>{})),"object"!=typeof e||"function"!=typeof e.getSnapshot||"function"!=typeof e.applySnapshot)throw new Error("you must pass in a valid SnapshotProvider");const t=await this.fin.InterApplicationBus.Channel.create(o.getSnapshotSourceChannelName(fin.me.identity));t.register("get-snapshot",(async()=>({snapshot:await e.getSnapshot()}))),t.register("apply-snapshot",(({snapshot:t})=>e.applySnapshot(t)))}wrapSync(e){return this.wire.sendAction("snapshot-source-wrap-sync").catch((e=>{})),new r.SnapshotSource(this.wire,e)}async wrap(e){return this.wire.sendAction("snapshot-source-wrap").catch((e=>{})),this.wrapSync(e)}}t.default=s},2878:function(e,t,n){var i,r,o,s,a,c=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},d=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0}),t.SnapshotSource=void 0;const h=n(9659),l=n(6215),u=new Map;class p extends h.Base{constructor(e,t){super(e),i.set(this,void 0),r.set(this,(()=>(u.has(this.identity.uuid)||u.set(this.identity.uuid,{eventFired:null,clientPromise:null}),u.get(this.identity.uuid)))),o.set(this,(()=>(d(this,r).call(this).clientPromise||(d(this,r).call(this).clientPromise=d(this,s).call(this)),d(this,r).call(this).clientPromise))),s.set(this,(async()=>{const e=l.getSnapshotSourceChannelName(this.identity);try{d(this,r).call(this).eventFired||await d(this,a).call(this);const t=await this.fin.InterApplicationBus.Channel.connect(e,{wait:!1});return t.onDisconnection((()=>{d(this,r).call(this).clientPromise=null,d(this,r).call(this).eventFired=null})),t}catch(e){throw d(this,r).call(this).clientPromise=null,new Error("The targeted SnapshotSource is not currently initialized. Await this object's ready() method.")}})),a.set(this,(async()=>{const e=l.getSnapshotSourceChannelName(this.identity);let t,n;const i=new Promise(((e,i)=>{t=e,n=i}));d(this,r).call(this).eventFired=i;const o=async i=>{try{i.channelName===e&&(t(),await this.fin.InterApplicationBus.Channel.removeListener("connected",o))}catch(e){n(e)}};await this.fin.InterApplicationBus.Channel.on("connected",o)})),c(this,i,t)}get identity(){return d(this,i)}async ready(){this.wire.sendAction("snapshot-source-ready").catch((e=>{}));try{await d(this,o).call(this)}catch(e){await d(this,r).call(this).eventFired}}async getSnapshot(){this.wire.sendAction("snapshot-source-get-snapshot").catch((e=>{}));const e=await d(this,o).call(this),t=await e.dispatch("get-snapshot");return(await t).snapshot}async applySnapshot(e){return this.wire.sendAction("snapshot-source-apply-snapshot").catch((e=>{})),(await d(this,o).call(this)).dispatch("apply-snapshot",{snapshot:e})}}t.SnapshotSource=p,i=new WeakMap,r=new WeakMap,o=new WeakMap,s=new WeakMap,a=new WeakMap},7153:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1746);t.default=o.default,r(n(2878),t)},6215:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getSnapshotSourceChannelName=void 0,t.getSnapshotSourceChannelName=e=>`snapshot-source-provider-${e.uuid}`},3641:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(5007),o=n(4997);class s extends i.EmitterBase{constructor(e){super(e,"system")}sendExternalProcessRequest(e,t){return new Promise(((n,i)=>{const r="external-process-exited";let s,a,c,d;"function"==typeof t.listener&&(c=e=>{const n=e||{};a={topic:"exited",uuid:n.processUuid||"",exitCode:n.exitCode||0},s===e.processUuid&&(t.listener(a),d.removeListener(r,c))},this.wire.me.name||(this.wire.me.name=this.wire.me.uuid),d=new o._Window(this.wire,this.wire.me),d.on(r,c)),this.wire.sendAction(e,t).then((({payload:e})=>{s=e.data.uuid,n(e.data),a&&s===a.uuid&&(t.listener(a),d.removeListener(r,c))})).catch((e=>{d&&d.removeListener(r,c),i(e)}))}))}getVersion(){return this.wire.sendAction("get-version").then((({payload:e})=>e.data))}clearCache(e){return this.wire.sendAction("clear-cache",e).then((()=>{}))}deleteCacheOnExit(){return this.wire.sendAction("delete-cache-request").then((()=>{}))}exit(){return this.wire.sendAction("exit-desktop").then((()=>{}))}async fetchManifest(e){const{payload:{data:t}}=await this.wire.sendAction("fetch-manifest",{manifestUrl:e});return t}flushCookieStore(){return this.wire.sendAction("flush-cookie-store").then((()=>{}))}getAllWindows(){return this.wire.sendAction("get-all-windows").then((({payload:e})=>e.data))}getAllApplications(){return this.wire.sendAction("get-all-applications").then((({payload:e})=>e.data))}getCommandLineArguments(){return this.wire.sendAction("get-command-line-arguments").then((({payload:e})=>e.data))}async getCrashReporterState(){const{payload:{data:{diagnosticMode:e,isRunning:t}}}=await this.wire.sendAction("get-crash-reporter-state");return console.warn("diagnosticMode property is deprecated. It will be removed in a future version"),{diagnosticMode:e,diagnosticsMode:e,isRunning:t}}async startCrashReporter(e){const t=e,n={...t,diagnosticMode:t.diagnosticsMode||t.diagnosticMode},{payload:{data:{diagnosticMode:i,isRunning:r}}}=await this.wire.sendAction("start-crash-reporter",n);return{diagnosticMode:i,diagnosticsMode:i,isRunning:r}}getUniqueUserId(){return this.wire.sendAction("get-unique-user-id").then((({payload:e})=>e.data))}getEntityInfo(e,t){return this.wire.sendAction("get-entity-info",{uuid:e,name:t}).then((({payload:e})=>e.data))}getEnvironmentVariable(e){return this.wire.sendAction("get-environment-variable",{environmentVariables:e}).then((({payload:e})=>e.data))}getFocusedWindow(){return this.wire.sendAction("get-focused-window").then((({payload:e})=>e.data))}async isAppCertified(e){const{payload:{data:{certifiedInfo:t}}}=await this.wire.sendAction("is-app-certified",{manifestUrl:e});return t}getInstalledRuntimes(){return this.wire.sendAction("get-installed-runtimes").then((({payload:e})=>e.data.runtimes))}async getInstalledApps(){const{payload:{data:{installedApps:e}}}=await this.wire.sendAction("get-installed-apps");return e}getLog(e){return this.wire.sendAction("view-log",e).then((({payload:e})=>e.data))}getMachineId(){return this.wire.sendAction("get-machine-id").then((({payload:e})=>e.data))}getMinLogLevel(){return this.wire.sendAction("get-min-log-level").then((({payload:e})=>e.data))}getLogList(){return this.wire.sendAction("list-logs").then((({payload:e})=>e.data))}getMonitorInfo(){return this.wire.sendAction("get-monitor-info").then((({payload:e})=>e.data))}getMousePosition(){return this.wire.sendAction("get-mouse-position").then((({payload:e})=>e.data))}getProcessList(){return console.warn("System.getProcessList has been deprecated. Please consider using our new process APIs: Window.getProcessInfo, View.getProcessInfo, Application.getProcessInfo, System.getAllProcessInfo"),this.wire.sendAction("process-snapshot").then((({payload:e})=>e.data))}async getAllProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("get-all-process-info",this.identity);return e}getProxySettings(){return this.wire.sendAction("get-proxy-settings").then((({payload:e})=>e.data))}getRuntimeInfo(){return this.wire.sendAction("get-runtime-info").then((({payload:e})=>e.data))}getRvmInfo(){return this.wire.sendAction("get-rvm-info").then((({payload:e})=>e.data))}getHostSpecs(){return this.wire.sendAction("get-host-specs").then((({payload:e})=>e.data))}launchExternalProcess(e){return this.sendExternalProcessRequest("launch-external-process",e)}monitorExternalProcess(e){return this.sendExternalProcessRequest("monitor-external-process",e)}log(e,t){return this.wire.sendAction("write-to-log",{level:e,message:t}).then((()=>{}))}openUrlWithBrowser(e){return this.wire.sendAction("open-url-with-browser",{url:e}).then((()=>{}))}releaseExternalProcess(e){return this.wire.sendAction("release-external-process",{uuid:e}).then((()=>{}))}showDeveloperTools(e){return this.wire.sendAction("show-developer-tools",e).then((()=>{}))}terminateExternalProcess(e){return this.wire.sendAction("terminate-external-process",e).then((()=>{}))}updateProxySettings(e){return this.wire.sendAction("update-proxy",e).then((()=>{}))}downloadAsset(e,t){return new Promise(((n,i)=>{if("NodeEnvironment"===this.wire.environment.constructor.name)return void i(new r.NotSupportedError("downloadAsset only supported in an OpenFin Render process"));const o=this.wire.environment.getNextMessageId().toString(),s=`asset-download-progress-${o}`,a=`asset-download-error-${o}`,c=`asset-download-complete-${o}`,d=e=>{const n={downloadedBytes:e.downloadedBytes,totalBytes:e.totalBytes};t(n)},h=()=>{this.removeListener(s,d)};this.on(s,d),this.once(a,((e,t)=>{const n=t||e;h(),i(new r.RuntimeError(n))})),this.once(c,(()=>{h(),n()}));const l=Object.assign(e,{downloadId:o});this.wire.sendAction("download-asset",l).catch((e=>{h(),i(e)}))}))}downloadRuntime(e,t){return new Promise(((n,i)=>{if("NodeEnvironment"===this.wire.environment.constructor.name)return void i(new r.NotSupportedError("downloadRuntime only supported in an OpenFin Render process"));const o=this.wire.environment.getNextMessageId().toString(),s=`runtime-download-progress-${o}`,a=`runtime-download-error-${o}`,c=`runtime-download-complete-${o}`,d=e=>{const n={downloadedBytes:e.downloadedBytes,totalBytes:e.totalBytes};t(n)},h=()=>{this.removeListener(s,d)};this.on(s,d),this.once(a,((e,t)=>{const n=t||e;h(),i(new r.RuntimeError(n))})),this.once(c,(()=>{h(),n()}));const l=Object.assign(e,{downloadId:o});this.wire.sendAction("download-runtime",l).catch((e=>{h(),i(e)}))}))}downloadPreloadScripts(e){return this.wire.sendAction("download-preload-scripts",{scripts:e}).then((({payload:e})=>e.data))}getAllExternalApplications(){return this.wire.sendAction("get-all-external-applications").then((({payload:e})=>e.data))}getAppAssetInfo(e){return this.wire.sendAction("get-app-asset-info",e).then((({payload:e})=>e.data))}getCookies(e){const t=this.wire.environment.getUrl(),n=Object.assign(e,{url:t});return this.wire.sendAction("get-cookies",n).then((({payload:e})=>e.data))}setMinLogLevel(e){return this.wire.sendAction("set-min-log-level",{level:e}).then((()=>{}))}resolveUuid(e){return this.wire.sendAction("resolve-uuid",{entityKey:e}).then((({payload:e})=>e.data))}executeOnRemote(e,t){return t.requestingIdentity=e,this.wire.ferryAction(t)}readRegistryValue(e,t,n){return this.wire.sendAction("read-registry-value",{rootKey:e,subkey:t,value:n}).then((({payload:e})=>e.data))}registerExternalConnection(e){return this.wire.sendAction("register-external-connection",{uuid:e}).then((({payload:e})=>e.data))}async getServiceConfiguration(e){if("string"!=typeof e.name)throw new Error("Must provide an object with a `name` property having a string value");const{name:t}=e;return this.wire.sendAction("get-service-configuration",{name:t}).then((({payload:e})=>e.data))}async getSystemAppConfig(e){if("string"!=typeof e)throw new Error("Must provide a string value for name of system app");return this.wire.sendAction("get-system-app-configuration",{name:e}).then((({payload:e})=>e.data))}runRvmHealthCheck(){return this.wire.sendAction("run-rvm-health-check").then((({payload:e})=>e.data))}async launchManifest(e,t){return(await this.wire.sendAction("launch-manifest",{manifestUrl:e,opts:t})).payload.data.manifest}async queryPermissionForCurrentContext(e){const t={uuid:this.wire.me.uuid,name:this.wire.me.name};return(await this.wire.sendAction("query-permission-for-current-context",{apiName:e,identity:t})).payload.data}async enableNativeWindowIntegrationProvider(e){const{payload:t}=await this.wire.sendAction("enable-native-window-integration-provider",{permissions:e});return t.data}async registerUsage({data:e,type:t}){await this.wire.sendAction("register-usage",{data:e,type:t})}}t.default=s},240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(4169);class s extends i.Base{async create(e){const{uuid:t}=this.wire.me;if(!e.name||"string"!=typeof e.name)throw new Error("Please provide a name property as a string in order to create a View.");return this.wire.environment.childViews?await this.wire.environment.createChildContent({entityType:"view",options:{...e,uuid:t}}):await this.wire.sendAction("create-view",{...e,uuid:t}),this.wrapSync({uuid:t,name:e.name})}async wrap(e){this.wire.sendAction("view-wrap");const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.View(this.wire,e)}wrapSync(e){this.wire.sendAction("view-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o.View(this.wire,e)}getCurrent(){if(this.wire.sendAction("view-get-current").catch((e=>{})),!this.wire.me.isView)throw new Error("You are not in a View context");const{uuid:e,name:t}=this.wire.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("view-get-current-sync").catch((e=>{})),!this.wire.me.isView)throw new Error("You are not in a View context");const{uuid:e,name:t}=this.wire.me;return this.wrapSync({uuid:e,name:t})}}t.default=s},3163:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0;const i=n(4636),r=n(4997);class o extends i.WebContents{constructor(e,t){super(e,t,"view"),this.identity=t,this.attach=async e=>{await this.wire.sendAction("attach-view",{target:e,...this.identity})},this.destroy=async()=>{await this.wire.sendAction("destroy-view",{...this.identity})},this.show=async()=>{await this.wire.sendAction("show-view",{...this.identity})},this.hide=async()=>{await this.wire.sendAction("hide-view",{...this.identity})},this.setBounds=async e=>{await this.wire.sendAction("set-view-bounds",{bounds:e,...this.identity})},this.getBounds=async()=>(await this.wire.sendAction("get-view-bounds",{...this.identity})).payload.data,this.getInfo=async()=>(await this.wire.sendAction("get-view-info",{...this.identity})).payload.data,this.getParentLayout=async()=>(this.wire.sendAction("view-get-parent-layout",{...this.identity}).catch((e=>{})),(await this.getCurrentWindow()).getLayout()),this.getOptions=async()=>this.wire.sendAction("get-view-options",{...this.identity}).then((({payload:e})=>e.data)),this.updateOptions=async e=>this.wire.sendAction("update-view-options",{options:e,...this.identity}).then((()=>{})),this.getCurrentWindow=async()=>{const{payload:{data:e}}=await this.wire.sendAction("get-view-window",{...this.identity});return new r._Window(this.wire,e)}}async focus({emitSynthFocused:e}={emitSynthFocused:!0}){const t=await this.getCurrentWindow();await t.focusedWebViewWasChanged(),await super.focus({emitSynthFocused:e})}}t.View=o},4169:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(240);t.default=o.default,r(n(3163),t)},4636:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WebContents=void 0;const i=n(9659);class r extends i.EmitterBase{constructor(e,t,n){super(e,n,t.uuid,t.name),this.entityType=n}capturePage(e){return this.wire.sendAction("capture-page",{options:e,...this.identity}).then((({payload:e})=>e.data))}executeJavaScript(e){return this.wire.sendAction("execute-javascript-in-window",{...this.identity,code:e}).then((({payload:e})=>e.data))}getZoomLevel(){return this.wire.sendAction("get-zoom-level",this.identity).then((({payload:e})=>e.data))}setZoomLevel(e){return this.wire.sendAction("set-zoom-level",{...this.identity,level:e}).then((()=>{}))}navigate(e){return this.wire.sendAction("navigate-window",{...this.identity,url:e}).then((()=>{}))}navigateBack(){return this.wire.sendAction("navigate-window-back",{...this.identity}).then((()=>{}))}async navigateForward(){await this.wire.sendAction("navigate-window-forward",{...this.identity})}stopNavigation(){return this.wire.sendAction("stop-window-navigation",{...this.identity}).then((()=>{}))}reload(e=!1){return this.wire.sendAction("reload-window",{ignoreCache:e,...this.identity}).then((()=>{}))}print(e){return this.wire.sendAction("print",{...this.identity,options:e}).then((()=>{}))}findInPage(e,t){return this.wire.sendAction("find-in-page",{...this.identity,searchTerm:e,options:t}).then((({payload:e})=>e.data))}stopFindInPage(e){return this.wire.sendAction("stop-find-in-page",{...this.identity,action:e}).then((()=>{}))}getPrinters(){return this.wire.sendAction("get-printers",{...this.identity}).then((({payload:e})=>e.data))}async focus({emitSynthFocused:e}={emitSynthFocused:!0}){await this.wire.sendAction("focus-window",{emitSynthFocused:e,...this.identity})}async showDeveloperTools(){await this.wire.sendAction("show-developer-tools",this.identity)}async getProcessInfo(){const{payload:{data:e}}=await this.wire.sendAction("get-process-info",this.identity);return e}async getSharedWorkers(){return this.wire.sendAction("get-shared-workers",this.identity).then((({payload:e})=>e.data))}async inspectSharedWorker(){await this.wire.sendAction("inspect-shared-worker",{...this.identity})}async inspectSharedWorkerById(e){await this.wire.sendAction("inspect-shared-worker-by-id",{...this.identity,workerId:e})}async inspectServiceWorker(){await this.wire.sendAction("inspect-service-worker",{...this.identity})}}t.WebContents=r},2163:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const i=n(9659),r=n(4999),o=n(5047);class s extends i.Base{async wrap(e){this.wire.sendAction("window-wrap").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Window(this.wire,e)}wrapSync(e){this.wire.sendAction("window-wrap-sync").catch((e=>{}));const t=r.validateIdentity(e);if(t)throw new Error(t);return new o._Window(this.wire,e)}create(e){return this.wire.sendAction("create-window").catch((e=>{})),new o._Window(this.wire,{uuid:this.me.uuid,name:e.name}).createWindow(e)}getCurrent(){if(this.wire.sendAction("get-current-window").catch((e=>{})),!this.wire.me.isWindow)throw new Error("You are not in a Window context");const{uuid:e,name:t}=this.wire.me;return this.wrap({uuid:e,name:t})}getCurrentSync(){if(this.wire.sendAction("get-current-window-sync").catch((e=>{})),!this.wire.me.isWindow)throw new Error("You are not in a Window context");const{uuid:e,name:t}=this.wire.me;return this.wrapSync({uuid:e,name:t})}}t.default=s},5047:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._Window=void 0;const i=n(7264),r=n(4636),o=n(4169);class s extends r.WebContents{constructor(e,t){super(e,t,"window"),this.identity=t}createWindow(e){return this.wire.sendAction("window-create-window",this.identity).catch((e=>{})),new Promise(((t,n)=>{const i="fire-constructor-callback",r=new Promise((e=>{this.on(i,(function t(n){let r;const{success:o}=n,s=n.data,{message:a}=s;r=o?{httpResponseCode:s.httpResponseCode,apiInjected:s.apiInjected}:{message:s.message,networkErrorCode:s.networkErrorCode,stack:s.stack},this.removeListener(i,t),e({message:a,cbPayload:r,success:o})}))}));void 0===e.waitForPageLoad&&(e.waitForPageLoad=!1),void 0===e.autoShow&&(e.autoShow=!0);const o=this.wire.environment.createChildContent({entityType:"window",options:e});Promise.all([r,o]).then((e=>{const i=e[0];i.success?t(this):n(i);try{this.getWebWindow().fin.__internal_.openerSuccessCBCalled()}catch(e){}})).catch(n)}))}getAllFrames(){return this.wire.sendAction("get-all-frames",this.identity).then((({payload:e})=>e.data))}getBounds(){return this.wire.sendAction("get-window-bounds",this.identity).then((({payload:e})=>e.data))}center(){return this.wire.sendAction("center-window",this.identity).then((()=>{}))}blur(){return this.wire.sendAction("blur-window",this.identity).then((()=>{}))}bringToFront(){return this.wire.sendAction("bring-window-to-front",this.identity).then((()=>{}))}animate(e,t){return this.wire.sendAction("animate-window",{transitions:e,options:t,...this.identity}).then((()=>{}))}hide(){return this.wire.sendAction("hide-window",this.identity).then((()=>{}))}close(e=!1){return this.wire.sendAction("close-window",{force:e,...this.identity}).then((()=>{Object.setPrototypeOf(this,null)}))}focusedWebViewWasChanged(){return this.wire.sendAction("focused-webview-changed",this.identity).then((()=>{}))}getNativeId(){return this.wire.sendAction("get-window-native-id",this.identity).then((({payload:e})=>e.data))}async getCurrentViews(){const{payload:e}=await this.wire.sendAction("window-get-views",this.identity);return e.data.map((e=>new o.View(this.wire,e)))}disableFrame(){return console.warn("Function is deprecated; use disableUserMovement instead."),this.wire.sendAction("disable-window-frame",this.identity).then((()=>{}))}disableUserMovement(){return this.wire.sendAction("disable-window-frame",this.identity).then((()=>{}))}enableFrame(){return console.warn("Function is deprecated; use enableUserMovement instead."),this.wire.sendAction("enable-window-frame",this.identity).then((()=>{}))}enableUserMovement(){return this.wire.sendAction("enable-window-frame",this.identity).then((()=>{}))}flash(){return this.wire.sendAction("flash-window",this.identity).then((()=>{}))}stopFlashing(){return this.wire.sendAction("stop-flash-window",this.identity).then((()=>{}))}getInfo(){return this.wire.sendAction("get-window-info",this.identity).then((({payload:e})=>e.data))}async getLayout(){if(this.wire.sendAction("window-get-layout",this.identity).catch((e=>{})),!(await this.getOptions()).layout)throw new Error("Window does not have a Layout");return this.fin.Platform.Layout.wrap(this.identity)}getOptions(){return this.wire.sendAction("get-window-options",this.identity).then((({payload:e})=>e.data))}getParentApplication(){return this.wire.sendAction("window-get-parent-application",this.identity).catch((e=>{})),Promise.resolve(new i.Application(this.wire,this.identity))}getParentWindow(){return this.wire.sendAction("window-get-parent-window",this.identity).catch((e=>{})),Promise.resolve(new i.Application(this.wire,this.identity)).then((e=>e.getWindow()))}async getSnapshot(e){const t={area:e,...this.identity};return console.warn("Window.getSnapshot has been deprecated, please use Window.capturePage"),(await this.wire.sendAction("get-window-snapshot",t)).payload.data}getState(){return this.wire.sendAction("get-window-state",this.identity).then((({payload:e})=>e.data))}getWebWindow(){return this.wire.sendAction("window-get-web-window",this.identity).catch((e=>{})),this.wire.environment.getWebWindow(this.identity)}isMainWindow(){return this.wire.sendAction("window-is-main-window",this.identity).catch((e=>{})),this.me.uuid===this.me.name}isShowing(){return this.wire.sendAction("is-window-showing",this.identity).then((({payload:e})=>e.data))}maximize(){return this.wire.sendAction("maximize-window",this.identity).then((()=>{}))}minimize(){return this.wire.sendAction("minimize-window",this.identity).then((()=>{}))}moveBy(e,t){return this.wire.sendAction("move-window-by",{deltaLeft:e,deltaTop:t,...this.identity}).then((()=>{}))}moveTo(e,t){return this.wire.sendAction("move-window",{left:e,top:t,...this.identity}).then((()=>{}))}resizeBy(e,t,n){return this.wire.sendAction("resize-window-by",{deltaWidth:Math.floor(e),deltaHeight:Math.floor(t),anchor:n,...this.identity}).then((()=>{}))}resizeTo(e,t,n){return this.wire.sendAction("resize-window",{width:Math.floor(e),height:Math.floor(t),anchor:n,...this.identity}).then((()=>{}))}restore(){return this.wire.sendAction("restore-window",this.identity).then((()=>{}))}setAsForeground(){return this.wire.sendAction("set-foreground-window",this.identity).then((()=>{}))}setBounds(e){return this.wire.sendAction("set-window-bounds",{...e,...this.identity}).then((()=>{}))}show(e=!1){return this.wire.sendAction("show-window",{force:e,...this.identity}).then((()=>{}))}showAt(e,t,n=!1){return this.wire.sendAction("show-at-window",{force:n,left:Math.floor(e),top:Math.floor(t),...this.identity}).then((()=>{}))}updateOptions(e){return this.wire.sendAction("update-window-options",{options:e,...this.identity}).then((()=>{}))}authenticate(e,t){return this.wire.sendAction("window-authenticate",{userName:e,password:t,...this.identity}).then((()=>{}))}async showPopupMenu(e){const{payload:t}=await this.wire.sendAction("show-popup-menu",{options:e,...this.identity});return t.data}async closePopupMenu(){return this.wire.sendAction("close-popup-menu",{...this.identity}).then((()=>{}))}}t._Window=s},4997:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),r=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(2163);t.default=o.default,r(n(5047),t)},1681:(e,t,n)=>{var i;t.H=void 0;const r=n(6465),o=n(6545),s=n(9298);class a extends r.EventEmitter{connect(e){throw new Error("You are not running in OpenFin.")}connectSync(){throw new Error("You are not running in OpenFin.")}send(e){throw new Error("You are not running in OpenFin.")}shutdown(){throw new Error("You are not running in OpenFin.")}constructor(){super()}}class c{constructor(){this.childViews=!0}getDefaultChannelOptions(){throw new Error("Method not implemented.")}getRtcPeer(){throw new Error("Method not implemented.")}getManagerConstructor(){throw new Error("Method not implemented.")}getProviderInitializer(){throw new Error("Method not implemented.")}writeToken(e,t){throw new Error("Method not implemented.")}retrievePort(e){throw new Error("Method not implemented.")}getNextMessageId(){throw new Error("Method not implemented.")}getRandomId(){throw new Error("Method not implemented.")}createChildContent(e){throw new Error("Method not implemented.")}getWebWindow(e){throw new Error("Method not implemented.")}getCurrentEntityIdentity(){throw new Error("Method not implemented.")}getCurrentEntityType(){return"unknown"}raiseEvent(e,t){throw new Error("Method not implemented.")}getUrl(){throw new Error("Method not implemented.")}whenReady(){throw new Error("Method not implemented.")}}t.H="undefined"!=typeof window&&(null===(i=window)||void 0===i?void 0:i.fin)||(()=>{const e=new c,t=new s.default(a,e,{uuid:"",name:""});return new o.default(t)})()},8068:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getFin=t.registerFin=void 0;const n=new WeakMap;t.registerFin=function(e,t){n.set(e,t)},t.getFin=function(e){const t=n.get(e);if(!t)throw new Error("Could not locate fin api for given transport");return t}},5007:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RuntimeError=t.NotSupportedError=t.NotImplementedError=t.NoAckError=t.DuplicateCorrelationError=t.UnexpectedActionError=t.DisconnectedError=void 0;class n extends Error{constructor(e){super(`Expected websocket state OPEN but found ${e}`),this.readyState=e}}t.DisconnectedError=n;class i extends Error{}t.UnexpectedActionError=i;class r extends Error{}t.DuplicateCorrelationError=r;class o extends Error{}t.NoAckError=o;class s extends Error{}t.NotImplementedError=s;class a extends Error{}t.NotSupportedError=a;class c extends Error{constructor(e){const t=e.payload||e,{reason:n,error:i}=t;super(n),this.name="RuntimeError",(null==i?void 0:i.stack)&&(this.stack=i.stack)}}t.RuntimeError=c},9298:function(e,t,n){var i,r=this&&this.__classPrivateFieldSet||function(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n},o=this&&this.__classPrivateFieldGet||function(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)};Object.defineProperty(t,"__esModule",{value:!0});const s=n(6465),a=n(8624),c=n(5007),d=n(2734),h=n(9641);class l extends s.EventEmitter{constructor(e,t,n){super(),this.wireListeners=new Map,this.topicRefMap=new Map,this.eventAggregator=new d.default,this.messageHandlers=[this.eventAggregator.dispatchEvent],i.set(this,void 0),this.connectSync=()=>{o(this,i).connectSync()},this.getPort=()=>{if("NodeEnvironment"!==this.environment.constructor.name)throw new c.NotImplementedError("Not Implemented");return o(this,i).wire.url.split(":").slice(-1)[0]},r(this,i,new e(this.onmessage.bind(this))),this.environment=t,this.sendRaw=o(this,i).send.bind(o(this,i)),this.registerMessageHandler(this.handleMessage.bind(this)),o(this,i).on("disconnected",(()=>{for(const[,{reject:e}]of this.wireListeners)e("Remote connection has closed");this.wireListeners.clear(),this.emit("disconnected")}));const{uuid:s,name:a}=n,l=this.environment.getCurrentEntityType();this.me=h.getBaseMe(l,s,a)}shutdown(){return o(this,i).shutdown()}async connect(e){if(a.isExistingConnectConfig(e))return this.connectByPort(e);if(a.isNewConnectConfig(e)){const t=await this.environment.retrievePort(e);return this.connectByPort({...e,address:`ws://localhost:${t}`})}}async connectByPort(e){const{address:t,uuid:n}=e,r={...e,type:"file-token"},s=o(this,i);await s.connect(t);const a=await this.sendAction("request-external-authorization",{uuid:n,type:"file-token"},!0);if("external-authorization-response"!==a.action)throw new c.UnexpectedActionError(a.action);const{token:d}=a.payload;await this.environment.writeToken(a.payload.file,a.payload.token);const h=await this.sendAction("request-authorization",r,!0);if("authorization-response"!==h.action)throw new c.UnexpectedActionError(h.action);if(!0!==h.payload.success)throw new c.RuntimeError(h.payload);return d}sendAction(e,t={},n=!1){return new Promise(((r,s)=>{const a=this.environment.getNextMessageId(),c={action:e,payload:t,messageId:a},d=o(this,i);return this.addWireListener(a,r,s,n),d.send(c).catch(s)}))}ferryAction(e){return new Promise(((t,n)=>{const r=this.environment.getNextMessageId();e.messageId=r;const s=e=>{t(e.payload)};return o(this,i).send(e).then((()=>this.addWireListener(r,s,n,!1))).catch(n)}))}registerMessageHandler(e){this.messageHandlers.push(e)}addWireListener(e,t,n,i){i?this.uncorrelatedListener=t:this.wireListeners.has(e)?n(new c.DuplicateCorrelationError(String(e))):this.wireListeners.set(e,{resolve:t,reject:n})}onmessage(e){for(const t of this.messageHandlers)t.call(null,e)}handleMessage(e){const t=e.correlationId||NaN;if("correlationId"in e){if(!this.wireListeners.has(t))return!1;{const{resolve:n,reject:i}=this.wireListeners.get(t);"ack"!==e.action?i(new c.NoAckError(e.action)):"payload"in e?e.payload.success?n.call(null,e):i(new c.RuntimeError(e.payload)):i(new c.RuntimeError(e)),this.wireListeners.delete(t)}}else this.uncorrelatedListener&&this.uncorrelatedListener.call(null,e),this.uncorrelatedListener=()=>{};return!0}}i=new WeakMap,t.default=l},8624:(e,t)=>{function n(e){return"string"==typeof e.manifestUrl}function i(e){return r(e)&&"string"==typeof e.address}function r(e){return"string"==typeof e.uuid}function o(e){return e.runtime&&"string"==typeof e.runtime.version}function s(e){return r(e)&&o(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.isInternalConnectConfig=t.isPortDiscoveryConfig=t.isNewConnectConfig=t.isExistingConnectConfig=t.isExternalConfig=void 0,t.isExternalConfig=n,t.isExistingConnectConfig=i,t.isNewConnectConfig=s,t.isPortDiscoveryConfig=function(e){return n(e)&&o(e)||s(e)},t.isInternalConnectConfig=function(e){return i(e)||s(e)}},2366:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.errorToPOJO=void 0,t.errorToPOJO=function(e){return{stack:e.stack,message:e.message,toString:e.toString}}},3917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustiveCheck=void 0,t.exhaustiveCheck=function(e,t){throw new Error(`Unsupported value: ${e}${t?`\n Supported values are: ${t.join("")}`:""}`)}},3442:(e,t)=>{async function n(e){const t=[];for(const n of e){const e=await n();t.push(e)}return t}Object.defineProperty(t,"__esModule",{value:!0}),t.promiseMapSerial=t.serial=t.promiseMap=t.promisify=void 0,t.promisify=function(e){return(...t)=>new Promise(((n,i)=>{e(...t,((e,t)=>e?i(e):n(t)))}))},t.promiseMap=async function(e,t){return Promise.all(e.map(t))},t.serial=n,t.promiseMapSerial=async function(e,t){return n(e.map(((e,n,i)=>()=>t(e,n,i))))}},3127:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.topicRefMap=new Map}incRefCount(e){const t=this.topicRefMap.get(e);let n;if(t){const i=t+1;n=i,this.topicRefMap.set(e,i)}else this.topicRefMap.set(e,1),n=1;return n}decRefCount(e){const t=this.topicRefMap.get(e);let n;if(t){const i=t-1;this.topicRefMap.set(e,i),n=i}else n=-1;return n}actOnFirst(e,t,n){return 1===this.incRefCount(e)?t():n()}actOnLast(e,t,n){return 0===this.decRefCount(e)?t():n()}}},2300:(e,t)=>{function n(e){return[...e.split(".").reverse().entries()].reduce(((e,[t,n])=>e+ +n*1e4**t),0)}function i(e,t){return n(e)>=n(t)}function r(e){return e.split("/")[0]}Object.defineProperty(t,"__esModule",{value:!0}),t.runtimeUuidMeetsMinimumRuntimeVersion=t.parseRuntimeUuid=t.meetsMinimumRuntimeVersion=void 0,t.meetsMinimumRuntimeVersion=i,t.parseRuntimeUuid=r,t.runtimeUuidMeetsMinimumRuntimeVersion=function(e,t){return i(r(e),t)}},4999:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validateIdentity=void 0,t.validateIdentity=function(e){let t;return"object"==typeof e&&"string"==typeof e.uuid||(t="Not a valid identity object"),t}},6465:e=>{var t,n="object"==typeof Reflect?Reflect:null,i=n&&"function"==typeof n.apply?n.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};t=n&&"function"==typeof n.ownKeys?n.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var r=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(n,i){function r(n){e.removeListener(t,o),i(n)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",r),n([].slice.call(arguments))}y(e,t,o,{once:!0}),"error"!==t&&function(e,t,n){"function"==typeof e.on&&y(e,"error",t,{once:!0})}(e,r)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function d(e,t,n,i){var r,o,s,d;if(a(n),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),o=e._events),s=o[t]),void 0===s)s=o[t]=n,++e._eventsCount;else if("function"==typeof s?s=o[t]=i?[n,s]:[s,n]:i?s.unshift(n):s.push(n),(r=c(e))>0&&s.length>r&&!s.warned){s.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=s.length,d=h,console&&console.warn&&console.warn(d)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function l(e,t,n){var i={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=h.bind(i);return r.listener=n,i.wrapFn=r,r}function u(e,t,n){var i=e._events;if(void 0===i)return[];var r=i[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):w(r,r.length)}function p(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function w(e,t){for(var n=new Array(t),i=0;i<t;++i)n[i]=e[i];return n}function y(e,t,n,i){if("function"==typeof e.on)i.once?e.once(t,n):e.on(t,n);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function r(o){i.once&&e.removeEventListener(t,r),n(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||r(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var r="error"===e,o=this._events;if(void 0!==o)r=r&&void 0===o.error;else if(!r)return!1;if(r){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)i(c,this,t);else{var d=c.length,h=w(c,d);for(n=0;n<d;++n)i(h[n],this,t)}return!0},o.prototype.addListener=function(e,t){return d(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return d(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,l(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,l(this,e,t)),this},o.prototype.removeListener=function(e,t){var n,i,r,o,s;if(a(t),void 0===(i=this._events))return this;if(void 0===(n=i[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete i[e],i.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,o=n.length-1;o>=0;o--)if(n[o]===t||n[o].listener===t){s=n[o].listener,r=o;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(i[e]=n[0]),void 0!==i.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,n,i;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,o=Object.keys(n);for(i=0;i<o.length;++i)"removeListener"!==(r=o[i])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(i=t.length-1;i>=0;i--)this.removeListener(e,t[i]);return this},o.prototype.listeners=function(e){return u(this,e,!0)},o.prototype.rawListeners=function(e){return u(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},o.prototype.listenerCount=p,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var i={};(()=>{n.d(i,{dq:()=>a,MS:()=>s,xQ:()=>c,sO:()=>fe,Zu:()=>ge,I3:()=>me,$U:()=>ve,i0:()=>Ce,cX:()=>d,_W:()=>h,U$:()=>w,U7:()=>y,rd:()=>pe});var e,t,r,o=n(1681);class s extends Error{constructor(e="An unexpected error has occurred",t){var n;super(e),t&&(this.innerError=t&&t),this.stack=null===(n=this.stack)||void 0===n?void 0:n.replace(/^(\w*Error)/,`${this.constructor.name}`)}}class a extends s{constructor(e="Failed to execute adapter function",t){super(e,t)}}class c extends s{constructor(e="Failed to raise event",t){super(e,t)}}class d extends s{constructor(e="Failed to initialize adapter",t){super(e,t)}}class h extends s{constructor(e="Invalid parameter value",t){super(e,t)}}!function(e){e.ActivateWorkbook="ActivateWorkbook",e.ActivateWorksheet="ActivateWorksheet",e.AddWorksheet="AddWorksheet",e.CalculateWorkbook="CalculateWorkbook",e.CalculateWorksheet="CalculateWorksheet",e.ClearAllCells="ClearAllCells",e.ClearAllCellValues="ClearAllCellValues",e.ClearAllCellFormatting="ClearAllCellFormatting",e.ClearCellValues="ClearCellValues",e.ClearCellFormatting="ClearCellFormatting",e.ClearCells="ClearCells",e.CloseWorkbook="CloseWorkbook",e.CreateWorkbook="CreateWorkbook",e.DeleteWorksheet="DeleteWorksheet",e.DeregisterEvent="DeregisterEvent",e.EventFired="EventFired",e.GetCalculationMode="GetCalculationMode",e.GetCells="GetCells",e.GetWorkbookById="GetWorkbookById",e.GetWorkbookName="GetWorkbookName",e.GetWorkbooks="GetWorkbooks",e.GetWorksheetById="GetWorksheetById",e.GetWorksheetByName="GetWorksheetByName",e.GetWorksheetName="GetWorksheetName",e.GetWorksheets="GetWorksheets",e.LogMessage="LogMessage",e.OpenWorkbook="OpenWorkbook",e.ProtectWorksheet="ProtectWorksheet",e.RegisterEvent="RegisterEvent",e.SaveWorkbook="SaveWorkbook",e.SaveWorkbookAs="SaveWorkbookAs",e.SetCellValues="SetCellValues",e.SetCellFormatting="SetCellFormatting",e.SetCellName="SetCellName",e.SetWorksheetName="SetWorksheetName",e.FilterCells="FilterCells",e.QuitApplication="QuitApplication"}(e||(e={})),function(e){e.Activate="Activate",e.AddWorksheet="AddWorksheet",e.Change="Change",e.Close="Close",e.Deactivate="Deactivate",e.DeleteWorksheet="DeleteWorksheet"}(t||(t={})),function(e){e.Workbook="Workbook",e.Worksheet="Worksheet"}(r||(r={}));const l="1.3.0";let u=!1;const p="[@openfin/excel]",w=()=>{u=!1},y=()=>{u=!0,g("v1.3.0")},f=(e,t)=>{u&&(e.innerError?console.error(t?`${p} ${t}`:p,e,"\n\n(inner)",e.innerError):console.error(t?`${p} ${t}`:p,e))},g=(...e)=>{u&&console.log(p,...e)},m=(...e)=>{u&&console.warn(p,...e)};o.H||Object.assign(window,{fin:{}}),Object.assign(o.H,{Integrations:{Excel:{enableLogging:y,disableLogging:w}}});const v=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})),C=new Map,I=(t,n)=>async()=>{g(`Worksheet: Activate (${n})`);try{await t.dispatch(e.ActivateWorksheet,n)}catch(e){throw new a}},x=(t,n)=>async()=>{g(`Worksheet: Calculate (${n})`);try{await t.dispatch(e.CalculateWorksheet,n)}catch(e){throw new a}},A=(t,n)=>async()=>{g(`Worksheet: Clear all cell values (${n})`);try{await t.dispatch(e.ClearAllCellValues,n)}catch(e){throw new a}},b=(t,n)=>async()=>{g(`Worksheet: Clear all cell formatting (${n})`);try{await t.dispatch(e.ClearAllCellFormatting,n)}catch(e){throw new a}},E=(t,n)=>async()=>{g(`Worksheet: Clear all cells (${n})`);try{await t.dispatch(e.ClearAllCells,n)}catch(e){throw new a}},P=(t,n)=>async i=>{g(`Worksheet: Clear cell values; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCellValues,r)}catch(e){throw new a}},k=(t,n)=>async i=>{g(`Worksheet: Clear cell formatting; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCellFormatting,r)}catch(e){throw new a}},M=(t,n)=>async i=>{g(`Worksheet: Clear cells; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};try{await t.dispatch(e.ClearCells,r)}catch(e){throw new a}},_=(e,t)=>(n,i,r=1e3)=>{if(Number.isNaN(r)||r<=0)throw new s("Update interval must be a positive number");const o=v();g(`Worksheet: Create data stream; streamId:${o}; cellRange:${n}; updateInterval:${r} (${t})`);const a={close:()=>{g(`Closed stream (${o})`),(e=>{var t;try{const n=C.get(e);if(!n)throw new s(`Unable to find registered data stream with id ${e}`);void 0!==(null!==(t=n.timer)&&void 0!==t?t:void 0)&&T(e),C.delete(e)}catch(e){throw f(e),e}})(o)},cellRange:n,id:o,start:()=>{g(`Started streaming (${o})`),B(o,i,e,t)},stop:()=>{g(`Stopped streaming (${o})`),T(o)},updateInterval:r,worksheetId:t};return C.set(o,{dataStream:a}),a},S=(e,t,n,i)=>{const o={eventTarget:r.Worksheet,objectId:t};return{objectId:t,activate:I(e,t),addEventListener:n(e,o),calculate:x(e,t),clearAllCellFormatting:b(e,t),clearAllCells:E(e,t),clearAllCellValues:A(e,t),clearCellFormatting:k(e,t),clearCells:M(e,t),clearCellValues:P(e,t),createDataStream:_(e,t),delete:O(e,t),filterCells:W(e,t),getCells:F(e,t),getName:L(e,t),protect:R(e,t),removeEventListener:i(e),setCellFormatting:$(e,t),setCellName:G(e,t),setCellValues:j(e,t),setName:N(e,t)}},O=(t,n)=>async()=>{g(`Worksheet: Delete (${n})`);try{await t.dispatch(e.DeleteWorksheet,n)}catch(e){throw new a}},W=(t,n)=>async(i,r,o,s,c,d=!0)=>{g(`Worksheet: Filter cells; cellRange:${i} (${n})`,{columnIndex:r,filterOperator:o,criteria1:s,criteria2:c,visibleDropDown:d});const h={cellRange:i,criteria1:s,criteria2:c,columnIndex:r,filterOperator:o,objectId:n,visibleDropDown:d};try{await t.dispatch(e.FilterCells,h)}catch(e){throw new a}},F=(t,n)=>async i=>{g(`Worksheet: Get cells; cellRange:${i} (${n})`);const r={cellRange:i,objectId:n};let o=[];try{o=await t.dispatch(e.GetCells,r),g(`${i}:`,o)}catch(e){throw new a}return o},L=(t,n)=>async()=>{g(`Worksheet: Get name (${n})`);try{return await t.dispatch(e.GetWorksheetName,n)}catch(e){throw new a}},R=(t,n)=>async()=>{g(`Worksheet: Protect (${n})`);try{await t.dispatch(e.ProtectWorksheet,n)}catch(e){throw new a}},$=(t,n)=>async(i,r)=>{g(`Worksheet: Set cell formatting; cellRange:${i} (${n})`,r);const o={cellRange:i,formatting:r,objectId:n};try{await t.dispatch(e.SetCellFormatting,o)}catch(e){throw new a}},G=(t,n)=>async(i,r)=>{const o=r.trim();let s;if(!o)throw s=new h("Cell range name cannot be an empty string"),f(s),s;if(o.length>255)throw s=new h("Cell range name must be 255 characters or less"),f(s),s;if(/[^a-z0-9_.?\\"']/.test(o))throw s=new h("Cell range name contains invalid characters"),f(s),s;if(/^\d|\d$/.test(o))throw s=new h("Cell range name must not start or end with a number"),f(s),s;g(`Worksheet: Set cell name; cellRange:${i}; newCellRangeName:${o} (${n})`);const c={cellRange:i,name:o,objectId:n};try{await t.dispatch(e.SetCellName,c)}catch(e){throw new a}},j=(t,n)=>async(i,r)=>{g(`Worksheet: Set cell values; cellRange:${i} (${n})`,r);const o={cellRange:i,objectId:n,valuesMap:r};try{await t.dispatch(e.SetCellValues,o)}catch(e){throw new a}},N=(t,n)=>async i=>{const r=i.trim();let o;if(!r)throw o=new h("Worksheet name cannot be an empty string"),f(o),o;if(r.length>31)throw o=new h("Worksheet name must be 31 characters or less"),f(o),o;g(`Worksheet: Set name; newWorksheetName:${r} (${n})`);const s={newWorksheetName:r,objectId:n};try{return await t.dispatch(e.SetWorksheetName,s)}catch(e){throw new a}},B=(e,t,n,i)=>{var r;try{const o=C.get(e);if(!o)throw new s(`Unable to find registered data stream with id ${e}`);void 0!==(null!==(r=o.timer)&&void 0!==r?r:void 0)&&T(e);const{cellRange:a,updateInterval:c}=o.dataStream,d=async()=>{const r=await t();try{await j(n,i)(a,[[r]])}catch(t){m(`Unable to update cell range for stream with id ${e}: ${null==t?void 0:t.message}`)}},h=window.setInterval(d,c);o.timer=h}catch(e){throw f(e),e}},T=e=>{var t;try{const n=C.get(e);if(!n)throw new s(`Unable to find registered data stream with id ${e}`);if(void 0===(null!==(t=n.timer)&&void 0!==t?t:void 0))return;window.clearInterval(n.timer),n.timer=void 0}catch(e){throw f(e),e}},D=new Map,V=(n,i)=>async(r,o)=>{if(!i||!i.eventTarget||!i.objectId){const e=new c("Event registration missing required values");throw f(e),e}const s=Object.keys(t).find((e=>e.toLowerCase()===r.toLowerCase()));if(!s){const e=new c(`Unsupported event name: ${r}`);throw f(e),e}i.eventName=t[s],g("Registering event",i);try{const t=await n.dispatch(e.RegisterEvent,i);D.set(t,o)}catch(e){throw new a(void 0,e)}},H=t=>async n=>{let i;for(const[e,t]of D)if(t===n){i=e;break}if(!i)throw new c;g("Deregistering event:",i);try{await t.dispatch(e.DeregisterEvent,i),D.delete(i)}catch(e){throw new a}},U=(t,n)=>async()=>{g(`Workbook: Activate (${n})`);try{return await t.dispatch(e.ActivateWorkbook,n)}catch(e){throw new a}},z=(t,n,i,r)=>async()=>{let o;g(`Workbook: Add worksheet (${n})`);try{o=await t.dispatch(e.AddWorksheet,n)}catch(e){throw new a}return S(t,o,i,r)},q=(t,n)=>async()=>{g(`Workbook: Calculate (${n})`);try{await t.dispatch(e.CalculateWorkbook,n)}catch(e){throw new a}},J=(t,n)=>async()=>{g(`Workbook: Close (${n})`);try{return await t.dispatch(e.CloseWorkbook,n)}catch(e){throw new a}},K=(e,t,n,i)=>{const o={eventTarget:r.Workbook,objectId:t};return{objectId:t,activate:U(e,t),addWorksheet:z(e,t,n,i),addEventListener:n(e,o),calculate:q(e,t),close:J(e,t),getCalculationMode:Y(e,t),getName:Q(e,t),getWorksheetByName:Z(e,t,n,i),getWorksheets:X(e,t,n,i),removeEventListener:i(e),save:ee(e,t),saveAs:te(e,t)}},Y=(t,n)=>async()=>{g("Workbook: Get calculation mode");try{return await t.dispatch(e.GetCalculationMode,n)}catch(e){throw new a}},Q=(t,n)=>async()=>{g(`Workbook: Get name (${n})`);try{return await t.dispatch(e.GetWorkbookName,n)}catch(e){throw new a}},Z=(t,n,i,r)=>async o=>{let s;g(`Workbook: Get worksheet by name: ${o} (${n})`);try{if(s=await t.dispatch(e.GetWorksheetByName,{objectId:n,worksheetName:o}),null===s)return null}catch(e){throw new a}return S(t,s,i,r)},X=(t,n,i,r)=>async()=>{let o;g(`Workbook: Get worksheets (${n})`);try{o=await t.dispatch(e.GetWorksheets,n)}catch(e){throw new a}return o.map((e=>S(t,e,i,r)))},ee=(t,n)=>async()=>{g(`Workbook: Save (${n})`);try{return await t.dispatch(e.SaveWorkbook,n)}catch(e){throw new a}},te=(t,n)=>async i=>{g(`Workbook: Save as; filePath:${i} (${n})`);try{return await t.dispatch(e.SaveWorkbookAs,{filePath:i,objectId:n})}catch(e){throw new a}},ne=t=>async()=>{let n;g("Application: Create workbook");try{n=await t.dispatch(e.CreateWorkbook)}catch(e){throw new a}return K(t,n,V,H)},ie=t=>async n=>{let i;g(`Application: Get workbook; id:${n}`);try{i=await t.dispatch(e.GetWorkbookById,n)}catch(e){throw new a}return K(t,i,V,H)},re=t=>async()=>{let n;g("Application: Get workbooks");try{n=await t.dispatch(e.GetWorkbooks)}catch(e){throw new a}return n.map((e=>K(t,e,V,H)))},oe=t=>async n=>{g(`Application: Get worksheet; id:${n}`);try{n=await t.dispatch(e.GetWorksheetById,n)}catch(e){throw new a}return S(t,n,V,H)},se=t=>async n=>{let i;g(`Application: Open workbook; filePath:${n}`);try{i=await t.dispatch(e.OpenWorkbook,n)}catch(e){throw new a}return K(t,i,V,H)},ae=t=>async(n=!0)=>{g(`Application: Quit; displayAlerts:${n}`);try{return await t.dispatch(e.QuitApplication,n)}catch(e){throw new a}};var ce;!function(e){e[e.Info=1]="Info",e[e.Warn=2]="Warn",e[e.Error=3]="Error"}(ce||(ce={}));const de="excel-adapter",he=v();let le,ue;const pe=async()=>{try{if(!le||!await(async e=>(await o.H.InterApplicationBus.Channel.getAllChannels()).some((t=>t.channelName===e)))(he)){await(async()=>{var e;const t=null===(e=(await o.H.Application.getCurrentSync().getManifest()).appAssets)||void 0===e?void 0:e.find((e=>e.alias===de));if(t)return void m("Detected adapter package in app manifest appAssets",t);if(await ye())return void g("Using existing adapter package");const n={alias:de,src:"https://cdn.openfin.co/release/integrations/excel/1.3.0/OpenFin.Excel.zip",target:"OpenFin.Excel.exe",version:l};g("Downloading adapter package",n);try{await o.H.System.downloadAsset(n,(()=>{}))}catch(e){throw f("Unable to download adapter package"),e}})();const e=await o.H.System.getRuntimeInfo(),t=o.H.Application.me.uuid,n=e.version,i=e.securityRealm;g("Initializing adapter",{appId:t,channelName:he,runtimeVersion:n,securityRealm:i}),le=await o.H.System.launchExternalProcess({alias:de,arguments:`${t} ${n} ${i} ${he}`}),g(`Adapter running with uuid ${le.uuid}`)}const i=o.H.InterApplicationBus.Channel.connect(he,{payload:{version:l}}),s=new Promise((e=>{setTimeout(e,2e4)})).then((()=>{throw new Error("Connection to adapter timed out")}));ue=await Promise.race([i,s]),g(`Connected to adapter on channel ${he}`),ue.register(e.LogMessage,we),ue.register(e.EventFired,(n=ue,e=>{const{eventRegistrationId:i}=e,o=D.get(i);if(!o)throw new c(`No registered event listener found for id: ${i}`);g("Event payload received",e),((e,n,i)=>{var o,s;switch(i.eventTarget){case r.Workbook:switch(null===(o=i.eventName)||void 0===o?void 0:o.toUpperCase()){case t.Activate.toUpperCase():case t.Close.toUpperCase():case t.Deactivate.toUpperCase():return e();case t.AddWorksheet.toUpperCase():case t.DeleteWorksheet.toUpperCase():return e(S(n,i.worksheetObjectId,V,H));default:throw new c(`Unexpected workbook event: ${i.eventName}`)}case r.Worksheet:switch(null===(s=i.eventName)||void 0===s?void 0:s.toUpperCase()){case t.Activate.toUpperCase():return e();case t.Change.toUpperCase():return e(i.changedCells);case t.Deactivate.toUpperCase():return e();default:throw new c(`Unexpected worksheet event: ${i.eventName}`)}default:throw new c(`Unexpected event target: ${i.eventTarget}`)}})(o,n,e)}))}catch(e){const t=new d(void 0,e);throw f(t),t}var n;return{adapter:{channelName:he,version:l},createWorkbook:ne(ue),getWorkbookById:ie(ue),getWorkbooks:re(ue),getWorksheetById:oe(ue),openWorkbook:se(ue),quit:ae(ue)}},we=e=>{const{message:t,type:n}=e,i="[adapter]";switch(n){case ce.Error:f(t,i);break;case ce.Info:g(i,t);break;case ce.Warn:m(i,t)}},ye=async()=>{try{const e=await o.H.System.getAppAssetInfo({alias:de});return e&&e.version===l}catch(e){return!1}};var fe,ge,me,ve,Ce;!function(e){e.Continuous="Continuous",e.Dash="Dash",e.DashDot="DashDot",e.DashDotDot="DashDotDot",e.Dot="Dot",e.Double="Double",e.SlantDashDot="SlantDashDot",e.None="None"}(fe||(fe={})),function(e){e.Center="Center",e.CenterAcrossSelection="CenterAcrossSelection",e.Distributed="Distributed",e.Fill="Fill",e.General="General",e.Justify="Justify",e.Left="Left",e.Right="Right"}(ge||(ge={})),function(e){e.Automatic="Automatic",e.Checker="Checker",e.CrissCross="CrissCross",e.Down="Down",e.Gray16="Gray16",e.Gray25="Gray25",e.Gray50="Gray50",e.Gray75="Gray75",e.Gray8="Gray8",e.Grid="Grid",e.Horizontal="Horizontal",e.LightDown="LightDown",e.LightHorizontal="LightHorizontal",e.LightUp="LightUp",e.LightVertical="LightVertical",e.LinearGradient="LinearGradient",e.None="None",e.RectangularGradient="RectangularGradient",e.SemiGray75="SemiGray75",e.Solid="Solid",e.Up="Up",e.Vertical="Vertical"}(me||(me={})),function(e){e.Bottom="Bottom",e.Center="Center",e.Distributed="Distributed",e.Justify="Justify",e.Top="Top"}(ve||(ve={})),function(e){e.And="And",e.Or="Or",e.Top10Items="Top10Items",e.Bottom10Items="Bottom10Items",e.Top10Percent="Top10Percent",e.Bottom10Percent="Bottom10Percent",e.FilterValues="FilterValues"}(Ce||(Ce={}))})();var r=i.dq,o=i.MS,s=i.xQ,a=i.sO,c=i.Zu,d=i.I3,h=i.$U,l=i.i0,u=i.cX,p=i._W,w=i.U$,y=i.U7,f=i.rd;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*****************************!*\
  !*** ./client/src/excel.ts ***!
  \*****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _finos_fdc3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @finos/fdc3 */ "../../node_modules/@finos/fdc3/dist/fdc3.esm.js");
/* harmony import */ var _openfin_excel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @openfin/excel */ "../../node_modules/@openfin/excel/openfin.excel.js");


const KNOWN_INSTRUMENTS = ["TSLA", "MSFT", "AAPL"];
let excel;
let openWorkbooks;
let selectedWorkbookIndex;
let openWorksheets;
let selectedWorksheetIndex;
document.addEventListener("DOMContentLoaded", async () => {
    try {
        await init();
    }
    catch (error) {
        console.error(error);
    }
});
async function init() {
    try {
        const resultsContainer = document.querySelector("#results-container");
        resultsContainer.style.display = "none";
        excel = await (0,_openfin_excel__WEBPACK_IMPORTED_MODULE_1__.getExcelApplication)();
        await populateWorkbooks();
        const openExcelButton = document.querySelector("#open-excel");
        openExcelButton.addEventListener("click", async () => {
            await openExcel();
        });
        const refreshWorkbookButton = document.querySelector("#workbook-refresh");
        refreshWorkbookButton.addEventListener("click", async () => populateWorkbooks());
        const refreshWorksheetButton = document.querySelector("#worksheet-refresh");
        refreshWorksheetButton.addEventListener("click", async () => populateWorksheets());
        const openWorkbooksSelect = document.querySelector("#workbooks");
        openWorkbooksSelect.addEventListener("change", async (e) => selectWorkbook(e.target.value));
        const openWorksheetsSelect = document.querySelector("#worksheets");
        openWorksheetsSelect.addEventListener("change", async (e) => selectWorksheet(e.target.value));
        const setValueButton = document.querySelector("#set-value");
        setValueButton.addEventListener("click", async () => {
            await setCellValue();
        });
    }
    catch (err) {
        showError(err);
    }
}
function showError(err) {
    const errDom = document.querySelector("#error");
    errDom.innerHTML = err.message;
}
async function openExcel() {
    try {
        // Open the select work book and sheet
        // if anything throws an exception just open a new workbook
        await selectWorkbook(openWorkbooks[selectedWorkbookIndex].name);
        await selectWorksheet(openWorksheets[selectedWorksheetIndex].name);
    }
    catch {
        await excel.createWorkbook();
        await populateWorkbooks();
    }
}
async function populateWorkbooks() {
    if (excel) {
        selectedWorkbookIndex = undefined;
        const refreshButton = document.querySelector("#workbook-refresh");
        refreshButton.disabled = true;
        const select = document.querySelector("#workbooks");
        select.disabled = true;
        select.innerHTML = "";
        openWorkbooks = [];
        try {
            const workbooks = await excel.getWorkbooks();
            for (const book of workbooks) {
                const name = await book.getName();
                openWorkbooks.push({
                    book,
                    name
                });
            }
            const optionEmpty = document.createElement("option");
            optionEmpty.innerHTML = "----Select workbook----";
            optionEmpty.value = "";
            optionEmpty.selected = true;
            optionEmpty.disabled = true;
            select.append(optionEmpty);
            for (const openWorkbook of openWorkbooks) {
                const option = document.createElement("option");
                option.innerHTML = openWorkbook.name;
                option.value = openWorkbook.name;
                select.append(option);
            }
        }
        catch (err) {
            console.error(err);
            showError(err);
        }
        finally {
            select.disabled = false;
            refreshButton.disabled = false;
        }
    }
}
async function selectWorkbook(name) {
    const newWorkbookIndex = openWorkbooks.findIndex((w) => w.name === name);
    if (newWorkbookIndex !== selectedWorkbookIndex) {
        selectedWorkbookIndex = newWorkbookIndex;
        if (newWorkbookIndex >= 0) {
            await openWorkbooks[selectedWorkbookIndex].book.activate();
        }
    }
    await populateWorksheets();
}
async function populateWorksheets() {
    if (excel) {
        selectedWorksheetIndex = undefined;
        const refreshButton = document.querySelector("#worksheet-refresh");
        refreshButton.disabled = true;
        const select = document.querySelector("#worksheets");
        select.disabled = true;
        select.innerHTML = "";
        openWorksheets = [];
        const workbook = openWorkbooks[selectedWorkbookIndex];
        if (workbook) {
            try {
                const sheets = await workbook.book.getWorksheets();
                for (const sheet of sheets) {
                    const name = await sheet.getName();
                    openWorksheets.push({
                        sheet,
                        name
                    });
                }
                const optionEmpty = document.createElement("option");
                optionEmpty.innerHTML = "----Select worksheet----";
                optionEmpty.value = "";
                optionEmpty.selected = true;
                optionEmpty.disabled = true;
                select.append(optionEmpty);
                for (const openWorksheet of openWorksheets) {
                    const option = document.createElement("option");
                    option.innerHTML = openWorksheet.name;
                    option.value = openWorksheet.name;
                    select.append(option);
                }
            }
            catch (err) {
                console.error(err);
                showError(err);
            }
            finally {
                select.disabled = false;
                refreshButton.disabled = false;
            }
        }
    }
}
async function selectWorksheet(name) {
    const newWorksheetIndex = openWorksheets.findIndex((w) => w.name === name);
    if (newWorksheetIndex !== selectedWorksheetIndex) {
        const oldWorksheet = openWorksheets[selectedWorksheetIndex];
        if (oldWorksheet) {
            await oldWorksheet.sheet.removeEventListener(handleCellChange);
        }
        selectedWorksheetIndex = newWorksheetIndex;
        if (selectedWorksheetIndex >= 0) {
            await openWorksheets[selectedWorksheetIndex].sheet.activate();
            await openWorksheets[selectedWorksheetIndex].sheet.addEventListener("change", handleCellChange);
            const resultsContainer = document.querySelector("#results-container");
            resultsContainer.style.display = "flex";
            document.querySelector("#cell-location").disabled = false;
            document.querySelector("#cell-value").disabled = false;
            document.querySelector("#set-value").disabled = false;
        }
    }
}
async function handleCellChange(cells) {
    const cellContainer = document.querySelector("#cell-changes-container");
    cellContainer.innerHTML = JSON.stringify(cells, undefined, "  ");
    for (const cell of cells) {
        if (KNOWN_INSTRUMENTS.includes(cell.value)) {
            await broadcastInstrument(cell.value);
        }
    }
}
async function setCellValue() {
    if (openWorksheets && selectedWorksheetIndex !== undefined) {
        const cellLocation = document.querySelector("#cell-location");
        const cellValue = document.querySelector("#cell-value");
        await openWorksheets[selectedWorksheetIndex].sheet.setCellValues(cellLocation.value, [[cellValue.value]]);
    }
}
async function broadcastInstrument(instrument) {
    const broadcastElement = document.querySelector("#broadcast-instrument");
    if (window.fdc3) {
        try {
            const fdcInstrument = {
                type: "fdc3.instrument",
                id: {
                    ticker: instrument
                }
            };
            const channel = await (0,_finos_fdc3__WEBPACK_IMPORTED_MODULE_0__.getCurrentChannel)();
            channel.broadcast(fdcInstrument);
            broadcastElement.value = instrument;
        }
        catch (err) {
            broadcastElement.value = err.message;
        }
    }
    else {
        broadcastElement.textContent = "No FD3 Channel available";
    }
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,